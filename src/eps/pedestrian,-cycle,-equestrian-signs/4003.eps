%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 4003 [Converted].EPS
%%Creator: Adobe Illustrator(R) 14.0
%%For: Bob Hutchinson
%%CreationDate: 10/02/2009
%%BoundingBox: 0 0 487 787
%%HiResBoundingBox: 0 0 486.2403 786.4170
%%CropBox: 0 0 486.2403 786.4170
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 80 128 8%%BeginData: 21524 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF2727F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F82727A8FF2727F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F82727FF27F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827A8F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8A827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F8277EF827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F8A827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F8277DF827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8A827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8277DF827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8A827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F8277EF827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F8A827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F8277EF827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8A827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F8277DF827F827F827F827F827F827527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D5252F827F827F827F827F827F8A827F827F827F827%F827F82752FD37FF7D27F827F827F827F827F8277DF827F827F827F827F8%27F852FD37FF7DF827F827F827F827F827F8A827F827F827F827F827F827%52FD05FFA8FFFFFFA8FFFFFFA8FD05FFA8FD07FFAFFFA8FD19FF7D27F827%F827F827F827F8277EF827F827F827F827F827F852FFFFFF7DF82728FF27%2727A87D27F852FF7DF82752FF5227F87D5227F8277D272727A8A827FFA8%2727FFA8277DFF27A8A827F827A8FFFF7DF827F827F827F827F827F8A827%F827F827F827F827F82752FFFFFF7D52FF277D527DA8FF7D52FF527D7D52%84A9FF2727A884FF5352FFA852FF277DA827FFA82752A8FFF827A852A87D%F8847DFFFFFF7D27F827F827F827F827F8277EF827F827F827F827F827F8%52FFFFFF7D275227FF272727FF5952FF7D527DF8527DFF7D27277DFF7D27%FFA8272727A8A827FF527D527DA8FD0427A8A8522752FFFFFF7DF827F827%F827F827F827F8A827F827F827F827F827F82752FFFFFF5927A8FFFF2852%7DA87D27A827847D277DA8A87DA85227FF5352FFA8277D27FF7D27A82727%2752A827FF2727A8A87D7DF8A8FFFF7D27F827F827F827F827F8277DF827%F827F827F827F827F852FFFFFF7D2EFFFFFF2727F87D7D272752FF842727%27A82727277EFF7D28FFA852FF5252A827A827FF7D527D52FFA827A85227%F852A8FFFF7DF827F827F827F827F827F8A827F827F827F827F827F82752%FD37FF7D27F827F827F827F827F8277DF827F827F827F827F827F852FD0A%FFA8FFFFFFA8A8FD08FFA8FD10FFA8FD09FFA8A8FFFF7DF827F827F827F8%27F827F8A827F827F827F827F827F82752FFA87DA8FFFD05A8527DFFFFA8%277DA8FFA8FF527D5252FF7DA8FF7DA8FFFFA8A8FFA87DFFA85327FFA8A8%A8FFA8A87DA97D5352FF7D27F827F827F827F827F8277EF827F827F827F8%27F827F852FFFD04527D527DF87D2E2752FF7DFD04527DFD04522752277D%522727FFFF52F87D2727FD0452FFA82727277D522752522E52FF7DF827F8%27F827F827F827F8A827F827F827F827F827F82752FF527D525327527D27%52597D52FFA8277D525227FD047D52527DFD0452A8FF525252597D52277D%27FFFF27F8277D522752527D52FF7D27F827F827F827F827F8277EF827F8%27F827F827F827F852FF5227A8A85959A8527D7DA87DFFA87D52A87D527D%A852FF52A852A87DA87DFFFF7D527D7DA87DA8527DFFFF7D847DFF7D7D7D%A8A859FF7DF827F827F827F827F827F8A827F827F827F827F827F82752FF%A8FD19FFA9FD1BFF7D27F827F827F827F827F8277DF827F827F827F827F8%27F852FD04FFA82752FF84FFA8FFFFFFA8FF52FD06A8FFA8FF5252FFFFA8%A8FFA87DFF7EA8FFA87DFFA8FF7D7D277DA8A8FD05FF7DF827F827F827F8%27F827F8A827F827F827F827F827F82752FD04FFA8277D527D7D277DFF84%277D7D52522E7D27527D52277D52FFA852527D5252527D527D52527D5252%7D5952527D277DFD04FF7D27F827F827F827F827F8277DF827F827F827F8%27F827F852FD04FFA8527DFD0452FFFFA8F8522EFD04527D525227522E52%FFA8277D277D5252527D27FD045227527D527D272752FD04FF7DF827F827%F827F827F827F8A827F827F827F827F827F82752FD05FF7DFF5252A8A8FF%FF8452537D7D27F87D84A87D7D527D52FFFF7D52A82753845252A87D5284%7D5284A8A8537D52FD05FF7D27F827F827F827F827F8277EF827F827F827%F827F827F852FD11FFA8527DFD0CFFA8A8FFFF7DFD12FF7DF827F827F827%F827F827F8A827F827F827F827F827F82752FD37FF7D27F827F827F827F8%27F8277EF827F827F827F827F827F852FD387DF827F827F827F827F827F8%A827F827F827F827F827F8272727F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F8272727F827F827F827F827F8277DF827F827F827F827F8%27F852F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8A827F827F827F827F827F82752592E532E532E53%2E532E532E532E532E532E532E532E532E532E532E532E532E532E532E53%2E532E532E532E532E532E532E532E532E535227F827F827F827F827F827%7DF827F827F827F827F827F852070E0D0E0D0E0D0E070E0D0E0D0E0D0E07%0E0D0E070E0D0E070E0D0E0D0E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D53F827F827F827F827F827F8A827F827F827F827F827%F827520E0D36FFFF360E0D0E30FFFFAF0D0E0D0E7EFFA90E0D0E0D0E0DAF%FFFF5A0E0D0E0D0E0D0E5AFFA90E0D36A9A9A8AFA9A9A8AFA9A90D0E5327%F827F827F827F827F8277EF827F827F827F827F827F8520D0D0DFFFF8407%0E075AFFFFFF0E070E0DFFFF850D0E070E0736FFFFFFA9070E0D0E070E0D%7EFFFF0D0D30FD0AFF0E0753F827F827F827F827F827F8A827F827F827F8%27F827F827520E0D0EA9FFA90E0D0E84FFFFFF5A0E0D36FFFF5A0E0D0E0D%0E7EFD04FF360D0E0D0E0D0E5AFFFF0E0D365A5A5A85FFFF5A5B5A5A0D0E%5327F827F827F827F827F8277EF827F827F827F827F827F8520D0E0784FF%FF0D0E0DAFFFFFFF85070E5AFFFF360D0E0D0E0DFFFF85A8FF5A0E0D0E0D%0E0D7EFFFF0D0E070E0D0D2FFFFF0E070E0D0E0753F827F827F827F827F8%27F8A827F827F827F827F827F8272E0E0D0E30FFFF5A0D36FFFFA9FFA90E%0D85FFFF0D0E0D0E0D36FFFF0D85FFA90D0E0D0E0D0E5AFFAF0E0D0E0D0E%0D5AFFFF0E0E0D0E0D0E2E27F827F827F827F827F8277DF827F827F827F8%27F827F852070E0D0EA9FF7E0D30FFA85AFFFF0D0DA8FF840E070E0D0D5A%FF840D2FFFFF0E070E0D0E0784FFFF0D0E0D0E070E30FFA90E0D0E070E0D%53F827F827F827F827F827F8A827F827F827F827F827F827520E0D0E0DAF%FFFF0D85FFA90DFFFF5A0DFFFF850D0E0D0E0DFFFF5B0D14FFFF5A0E0D0E%0D0E7EFFAF140D0E0D0E0D5AFFFF0E0E0D0E0D0E2F27F827F827F827F827%F8277DF827F827F827F827F827F8520D0E0D0D5AFFFF3684FF5A0E84FF5A%36FFFF300D0D0E0D36FFFF0D0D0785FFA90D0E0D0E0785FFFF0D0E0D0E0D%0E30FFFF0E0D0E0D0E0D53F827F827F827F827F827F8A827F827F827F827%F827F827520E0D0E0D5AFFFF7EFFFF5A0D85FFAF84FFFF140D0E0D0E7EFF%A80E0D0E30FFFF360D0E0D0E5AFFFF0E0D0E0D0E0D5AFFFF0D0E0D0E0D0E%5327F827F827F827F827F8277EF827F827F827F827F827F8520D0E070E0D%FD05FF0D0E30FD04FFA9070E0D0D0DFFFF840D0E0D0EA8FF5A0D070E0D7E%FFFF0D0D070E0D0D2FFFFF0E070E0D0E0753F827F827F827F827F827F8A8%27F827F827F827F827F827520E0D0E0D0EA9FFFFFFA90E0D36FD04FF7E0E%0D0E0D5AFD09FFAF0D0E0D0E5AFFFF0E0D0E0D0E0D5AFFFF0D0E0D0E0D0E%5327F827F827F827F827F8277EF827F827F827F827F827F8520D0E0D0E0D%84FFFFFF85070E0DAFFFFFFF5A070E0D0E7EFFFFFFA9FFAFFFA9FFFF0E07%0E0D7EFFFF0D0E0D0E0D0D30FFFF0E070E0D0E0753F827F827F827F827F8%27F8A827F827F827F827F827F8272E0E0D0E0D0E36FFFFFF5A0E0D0E84FF%FFFF0E0E0D0E0DFFFFA90D0E0D0E0D36FFFF5A0E0D0E5AFFAF0E0D0E0D0E%0D5AFFFF0E0E0D0E0D0E2E27F827F827F827F827F8277DF827F827F827F8%27F827F852070E0D0E070EFFFFFF360D0E075AFFFFA80E0D0E075AFFFF2F%0E0D0D070E0DA9FFFF0D0D0785FFFF0D0E0D0E070E30FFFF0E0D0E070E0D%53F827F827F827F827F827F8A827F827F827F827F827F827520E0D0E0D0E%0D7F5A850D0E0D0E0E855A5A0D0E0D0E36855A140D0E0D0E0D0E0E855A0E%0D0E36855A0E0D0E0D0E0D367E850E0E0D0E0D0E2F27F827F827F827F827%F8277DF827F827F827F827F827F8520D0E0D0E0D0E0D0D070E0D0E0D0E0D%0D0D0E0D0E0D0E0D0D0D0E0D0E0D0E0D0E070E0D0E0D0E0D0E0D0E0D0E0D%0E0D0D070E0D0E0D0E0D53F827F827F827F827F827F8A827F827F827F827%F827F8275252275227282752272727522728275227282752272727522728%275227272752272727522727272E27272752272827522727275227282752%5227F827F827F827F827F8277EF827F827F827F827F827F852F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F852F827F827F827F827F8%27F8A827F827F827F827F827F8275227F827F827F827F827F827F827F852%52522E7D527D5327F827F8275227F827F8FD04527D527D527D2727F827F8%27F827F827F827F8272727F827F827F827F827F8277EF827F827F827F827%F827F8522727F827F827F827F827F827F82727FFA8527D7E7D7DF827F827%F8522727F827527D527D7D7DA87DA827F827F827F827F827F827F827F852%F827F827F827F827F827F8A827F827F827F827F827F8272727F827F827F8%27F827F827F827F82727522752282E2E27F827F8275227F827F8FD042759%275227522727F827F827F827F827F827F8272727F827F827F827F827F827%7DF827F827F827F827F827F852F827F827F827F827F827F827F827F827F8%27F827F827F827F827F852F827F82727522727F827F827F827F827F827F8%27F827F827F827F828F827F827F827F827F827F8A827F827F827F827F827%F8272727F827F827F827F827F827F827F827F827F827F827F827F827F827%52527D8453FD047D27527D527D527D7D52F827F827F827F827F8272727F8%27F827F827F827F8277DF827F827F827F827F827F8522127F827F827F827%F827F827F827F827F827F827F827F827F827F852F87DFF7D527D527DF852%53527D7D2EFF5227F827F827F827F827F852F827F827F827F827F827F8A8%27F827F827F827F827F8272827F827F827F827F827F827F827F827F827F8%27F827F827F827F8275227F827272720272727F827202720272727F827F8%27F827F827F8272727F827F827F827F827F8277EF827F827F827F827F827%F8522727F827F827F827F827F8272752275227282752272827522727F852%F827F8522727275227282752FD0427F827F827F827F827F827F852F827F8%27F827F827F827F8A827F827F827F827F827F8275227F827F827F827F827%F8272752FD0B2752F8275227F852FD0B27522727F827F827F827F827F827%2727F827F827F827F827F8277EF827F827F827F827F827F8522727F827F8%27F827F827F8272727F827F84B6F27F827F8272727F85220272727F827F8%27F827F827F8272727F827F827F827F827F827F852F827F827F827F827F8%27F8A827F827F827F827F827F8272727F827F827F827F827F8272752F827%F8276FB02727F8272752F8275227F8522727F827F827F827F827F8522727%F827F827F827F827F8272727F827F827F827F827F8277DF827F827F827F8%27F827F852F827F827F827F827F827F8272727F82727B08C93F827F82727%27F852F8272727F827F827F827F827F8272727F827F827F827F827F827F8%28F827F827F827F827F827F8A827F827F827F827F827F8272727F827F827%F827F827F8272752F827F85293B06F27F8272752F8275227F8522727F827%F827F827F827F8522727F827F827F827F827F8272727F827F827F827F827%F8277DF827F827F827F827F827F8522127F827F827F827F827F8272727F8%2727938D6FF827F8272727F852F8272727F827F827F827F827F8272727F8%27F827F827F827F827F852F827F827F827F827F827F8A827F827F827F827%F827F8272827F827F827F827F827F8272752F827F8276FB04B27F8272752%F8275227F8522727F827F827F827F827F8522727F827F827F827F827F827%2727F827F827F827F827F8277EF827F827F827F827F827F8522727F827F8%27F827F827F8272727F827F86F8C4BF827F8272727F852F8272727F827F8%27F827F827F8272727F827F827F827F827F827F852F827F827F827F827F8%27F8A827F827F827F827F827F8275227F827F827F827F827F8272752F827%F8276FB54B27F8272752F8275227F8522727F827F827F827F827F8522727%F827F827F827F827F8272727F827F827F827F827F8277EF827F827F827F8%27F827F8522727F827F827F827F827F8272727F827206F6F75F827F82727%27F85220272727F827F827F827F827F8272727F827F827F827F827F827F8%52F827F827F827F827F827F8A827F827F827F827F827F8272727F827F827%F827F827F8272752F827F8274B272727F8272052F8275227F8522027F827%F827F827F827F8522727F827F827F827F827F8272727F827F827F827F827%F8277DF827F827F827F827F827F852F827F827F827F827F827F8FD0C2752%2727F852F8272752FD0A275227F827F827F827F827F827F828F827F827F8%27F827F827F8A827F827F827F827F827F8272727F827F827F827F827F827%2752FD0B2752F8275227F852FD0B27522727F827F827F827F827F8272727%F827F827F827F827F8277DF827F827F827F827F827F8522127F827F827F8%27F827F8272727F827F827F827F827F8272727F852F8272727F827F8272D%27F827F8272727F827F827F827F827F827F852F827F827F827F827F827F8%A827F827F827F827F827F8272827F827F827F827F827F8272752F827F827%F827F827F8272752F8275227F8522727F82727572727F827F8522727F827%F827F827F827F8272727F827F827F827F827F8277EF827F827F827F827F8%27F8522727F827F827F827F827F8272727F827F827F827F827F8272727F8%52F8272727F827F8572D33F827F8272727F827F827F827F827F827F852F8%27F827F827F827F827F8A827F827F827F827F827F8275227F827F827F827%F827F8272752F827F827F827F827F8272752F8275227F8522727F8522D57%2D522727F8522727F827F827F827F827F8272727F827F827F827F827F827%7EF827F827F827F827F827F8522727F827F827F827F827F8272727F827F8%27F827F827F8272727F85220272727F827272D332D272DF8272727F827F8%27F827F827F827F852F827F827F827F827F827F8A827F827F827F827F827%F8272727F827F827F827F827F8272752F827F827F827F827F8272752F827%5227F8522727F82727332D27F827F8522727F827F827F827F827F8272727%F827F827F827F827F8277DF827F827F827F827F827F852F827F827F827F8%27F827F8272727F827F827F827F827F8272727F852F8272727F827F82D2D%57F827F8272727F827F827F827F827F827F828F827F827F827F827F827F8%A827F827F827F827F827F8272727F827F827F827F827F8272752F827F827%F827F827F8272752F8275227F8522727F8512D272D51F827F8522727F827%F827F827F827F8272727F827F827F827F827F8277DF827F827F827F827F8%27F8522127F827F827F827F827F8272727F827F827F827F827F8272727F8%52F8272727F8272D27F8272D27F8272727F827F827F827F827F827F852F8%27F827F827F827F827F8A827F827F827F827F827F8272827F827F827F827%F827F8272752F827F827F827F827F8272752F8275227F8522727F827F827%F82DF827F8522727F827F827F827F827F8272727F827F827F827F827F827%7EF827F827F827F827F827F8522727F827F827F827F827F82728522752FD%05275227522727F852F82727522752FD05275227525227F827F827F827F8%27F827F852F827F827F827F827F827F8A827F827F827F827F827F8275227%F827F827F827F827F827F827272728522027F852FD0427F8275227F8FD04%27522727275252272727F827F827F827F827F827F8272727F827F827F827%F827F8277EF827F827F827F827F827F8522727F827F827F827F827F827F8%27F8272727F8272827F827F827F8522027F827F8272727F8272752F827F8%27F827F827F827F827F827F852F827F827F827F827F827F8A827F827F827%F827F827F8272727F827F827F827F827F827F827F827275227522752F827%F827F8275227F827F827205227522E522727F827F827F827F827F827F827%F8272727F827F827F827F827F8277DF827F827F827F827F827F852F827F8%27F827F827F827F827F827F82727272127F827F827F827F852F827F827F8%2727522727F827F827F827F827F827F827F827F827F828F827F827F827F8%27F827F8A827F827F827F827F827F8272727F827F827F827F827F827F827%F827F827F827F827F827F827F8275227F827F827F827F827F827F827F827%F827F827F827F827F827F8272727F827F827F827F827F8277DF827F827F8%27F827F827F852F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F852F827F827F827F827F827F8A827F827F827F827F827F8275228FD36%275227F827F827F827F827F8277EF827F827F827F827F827F82727282752%272827522728275227282752272827522728275227282752272827522728%27522728275227282752272827522728275227282727F827F827F827F827%F827F8A827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F8277EF827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F8A827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F8277DF827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F8A827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F8277DF827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F852527D5252F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F8A827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F82727A8FD05FFA82827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F8277EF827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F82727FFFFA8%7DA87DA8FFFF5227F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F8A827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F82727FFFFA8A8FFFFFFA8A8A9FF2827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%277EF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8A8FFA8FD07FFA8FFA8F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8A827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F852FFA8A8FD07FFA8A8FF%52F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F8277DF827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F82752FF7DFD09FF7DFF5227F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8A827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F87DFFA8FD09FFA8FF7DF8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%277DF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F82752FF84FD09FF7DFF5227F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F8A827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F852FFA8A8FD07FFA8A8FF52F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%277EF827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8A8FFA8FD07FFA8FFA8F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F8A827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F82727FFFFA8A8FFFFFFA8%A8A8FF5227F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F8277EF827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F82728FFFFA87DA884A8A9FF5227F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F8A827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F82727A8FD05FFA82727F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F8277DF827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F852527D5252F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8A827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F8277DF827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F8A827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F8277EF827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F8A827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F8277EF827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F8A852F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827A9A827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F8277DFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 370 C)
%%+ (PANTONE 186 C)
%%+ (PANTONE 300 C)
%%CMYKCustomColor: 0.5600 0 1 0.2700 (PANTONE 370 C)
%%+ 0 1 0.8100 0.0400 (PANTONE 186 C)
%%+ 1 0.4400 0 0 (PANTONE 300 C)
%%RGBCustomColor: 
%%EndComments
                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2009-02-02T13:23:35Z</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>160</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACgAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4Z5q81a35o1u51nWbl7m&#xA;7uXLfESVjUmojjB+yi9ABilKcCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq9U/5xx8&#xA;461ov5laVpltcP8AovV5TbXtkWPptzQ8H4nYMjAHl1pt3woLyvAl2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVnH5If8Ak2fK/wDzHJ+o4UFg+BLsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>457.200000</stDim:w>
            <stDim:h>457.200000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 186 C</rdf:li>
               <rdf:li>PANTONE 300 C</rdf:li>
               <rdf:li>PANTONE 370 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1375 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 370 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>56.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>26.999998</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 469 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 349 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>42.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 116 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>16.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 300 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>44.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 186 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>81.000000</xmpG:yellow>
                           <xmpG:black>4.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -786.417 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 786.417 li
486.24 786.417 li
486.24 0 li
cp
clp
[1 0 0 1 0 0 ]ct
486.24 770.166 mo
486.24 779.141 478.964 786.417 469.989 786.417 cv
16.25 786.417 li
7.27539 786.417 0 779.141 0 770.166 cv
0 16.25 li
0 7.27539 7.27539 0 16.25 0 cv
469.989 0 li
478.964 0 486.24 7.27539 486.24 16.25 cv
486.24 770.166 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
71.7397 95.6665 mo
71.7397 609.667 li
414.739 609.667 li
414.739 95.6665 li
71.7397 95.6665 li
cp
0 0 0 0 cmyk
f
73.2397 231.667 mo
73.2397 248.667 li
413.239 248.667 li
413.239 231.667 li
73.2397 231.667 li
cp
0 0 0 1 cmyk
f
73.2397 250.167 mo
73.2397 356.167 li
413.239 356.167 li
413.239 250.167 li
73.2397 250.167 li
cp
/0 
<<
/Name (PANTONE 300 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .44 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
73.2397 357.667 mo
73.2397 608.167 li
413.239 608.167 li
413.239 357.667 li
73.2397 357.667 li
cp
0 0 0 1 cmyk
f
169.126 379.529 mo
171.017 371.943 li
173.477 371.943 li
175.481 379.529 li
177.327 371.943 li
179.832 371.943 li
176.78 383.219 li
173.978 383.219 li
172.247 375.679 li
170.63 383.219 li
167.942 383.219 li
164.685 371.943 li
167.213 371.943 li
169.126 379.529 li
cp
0 0 0 0 cmyk
f
185.935 383.401 mo
183.68 383.401 181.698 381.784 181.698 379.688 cv
181.698 378.321 182.906 376.499 185.388 376.226 cv
188.486 375.884 li
188.486 375.406 li
188.486 374.335 188.031 373.697 186.732 373.697 cv
186.732 373.697 184.933 373.697 183.179 374.608 cv
182.199 372.672 li
183.589 371.875 185.479 371.465 186.846 371.465 cv
190.536 371.465 191.015 374.54 191.015 375.224 cv
191.015 380.394 li
191.015 380.986 191.22 381.237 191.971 381.556 cv
190.878 383.538 li
189.785 383.15 189.42 382.968 188.965 382.399 cv
187.575 383.401 185.935 383.401 185.935 383.401 cv
cp
f
184.25 379.802 mo
184.25 380.713 185.206 381.396 186.254 381.396 cv
187.53 381.396 188.486 380.667 188.486 379.779 cv
188.486 377.911 li
185.912 378.162 li
184.796 378.276 184.25 379.005 184.25 379.802 cv
cp
0 0 0 1 cmyk
f
194.994 383.219 mo
194.994 371.83 li
197.5 371.83 li
197.5 383.219 li
194.994 383.219 li
cp
0 0 0 0 cmyk
f
194.698 368.754 mo
194.698 367.957 195.404 367.229 196.201 367.229 cv
197.09 367.229 197.773 367.935 197.773 368.754 cv
197.773 369.643 197.09 370.326 196.224 370.326 cv
195.404 370.326 194.698 369.643 194.698 368.754 cv
cp
f
202.312 371.83 mo
202.312 368.208 li
204.794 367.206 li
204.794 371.83 li
207.733 371.83 li
207.733 373.879 li
204.794 373.879 li
204.794 379.733 li
204.794 380.645 205.204 381.032 205.911 381.032 cv
205.911 381.032 206.958 381.032 207.55 380.781 cv
207.755 383.014 li
206.571 383.31 205.159 383.31 205.159 383.31 cv
203.108 383.31 202.312 382.308 202.312 379.848 cv
202.312 373.879 li
200.307 373.879 li
200.307 371.83 li
202.312 371.83 li
cp
f
283.007 374.517 mo
280.911 375.588 li
280.092 373.879 278.429 373.879 278.429 373.879 cv
276.789 373.879 275.559 375.542 275.559 377.706 cv
275.559 379.756 276.88 381.214 278.384 381.214 cv
278.384 381.214 279.545 381.214 281.025 379.506 cv
283.053 380.394 li
281.663 383.378 278.155 383.378 278.155 383.378 cv
275.148 383.378 273.054 380.645 273.054 377.729 cv
273.054 374.244 275.103 371.67 278.337 371.67 cv
278.337 371.67 281.276 371.67 283.007 374.517 cv
cp
f
291.619 374.313 mo
288.18 373.652 288.18 377.456 288.18 377.456 cv
288.18 383.219 li
285.697 383.219 li
285.697 371.853 li
288.18 371.853 li
288.18 373.014 li
288.658 372.308 290.161 371.442 291.619 371.693 cv
291.619 374.313 li
cp
f
294.049 377.524 mo
294.049 373.948 296.122 371.442 299.516 371.442 cv
302.887 371.442 304.892 373.902 304.892 377.524 cv
304.892 381.556 302.249 383.515 299.516 383.515 cv
296.326 383.515 294.049 380.918 294.049 377.524 cv
cp
f
302.454 377.524 mo
302.454 375.337 301.314 373.879 299.493 373.879 cv
297.693 373.879 296.622 375.36 296.622 377.524 cv
296.622 379.643 297.693 381.146 299.516 381.146 cv
301.292 381.146 302.454 379.62 302.454 377.524 cv
cp
0 0 0 1 cmyk
f
309.938 374.973 mo
309.938 375.542 310.599 375.975 311.602 376.18 cv
313.628 376.59 313.355 376.567 313.97 376.818 cv
315.223 377.273 315.975 378.23 315.975 379.802 cv
315.975 381.692 314.402 383.492 311.897 383.492 cv
310.166 383.492 309.026 383.15 306.863 381.419 cv
308.48 379.802 li
309.597 380.827 310.462 381.169 311.578 381.169 cv
312.785 381.169 313.446 380.804 313.446 379.961 cv
313.446 379.119 312.991 379.119 310.622 378.436 cv
307.774 377.615 307.523 376.112 307.523 375.019 cv
307.523 373.447 308.686 371.465 311.965 371.465 cv
311.965 371.465 314.357 371.465 315.906 373.105 cv
314.539 374.836 li
313.378 373.675 311.92 373.675 311.92 373.675 cv
310.735 373.675 309.938 374.221 309.938 374.973 cv
cp
0 0 0 0 cmyk
f
320.799 374.973 mo
320.799 375.542 321.46 375.975 322.462 376.18 cv
324.489 376.59 324.216 376.567 324.83 376.818 cv
326.083 377.273 326.835 378.23 326.835 379.802 cv
326.835 381.692 325.264 383.492 322.758 383.492 cv
321.026 383.492 319.888 383.15 317.724 381.419 cv
319.341 379.802 li
320.458 380.827 321.322 381.169 322.438 381.169 cv
323.646 381.169 324.307 380.804 324.307 379.961 cv
324.307 379.119 323.852 379.119 321.482 378.436 cv
318.635 377.615 318.385 376.112 318.385 375.019 cv
318.385 373.447 319.546 371.465 322.826 371.465 cv
322.826 371.465 325.218 371.465 326.768 373.105 cv
325.4 374.836 li
324.238 373.675 322.78 373.675 322.78 373.675 cv
321.597 373.675 320.799 374.221 320.799 374.973 cv
cp
f
256.552 402.307 mo
258.443 394.722 li
260.902 394.722 li
262.907 402.307 li
264.752 394.722 li
267.259 394.722 li
264.206 405.997 li
261.403 405.997 li
259.673 398.457 li
258.056 405.997 li
255.368 405.997 li
252.11 394.722 li
254.639 394.722 li
256.552 402.307 li
cp
f
269.808 405.997 mo
269.808 394.607 li
272.313 394.607 li
272.313 405.997 li
269.808 405.997 li
cp
f
269.511 391.533 mo
269.511 390.735 270.218 390.006 271.015 390.006 cv
271.903 390.006 272.586 390.712 272.586 391.533 cv
272.586 392.421 271.903 393.104 271.038 393.104 cv
270.218 393.104 269.511 392.421 269.511 391.533 cv
cp
f
277.124 394.607 mo
277.124 390.986 li
279.607 389.983 li
279.607 394.607 li
282.546 394.607 li
282.546 396.658 li
279.607 396.658 li
279.607 402.512 li
279.607 403.423 280.018 403.811 280.724 403.811 cv
280.724 403.811 281.771 403.811 282.364 403.56 cv
282.568 405.792 li
281.385 406.088 279.973 406.088 279.973 406.088 cv
277.922 406.088 277.124 405.086 277.124 402.626 cv
277.124 396.658 li
275.12 396.658 li
275.12 394.607 li
277.124 394.607 li
cp
f
294.484 397.796 mo
294.484 405.997 li
292.16 405.997 li
292.16 399.118 li
292.16 397.933 291.409 396.771 290.156 396.771 cv
288.425 396.771 287.741 398.229 287.741 399.118 cv
287.741 405.997 li
285.259 405.997 li
285.259 390.029 li
287.741 390.029 li
287.741 395.655 li
288.493 394.312 290.566 394.312 290.566 394.312 cv
293.322 394.312 294.484 396.453 294.484 397.796 cv
cp
f
313.763 397.295 mo
311.667 398.366 li
310.848 396.658 309.185 396.658 309.185 396.658 cv
307.544 396.658 306.313 398.32 306.313 400.484 cv
306.313 402.535 307.635 403.992 309.139 403.992 cv
309.139 403.992 310.3 403.992 311.78 402.284 cv
313.809 403.173 li
312.419 406.156 308.91 406.156 308.91 406.156 cv
305.904 406.156 303.809 403.423 303.809 400.507 cv
303.809 397.022 305.858 394.448 309.093 394.448 cv
309.093 394.448 312.031 394.448 313.763 397.295 cv
cp
f
319.823 406.18 mo
317.568 406.18 315.587 404.562 315.587 402.466 cv
315.587 401.1 316.794 399.277 319.276 399.004 cv
322.374 398.662 li
322.374 398.184 li
322.374 397.113 321.919 396.476 320.62 396.476 cv
320.62 396.476 318.821 396.476 317.067 397.387 cv
316.088 395.45 li
317.478 394.653 319.368 394.243 320.734 394.243 cv
324.425 394.243 324.903 397.318 324.903 398.001 cv
324.903 403.173 li
324.903 403.765 325.108 404.015 325.859 404.334 cv
324.767 406.315 li
323.673 405.929 323.309 405.746 322.853 405.177 cv
321.464 406.18 319.823 406.18 319.823 406.18 cv
cp
f
318.139 402.58 mo
318.139 403.491 319.095 404.175 320.143 404.175 cv
321.418 404.175 322.374 403.446 322.374 402.558 cv
322.374 400.689 li
319.801 400.94 li
318.685 401.054 318.139 401.782 318.139 402.58 cv
cp
0 0 0 1 cmyk
f
334.987 397.09 mo
331.548 396.43 331.548 400.234 331.548 400.234 cv
331.548 405.997 li
329.064 405.997 li
329.064 394.63 li
331.548 394.63 li
331.548 395.792 li
332.026 395.086 333.529 394.22 334.987 394.471 cv
334.987 397.09 li
cp
0 0 0 0 cmyk
f
337.326 400.279 mo
337.326 396.703 339.489 394.357 342.678 394.357 cv
345.73 394.357 347.621 396.566 347.621 400.78 cv
347.621 401.054 347.621 401.19 347.621 401.19 cv
339.99 401.19 li
340.264 402.922 341.197 403.833 342.86 403.833 cv
342.86 403.833 344.501 403.833 345.548 402.717 cv
347.052 404.607 li
345.435 406.315 342.906 406.315 342.906 406.315 cv
339.421 406.315 337.326 404.015 337.326 400.279 cv
cp
f
339.99 399.277 mo
345.093 399.277 li
345.002 397.569 344.159 396.521 342.701 396.521 cv
341.289 396.521 340.173 397.364 339.99 399.277 cv
cp
0 0 0 1 cmyk
f
108.401 135.8 mo
102.42 135.8 li
102.42 146.206 li
96.3154 146.206 li
96.3154 117.364 li
107.828 117.364 li
116.554 117.364 117.906 124.738 117.906 126.787 cv
117.906 129.613 115.489 135.8 108.401 135.8 cv
cp
f
141.423 128.917 mo
141.423 134.12 li
129.624 134.12 li
129.624 140.307 li
143.676 140.307 li
143.676 146.206 li
123.848 146.206 li
123.848 117.364 li
142.365 117.364 li
142.365 122.854 li
129.624 122.854 li
129.624 128.917 li
141.423 128.917 li
cp
f
175.426 131.417 mo
175.426 140.184 169.158 146.206 161.907 146.206 cv
151.46 146.206 li
151.46 117.364 li
162.645 117.364 li
169.978 117.364 175.426 123.141 175.426 131.417 cv
cp
f
199.824 128.917 mo
199.824 134.12 li
188.025 134.12 li
188.025 140.307 li
202.077 140.307 li
202.077 146.206 li
182.249 146.206 li
182.249 117.364 li
200.766 117.364 li
200.766 122.854 li
188.025 122.854 li
188.025 128.917 li
199.824 128.917 li
cp
f
225.101 137.971 mo
225.101 136.414 224.445 135.39 221.373 134.775 cv
216.457 133.751 li
213.548 133.178 209.738 130.679 209.738 125.845 cv
209.738 121.215 213.958 116.75 220.717 116.75 cv
220.717 116.75 228.296 116.75 232.106 121.256 cv
227.928 125.394 li
224.527 122.485 220.513 122.485 220.513 122.485 cv
217.891 122.485 216.334 123.755 216.334 125.64 cv
216.334 127.155 217.44 128.139 222.397 128.835 cv
227.887 129.573 231.615 132.973 231.656 137.766 cv
231.697 141.781 229.444 146.861 219.447 146.861 cv
213.753 146.861 211.09 145.346 207.157 141.372 cv
212.073 137.644 li
214.777 140.266 216.662 141.085 219.775 141.085 cv
223.012 141.085 225.101 140.102 225.101 137.971 cv
cp
f
249.677 122.854 mo
249.677 146.206 li
243.901 146.206 li
243.901 122.854 li
235.83 122.854 li
235.83 117.364 li
257.748 117.364 li
257.748 122.854 li
249.677 122.854 li
cp
f
279.634 134.243 mo
286.762 146.206 li
279.879 146.206 li
273.61 134.98 li
269.269 134.98 li
269.269 146.206 li
263.532 146.206 li
263.532 117.364 li
277.339 117.364 li
281.189 117.364 285.41 121.215 285.41 125.886 cv
285.41 125.886 285.41 131.826 279.634 134.243 cv
cp
f
293.586 146.206 mo
293.586 117.364 li
299.649 117.364 li
299.649 146.206 li
293.586 146.206 li
cp
f
314.724 117.364 mo
322.589 117.364 li
332.258 146.206 li
325.785 146.206 li
324.228 141.085 li
313.33 141.085 li
311.773 146.206 li
305.547 146.206 li
314.724 117.364 li
cp
f
337.745 117.364 mo
344.096 117.364 li
357.247 136.701 li
357.247 117.364 li
363.063 117.364 li
363.063 146.206 li
356.714 146.206 li
343.522 126.869 li
343.522 146.206 li
337.745 146.206 li
337.745 117.364 li
cp
f
387.441 137.971 mo
387.441 136.414 386.785 135.39 383.713 134.775 cv
378.797 133.751 li
375.889 133.178 372.078 130.679 372.078 125.845 cv
372.078 121.215 376.298 116.75 383.058 116.75 cv
383.058 116.75 390.637 116.75 394.447 121.256 cv
390.268 125.394 li
386.868 122.485 382.853 122.485 382.853 122.485 cv
380.23 122.485 378.674 123.755 378.674 125.64 cv
378.674 127.155 379.78 128.139 384.737 128.835 cv
390.227 129.573 393.955 132.973 393.996 137.766 cv
394.037 141.781 391.784 146.861 381.788 146.861 cv
376.093 146.861 373.431 145.346 369.497 141.372 cv
374.413 137.644 li
377.117 140.266 379.002 141.085 382.115 141.085 cv
385.352 141.085 387.441 140.102 387.441 137.971 cv
cp
f
98.0928 172.978 mo
98.0928 177.756 95.3711 181.143 91.2251 181.143 cv
89.0415 181.143 88.7251 180.921 86.7627 179.655 cv
86.7627 185.605 li
82.522 185.605 li
82.522 164.717 li
86.7627 164.717 li
86.7627 165.571 li
88.1235 164.464 88.978 163.989 90.8135 163.989 cv
95.5928 163.989 98.0928 167.565 98.0928 172.978 cv
cp
f
110.015 180.763 mo
109.351 181.079 108.623 181.143 107.863 181.143 cv
104.382 181.143 101.787 178.579 101.787 175.351 cv
101.787 164.812 li
105.996 164.812 li
105.996 173.958 li
105.996 175.794 106.882 177.123 108.654 177.123 cv
110.711 177.123 112.009 176.047 112.009 174.433 cv
112.009 164.812 li
116.282 164.812 li
116.282 180.858 li
111.882 180.858 li
111.882 179.687 li
111.091 180.383 110.711 180.51 110.015 180.763 cv
cp
f
126.271 170.73 mo
128.93 171.11 li
131.747 171.49 133.424 173.452 133.424 175.953 cv
133.424 179.181 130.734 181.427 126.904 181.427 cv
123.582 181.427 121.334 180.604 119.214 178.484 cv
122.379 175.699 li
123.676 177.028 125.132 177.788 126.683 177.788 cv
127.949 177.788 128.961 177.25 128.961 176.427 cv
128.961 175.763 128.297 175.129 126.968 174.876 cv
124.183 174.338 li
121.714 173.863 120.258 171.996 120.258 169.813 cv
120.258 166.584 122.759 164.527 126.873 164.527 cv
129.12 164.527 131.019 164.907 133.234 166.901 cv
130.512 169.781 li
129.405 168.483 128.234 168.072 126.778 168.072 cv
125.543 168.072 124.689 168.768 124.689 169.56 cv
124.689 170.097 124.974 170.572 126.271 170.73 cv
cp
f
145.051 164.433 mo
148.343 164.433 151.127 167.344 151.127 171.142 cv
151.127 180.858 li
146.792 180.858 li
146.792 171.047 li
146.792 169.37 145.906 168.452 144.007 168.452 cv
142.013 168.452 141 170.034 141 171.807 cv
141 180.858 li
136.728 180.858 li
136.728 158.514 li
141 158.514 li
141 165.92 li
142.709 164.654 143.627 164.433 145.051 164.433 cv
cp
f
174.613 164.274 mo
173.03 164.274 171.923 164.591 170.182 165.73 cv
170.182 158.514 li
165.846 158.514 li
165.846 180.858 li
170.182 180.858 li
170.182 179.687 li
171.575 180.858 172.904 181.174 174.708 181.174 cv
179.139 181.174 181.766 177.915 181.766 172.978 cv
181.766 167.819 179.265 164.274 174.613 164.274 cv
cp
f
193.624 180.763 mo
192.959 181.079 192.231 181.143 191.472 181.143 cv
187.99 181.143 185.395 178.579 185.395 175.351 cv
185.395 164.812 li
189.604 164.812 li
189.604 173.958 li
189.604 175.794 190.491 177.123 192.263 177.123 cv
194.32 177.123 195.618 176.047 195.618 174.433 cv
195.618 164.812 li
199.89 164.812 li
199.89 180.858 li
195.491 180.858 li
195.491 179.687 li
194.7 180.383 194.32 180.51 193.624 180.763 cv
cp
f
205.829 168.515 mo
203.297 168.515 li
203.297 164.875 li
205.829 164.875 li
205.829 159.812 li
210.196 158.609 li
210.196 164.875 li
214.311 164.875 li
214.311 168.515 li
210.292 168.515 li
210.292 175.73 li
210.292 177.345 210.893 177.503 211.526 177.503 cv
212.159 177.503 212.633 177.376 213.899 177.123 cv
214.88 180.7 li
212.887 181.237 211.083 181.427 209.912 181.427 cv
208.393 181.427 205.829 180.636 205.829 177.629 cv
205.829 168.515 li
cp
f
219.227 168.515 mo
216.695 168.515 li
216.695 164.875 li
219.227 164.875 li
219.227 159.812 li
223.594 158.609 li
223.594 164.875 li
227.708 164.875 li
227.708 168.515 li
223.689 168.515 li
223.689 175.73 li
223.689 177.345 224.291 177.503 224.923 177.503 cv
225.557 177.503 226.031 177.376 227.297 177.123 cv
228.278 180.7 li
226.284 181.237 224.48 181.427 223.31 181.427 cv
221.791 181.427 219.227 180.636 219.227 177.629 cv
219.227 168.515 li
cp
f
230.156 173.041 mo
230.156 166.553 233.954 164.179 237.751 164.179 cv
241.201 164.179 245.505 166.553 245.505 173.041 cv
245.505 177.819 242.372 181.427 237.973 181.427 cv
233.131 181.427 230.156 178.104 230.156 173.041 cv
cp
f
241.169 173.041 mo
241.169 169.274 239.872 168.104 237.973 168.104 cv
235.568 168.104 234.587 170.066 234.587 173.041 cv
234.587 175.636 235.853 177.598 237.973 177.598 cv
240.062 177.598 241.169 175.636 241.169 173.041 cv
cp
0 0 0 0 cmyk
f
255.491 164.78 mo
256.155 164.464 256.946 164.369 257.706 164.369 cv
261.187 164.369 263.813 167.059 263.813 170.287 cv
263.813 180.858 li
259.604 180.858 li
259.604 171.68 li
259.604 169.876 258.719 168.42 256.978 168.42 cv
254.921 168.42 253.592 169.623 253.592 171.237 cv
253.592 180.858 li
249.351 180.858 li
249.351 164.812 li
253.718 164.812 li
253.718 165.983 li
254.541 165.287 254.794 165.034 255.491 164.78 cv
cp
0 0 0 1 cmyk
f
283.259 181.301 mo
279.745 181.301 277.688 179.339 277.688 176.269 cv
277.688 173.547 279.334 170.667 287.056 170.667 cv
287.056 169.781 li
287.056 168.832 286.106 168.23 284.651 168.23 cv
283.417 168.23 281.328 168.958 279.81 169.876 cv
277.752 166.743 li
278.892 165.888 281.645 164.337 284.588 164.337 cv
289.051 164.337 291.36 166.046 291.36 169.148 cv
291.36 175.826 li
291.36 177.25 291.74 177.661 293.228 177.915 cv
291.74 181.269 li
290.98 181.269 288.86 180.984 287.784 179.624 cv
286.359 180.984 285.03 181.301 283.259 181.301 cv
cp
f
284.619 177.725 mo
286.392 177.725 287.184 177.218 287.184 175.889 cv
287.184 173.863 li
283.923 174.338 li
282.499 174.56 282.214 175.319 282.214 176.206 cv
282.214 177.25 282.848 177.725 284.619 177.725 cv
cp
0 0 0 0 cmyk
f
302.073 164.78 mo
302.738 164.464 303.529 164.369 304.289 164.369 cv
307.771 164.369 310.397 167.059 310.397 170.287 cv
310.397 180.858 li
306.188 180.858 li
306.188 171.68 li
306.188 169.876 305.302 168.42 303.561 168.42 cv
301.504 168.42 300.175 169.623 300.175 171.237 cv
300.175 180.858 li
295.934 180.858 li
295.934 164.812 li
300.302 164.812 li
300.302 165.983 li
301.124 165.287 301.377 165.034 302.073 164.78 cv
cp
0 0 0 1 cmyk
f
313.796 172.946 mo
313.796 168.293 316.105 164.274 320.789 164.274 cv
322.436 164.274 323.511 164.496 325.221 165.635 cv
325.221 158.514 li
329.556 158.514 li
329.556 180.858 li
325.221 180.858 li
325.221 179.877 li
323.828 181.048 322.498 181.237 320.663 181.237 cv
316.232 181.237 313.796 177.915 313.796 172.946 cv
cp
f
321.834 177.408 mo
324.05 177.408 325.252 176.206 325.252 174.021 cv
325.252 171.49 li
325.252 169.591 323.955 168.104 321.929 168.104 cv
319.397 168.104 318.131 170.034 318.131 172.787 cv
318.131 175.636 319.397 177.408 321.834 177.408 cv
cp
0 0 0 0 cmyk
f
342.471 164.938 mo
346.934 164.938 li
349.623 174.845 li
352.06 164.938 li
356.712 164.938 li
359.181 174.845 li
361.935 164.938 li
366.175 164.938 li
361.808 180.858 li
356.712 180.858 li
354.37 170.983 li
351.997 180.858 li
346.965 180.858 li
342.471 164.938 li
cp
0 0 0 1 cmyk
f
374.245 181.301 mo
370.733 181.301 368.676 179.339 368.676 176.269 cv
368.676 173.547 370.321 170.667 378.043 170.667 cv
378.043 169.781 li
378.043 168.832 377.094 168.23 375.639 168.23 cv
374.404 168.23 372.315 168.958 370.797 169.876 cv
368.739 166.743 li
369.878 165.888 372.632 164.337 375.575 164.337 cv
380.038 164.337 382.348 166.046 382.348 169.148 cv
382.348 175.826 li
382.348 177.25 382.728 177.661 384.215 177.915 cv
382.728 181.269 li
381.968 181.269 379.848 180.984 378.771 179.624 cv
377.348 180.984 376.018 181.301 374.245 181.301 cv
cp
f
375.606 177.725 mo
377.379 177.725 378.171 177.218 378.171 175.889 cv
378.171 173.863 li
374.91 174.338 li
373.486 174.56 373.201 175.319 373.201 176.206 cv
373.201 177.25 373.835 177.725 375.606 177.725 cv
cp
0 0 0 0 cmyk
f
386.921 180.858 mo
386.921 164.749 li
391.162 164.749 li
391.162 180.858 li
386.921 180.858 li
cp
0 0 0 1 cmyk
f
386.573 160.729 mo
386.573 159.4 387.648 158.261 388.979 158.261 cv
390.37 158.261 391.447 159.4 391.447 160.761 cv
391.447 162.09 390.37 163.198 389.01 163.198 cv
387.648 163.198 386.573 162.09 386.573 160.729 cv
cp
f
397.052 168.515 mo
394.521 168.515 li
394.521 164.875 li
397.052 164.875 li
397.052 159.812 li
401.42 158.609 li
401.42 164.875 li
405.534 164.875 li
405.534 168.515 li
401.515 168.515 li
401.515 175.73 li
401.515 177.345 402.116 177.503 402.749 177.503 cv
403.382 177.503 403.856 177.376 405.122 177.123 cv
406.104 180.7 li
404.109 181.237 402.306 181.427 401.135 181.427 cv
399.615 181.427 397.052 180.636 397.052 177.629 cv
397.052 168.515 li
cp
f
109.543 196.396 mo
112.677 196.396 li
112.677 200.1 li
109.543 200.1 li
109.543 212.411 li
105.271 212.411 li
105.271 200.1 li
102.739 200.1 li
102.739 196.396 li
105.271 196.396 li
105.271 194.435 li
105.271 191.998 106.854 190.13 109.48 190.13 cv
110.524 190.13 112.613 190.32 113.689 190.51 cv
112.93 194.055 li
111.696 194.055 111.284 194.055 111.284 194.055 cv
110.018 194.055 109.543 194.055 109.543 195.637 cv
109.543 196.396 li
cp
f
115.506 204.688 mo
115.506 198.201 119.304 195.827 123.102 195.827 cv
126.552 195.827 130.855 198.201 130.855 204.688 cv
130.855 209.467 127.723 213.075 123.323 213.075 cv
118.481 213.075 115.506 209.752 115.506 204.688 cv
cp
f
126.52 204.688 mo
126.52 200.922 125.222 199.751 123.323 199.751 cv
120.918 199.751 119.937 201.713 119.937 204.688 cv
119.937 207.284 121.203 209.246 123.323 209.246 cv
125.412 209.246 126.52 207.284 126.52 204.688 cv
cp
0 0 0 0 cmyk
f
139.037 198.042 mo
139.986 196.776 141.6 196.175 143.246 196.175 cv
143.467 196.175 143.657 196.175 144.037 196.207 cv
144.037 200.353 li
142.645 200.416 142.233 200.416 142.233 200.416 cv
140.429 200.479 138.942 201.745 138.942 204.309 cv
138.942 212.505 li
134.669 212.505 li
134.669 196.396 li
138.942 196.396 li
139.037 198.042 li
cp
0 0 0 1 cmyk
f
163.795 202.378 mo
166.454 202.758 li
169.271 203.138 170.948 205.1 170.948 207.6 cv
170.948 210.828 168.258 213.075 164.428 213.075 cv
161.105 213.075 158.858 212.252 156.738 210.132 cv
159.903 207.347 li
161.2 208.676 162.656 209.436 164.207 209.436 cv
165.473 209.436 166.485 208.897 166.485 208.075 cv
166.485 207.41 165.821 206.777 164.492 206.524 cv
161.707 205.986 li
159.238 205.511 157.782 203.644 157.782 201.46 cv
157.782 198.232 160.282 196.175 164.396 196.175 cv
166.644 196.175 168.542 196.555 170.758 198.549 cv
168.036 201.429 li
166.929 200.131 165.757 199.72 164.302 199.72 cv
163.067 199.72 162.213 200.416 162.213 201.207 cv
162.213 201.745 162.498 202.22 163.795 202.378 cv
cp
f
174.315 212.505 mo
174.315 196.396 li
178.556 196.396 li
178.556 212.505 li
174.315 212.505 li
cp
f
173.967 192.377 mo
173.967 191.048 175.043 189.909 176.372 189.909 cv
177.765 189.909 178.84 191.048 178.84 192.409 cv
178.84 193.738 177.765 194.846 176.403 194.846 cv
175.043 194.846 173.967 193.738 173.967 192.377 cv
cp
f
188.908 211.588 mo
184.667 211.588 182.009 208.518 182.009 204.087 cv
182.009 199.403 184.794 196.302 189.035 196.302 cv
189.984 196.302 191.061 196.27 192.611 197.409 cv
192.611 196.492 li
197.01 196.492 li
197.01 212.094 li
197.01 215.259 193.814 217.728 189.51 217.728 cv
186.883 217.728 186.313 217.696 182.326 215.829 cv
184.256 212.347 li
185.997 213.771 189.003 213.771 189.003 213.771 cv
191.124 213.771 192.959 213.518 192.58 210.733 cv
191.155 211.714 190.554 211.588 188.908 211.588 cv
cp
f
189.7 207.727 mo
191.662 207.727 192.674 206.682 192.674 204.847 cv
192.674 202.694 li
192.674 201.239 191.409 200.1 189.763 200.1 cv
187.579 200.1 186.345 201.46 186.345 203.802 cv
186.345 206.587 187.168 207.727 189.7 207.727 cv
cp
0 0 0 0 cmyk
f
207.551 196.428 mo
208.216 196.112 209.007 196.017 209.767 196.017 cv
213.248 196.017 215.875 198.707 215.875 201.935 cv
215.875 212.505 li
211.666 212.505 li
211.666 203.328 li
211.666 201.523 210.779 200.068 209.039 200.068 cv
206.982 200.068 205.652 201.271 205.652 202.884 cv
205.652 212.505 li
201.412 212.505 li
201.412 196.46 li
205.779 196.46 li
205.779 197.631 li
206.602 196.935 206.855 196.682 207.551 196.428 cv
cp
0 0 0 1 cmyk
f
225.128 212.949 mo
221.615 212.949 219.558 210.986 219.558 207.917 cv
219.558 205.195 221.204 202.315 228.926 202.315 cv
228.926 201.429 li
228.926 200.479 227.977 199.878 226.521 199.878 cv
225.287 199.878 223.198 200.606 221.679 201.523 cv
219.622 198.391 li
220.761 197.536 223.514 195.985 226.458 195.985 cv
230.92 195.985 233.23 197.694 233.23 200.796 cv
233.23 207.474 li
233.23 208.897 233.61 209.309 235.098 209.562 cv
233.61 212.917 li
232.85 212.917 230.73 212.632 229.654 211.271 cv
228.229 212.632 226.9 212.949 225.128 212.949 cv
cp
f
226.489 209.372 mo
228.261 209.372 229.053 208.866 229.053 207.537 cv
229.053 205.511 li
225.793 205.986 li
224.369 206.208 224.084 206.967 224.084 207.853 cv
224.084 208.897 224.717 209.372 226.489 209.372 cv
cp
0 0 0 0 cmyk
f
237.898 190.099 mo
242.139 190.099 li
242.139 206.524 li
242.139 208.233 242.424 208.645 243.342 208.708 cv
243.88 208.739 244.323 208.708 244.924 208.549 cv
245.336 212.284 li
243.848 212.664 242.424 212.917 241.411 212.917 cv
240.367 212.917 237.898 212.569 237.898 208.834 cv
237.898 190.099 li
cp
0 0 0 1 cmyk
f
257.233 204.688 mo
257.233 198.201 261.031 195.827 264.829 195.827 cv
268.278 195.827 272.583 198.201 272.583 204.688 cv
272.583 209.467 269.45 213.075 265.051 213.075 cv
260.208 213.075 257.233 209.752 257.233 204.688 cv
cp
f
268.247 204.688 mo
268.247 200.922 266.95 199.751 265.051 199.751 cv
262.646 199.751 261.664 201.713 261.664 204.688 cv
261.664 207.284 262.931 209.246 265.051 209.246 cv
267.14 209.246 268.247 207.284 268.247 204.688 cv
cp
0 0 0 0 cmyk
f
291.746 204.625 mo
291.746 209.404 289.024 212.79 284.878 212.79 cv
282.694 212.79 282.378 212.569 280.416 211.303 cv
280.416 217.253 li
276.176 217.253 li
276.176 196.365 li
280.416 196.365 li
280.416 197.219 li
281.776 196.112 282.631 195.637 284.467 195.637 cv
289.245 195.637 291.746 199.213 291.746 204.625 cv
cp
0 0 0 1 cmyk
f
280.416 205.891 mo
280.416 207.568 282.283 209.024 283.96 209.024 cv
286.397 209.024 287.315 207.125 287.315 204.34 cv
287.315 201.302 286.397 199.53 283.802 199.53 cv
280.701 199.53 280.416 202.283 280.416 203.391 cv
280.416 205.891 li
cp
0 0 0 0 cmyk
f
310.568 204.625 mo
310.568 209.404 307.847 212.79 303.7 212.79 cv
301.517 212.79 301.2 212.569 299.237 211.303 cv
299.237 217.253 li
294.997 217.253 li
294.997 196.365 li
299.237 196.365 li
299.237 197.219 li
300.599 196.112 301.453 195.637 303.289 195.637 cv
308.067 195.637 310.568 199.213 310.568 204.625 cv
cp
0 0 0 1 cmyk
f
299.237 205.891 mo
299.237 207.568 301.105 209.024 302.782 209.024 cv
305.219 209.024 306.138 207.125 306.138 204.34 cv
306.138 201.302 305.219 199.53 302.624 199.53 cv
299.522 199.53 299.237 202.283 299.237 203.391 cv
299.237 205.891 li
cp
0 0 0 0 cmyk
f
312.995 204.688 mo
312.995 198.201 316.793 195.827 320.591 195.827 cv
324.041 195.827 328.345 198.201 328.345 204.688 cv
328.345 209.467 325.212 213.075 320.813 213.075 cv
315.971 213.075 312.995 209.752 312.995 204.688 cv
cp
0 0 0 1 cmyk
f
324.01 204.688 mo
324.01 200.922 322.712 199.751 320.813 199.751 cv
318.407 199.751 317.427 201.713 317.427 204.688 cv
317.427 207.284 318.692 209.246 320.813 209.246 cv
322.901 209.246 324.01 207.284 324.01 204.688 cv
cp
0 0 0 0 cmyk
f
337.634 202.378 mo
340.293 202.758 li
343.109 203.138 344.786 205.1 344.786 207.6 cv
344.786 210.828 342.097 213.075 338.268 213.075 cv
334.943 213.075 332.697 212.252 330.576 210.132 cv
333.741 207.347 li
335.039 208.676 336.494 209.436 338.046 209.436 cv
339.312 209.436 340.324 208.897 340.324 208.075 cv
340.324 207.41 339.659 206.777 338.33 206.524 cv
335.545 205.986 li
333.076 205.511 331.62 203.644 331.62 201.46 cv
331.62 198.232 334.121 196.175 338.235 196.175 cv
340.482 196.175 342.381 196.555 344.597 198.549 cv
341.875 201.429 li
340.768 200.131 339.597 199.72 338.14 199.72 cv
336.906 199.72 336.052 200.416 336.052 201.207 cv
336.052 201.745 336.336 202.22 337.634 202.378 cv
cp
0 0 0 1 cmyk
f
348.153 212.505 mo
348.153 196.396 li
352.395 196.396 li
352.395 212.505 li
348.153 212.505 li
cp
f
347.806 192.377 mo
347.806 191.048 348.881 189.909 350.21 189.909 cv
351.603 189.909 352.679 191.048 352.679 192.409 cv
352.679 193.738 351.603 194.846 350.242 194.846 cv
348.881 194.846 347.806 193.738 347.806 192.377 cv
cp
f
358.285 200.163 mo
355.753 200.163 li
355.753 196.523 li
358.285 196.523 li
358.285 191.459 li
362.651 190.257 li
362.651 196.523 li
366.767 196.523 li
366.767 200.163 li
362.747 200.163 li
362.747 207.378 li
362.747 208.993 363.349 209.151 363.981 209.151 cv
364.614 209.151 365.089 209.024 366.355 208.771 cv
367.336 212.347 li
365.343 212.885 363.538 213.075 362.367 213.075 cv
360.849 213.075 358.285 212.284 358.285 209.277 cv
358.285 200.163 li
cp
f
381.146 207.41 mo
383.708 210.195 li
381.651 212.063 380.29 212.854 377.379 212.854 cv
372.41 212.854 369.372 209.183 369.372 204.277 cv
369.372 199.91 372.188 196.08 376.524 196.08 cv
381.24 196.08 384.151 199.593 384.151 204.847 cv
384.151 205.954 li
373.581 205.954 li
373.677 207.79 375.354 209.119 377.475 209.119 cv
378.677 209.119 379.341 208.929 381.146 207.41 cv
cp
f
373.581 202.694 mo
380.069 202.694 li
379.975 201.112 378.392 199.688 376.81 199.688 cv
375.195 199.688 373.835 200.954 373.581 202.694 cv
cp
0 0 0 0 cmyk
f
111.883 126.787 mo
111.883 124.165 110.204 122.854 107.869 122.854 cv
102.42 122.854 li
102.42 130.638 li
107.828 130.638 li
109.753 130.638 111.883 129.163 111.883 126.787 cv
cp
f
169.404 131.457 mo
169.404 124.37 164.652 122.977 162.194 122.977 cv
157.523 122.977 li
157.523 140.347 li
161.579 140.347 li
166.414 140.347 169.404 137.357 169.404 131.457 cv
cp
f
279.469 125.926 mo
279.469 123.919 277.789 122.649 276.068 122.649 cv
269.269 122.649 li
269.269 129.491 li
275.987 129.491 li
277.789 129.491 279.469 128.016 279.469 125.926 cv
cp
f
318.656 123.468 mo
314.847 135.923 li
322.548 135.923 li
318.656 123.468 li
cp
f
86.7627 174.243 mo
86.7627 175.92 88.6299 177.376 90.3071 177.376 cv
92.7441 177.376 93.6621 175.478 93.6621 172.692 cv
93.6621 169.654 92.7441 167.882 90.1489 167.882 cv
87.0474 167.882 86.7627 170.636 86.7627 171.743 cv
86.7627 174.243 li
cp
f
173.727 177.376 mo
171.48 177.376 170.277 176.174 170.277 173.99 cv
170.277 171.458 li
170.277 169.56 171.575 168.104 173.6 168.104 cv
176.037 168.104 177.303 170.002 177.303 172.756 cv
177.303 175.604 176.069 177.376 173.727 177.376 cv
cp
f
89.9678 258.084 mo
105.848 258.084 li
121.088 317.25 li
134.535 258.084 li
152.208 258.084 li
166.68 317.25 li
180.895 258.084 li
196.391 258.084 li
175.9 347.858 li
158.868 347.858 li
143.5 281.776 li
128.644 347.858 li
111.611 347.858 li
89.9678 258.084 li
cp
f
234.983 258.34 mo
253.554 258.34 li
283.521 347.858 li
268.409 347.858 li
262.773 331.209 li
226.275 331.209 li
220.896 347.858 li
205.016 347.858 li
234.983 258.34 li
cp
f
244.076 276.397 mo
230.885 318.403 li
258.164 318.403 li
244.076 276.397 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
303.43 347.858 mo
303.43 258.212 li
318.926 258.212 li
318.926 347.858 li
303.43 347.858 li
cp
0 0 0 0 cmyk
f
375.489 272.812 mo
375.489 347.858 li
360.506 347.858 li
360.506 272.812 li
336.046 272.812 li
336.046 259.236 li
399.951 259.236 li
399.951 272.812 li
375.489 272.812 li
cp
f
223.74 416.417 mo
149.24 416.417 li
149.24 563.917 li
171.615 563.917 li
171.615 587.183 li
172.586 586.883 li
200.961 578.133 li
201.49 577.97 li
201.49 563.917 li
223.74 563.917 li
223.74 416.417 li
cp
f
173.115 563.917 mo
173.115 585.15 li
199.99 576.863 li
199.99 563.917 li
173.115 563.917 li
cp
0 0 0 1 cmyk
f
150.74 490.917 mo
150.74 562.417 li
222.24 562.417 li
222.24 490.917 li
150.74 490.917 li
cp
f
150.74 417.917 mo
150.74 489.417 li
222.24 489.417 li
222.24 417.917 li
150.74 417.917 li
cp
f
337.406 416.417 mo
262.906 416.417 li
262.906 563.917 li
285.281 563.917 li
285.281 587.183 li
286.252 586.883 li
314.627 578.133 li
315.156 577.97 li
315.156 563.917 li
337.406 563.917 li
337.406 416.417 li
cp
0 0 0 0 cmyk
f
286.781 563.917 mo
286.781 585.15 li
313.656 576.863 li
313.656 563.917 li
286.781 563.917 li
cp
0 0 0 1 cmyk
f
264.406 490.917 mo
264.406 562.417 li
335.906 562.417 li
335.906 490.917 li
264.406 490.917 li
cp
f
264.406 417.917 mo
264.406 489.417 li
335.906 489.417 li
335.906 417.917 li
264.406 417.917 li
cp
f
186.177 458.479 mo
188.215 479.466 li
188.302 480.328 188.99 480.403 188.99 480.403 cv
194.465 481.078 li
194.465 481.078 194.752 481.128 194.877 481.128 cv
195.002 481.128 195.465 480.915 195.465 480.453 cv
195.465 479.991 195.027 479.804 195.027 479.804 cv
193.19 478.853 li
192.802 478.653 192.802 478.091 192.802 478.091 cv
190.227 451.841 li
190.927 441.116 li
190.94 440.979 191.065 440.704 191.377 440.704 cv
191.69 440.704 191.74 441.042 191.74 441.042 cv
193.49 448.041 li
191.915 455.104 li
191.765 455.729 191.89 455.903 191.89 455.903 cv
192.952 457.954 li
192.952 457.954 193.138 458.418 193.615 458.216 cv
193.94 458.079 193.84 457.591 193.84 457.591 cv
193.477 455.392 li
196.344 448.204 li
196.511 447.754 196.377 447.054 196.377 447.054 cv
194.265 435.767 li
193.977 434.403 192.59 434.341 192.465 434.316 cv
192.34 434.292 190.927 434.116 190.015 433.929 cv
189.102 433.741 188.727 432.879 188.727 432.354 cv
188.727 431.829 189.19 431.292 189.382 431.072 cv
189.997 430.373 190.332 429.433 190.332 428.43 cv
190.332 426.135 188.472 424.274 186.177 424.274 cv
183.883 424.274 182.023 426.135 182.023 428.43 cv
182.023 429.433 182.358 430.373 182.973 431.072 cv
183.165 431.292 183.627 431.829 183.627 432.354 cv
183.627 432.879 183.252 433.741 182.34 433.929 cv
181.427 434.116 180.015 434.292 179.89 434.316 cv
179.765 434.341 178.377 434.403 178.09 435.767 cv
175.978 447.054 li
175.978 447.054 175.844 447.754 176.011 448.204 cv
178.877 455.392 li
178.515 457.591 li
178.515 457.591 178.415 458.079 178.74 458.216 cv
179.216 458.418 179.402 457.954 179.402 457.954 cv
180.465 455.903 li
180.465 455.903 180.59 455.729 180.44 455.104 cv
178.865 448.041 li
180.615 441.042 li
180.615 441.042 180.665 440.704 180.978 440.704 cv
181.29 440.704 181.415 440.979 181.427 441.116 cv
182.127 451.841 li
179.552 478.091 li
179.552 478.091 179.552 478.653 179.165 478.853 cv
177.328 479.804 li
177.328 479.804 176.89 479.991 176.89 480.453 cv
176.89 480.915 177.353 481.128 177.478 481.128 cv
177.603 481.128 177.89 481.078 177.89 481.078 cv
183.365 480.403 li
183.365 480.403 184.052 480.328 184.14 479.466 cv
186.177 458.479 li
cp
/1 
<<
/Name (PANTONE 186 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .81 .04 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
299.321 498.366 mo
297.722 498.366 295.946 499.672 295.946 501.847 cv
295.946 503.411 296.388 503.812 296.722 504.747 cv
297.491 506.901 295.651 508.789 294.722 509.047 cv
293.044 509.513 293.189 509.61 291.921 510.597 cv
290.705 511.543 284.547 517.134 284.547 521.946 cv
284.547 528.713 li
284.547 528.713 284.521 530.047 285.738 530.047 cv
286.955 530.047 286.972 528.696 286.972 528.696 cv
286.972 524.38 li
286.972 524.38 286.603 521.981 289.404 519.18 cv
292.138 516.563 li
292.138 516.563 292.354 516.363 292.621 516.363 cv
292.888 516.363 293.238 516.613 293.321 516.93 cv
293.404 517.247 293.904 520.18 293.904 522.63 cv
293.904 527.413 292.809 531.696 291.521 534.271 cv
291.296 534.722 283.871 550.446 283.871 550.446 cv
283.871 550.446 283.388 551.163 283.388 551.979 cv
283.388 552.796 283.805 553.446 284.521 553.729 cv
288.972 555.18 li
288.972 555.18 289.438 555.38 289.705 554.896 cv
289.907 554.527 289.631 554.233 289.521 554.146 cv
287.888 552.946 li
287.888 552.946 287.321 552.579 287.321 551.93 cv
287.321 551.597 287.455 551.396 287.555 551.246 cv
295.237 538.946 li
295.237 538.946 296.472 537.08 297.138 534.463 cv
309.37 554.347 li
309.37 554.347 309.837 555.296 310.654 555.296 cv
311.321 555.296 311.62 554.863 311.62 554.863 cv
315.271 550.763 li
315.271 550.763 315.554 550.413 315.37 550.08 cv
315.188 549.746 314.888 549.746 314.654 549.83 cv
313.087 550.413 li
313.087 550.413 311.971 551.196 311.138 549.663 cv
309.472 546.597 306.559 539.571 305.246 536.496 cv
304.183 534.005 302.809 530.222 302.809 525.696 cv
302.809 523.664 303.314 520.421 303.634 519.359 cv
303.746 518.984 303.821 518.847 304.021 518.821 cv
304.221 518.797 304.346 518.872 304.496 519.097 cv
305.789 521.036 309.946 524.872 316.471 525.497 cv
316.998 525.547 317.388 525.347 317.554 524.78 cv
317.721 524.213 317.138 523.747 316.821 523.663 cv
313.201 522.71 310.494 520.403 308.571 517.747 cv
306.644 515.086 306.822 514.396 305.971 511.747 cv
305.821 511.28 305.505 510.563 304.487 510.479 cv
302.094 510.284 301.063 508.773 300.938 506.38 cv
300.921 506.063 301.092 505.76 301.554 505.83 cv
302.538 505.979 302.804 505.396 302.804 504.997 cv
302.804 501.363 li
302.804 501.363 302.255 498.366 299.321 498.366 cv
cp
/2 
<<
/Name (PANTONE 370 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .56 0 1 .27 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
1 sep
f
243.865 596.542 mo
243.865 370.042 li
242.49 370.042 li
242.49 596.542 li
243.865 596.542 li
cp
0 0 0 0 cmyk
f
242.99 648.823 mo
266.421 648.823 285.417 667.818 285.417 691.249 cv
285.417 714.681 266.421 733.677 242.99 733.677 cv
219.559 733.677 200.563 714.681 200.563 691.249 cv
200.563 667.818 219.559 648.823 242.99 648.823 cv
cp
f
211.127 691.249 mo
211.127 699.76 214.441 707.762 220.459 713.78 cv
226.478 719.798 234.479 723.112 242.99 723.112 cv
251.501 723.112 259.502 719.798 265.521 713.78 cv
271.538 707.762 274.853 699.76 274.853 691.249 cv
274.853 682.739 271.538 674.738 265.521 668.719 cv
259.502 662.701 251.501 659.388 242.99 659.388 cv
225.421 659.388 211.127 673.681 211.127 691.249 cv
cp
0 0 0 1 cmyk
f
242.99 660.888 mo
251.101 660.888 258.725 664.046 264.46 669.78 cv
270.194 675.515 273.353 683.14 273.353 691.249 cv
273.353 707.992 259.731 721.612 242.99 721.612 cv
234.88 721.612 227.255 718.454 221.521 712.719 cv
215.786 706.984 212.627 699.36 212.627 691.249 cv
212.627 683.14 215.786 675.515 221.521 669.78 cv
227.255 664.046 234.88 660.888 242.99 660.888 cv
cp
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Bob Hutchinson) ()%%Title: (4003 [Converted].EPS)%%CreationDate: 10/02/2009 07:36%%Canvassize: 16383%AI9_DataStream%Gb"-6k?9+Rc7&VHJFC;Y$msYu"5+8'EZDq)N3Ng/N"$9'f=X>n[3)BJ];rO!a^OSEhXc+N%q)FgW)P6<V38F<ksB%0XuG)gL!F%@%8_$Ll6;ghUUi,ISFF(-9hWT5WA.@A5@TgeeTr=7l,sd4T>#lFJW)N!2"s8hJs0UO[20urFVq(&*erk_f[J$1_kP*NI9!d'HFLiRE%IaZ:E#SX&T_P#S^*tLQ,)VqfsXQ^"V+%bk#?M1/"Q6`(OGe[O"%I/pOBX:Rns+&-QI%W]ecPMRi+7OtZ71PsLT\&X[f]Zj@o>d1F%a5s+1BZ]6XPZq`R=V-<r\cjT*h&^NPXX/[sO;51!#Tm0LU=1SU<oD#?4dU;V'nE;e"+LW704O]I;6V?R*(A;28P2QZ$,q"taJt]Z%O/2Z3M.3GVUkHaqTkGbl2*[j$>O-e$rk.dLm.J!@I^@N&\O^AsZLRJ<WqIBbBk0M&b,/eN[7UE8OJ``<:<TY/ePLgVbcFF/1HoRO%DDqL#Q9;1uRdGR%pI`!UZrs0jPje<!Rf<Hu,"g2erhAoR6*&DHC,c$S&b>fGXa&?p2d4S1;nLJX,-qR9^W:lQ!ghI*9;<$`T[Oh;%#hP5o?p+R74fnWsFBJhrT8iPUkF1>@.[gtY9,CV'/LCoLYGNd/>\mc0&QPkfO`W#"<j<*M_/:/-i[M,)8[nNDCp0s58XV@2DRWd3%Ghp/I%'(sf-s;jGr1S?;$2XTigDU;Ja5R\H=V.l/(UVB/='20`C9rUnJ,pKY>k/&+J9IpGY6%]m<Do!,NPCX15CHe%!rS6nr2j].%gGJGEZ"QK*"W;gM;d%,<Z:plk.Ti1kdPNMOC%tEOY`u"n.8?jBlo%QObEsWB1#X5*2GG`6RTKn]iGU8I/7PSf&Si/?pnV$116i21%X].+dCKE"\]MbGG.)ls.M@]*:5/iuaF/1;b`_ncCr/IOl9_M$A1E7#+`\KLtr/KaF.7*:ZR.*%`_\(jGCl-Ss[YuHJh`,NOMbkB,%p.;5Tqo;So0)U]?.M[Wio7NE/)H/+`.cG;LPE)/B:N<;BdG>IVH]IG*oH0C9n_nD&M9[4a217r,%0'cc*1oC3PUa$mNXpX"2]Nj/%J,E"q7gT+6;E-l<9kTT/$)K0>++(A?!&:tYa.>)E+/M#aU3*a+6:XeU8'EDgZsVOm4^YRLr=@*0k\SP_d:$lQCAJXbLVL).j_l+\%V$X8^^Te3-/s3S&gKlt+EjQ(oh)5eu]OGq$@SSq;nq+P-loCnaVq=kHds`b%&9E1fm'0FCZ'='+D4T7UcfmZO3F/&;S*?GAg<^Tb%j<*Jj[b>Gd7+ttLCh;:A@_>LIgZEk&Ior31OM0)q/DF-9o7.\2Pf2:7)E+`V^378u?!:/@"nE3(;Q2'Js!3Fb@=RN+7A8Vl?huF<%<`KK8J*B1'Vr-07qTgkZGJgZ^2QVE(4FP*GdXQrPrQbDjIu/9H6m:nMrDtW#n*D_+-TM.)4NG"MhfN2hGP`?X$fdG8U7t[<OtPu6%A$d>FR1X4n='O,EL)7`qHMjB7Y1iBWo'`8UE,D91^PHY(5P]dLebjmgo"U)trjBGHr26OV9?GVsNG<o,E@CY/F/kRms"r9c;"C6V%RbuHk^V6UGgIoY<Sn`^=s4c/7.d<efT0ta,C"/2nD,lH`8N(Ib;3JandRsV2i\NVVA$"g+Z\MS!V'LSVMfpBFj8Rd%OoR)s/XU3,%r.\i881HkXj<)?:+uUr\NYWFJ%85'Gpdp_^L/bNMNb,IP)$s\;CZ?d/Q\tCYTJgdL/c9mR@>UV\?(=K&NC*+RSSpm;S(-lO)hnDi%A:0t-m!:RUfI"Fh@"k6G')$/jLbnEK@'0S[8S62G8a'*HZiM^O8k$Z3.>iOMb1WD+a,!jf['ViZbd9^qfWKSHr8p(sX6c:TC!VKD%crEDF)s\XN.&@JEHXq5o1JVqepu6ZGrTs(&HAJ%RgL4m;Dn\4mQK]d.O2=rf'0\>h]5O0R0J?PGY\+p,H/>4?D;*`STVKB</M7lc%I3R32QO1)g&FsqWm1i?-fW`r3@'+:pHK'Ptdfs5::$3%eK=o90>\C6:q?29fR96^q'^_+XNGT5ab&lHID$hYmRo!1`FlTS>L,kZ5%i+nh*EIO`>`>lTp:Zu/sSoBDC?c3*;-8k93.Ds^IPtj:cWQ_0)T+2=*SjaH`C+(Qo<KlqaV&J`lI^ZMX<$hQ=M@3lgZ*nqq`fRVF%7D3-RD-9PCJuP2\Id&njZUSLE6?1"YH!A_E;YI,`h\h45,q9)g$*B28N3c"#>@ZtGONSrT0Wkm#'O,>4g37=$nm#]&9]ZN><&0ap%ccpQJ[ZmQ`FK@@^i+5iM8p!FoCWte#1=ZXg0A%2b??s1p6@TZ\`MDB_MkluTP]Nr]$U_q)(=c4_QJ),@el\?]2+PqJr9RG'lnqEK%>F:DDM/91rOr@s:q_f-nFd/3%_Ejq9P`h8OP\URYaJ>oVk=B[jQgh%L8m?_^O\It#=Aono\eSMV\0O[QIc5'tNS.ZKfJ=:PV3PR9%B`0*HqtCrJ6TXVJ5u=2Il[,_is,J+"nD&T><!I2IrBP5fgSd@,C>1Z?0[55e$UGTO6AbRWqOU6)ScmU5rC^n;+KFdhM]X5o[fD^j%:F>6HZ:<T3M0D0kZ*?Q0/oU<Jjb\'ZBp!W"X6/f4ZBdH.^QG_hIn:M<LsL]T*7TW@fV>-B<7A**EY`)CSNKmm>3L'%"<S0)FCN@$%M_J&5s(EAABZG0DV4CH.RuBP0%iJq,%ZF#9\R).R)Q<%s*5MaBW-S;ZW3i^2^i*<ZX<'B04bllE`eIUSN7kO-rrKNL]4W0(qMaWV%(Zn'+Tq'AO--8"L6$*P01J)/Lmr5@mDDkdomh2H$_i^7XE6;67*iuU7=PKOP"%DN6Nb%5D[lm4!9.ptH6*6B\\Hs\hr9;Qtbu5YJ%7jZ;*r&Q4-RI!#`I$F<JF!Ot`N']F>\TQoU[TX57U;HLO;U&D@'iAD9I44?$Aej`HZFI2N[jGn/4-6A@#H;=W,CuqCDRSN=m[8(N%b8JC#P`p@F'UOuqT?06.b54^qJjG+9+JTB08+"Xo10[apI=!BaEUNVfRuWtA=B=n?f!K!1PFbf^f'4m8kBbhD()mm1AQ'KOBn&T>%\nWdA9P9SnX(@dP#Y!rP]CK=&R`-ke`2:tE8OoG6c=YXi8(M$>R3APCn[68a;illI4uHZIcuigBQrD/%X[b_32?&'(Ljpk>(=ub/%g0PBbGH#%S4Vjque9':8YZ,^(?t-*+a/rE>]/mWi%Fs%6Ph,W#Q[*`lRo=#-Sh"AHLD!OKM@LH5X[1CE[tOYUYl3dKMSj:k,8G&+%OCVICFjKe*3;#ma&FM2lge\B]n'oZ?gA:O'e8]rsfCmrXKs0s<;;(=K*uFHKOPRA3=-NC3fm\HZbQE'A6Zf]ug[ah;8LWEOQ0W#H%AS/>Q9cH%RgPQpDBWF3UY(om`ILO=EiS8O.n#"@/;<.A*L[>8cjY^'p*%RZ8!DtnoHbj]2\7faEQSK8:-c?,Q5"R$VT0PI6NB<Mf%P3C5k;*WPtc-@Bofam?\b?%fScdUn!?*Mj(`PT^"[Z(=`0<c<;T*9[u]X?e'D4>:Vgr-;q_^h/N'fmnHkrK/Y"/C,?K/o4h<?Qd^%Opi,=6:[f7RnCLR<si-M$\t0\c.G"e,]"eFe[.q7E&c!-3WBjCgjb=&oe!a;i">`WH9j6BVTdu2=#,#b6'R&V,=k+=>OHLc'LQ\1%\KKN\*^iRQe\]mA&>."0KC6/rT:<,`dOJS+N2C-M-46Xr)g@A`A<`lPW>$3)p.@eqV-hDqfD=&J7StUf;tBB^ha+^1d/$dg>/mE"%M!I.`'KM&g-!3$.79:A^?JfX')4-L3c6F*+qR%'F^*Of!aDgiL;Xg_MmIfiWa3u]Q9&)O"itt,W'V$.bF6]\bL"aW.B]!3(M_!t8%bepDC/E`g,SD(fd%lr;NU`aHrT@^`V'-J9,_7F/6Hd>i),H`\()gH''30n)8W]$^7W$cpu?Lsq'1aV+!8OZB+EKCc&:X4fK\2(?A%Ir4,0EtY1AKY-qUGjY:[QVf?W-4GL\rYD(U.@+sC5O/+=j4$%n3OHLn\A$M7g6KI%n`V@pUTSN8UiWYq?:muUj?D?G%"`iX[lr3c%h^P^HYG<.^I<2ehEOaF-51]S=@m8;4Wk*UI9GcFq2>63AXW5#%$BpRf4qI5AYu1;p35kp5]=kKCVm$s8B5D\TZ#Mk<k,g'@pWPTA%fGbcbMV]'d4D'$`h%hoDUfC#pZ!(QfL.gSUknrQ:-NAkP^"3?-jjE.<4OPrFnh,7D5sO<Ln0gJ]U848nUW,/cj4n%$[1+Wcf'F.:%42Sdl,0;huObWgXZ2Zl5+\%IL)&k6(keEV9'-)!OqTn&#4.;?4L.nQ91'[cj1_5W,qPU:SpCg9C;9$kTR&<UKl)eleqdSY`KqFin%6M'+Kc-^tcSOP<c=ZJ>(3(e,.m5l@(UW.02aCh`=]W70ok21BQ*7j=n>8[Gu99+HBPA9V937>p^Sb8c4F:@jnN\Y+nOGZd;NbQPs%s#[/kj_e1g;)A?($G89/k.)j('P$`D;_/F/_H1KbEVo9/n.'aiWr5/r6N(F7c%I!@(Amhh)?iM%-!%GqC'p.$@Lcm-Xp3149XWeu%]<lIgI:8)K_cQ<*j*'00e$BcZ[pB"1[UO1cfD+BtIdLi?`P91]kgK"9:NK"IIgag)I_mQ0DrK4D5N:uHm0>GAr`rLpRI(X@_<H!P%NirheT8K0MI*ZTSIZ`i.\'sWTctCX:o&QOm++2M'Ult2-`uQSaCu]k7'?B0jnT`b+^n]_'BCNIhIdSI:q0M5'OhC&?lXO:b-VnZ?%>(88pYlO.>`Ltn&A?3u$`R'>hX_P>-U^s.Sq.fqhY$Gd)GIelt3e`mS^Dj<#-eGF%WOD-7n($i=FOR.iC:i1o'"HE]@IlE?W</&]%gC+jmd;&\==_K\Hoq'VZrT\9]_P5esW8WYH]?*B`d!JJnFuh4Q=na/=FULm9=T74*a!n"75&!ps%JOBJnFi+8pA]9K5j@2Ji8MG]%ojY>ZC;+ejT<HM.?O&d@SY#&O;&JWFa&Andm!UR:iZP/LDSK=i2(nn#qMgQ?erUfrc#t*EOU)t^D<KpmhmT,hGccEQ8=TS0$7U8Z%1oNTi@,sc6l>!h&*4^YmTAYX8qgVe/?6XU?meitW^*M;CR<t$)eNp89F"s(EY'r3j.uE%MoA^M(DA<bH-OIV8U\6cs3`"CHf02aX%n(8D=2h0c/2u)kHT`6:&jAGLIVi[t^o]A8e0=&<k-ZW14XXB8lkSF.1"CX\,]uVq"<a-#8-j5CUVaSn4b7URW@d&O.VmSqF9ABR?%=(:C<mT:q)Xm>CYesk<oScW9;m]L*6S/j)5^&d*>P@APqq7jDq1EuZJHeM30Hg!V@#])=@n$_t4A(]V-(7Z8M-Z0WA4bUB+H$"jN%8:bd3Kdb;<FOakWs.9ILL-38%`[tH_QePFhkV6_"LS]X\RPeWhCA/87Y,SG&-?K(R3!1`X6-_T8Wni!,L9Iog$9tp&+=pQdW0#4<%5a5\;;,#R.<o;Z&g3[JZ:VKZc+J`\Wf>74T6^nO*lN8^iW_iW+;/K/=NZ'$1c`82O]$:6ub9Y29OABYjOs1d[85"J*UCjtO[o'%L%Og@#0:'UYm(f`OB'%\lil?;V0/@BZg%q*bc-[X,<BuIrAOZ@GO\A:V"FTs5)B&p>RkV]qZWEhF]l6jdJB#"2lCc2*>SE[AKKX)*b%&.:LD=Dbe]W\7a$F?]*VcJ0L!lHR-M7iiB%=7'V%;[9kh7H<%02=#,[:f[^qIM,(5D)?HXFEe5EIG&d,RJH0DeV;,Fcp5)92!?lE%<kWmi>G\1qmO"gX5$+cXg2,<O%1d+):[qNdc_j4%b^@%spq,8IXTP,2!qSj1<um#>n6SAj[R4s@PFh*ps&/-h47,KG_R)RKi<"k5%N*UHrN&g=9Ssi&bMD<*TbQ1@q/uRq'nYN-?r=`'q%&H@nnMdMAB]:^pjK/?!>3Kb:@kVsUq@@X(%^/?>4Si\:g#'i*CV;4c?I0UC%,o2gfs7UR9\GV7]q0uh<p7D<U0@n/Cn1s48R^N1_Z<0&mX<Qs'-6['$YDq\fCRiB*Pl,0*YQD_*'L@Tpf707^rbJ$4=U"iY;;%9B%7L\Rc==`p6*fP4d@`2CJ`#6ajIs`g@:,HW$:Rs\:",Dm!5/!46cDZK`r!QIgOa.b66+>DfpK[^X\fWcY5E3NMUL1-U.5WIpk(J!'%g.nV,gr1"7n^C#]?FjgWp8\'hVfp^l<Elu0lB17YI-6`JYr'&h-,(Z)p_(gslugso-7#3(+3LMKf'3*MF?e/3fF+lZCGe>?[1:og%IjM^d(Dp+>NR"3SC:5)'?GG6?Do=3^DuA.p"W?K-iequ:Rr.hBUXnmUP>B_0[9^-%8lW)_<o>=i4hk>AZs'mkl+5:0!Trn$IstqQ%QCOStHJO5E8%&*Z&PTmaNgJ,C<mqtfDG.J8B/=>&)@KI/[(=Q<jnFu76,2IT%u6^SB(E;)#t+/=56e5>o-oQJ%R'-g-6'6h`jp]0%gAYCF>rWk,j-XVQDS8mh-;$%;h!)ElM`b>5%ca3mZV<ETdj'W>A4$4MI@Qp*9#C'bI!`LbP*@OB,8Mk#4QdSZBDtV/PS,fs9f]&c%F,J/)9M=htX7[h9)tC#!\s>K3>aO33<]WXG`T'=e6sQPE9$nmqPNC8O\29k4K8D9ep;C-<(]6>TBgmr6&Bd4S>!.,hDA(E%d56kk%51cL#a(q2TRQCb4T[b.o\]@<rba7Yg>M2&SOmm>-=ui#?k-:@TSr*J,F[#+5n@7#/NRVT(G2q(4im\MKS,@ZMcd-L;M:Y[=>@7NO%/(sAnhKr8S_b51+0#\C?n?UOTF(F*Gd2J>L:ZqPafB>^>HhA'lU?PnF$#&%.^9for.0UD2;u:)C@UUjOJt;(:WtD+3[J/2;IoJYM%Mpa@dca*$j?#+Sh[8%[ZD]eXK#c_"T&^sO#"aW_mDEZb=iZbKoF:SPI5n:SO])UgADVe8Z,OfRG9Hs0;(q-H:g"2VQIL"p,q=='I%"j7<jTm5mY<1jVTc"<J,0P12phjOMGV##*p(54&oJsb<a#,;)'$`)I)mR.cTEY/?b7>Y%6<:0BGLeA'VaVo;(9q6Te;:lHm1!4N'%,"?9Q9PB!r5H<Q6Sf?u4KcR7)Pi]-0;4>PZ:W0lc39W683%Nq=OB)56mUtjfcgGkP*OaTbHWd_m5_AXFfqOf:M2?Cu)iA[)I]2=7%T@pAK+;+#/=7RYtk^mi@jPgUIcuO4E&_pj)hX.jT]W_/T`U(9+Y8>u8m3?E8O_Ptf_W3!nf]g0)p4G$75u1>i'>bP^`_ucDF37j_%TPA"h`)*8&;S;0H"3)!FTR-1n:U8Jer^L]k,okEIVFlZ-G)<RK(#<i2qdDg#+VGY)9DYBcFQ)A_p!DEM;CC:eBU&[2IWPBas&)#4%`Ad.l,0P\=03[SG<VmHHTVP8`h$YGVPj(,2:AdeYG3E@";FDBHXeN0rf9W@a-rU0/RM+L5]tomq.R+:M"BVYo]?ps#D,3m]6A-+g%2dSajrXKl+MGc.tg>QUH+q!+?IqZ=P't:BsHDB6YKug/f.\2rCdf#+S&;r0U8!)p;lRZ!>G<Tdc-3bpG$Q1uS:`kAYF$it^<"E?O%<*0[b[9*K]PchIL[RZ)>Z%kq?8R[_FN(Ys.fo'\;HfGDjgsnRocQAR5mjG"t(6cM0LeT:t#&\YCa37?a[ujD>A%:sF?(jb7D\l+D%](@VT^Df\9.[m!37c*_9q"OlGVo%$p+9[t@*)asT$'2tXg058s,AOX'k),B*9,Mcf9*hG*Z/0j!'/hc9&4MSt\f`rC]`t4_%<'V5%YNdHM%&ILdi33\X#JCi%I`$*d^NH,%9&"jP4e<\Oag-eKAnug>L0,k13ueshTOFSI^ATUF6T>Um=jLFhp\,-)e3LlYX34^^l!;t+%q6_Nuk:_#"f.D&^mYsAk$\iJ2GM:*n`p0a"8,k1LFfsHTA#%]DDH5H'Xm<Ho_QT`@I"%nj=Y>1WcJ7LSnok=hih!SaXB]Wn2`nSL%7Ls6`q[iIMSJIR$?i.-t.P@;@)eWs7o(M`T:(S3($pbSF]>`sh+0#1[_rXm0UTD,UVn(p,?FMHXWi>*lbdZ*mmakJh;\u`rFDCJX%q`;-"X9tqlf=/rQC>i2*EgsNUVjB39VlZEKVh2FCs,m$p/f@J=olHfP/Sr[r4@KnICp%F;9&$\!%fk7!!SM?`4D*omlgBh"E?O>,%$edDgXKe8/Oa#)+)5nmj\Ue[jCTlQd`MK-,HtWq-??T9=8l+^mO`!ag9'?,H*Rs=@pZLT&76mc?^XTH`:VkL/oKp-;d-aY#[m$AN%c*j3aGQ+.NV!`T9f=.[WSXs[NConH@^Eq<W@pNEE.2r;YC9t7uGK6_5VonCt:ap'*Skbsqdd9`ic'W:il_f3&$C0f.?=9]&P&ab:%lEi21mWNNB(Z2Ju^949kjV*YRkmYi%_T/+ql06':B27RVFmbN:$4Q`0-CnU!eu[_PJ!R5DJJX)S<V`WdZWF4,SUU!T$g^hS(=m-?%g?6(j3j!NH%.V?Pe)U#Im$BUio'<YAqcTkB3jg4A@ARh?/`-;IW\!!ZYICZpI64"!<7ScZL!%57!EQ&s=LHhhC8fkfS_cO;Q-SKf%J#Bo"S+DDpf.5Ed,0b8BHY-Lf&U85C23kR][J]'ui`\/pMnOh8Pob+[1t:dHj$t;1Y>tPM44_=Jj.BAM\#UCm89HeZ^%:\l\LRr@%+(mY#'ZS"4]0A)*%W?-;Dl4tb`a3&N#MH<,Q%2WuQ[t>R%_i5I@m,nq%P*h3P]*Idqp#)T:+qX7b?q>Li%\<B-/i$P0`='r>b/R0%5;')8G'a+kfaI.'OhT*t*^>:sH6dlFh(AhP>$h3B@s!XCS_gJR5-Rdj?JOANc!2;*!]p:R#sYK*QMim.^1tBcV2n^U3e_j)Gdr#-%*,DIWSTtP,oLSaW4tQMR>.G8YDYe#CUf62^O&YBcYKg=B508_S7C-e_Q"AZ`Ff)q>ehh0uJQrnndhPZVM0*[uA2EiM:qkV6DE#16%9s`E]?*QG=2jZXtVP!<iSk5hXiE"`XMhcAII!i\eSZX/tGt$]^Wi]umIIF8'bAUP;l#rr:ip'Kk?)TD\1.e'A.itoi'58/7NTEmp%p`@&l%<nhKB/X]&p7TlQ.8QijWGqECFh2a^oo/OFZWV`)SL2eUp=8,qS&!DBgM;SC2p3u:N33(L8m6!p"[!gLVr[]pVrt%S`KWen%1g=_4^UCH#"_K`/#!<(TU:bJDVGDuso%bYbEk!>ejS?$1^Y9M6caT14Vg77*I\6j-/IG"Imfn'+8GbM&$R`@\o:Xfu_F=".+7SoO%7C]k!9mN<cMVVp!bFPD%:i04B8pt:LT5LHXmNA?1:P\&]*qXK$Q.i%[]aIQFs!D!cXDS8+4VYWVRJEMRa23&&>dPq<r;9O(S(2um%eUA0\hV9[d4T1r]5Mr&64AQj6I[J!ie[c`"HUi>1*mK55O'OKPFJ&h#Xl<I,?d_feo;>`r0`OrUH?p_USBZEhGZsEha6un^OCIlO%nb2?XhS6Mqd(WcBkhl2#Q$T@-KuIuKU<:8H-F;m4R+0<WZ?nZ;oXS&s8c;\)6i$H<s&</!Z+M6nS-;(S$.<j(rSsDp?<gbs=*jGm%)3JT:T:,Q;EhUrDVUB6qo/"X.c,r6hKtsfn\%=5h@2l`WOrq,sqJGK"EdLs#.rSr!.TD:ZCopejj:7KLil.fqnQ3;UfZ:EaY3/r5%JS[j@B'8HcFjK,\m`9&p+N66W#%Y=J_Y&2l*p_3iY.=A8#V0kk%,7>\;jX`Vc:A>4VlTN'kN%F4epOC\lV`$Re`$0bl.5-!\\/=;%FJ_s^"a2@p/dl<`:5Li'\cp"HUj5oKlL\.KVn8uVf4fY^I[5-1mB%u735$tl#cugo*j47gm^Dmc2eFgmVolsula/bK-"]<2-INlb%OkTpuL#"$@*Idd-WncG9Fpd=/OBd+h4]\k4#j`9"%eZJi)kKe<BqCTMcYe=r7>iFQ]P*?g#'G5]G"M+)SR#I)7SQ'LI(gB&gq$iQ%\jpq/<.5h,C/J+rV<+Y_O:F.GL?)LIaN9\Jm*lj>M\c%gcO7\jUVb!I/R.a,il[Orir$CN\,)D?k`]@J^R!Vr/E[KYB<^'YmiZpF%jt>]*s/)[Bj;1SSGM[jn]=@p2'(-\hQ9AjSpheauHb3@Wn9$p3rMn^np9s)(Z55,-^+Y?)T=nNJ\/`@ijYZde'O*T_;!LlHh\O7K%"MfRW(BJg((NQ^=;At#c6Z*;/IOJ@rI=d\^-ig63nd>>,d?FEBc7HVQOq0Z#G:;St3r*?HO6ju:a*3u0*Zt3#DL4nUB+V.\]$Ne+%mr>RB,>YdWhXP#-^f8T)#L?ejq-.5"j%o<."VN>]Z'CH=*Gh*NG2L"3S:n3c?boj9`L5J;.8T.KaJ=[baHRK1QOK1/)&>EhcB.8#%?28Sbi/BitoXK)(5jpH<A!^t_oDNa)B5sM^V*F?b=8EtSL/oU_mGsU&45tATTj@K7FXfpu#H^V0nJPdmJ;FMd'+Sjo]q`uN()j+(%q5qu^NDEnL[WYG2_FKk66^fC_$=NU`ZI%gKJ"L7:829$C[uQRK--Yen]Z4&s9iEJW8<uYi"N!8*CMBKi^WK]Lj)?d0h=u'^mSe&J%`eIQc8A#f&bbL!DH'5n]>^('j/*MN;B+9rd&bfNo%Mlk24'HX";C6oGWYOd]TPtH"SQ,&^aAY%k0Y>6tgeuMLfLd;sTu?!!*2rV4%(#c]j]anN'P;>ER/8RqC0.$tHmM1k12nItR2Ql7p;;Lk,C<?2@a0QZ:r9em-W`Ld_AsY_T)P5j_Y#q6!fULN>_KgDc;c1KeI*+j_%>^]['gmR&OFJXUc*0]gHS..lC9q>qrE0'?IKC<lTL;duqq*Te[dP!=e0Uu63U\]3MfG$?L*2TpL`qAP?;/&&GQs67X1<AX4YFDLg%/C^[=Q"&'TRCfFqbTkM))l2TIZMcKUXY5q:Y)TJ]\9[S$Ts:]ZQT_5.D)iBEQ1.l%H[%TX(Xp#\%p5*NS+i>MXNE[g5rf54Z([0J%@N]gS\b1Tm5cL3.7@b%!ID0l(+q<%Ibf8Kj"H=^4-m[4q:dIM/mok)M8Yddb-jM)m#pLPs,/W*#&N#>Hp>2A!g)![aDQBtUeI0lN%r]<JfUrclsKRKp?Wrsa.c=WBjgHJ/ZC,p_J!DX*gB<U]FC2c(iTD/[q+E.-SAqpa?ik#IaW]rQ[!O.XV![;"j!oRo[:]LXcpB/If%?X=R<@P7rN(Z9pB>@En7""a989W9Zt(#CFi[[`S]?@s%>=c&!/NDI?]*;2M,5JBT7()\BI1.$gTiXubF(0f_E\oO0?mNnH99AIPL%j-tCHbAIVBJp0eX>FV%;p5mMQ*YNtjs7dA8cPshL].G)Ja7GB\]4>>`i^2SM&o#\M!f&+@?XFk6l/&YWU[jrN,u!Uuq$+N;GPhXJ%'_@`p^]A_'C.uC'MoW9FDZdI:+2dQ"A5T+LI9oe/g<mO3'C;pmM?59J>eUEO0tk8Dg@pu_o(H'EL,4rJV$#>mkJ>)#1VcIRgU]-?%T=BdJ^oIZf3$Jr5&Uke2(#aE'Ac$4`0s4I_7)Z/(\5T!O/mC$O;ag5:4s6G\Oa!$]"i.s9[c@#'8;-L]3aVpGZ=P'B@[K2o>;h!m%Z#&(s_IKn[>SI?h.KV.7iU2`8KtY#>IPfZ:D[\#mmcd4MD.e3u,5bHn=A44FT@r2Sqp<t@Mi[EQ//g7/9Fg/aS@->[80#rI92@WB%PHGnR$9c+6^@?3t=c%](,"=YpU\Xn;oH)Q[Up97hNOdm)Mi/X'P=Wld9@"Knpa6KsP`NCa]@W2=?&2S'Thj#Q?[r`>"I+L6UAW9^%@>W"+ap$G/W/D^R#-]sl6Z+0+7d&lJ$7Dua<X)/Qk.-B6J]Gc"Q=p<q"WNq_7-hP0;crpA&0FCT7BQOIk_F/^+d'\.EF_Ts2Sm6T%p=Us1-Ps:pcb4Lf2f0TSZ3B#<nCEgULH*ENUVe(X;E,`'!kk\3JifR#+l>7Gj%Ml5!Gi>hlus\UnS$,4juTZ,`>HQB0maqYWXfoO%9I=7Z'1Y:RhL>=gV4FsER*-@[boP:J7jnf;(q)5tC%#oXF##Lo4#&\De3al(:/lUGQq?^LqkUKrq5P5rmHuTRF<QK95P4AY`j>-K%#O9/<G'pg?)Uk2;S63<@S%uc41duL0kCXe5dDQp+cXeXZ<h27>MAChfiY\lHfM!H?LpSt@UQ4)cPBOl![@tp"XbQ\98(WK2R?\q$%\<c*N_0mdoW\suJme\_*V\3]-&0l/lCDlSq1k:g,5mEsq_.I+J^1u)\ZaN4IJ"5'ffSs>(-K5;KUmO'^k*"n<R*4gj44O>II,jD$%k+eWE_s,tCFWHYjNaQK36SV/dS(gr(@N(,oM"W2$.]1t)9j4(.2:m:!0RF7N7(Yu-@rW6io!G-.Z*?9g`R6EuV`38\6qlsEf^6o\%-mj[-$B^t&iS`IP1\$"7rmV;`^?%A,TbMa?5`cn)%$)I1b'W*#>ijA"SZOoFmq+S*h/-G!+%rs56+LIMm6"?#[nb*lLFt]ANp)fY%jNrTnd#gK^'QWES1[$gs1/SP;EbGZJP:\b&%\;(JD[%4D';$h2/j+cHcPE#rLG#f0P!KnO/N@2L?$HPoT.N#o%UF<#)j`'9;%?lV%"s)NV:S'oiSjDQ*+W2M[/j+d3o`hFHJE2g!2j[ko@+4G!JIg$/q?l!_`'oOL?3.%(_!RmlXRnceMogfrEV@JY4o+gupYIfq:=5Zi%dtNonab-LO\<oVCPiC-5UZdKnbfJLN>HX&uYZUF?*1cl%h"qn$/;cGtO,qVVUMJaK_RSWabF4Q]O5@dEYu%_]+/:r"+`rU*1)C\'%'TZZEb2K$:M)\6N5lN$J_]:*=KX5(0'>'7WcoaDDTI@4(U&C?!.29]R&e^Da!eN^-8PK%m95eWB0.+<MG'Msu.6-!4f]J6?huI<(%:lrJK#lflT87Q*(=^[4Z2!2nmG`k*/,9kiA**4IO8V<tl)n,"mpW.m7@uLskH2tVu(=$+RLd.4A)gQ@_5"I,WS&>u>'&kl=96\AB%-J:i)Pl8g_d8-k/]-3Up?5=BEa4HA--Xu9/4U`NDi8a!O"kd2lZ'O0"nA.XQ!g@"]9.^R5JNl0h8^Rs<^ZZO0pj%8OdH</:O3ck&%S:hc_Z\^Cj$Yh6f`8$3#O5F&-^<L=*$U26@))#]m'U'o>R+q.(?SL^OXaf"3\().3%ICdlUg8>P%r6FT[uAOt$Z!Uo+AC_?bX\tM%`Q6U.Z8_Vl0BcBB^E(E.[dEE7*r=X_;/^?/CgsFm7(aGWR:h:!St(qA<4Q*ej>e+Jdk?_Q':@bp\QjoH0pIq=gV4<<+FXVRm^PHI%Jd\qjE'VPoh>iUTg_7i&.<W=,Ys3Rgr=QK+JXd.KF!S4`SFj=aN$5[[$-n?a1,37m@rM6SY4uFP%-ZbXY[c,'*C1tH6kI>6;l"c\%_ZE+Yn9/\SCemD(9"1Gd\_&<Xl&/I'@NO*0+\7UROU6tAGGiE>9II;>B!]fG1(KA%h]hf:EBGuuhu#Sl,=\ZSF).2Sd608!1%=(t%k)oK72MDD\(n-VEiHRnh,LXpcp;l0Niu-a-0mo@CjuikAE)%THnBeY$4YjqXO84'rVWS([a"KHnLQc5%n)]:`jj+$)*ie+X093;b%0P2$2>JdJ47Cm$iD)C>@.t&Sn%l9AIk9+['Ca'mgL:0($oWcjU[sf2NY:fCZ@>S*3Fd(rQP4ss6@tgF@&LJcWKZb'i%M6J;\mQn!%aQg0M92DK-aN+PR8LhM"Qm#;RH1iml7bhNln_njT+$Y8AR(E(gE7++rRmoR]`k`-t`/Ph3)P.HU5=0LUHoO<mO(H7(4!/@qCr+Ni%iLIBGq_pF0HoNUr]GY_<cA*A4_2`BkL#g-sh\*`jY3G&cU#$=)!>m=/c?ngqOtS_u<^HDEMolio*>8a=70ns-Q\<10OjI5"M9ZCS%ktCi1fJ!1/@^N2gOc[uXpqPBhU_@(_Nr)8\j,V8;i[;n0\dI7PHXbnX,G)g1!?<>T^c=o.Q=9U0erk4pQ@BUd#oF8%iTr+'+spZO%cO9a@9]=kg*BuB+i@EL%EQPK$d,]nZrF29r'+A]EfG_ep_.gOkR'\[/1A'>7P'/0ZL=_!'l&jhF6e[B\*UYfOI3m,1cmr_&hDQ)a%h#QL,\HMu+JQqD:2Un+FFP`KlNd[O37dB_^Au'mJ7Rl[(YGl'.MDM;3a[h,/VN?ptX\9ra(#,-G7OmQ(`Hr'$J+f>SVh>F'jJAj'%&PLtlpt56j6IO%eG<3o$0GTVjYu.iM7SSR](2SMNE-eL&(<*/:kj"cI(Z0/qVV#Qb6m;HM.AjrclhtOp_P,hI1^tg-KhJ4OR"d0^%.E!nKHR$2,7_\O"8;rm:B+OQ]-Ggg^)sE!8I0C_mE#ut8%V0CW+2^j4A]*;L?SXb+i;u_^X$0iY^J-6FmCXjiF!3$Zjp4a^B,FO<%GC>MbcC/-b`A*Ri5i1nee":4JOUEp#kAr]@%=XE@Hg)*F$@b`$*NY0uQ.#L&eB7I%7;CqhI[OBNb\N%lIQk`6`RO1hUFP>BhK;I3%D0Fc]P\lJF44u2!Ea@I7:2i_%](4-m$Zd?fc;o.p>NTYfr&l1UD=L+uL>>Pb@?mHg:U41j3sk+MRrtPrGr+e.68RtO;eg9LGceF'%WAbX:0C+S?Z2,?$!d;"nc?8DDG/LAX"$0FhQZg(rI0O98.CZcpa_iau@&H?Qk?_8F?2?^.r=maq25J],@4e_4DXZ]ACe0:dlGouL%'p)(U=pZ/4rk)l=C#&J56%F?gF7BHW:J(S,-aSdLjlgQrW>HqnK?*^CV`JhA6\_PQE1u\lL8e*%+$".9'ch>\Z!^Aj5<L;]A6#dX%UWQ&HjZ'5&T7Ll-f9lg*]F;NpC+&pZc+YV%6k>m78)DW+03*s6^O\+@A)AQpB,DtmF-Bj60APg/b]N(0pD3;G\@tfnOULj!NIQdi%h!rcN*JIcT&:])D[kD]=2312uaEpC(;&]!T`4/#a5"^UQ&,-rKXDld20;*B5HDcm"(X!=FEAj@dR*2>4.5nkU3kq@7VOgNFLBp$V%T4U!Phgj]u5/tpG$]_TdAi?2%=bq!DWnDLAD[;b#2I0"94CL.=$RI<i0#DBe7Q-g0T-Z4NfnA%#I^sS"Ys":]e+jl9T%KV`ACLA9%dKR<c@Jjq&5LE)?rb5unq4V?`QRQOqq;p$Z95.S_FFM4YnaoR6S'F5:C>.?_ISGfC_Af(@kLW[XIcWQBFMSZ\AiAI%.2JFJ(Q2`9%B@HYsU\MjE:R"T:QV0gm];D#kkEegXps-%IZg%C.l([c"8'Rq&CVW!i%;94@Cc]=9\qiEia2k.L1MK2$/'#l2o+6NoSAom`9cuH*%D?0XmE9J@iB\@KYd2e%-]`fC*"1ZqRD?)CMa:iPPINk=u"6`C%=3OZ`i`"XfgAl/PD-]j(^:J:L@TrNVq$CZm;%0*r`3#;eFL%n<%RYri>_M8nU%rELR$;qI;eHM].F1Y]0-+'G?UdSGI1$KBtqlE<)KHR+N+YqmNTgW(U1Z*9A*RQh7NbCEO.#qr#?#qqr1fXBgmMI=,%>]_o&4CX,"$,>[Vma)$=\T?Y8)3m`OKst\"?Z\6TJGcR\o95J;)2=nnF#W/WoXj<>4:EOU20TY&*%M@NqO0M'gp^C@8"^Z1j"a!k%H`djUQ=o`5!#FpC6Bkkk;on&\L_Yg[^n4BQo@d>^o[lMaJ&7`Q7Ps`6b'8bbj2CqCF=$(r"UB%c^UGjW.kP'=),`tc]6\mDR.B%:%Po8F,@j^%<MD!sp$siI'8aK?hVA0P/D#S-;6]pa8M0TNn4i-,fq1YDm&:XX7@QT]4[B,Y/lmHIZ]XqI)>(Q?*KmOGBA?mRlL7;U]%@jT^[)VLT^qprgs-.]df,0l@gI;?"07qaH>/JKT"l`IGQNE(ec?%JfaBZD6lpV,8+)!^GG,@,sk7o6g@idn';hT1iL1/k?QQa(fn%bo7(p7S71s].%ZMMlN?G_I]d7M;*lLa:NJt:"u*6/HN5L8T1Z,QdQ%CX[V*F'0hb5/s)2/)+%,D_=edRL&`/QOhq&E<d)O>A;OUc%+q0?bLqaAYgi+)(hWi4#\Do@e-XVTo2r'C6;r6a66if7.9d?9O`VYt-ESH=s_d/LFHoa4A\aFh;\`7SO5R[VYV^Y;m3"qT611F^p%3"meYensRE^NUA2S+r:kUip6c.[c?[M7#(pF%+fNfUI"Np6AQIXSj1]keul-U>(NihsT[Uio7tK.6@l[[#^?fKV:7[ZAVLg>1gIp%=(!bHQl`l5q3>B&9`>o<O\&7%]@3P'QkhTP!\Xe:fX;=8$T.Pq,?up''%=_[H`U3bitAMa(jl"eqoZrsXB<Jm,UV81L:8PM87RNi%(]m<Is-Ld,0RAcFe'Nq%J[l4W^UH,?bAf,he-A9EiluG%f#Yhs\8c\@p=N;^C=bU8;f;>LO@M$#NpBUseuPcZfeCB]D"hJ5n6gGJ%5/r(r;S`.A%9.U:=jPJUY(0DDNo7RF53d^$h_"N"mG"6j#D^!1=6e+7.=0mq>KlKH`*YU*j]_?sVY(ZYO0<[)4Y%VCF3`jkHdK)_%\Pgnf4YbdSf;JKe[M`f(jF%j4He@H_F8rh(?eO?_]]BUe-2>Kj6osCP4luAijMnaQRi'eW:jG7=E:K=Y*]EQC@kFY.HItAsKaY%^%GA:;*h4&h0GVe=rJ[`AU5+Ia]o&1@:POO+8S!$G8HdhIX+Xm(\S"2Y@O<0":n:K*u0e9BS;Zauhm&p8t%d\;2OjRNgP45dFHf)JM%G_ZZXST]?]>H,D5;`d3F03rYQ0Wk;frRmWq`St2%_lolFgr&'F*Ec.,rH]mLSFD",J<K2u`HRW:`"\U]H&p?eHXnlR6`RIJk_@mk%`)L%#p;q0RqO@cGQ\]ONat75'$^C].;h0WKjArqWd&K?q\F][ILnRhbfiAjVgN^`ORACU@$-J>kQd/6c-gA?%;J9(ge=h">;J9'$%<n^I0k%`DI[#"ShL>:WYgs0B=Z*63i;9$(+>4c3)MHaVUQMV0[&>UMfdDJdiV[8/Y]K!$,Pe;RLr/$\mcgXXBDK4e01<bMo\;rZD%SLNYl?:X>6r3n3TE!nRI2H'@k[<F:kqhE!*)rU9d:3g_Y@u&Qe>o[MQ[3kF)iJi0RNi^.TCJD)7-Zs*3%\Pb(FA0Qic52Dm[?QI'%'fX!&Id$.1K1<f<Z^iK..uM[58XO7(>'o<XH,bJ7^tXBLjM=o1Nafci.M6sk%E.ga)1Ht"*>j\es4Go7n`d_f`p7"P/(C'VOa"\o%[h0:qr9Q>fSLLgB!@-HB0N*q]djXZF#gR:V$&KU^@?%lqH4:;5hr4%-N0Ob6QM3+43W1M*qQA_X2ri.if6b4r=_#j'V8[@(neN8G%VL7rsZ*C7@ap<5\kOQQ0/H"RL7#FFiV_\\!65%_$dY.e*6S8V*l'HCq!.C/tD[p1%HV!.-!QNA<j/fsLZ2at0o2#qT"TIHoDU]'"%/`UCC`m"OC]YuFX-6q?F(R-Eg0+0IO%U`8%9cuGc\l$dLo#K&XN10ndH]K.gqA,Y)G]Mo'lO-HMR)YtMJN'l/ohrL9]PnNhb"(?.%(i@MlFt''H7^g(r;SL59`2R"a7lWNq#/$p?b3'F^nMa^q(N<U0PV;.i]>&B\9DR?k2>V3oK$/J;pdCq_oCr*d%'8^+)p81e^QC=_%`k'dJLLT/<phhMG?GFUVD<'L=(S5b.NH[aPXLlU3%2Io0^Gt\:Rf$L,XjC;N89F\Bme$qu=l^gq-Fq_]ggKkG&<2%?+$\Q>>Q&s;%H62BY^[QIp4-OI.Hi69d[Q(hTnmFL;JAf%N076%W`+njirPELG)^2t:]ZWMZ>rdmkrVSG,fr]_kN1oe1oaAObDsXR4OkdgIDkJ$-%?GCG@MJ07Dh!5c*X5@UbnHJ(WO*2W&\G,j1>Oa%iNdDk?pKkW(<r@#.7_dP.r)UR7dPAhUIc7d4Kk<N/E3EVnHAWA[1#]fp_+0VI%qLEi/q-Li*J8=_)QmphV(EbiA>Q#np8rFO-cG#EX)Ya)^+*>%>s7l?b\YqZ5X5B<=n\rXt@''Rga#A;#"*^g'`:rf@1?'Oa3F^n3%(G"3_id:X@DtUG`RIjfMQJ:P7g5V5[(6KI$B?g`n%#oS:?hgaPP?[(d(p@&%HQV.$bL"]F]8pn$AJffqhrsh)NO+uF^:dtM?GDW*%iX<9Hce!4q`k?i=aVOfVIR0B_UYb;qOW9:-Y@"f-6[<M=Hi5q:I!4&8^9oER?GDWo?H9Y/c`\)Gc'n,c^6i-jW;H?::PQnj\2td\%cAY99Gm_+40BTmq,Ob;0%_^CG^]Qgl]mbDj:]=Z[SsZ;0lPH-Vk+.hFEh5U8olIka/l']Us1NmOrK_>YNHVL4poSuilmi/@f1i38%*AMjoia0B=__@5H1CZjhf.Yo5FJ&)_J$5IT.Ci[]r(]`$\^rK^O@.^/6"`(fp\KTa!tT%rNd%\!0?'GTJ^Ca!&ao<"fB.qJPZT:\%1![I]iQ?_tigf(9^L?6Ni6E3C09(G%Z%o.l,$n_.4C>5P]^M*eQl)8H'H25b8R$9W7soW1=N%+Z>%Gh5jmlSmo0a^8!_s)%Ff&HO%k\2tf<I8Nr]A9U\k"`(onLZC4h_.g@CsA28+j?k<>J<5%G#RWIbO_\:5VTV8YkOU/DSG5!f=/K<jc/s)gZ?W@HUfKNhf;'ZD08RO%*1W:I8uHq_m%0WG_VtLaUN$"ur$%Z<)R%#sO_hm:0)(je_H$'t=h#7D/`HP7F!,j;^!6n-.p%YGc_m0EiSibX=a3&qqnb#^AjQ37%PWA&Q]B*;,pS5(O*Jj+KmblL6oG7(E1^MD(R+]$Sg8sb6llDSA?s?t;]R*4%c)5JTkD](7+an[Aqec?*4ZtT2k)M7(X]g$X1$;?(%hJPq)96MdmC9[9.*<.3]6IXf^Q-7@X0\<6*m'Pf8+J*6pP$cr/@7'3eC:/#]E*#;.pB[o:!f47]!&4[b_QSrS`GYEpFd\4GOWGFA%Z?W^g+YW0fQ,5gQW'&\G$+hS*+2->4m0PRM;c\BP?fgBDj7ls%<?>)+PB\F=YOtD+c(C(ZBrni=@_am>lcO?ahlk6/o=&a-A(l^9%6[q;-\8eUG<c\Z#QuQ>&c'=5-B%J['llbq)CAD].(_^hKn^2Mp2)!Q[.n;OFWMQe$(hrZdY]uUCT.)@egmf%EMW/re=j;d_WlL\'%_c2sr:8KK^)=ZnM'.*\%b8,K>rZ^*C+nn0a-+2hpo:mrER;@n27A6*R5.rh>TZ5h4mI,>ZCDjl>>@5u;X8$hfqKf+$k[&'8jZpRc%HiGjTS@UB75<=S5r5&-r5=#YK9af?#I??\N8$KD3bWVoM'fYLb`DuIOOX?-b_VNbNrFeF9l@A9pP.)O'LsCVXR':[*aR*jt0c8g>%DK1@n_#'6shn/bgT_HSAW3RMgd*D!PoX"9MJ-Y6]9'g,/Du3cDEh"^5QWDOe8nN!k?[R0&c6@(YO@ZItl"elJJWM2;#^WJPDMhOE%7rC:#CYS_GAS7`;kNn'_MqP!IZe4k)jrRGf98fhXcGATllVq'ChH@m*f&c;Brct3&I9?W/S^sAC9*b?n$b"r34P<04550+l'Vr^]%b(cfs:SZM/Fi7n<%QBqj$Yo]`Y-Ilqc?RH<%-F#?]DALWitId&f/J%90>GT?D'*r&H+A?bD'm"s3$OTqopWQ(^/GN,8nUR$!Vi7]%4$NEBD*S!;j,rf)AWj+Oam/8TZ$_n[kN+9IhlUF\NPWnpHs2*)/%tN6b?M;X4)HPN;KmnJBHB#<XUk$&Z;K3Ana#41VcGEO;G1d9%f%7b.B"mk_Z=J(]XX)=VCWF&!^:h#JKb^(:^ZF;DmS@h8]p!m#g!H&;.N)37?/KP^gJ?@,Q'-G@BsVS6(ZjAn`bPMDgL/\QY'+HB%T7lV-_Fab.QH,I!X0T+I&%,=dR0?2@n_giUI(n.g$ZH!)VLI>^gpIH9ZO$2.2tCVCU\`?d)dtX&,?ncsi>R4FmrgUORtR,W<X,K=%DXc681.\tE2lXdV]8S$A#A`D[i&qX3gR"nYAnrp)g-5B7dLsKnl1Ze3\pqh=hGWSA45,&dl"STcUnC_`qLsji[L7[`aU#G+"rHN6%he&ZIEiX#+lO*mSZ6]M@nki-^hKH3Wp4BZUPPSF->eDH)jt#M@4M[R.qmki`5>+#N\[&Y;XBuN4j_t.-ABNZY`s5Qt42::$(%e5E%LSSKfD\GENUO6H@(bcA</-iuMqXn1bf6b4Al\-.>LOu0_*M<Bl&33=i>PQWSEaDN!_=<[E^."JF:=PbTQKdk>or_WEbHEkfjel@+%^<kSJa]K%S$P.<In+lO&WNjf'"%t8kQ?(N]T"cg+h[A_D#/%;<l&*s+]`HTNoVlE-i>1?JjXaNUm=JL10HrC(2D<3qTq6.g]%tW"%qkdXUo/7*B`fq1'MO.*Gn*;2p]K5l0DW4aOgVi%7oF'<u(f5CI^QZBO7ONb`2K(fr;lk3)HF3lj0sj,>q'OTd`S6'YJ'XRnTM=&h%9Vlf*RA'2]+>&$VFL5I3ipO^BJG.&.bW^_]^QpG7qoghZXs_a3WHB$=dBLD@%t:XS>2l],Y/6?*Y0aXrTQNOA/7u?Z>J/Qk+;Y(-%2fYpKS3&Bo^ir#11[OgK7!*&)9bd;*!ltf*UcQ%A2+5'1gNt-.M%rX$nGWHs]Wqq?!717+)7asT:i)5&VI)s[h9XhVhr5)/R.\#5%R_67b>TlXpYTn3W88k;QfgJYWN!Q$P`9Du"PQ[i>L$N>jMZhDMqV_@k+i95.#V1Ho?mLhXc8$8q"P)lQ(CA1-1Zs2'A$ju)5:)F[%^t?8j`VYA.",@#+5I3.a<usPul\0?\,6I.O_.$mPjP;#31_=prW1=n3n\G9hYO%N,cE61L<XN\qj$dW*7KY=[G8&Jp)5RXX"6?E/%]cQCM`*Eu+Wtn4FJU^lKc]VcIK=]T\Q8P@<XC7dOac;2[Q2D$^ifjb:.\&#?@ZaAqGeOSgh4\UG6fQ-+^)X0[Sh%jF0H$H8q'P*A%7##ZW9sNV'GT=@j0WkhUcL&%62U4L'@O^\]K&b$o(d#XF'#l\5'9"G/k[:S&](UoJE;3>`.pY7tDbOoXb:PL3'.T?&1]KBa6+N@F%(,Do/(m5DT/@:66*fJ5)M`d&[\)J4a8j:7)_bG)42V'R,*ZK/;5s4:f"6D6j(,7XdC8(:[bec[24h)G5njkr>,KHY!''%-E3-[=O%;@M4pNW[Um2FmOUjH/%s@N%73E-]A;Vid=ce]>\>%NElej`K:j<BNH2b6o-(.l`A]&FJP'?GT3\Jr+SSYM^Zi60.*O?GT3\K!7b*%knT`,-\sjuG[A3XI"M!L090+Q&t`PU*S2f$M,060qVl`'-h.KEO2^_u:>up\UuQb)-h.KidU'+"mRllk-i2J\MZl`ZjUJMZ>I6tI%g9J;02t-D2JfN'7dF4UGSTdIt09N^)7@%gU8B:s^<N'a9EdS,,Y/*GoHUBg%\)MAF&#aK->dB\BE=&!WQR1TiipK/Lo@*DRhD^!I%VqHEK_lNAKLMj'r)<)JI=+p9#S!=JL/DjYdrFmFf[BkHp7f2oWMb#%ZIG=.TjkO`(T1,IGD5/<a9-m\#<5=,oZH%1%9_8Qm-#51$%_HB/t=(VepHY8]@oB2HX,$fM$]g%)4hA.S6M_!JtHfhu#?FjM>bNl3&?J%5!&4GLNZb1>SS1?g'herlSrF"#69RZ=,T<3ca(i!)G%)QKLKTA978e``THRkN$0E[@u^aQ<.bnZ#m`<4\(/A`KtCWDaa`1tqoh=u)GZ..6OCC8k(re/QLEfD>]\K5B/UX'@>h6bCf2mP\*q%<BBu#=f;iQb?!B0Xm<Ho_QT`@I"%nj=Y>1WcJ7LSnok=qFFI$?/ljU6PoDitm1FPr4f%&gh?o0^"qmV6I,=gab+Ce$?GSs,hV<mP%e^X.qk$)SGpM2:EW=)k5gf?):Y>_LAW^,I)9@#CQD_jQ^n-*uSm!m<nXY6d#G9j$_^$p.R=>,r*9a1:%KsJ(p"43f]43pupa"Xl-%a31?k\QprQcKiHAhe'ug>n<dKm;eV@gk]+A[JQM29f!c9PonR8/>7=:BNr]+o8`?WO*gO7iX)Mun7V34'l.Fg0?`*O1Xs0V7j6/1%OPhRnprHOFpaeWhiH03TQ%&\bCTJdp7<rc\j-SjOJ(T$dQ48nRB0C5FMWlMO_$^5#9!"3]KZDl+l=KS?W?Z?m<p00`m0C](:fH.4%S>eQRA_n[2OEIqL0ucq-O$;/lZ5i%DR<C,X4h[a69)+YiA)bs)g1gG#R21)E'N$f]XZDd+*3`$>UO^WDl\FbPXbcA7$0:ak@VtRe%I'oEFh;+!T]lmU_c5g3'UG[!^bmA)]>H?ML?=l3XQWb3inqss`(A5taE';7JV"=:]WWS$Nh42!6bFDptIdPN&Q5D1\r2Rucp,85?%f"9YeQ#`DHJ(?EA8T8m9ZM=1f??-210>'s0AhRk<:k*['r!KY'pGUFYqOY*ZrnY:ZftLEI;6<Wr/'7WE\:5W%[T$S75$AhRVR$2@%=a1a$g8#%Ws*;A>3`u\iXcIkD<d6jOVUlc&kr/M:p3q7tegqU6\67J$YNK[kbOU)\nhPVY\q3s<>FRjG2u-).@+Vc,nYEjrq=7HS%=BL'8DVkhK=7%Y67=XI+T]NZGG!:9MmF$(Lm<b])Hm%inChGa,>^u`D^K6:/K<Mrc5'NU5/D]ulgl]^LSpqJYl-"CH<?LjkY?L(1%BC5;!OV1c2og+*e4&:<$h=3a!4obl\4q!*9Uq(/m&],\LnC'>o[7q/5=2$jor.?/1hK:p6`7k(Kk,A?f<om35Z8>;p96=nb2D<,u%Fp6c?g`f&q/IB6+HJcnG.]6[dKD`$A+j6#)X+`2%]d7Gq,L5AGdd$cd8A*1^kM1$A=RZ;@AhdER`o?sQK1.;&:p&gV"3"\=6mKq%%XGCdVll59mL%r/cX-(N*ffPQY15lVIq"d->=^3sl7_*QDC)J6LRlT6-W+=RFLu(;N.^WgA'sB`A9FDPl=_iDs43KUu7sNs6\[/P=%Ik=`OIEpgR38<[-.LW)iiUrIk2:2oUR6N0tQ-0?B?LG1e+/S.m#GSq=X.GXNhnI5SXm$X6_fAP#6Ecr(+QH_tN(EU,B'tYLTa6Vq%291_(#V<(tQd4sX^$bI\$/tTs16")c:$hm^ah!sdh7@o;.L.$a+`'(7KMX(8S<TS.)Q@p=gr."Y`8:D5+)h?`[Vb?'J\?(TTl1%d%E,QUYAK=m5^_1AZ%.(]KnV-/_?+T%3fY6qsVK:p+m%*XN:>[VE:Lg\Z"s#k_"s6!jU\<oHVaT6[#g"EK3I&Pb[Oj3H,go?[?2;Sh%!]^n$Lk'DdJ$=df^6%9>o&YtkJL:J<oN3BK@jJ;VW&tYGr#gRseW"'.!r9PV)Vbq#cWSG)5-A^\,=k$_E:Q/Am0k=%LS\(Gg/R^9%@3UcOC#Yj-fL3ri@!_#!fM1#-'o&dpFs7LM`/h).EPPh9$(H2)`E:^`1bbj7&rf![%^,s]/]VD%<[o_'3i@O8q/kF6BlsrgmF,:Z%;UiHEH4rM,-^?B`Nr_QsmVJCWFZg0nVh'4/G@=3&HBGP=1rhJX?2WuthbJRq3[%Fm^(:,[^sg*O9ls:\V"@sNNX^'`S["ZorEr>*%HUkP&="sL^LNdVrCk^$X4]g_EmGhh!*X`q;mF,`H#C4PJ7)R1l,P(ZtX-Z-=e%jTdrq:aK#''7eD0mtq0Y4tr-]oHY(k\52EH$0h%DK[pQ[7S%RXGPHDp$2dB_p_PgeDW6)(aYal?^'D5U9e/RA?)R%?8tHZo@'AcG\ZtC(L4*I^'<V4jA0Q,g>?5V?('i7K5L7)$t:r3%qu$cFI8uj8pd#oI$_+W*m=Tm60'cO7']_ap^H*F=]`mRtL2OM/9>&3O`%VtZ'X(=T4P_4uZWZRB[k$U.F'd_;r[c]k=XCtV#.f#h%glW]T1>-C"c3edZ\$1:jAO#*3]DSALeff8"aEPD27N@kTXClPl\?jC"qJgu6h$Q5]Hm%mo#M<J1nhf^)#j>)eVM?#!h(+=M+S069%Vo<3uZ9mCnK9;Y$qlBG)F0K1llqS(tU_%We"2&r+/tbK`_QQ"L]qN]ngR%</PmB(1?*o$3qd_%?h<1]F-X#SK?Z/%X4r7S6b"8:<%bSj__Xg=@kNHsD3_7&C5k;h+",!Co$Y6=8Ui+d>8R(o(ss&FHs%mKTOq=]"FAU8#^L&7\ObMcO7Bf`t'R@OQQoD<XN=J[LskHhCl%GWI5/m1m91A!)5?c<M%7oa5t/XlUmm$?u%^"t/;kQu;iO`q-ZW?8k[.eBQUV:OV:W9.queGHH".J6,P`pZf]AB:n@(l)!S?\JtE]%#q4q"i$7[,$]fdVmJ(8+=aYKPJ*u`@ST2qhj)[ZS(#DRkY<*]X9"Iui?i8l&o9!Op7(Q83]DBh)cUp(Q>Yl=QS#Oqa-.?"cae([8%PRFPXlYD0dkXQU,%mNj=pcQ7-\^7n>]Vu.pHU@3RhtXR2n3%riM=f[<K^T5`k=u,W)2(4r(*#7=s8Qm]5Z6OVhIF*%k7@4ukqkXX%)Z@K"(/Q(\NL+8SYkk9F9o)C;?\&1O>;qb?A0`I$KeFoB&"aIP;DosV-4ejfoOBN2m?a9LI^@M+G5ii>&9Mu8GdUmNXsIf87ju!@%bQ'Q<,F!pQMg1E[#T,`PKOc-QDZ5h:OT.Z<"FaYiJqXCkq?(*=_1srLr?nQiO-96%Kk)3>SL7B*bDMH*-7(7E.T5hi5t!l:C:]R-%AKtt=ZB5iTXCR2[<ALn8"s9r8`Is7/9[a1c-8[k9WiGF8J-n>$[p-5R>C@8#2F'3SXJ-W[!eZkC7@(<Vh5"q'=^<_EG+\JPBZ.p6%#!jatl8H^$SC9(qTm[`4BQBJb:0]*hA7dQAo:>b(!hDb_b\ElO-$;Mt$Atb`"W`tDkQleF'O="dkQc-C*r<6uI1ODXMR&`enX6DV%X="sa(j:0n-SWpiB%K3<C!Srf!K7O;U(AZoSE>kc:QEUi=V-b87=b<TGE-cc,GZ^hKlN[\_48)l54*V-EfiYMboniuL4M5X%X^N:%bsS,SL5GD_OFXY?6'IK>E3Q:1\4e/Na;UqI<$WcjCPi<2-"otQ2:E"5Za(ou<=u*@,sbJcjije9R(-R.<`?76;9gYG.9h3;.L6e+%9EKZ3<.J[._]U'E[9soU@Zm<?,gc]m?qDhc<1oahK%tC_]G,#[SKpYK)PTQ\OTf#Y\gT>@#`H`S8W&m8FTWdZeqE3K"M0bZ[0-^h%Z=*%_:e&UmL'f^]JIiDY=?pM^L.)*8(m74c6"s&W#g<:[,,u%u!WnPGL.PNN7h#$k.14_=S/"EmqZC;cP0>'$]E7,W<5'&o:^rC@%,acA,^CuF&THdeE]`_^CdNO]S1FN\A=XMeEWi5suL&mHmFJqj$a<8j'$:>IaY)nNG7cjs<=>P2P#ZOV7WtpDG>#lCRm%8i.kX>Wu%<KSJa&4IB]!\mYO,S3h,U!ol\Qj>HoU+VP9'Jld5)^%gSFY/F]&-Ob>kd$%e5s_R8A<(4%Lk4()6(k51:@Rht+5e>JeOXBck6`)Y%M2_/E_pkc%WjKKJW$[):,-4fj,-54*6*,M=Z>?%/p@L`<Jg,F^_!ARiR=GN.@@1Tl5X(B`<!@Sc&[XBc/-Q,U#bpE'We6V">nCd2%2&I_R,qAD:Y-9eY_*H'k\j<5i#<"G6Ii,YB]rdDs#sc(f?m2#>XBBsR0Gkal;?[Od'O26C#^$eOU&o0?A-X'*li?6b7*7NdFHB'^%3']jBXRHe%]3<&T"%fC9\X%b9%FH:0;,A)0X#W^2Kt+Bi%=(I!Um3c=*i@!jnUlV5j9Yn1G"KTn;e.X+<KInRN"I#Q%8F3?i%Rh+%@:O!=\iqg<HsIVA+[8MrF:HCIRLWp7!d%@;)$K/sBcoN[P:m*P%76&W#nVk?Ih489V5mHL'uCea;c*^u3b/mb+s"g\`ZTa:KhTCG%q,0,q?l^bLi.:qaRQpucUF\?=+Uc;L5DZ).GFhtZI4Kq,2,F;bM._Furr<m,,pH_cC7$"gAC-[?/opoA'EFP1M.Qhb"/S8]CPKrt%!pM'O<.9]C=QU#9U5hSqb^j.+<TjT*dT)LR)9%h_d[d2U3ePof;D9f='OVE79(f&,J?\fC7VJO\ai(TGl;+\I5r.\45a=kKnqUTV%lJ5GI>EUk!X#PV1j=ps92@)jHBX.qu5RjLf6nJKl+k!WgG&\W^Js*(,Qubk/c-1*n3uPD]@T!QVVQ,gD!p!A1;Q_K?<!E@A9/*G3%>TkH>A<=7"Y)E95j;:ls$-_YL%u.,M2Ct4F)mh6VAf:4[RbpNLC7qREqCkN=`SJbbLg">V1=[$t!msike6t$ZWGA.;AX&mu3a)&$%D8Uo)AMl$@Bj<*K%PU;NjUFN+3JcK3eoP5b^;cI(+AnCHR^0g'B1&=5+9go)aHpoOK0gqG4LgiVQa$eR(Y>U&&=Q\3JCjt%R(NhQ%=Qg_)Oat-;/k^R8%4*]F8'uG`i.gTK/EtKL!R(j_YlRc'dL#Ej7?a!V"p(hC+EN9,ASYp]K.Wm4d)"tPWfZak0Ief!YgRV;6U39?%8d#D<@mmDLh(@k>]R^'54.9%I'1El`5U:015SPIa5RbV8(PXB#1$^O*JjcMCOVKDNAs5iG3<MA*!KMHA_$DDu2$L@d6tM0"WWkaf%f6*KIYTBqQe`9>:#&VkppV89$lAA#QfO.N.7VbTR9UnI:.RhsfNG05]8Os#JKM"X4"rU0,V/cQ(5lrL;nmtY5BpP%eiPS"o'hu"?%Cr(WN^tMLl6\[4N4@HCj#UGomW<@4J9o-#2kro=qMBL)ap.W=X%Kn]NL2#8G?pH+o":1]#:$$2;*#phgR8$JSJZ]3T'Wa?J=T0GC%5]$?FK`FW,F9k6!oh!eif]";KAZL*\!'/+B14PaKR_gMm(`"C2Tc(s\[RQ"<%B-6F\r56e(hIjmQD\O;*4$TI25_G#)drATVT:JR%5Qk$93G&L%OmS+X%@CHr1-&Ao@!Y895qQ,M!64:4B!XNT,V$+>0ejdWg0&X)\ficI[MB#4]"scs=C'Nu8lQV-6RbSN`Y;p*BM5d.%1WnuJ.&,Z<)^D%EbK.#8h11M2<T-Te?GWkuT/&K\0P4rOS$`^\H\i(?JZ7'Cfu<>>n>N:!*4P6I\0r99m0pkAS\],[f?q**%??KX%I(J7m_;\/(hFm$)JISL?.aRJddT2H8gl;IN%A&W#$8k+iEB=Sk8f1UOiE2T(L\R<W44$lV?V/p=><jIhNm7h8jdI<D8OOpAfpkT-%*eqB7i*E65_SDn4E>A!)FP)R^cTFmpHWJgQL./p(0OPUtOlp++5:W`]J-"b3@cP>DRPM$3^)3$`E.af>;fH4Tk.<+;1!IPJ'Hi,>%CkOW4k;rEH0LYsD6P.?:TT]\A#="SkCu4mP?3#NN^e3-Wg$6P-R5tg`(+eS[cs8/"#k_][&@?+Z=q*6&:+8#:OYm=%.F?i]dN>lM%/Jos,S5.WJZDKt"1Wc08mo[[taXY03[TaUf)rW^nN"#g3D22F>4:JnY`&1!W$jN^:*0$b-DA]-+=Pn5rq8*,)<KQ$ZLLE16U8`EG%YeU]E+:'\q138WO!Hp+a(ci5>0@2tYn>.C<8OXmVJQPsS4cZ6RPf$5,^nDs7-j\7?(IpLh@E9R@#`/sU2#'rad6Le86ukS4D:'An%6Wn<VlL7l8GJ3T8c$\#NMG.'E.>hZe(lWIF.V/e&(BVJ+U`J/#FHe1#fkQ&BNc]ldWsl;(lpecqAWRh`ZcI`mF/9RI8WkKbQAFA=%6*/qISc`I^_;:$i,<m%9)\J9hXKFc]";4><[@`U6[ZjL%!/dLjO?[8W7.hZQAJ#Jd6W/aYmj0bm119TbMPQB./##FfYN*o11J(/I%FW;$X#K-d)]4g+.`/SV$r_Rr9Oq#-iArA0]18BuK+L"A!A89aX0N]ke)Ec@Zd@nYP3]3%n58::2KGr:5DX(IU^mul-,&e-ZhfOe]%c64_S'mKG.`;Z#qKCZ[TMUVd\:%fStK/TJKnR]4rkQ5?-h!ksm2?uU[N4(i*,TCjJ,]m`3HQU51"/um<_n:e1WM.EW]72Z1d,R^E%6K\JHREjAIJYBmfArK#H",'X!#Y7fhh:<(UJuKl9E1a!P4/,/S'"=3&N"G!65_q&>9qm1eb*5?9<p%a<;aEIT@A%@0>[dokdfs@q%YQGSK4/hKr[=^`b86c`l$7a5p):7HoHq-P)VoA_AfaeB,@(T#GVP#CQH/]hW:_>.BV'7BEK34ErY(*U=6F@NlcnI<uK%Nr2_-i5,%(eb"$Of&YBHMe>K&M?#(+&!#mD2?`,7V2rR&AZdXPATmo(8$WK!?tFe!YMVmFCUsW&qQiZAWb^3\@\(:Sf,0l@ikapXfYTWmW4qd%+q,es*u.+u<tu<JD%fa-,aCZ/^QM1>OAj;iIU^^i49YLZWP3"!NHT\?Qs;G/qg^DD4G%<F],Dt*@92/Y]!++>eOU12a71qc^sI0a%V&F6<@&-%E73\$%E10PaaFYNeMQRNhaC%];)aG"SUS)E?iBCNpj'Y%F_&PlQ+M(8[CkW62;Zo2e6(ToT\noIgLjVIY;"PV>dAWp;%]h`/Mk[aNt0HuqhKe>s.Img-,>(VOra;d`&JS(*8c4!f(&Bt8n80fQq('(8O`,T3;#,3&d%\S\?nZA5sDns7#'=:K%Z6%i*UFOd8%4ocT4e=P#%6#ltX)m!DP+*>Z(p5I+$S:W0bSNo>R;H)@*8?a)$mG+]dXW*_M+;@[U&.Ad'#])0Y+d+qT4>ol+TRIH*WV(,G%LL?5%L_U-b<[KV`B:GbeBnPu<8ref\!"L#t#):6b&ZFqZYZ;I\)K#[mhXbp;7ZmeX"#MC0Tn-kDU4s!fP`Pu/jC"uqTB(fQUh#&XmL.K<%.Z(A^.M%mc*i@uc8CeUd31-:&CT%[3m#"(os-n6]>t],j4>p9F'H[(fn/Z>#a$e4S"?`:\ab2PAGiOD]+a%p4aeF>6<?REO@5'`X%6RiBjTj^%O%q>`.^B%M6^+`"f$!4P:)c;)%L*7rt<.$s^^^c.?8e*=*2F9[q^a>1;'$A$ukk[`e9gTB;M=9@QiP+0q1^9p*^f%"H%.W/2o`f0u,nt]Cnefqp>#&7lX`iq]U/qtndj%?1F25q>-9d'U!dm]u?"NBkcERU`bUT(ghL^d!#?@Tp9`XNZM%JO)@+FC7.)Eo9%%IGSt,kp*V>c3kI4_!j=.)l-p#(N9?UA3BA/?lUqh`rJC58MUU**.u)g_:jO<V\&^?p77`'!^9"gC)Ye^!Zmb5C./44?%D&t#h\!g%-Be]>#/`5V&3ea0+^<E2WaN)&B]Xfh@h>RD$<+lQI9+Lt>UQ<nQ(6Z]0SSnn:1]"lC13boKes"2XFqT4Q=tFaIpb6$3*f@k;D;dg%*c^/sTJ:235sWb0L16:"_DKG#KIt:i&VatN+;rO<d5AMlE(aO_G`jj0"Gq@_N2'6(L]Zh?bFio&@\md\!_l*OBguLALA[pqo4?RZ%U5o^*$EOjD,BJs=,g_,QUderhP9ki7,uC;7WKpTuc`(?^Mp#.tduF#g3d+6*G&TG4@",,E[1!aSn@B>GL,DP$BT]8^cr0q)(u5du%`l^:-$(D363]Y-^ABu\I=Z*W54ua*X?bh.6EWj9%`g.)QLnZ!,=b>kee'Jm&LY3Dtn05<*$pYEf6F6@iGh@oA<RHdX#*Z$@)d=32%'7't)h%<dcI<EJ:isXo48ht;[7"6%4%Ld.e%@=k![uZ&ElG1aKJa;3"T?_WhiKC,mK0hEL$5jcVDsKr[q"#K,4uaC7!O.k>RBf&9%)pqK/K]^@8kQ>m@IumA+M=0A-6q\"#*;C:XDhSF#/eDh&";F<@Rp+u;U'lK(2VF([L/t,4T$ee3CkGrU>kk&^daV9`.Nj:i&iES&%!-Nk&;NeG-oS##!n>&Ci6['Rui3#A/M<H^&GMn'm_lsaH!V$7j5VJ8u2Q(L2bgn`\Xp:c5X`+s_8Ap,k:>nI%(rKqS$:g6#k"]Cn%8!-Y.),/pI!2aWNaPpga0Rt4lFf%YC'(96H=-g9lE3,e2EM_#.7\hN_2HWRN853=Ci:(i_Xt;M_XclI<Vee'6<lBD!.g6"ZH)WT2%_a,8R_dKpY_6@&$_K(m#K&LXB/of$gTICHFD(-Dm7?so/>seUj2OUR2O=>4=#4+s@1Z\1cK"bjAi"Z^H'%sCk65XhqU1UeJ%E<S=%Q0@EL@+Qr8mZ*aPM)%e2A82=(:ZRMK'X<-#Gf\BnJt`RLJsC>cdaBqhHqLjGWbrt4+\`(P\*Uma>R0;J7#ZZ6%S>jcLj]j>70[B,%@)ns+@0oeM$3<Q$$B]BZOXLC?5VV7"-PEI?0Ph@*NJLne!G94[KT(o&eO-KO!)/V7S\PYUW<6V8FWu>I'!7*(*ArHT]L"NU%KnIa%0d7@S^e-W*6>Zk]%$Q_`'d\c0#Au$P<!bjRC_9%Pi#(6t&\5dBKiTar:%D6eAOF*s>Ue_t'I>Fp,&PGV@*FM.ds<n\#_C8]gg7"F%fnU_qO9emS$\WsFU_O)::]t1rJOCW*bDP?\E3kCU/$bIH"p5>DghT54+Q,X/Jl\R3pS^!/@>+FiR]-%6n46b0@<PaOLR&!L(qkou%!Q<1"QspLlg<e^>0ZEuLf`ZZaMG0ZD:[p7JUcl)XP>qXL\041?#ZL9[%Jh>_5D8U35XZVp`5E3rR50GkW[87m+D*[8%L`li_+KDZ%k]90e71T+/Hp\m0CYaQkaG*gEX>OUTJpiQ5)b1kZC0aXgYi-r])><$?8DJu6).5#05[s7P_qp'aUhP'?+Q=QT819;7+.*oJ31sL1%!FShe%@#iZ@?@lSq\V]<!#Qr!&;R:o7d)DOSINP0KoInQc+oDkKG_X7.Uoml;7Rr=Sk_*N=Z)<q(pep)/L'OtJ9D2qBY"6Md;XC<%QT?f<5"J3o&rg>H'eZ42Pn9L&")S=pj1aM8)5]\'Ob"Q,S4aI-jX:fON#p%8-!Ms`F:[Y<ZJ5sulf72J?5/hD,*FqkL^#nlFK_[T%c61b&RTO6HYu6r06"Ud+ilMmR&7QtbdTJ7t+X"Fl&=X[@U>;B0c)Ce95qem!jeY^1+-L#.NU=O.M]i?e*B#o7iufbM1u&$r@;MW0%j>;pRG9<3J;M!eYJ``+M$lI<gM,OdRLl@1^,SL%>5\e6:A!jcOA#0<s[RE`<-T<"J#)bYSXCoF1Tjjbie.mHM-t^l64A^3,?Ppe#%&HBC2gliL@$(/\#Hsp^P1<L*ST?IY0$H/)p..IRlO:3(,'I3mH#Zk3+7'q_'jb>aN0SY)\755'8<DmPZLG+UU-G-9"Le:s+?mqS_%$#IOY2e5R<_0.AdUEL[+#>ueW7c[g+PsRi2;5pSE9j-R#9]'kE1mCZR1TG)Q-]==9e4k[nQPEh&K9?5^A!fqc,=E57R;$'Q:m"aN%,?]=2]i2k%bY"R#L5O:(dgX+c1kRdq&(=WO$B6-`Bke,iWG9Y?+ec*J)CDC]gWERIR&9pN>Na/e%`-TgAE@eB7o_>^_[2lP\ds>O%%CC4+6@LUm:".l(;e'R2_pVH3_fJ9<.tC+nPK^[Q8g[-5^^MCA#hZ@K%OMk.6;oM<WdZ)8*YLr9lIK,N9^6_10NM+RB]uu[N'i7<%`Y3ph#8=$Ik$]G@=%q,\hu\k.6O:b!FN_KU'6'"F6dT`td;0/mP_;4-Wo[e0Z]8F#:JOMBVU-%r.$!?mSOQL7F=S>9,DfQTm5gFj%irbj@3]`fl'1L?N+@!#n79450(O6!3GZ=U[iJAhO>Wc"6)`V_]dH@B2>1B7=%HFF+fCahX'9!,1*b"UQb[@M%^1/$j[!c@&.VMcn%[urD'9s=_@-5\m"R+]KV%b7sp9q=G`BFMs#cNY5fMBNRJJdpNkXOmZNV4efjCP#FZPC9Ph_'E2bi$Xm3VOQu[#4kL:?)8OP3]"u&%Cl4![PK^:G`>YF8LQ+>TCiNirW2[^.N#Qu/8oteh8L8Jti*!brW?l(;#K=#6#:AKiV1B+Z]-RZdqnm_<9Jksf6mgk=SEZ$hd1VBJ%VNlPN'sd?F%I*s5*h@B%:,8eCR3+?mdk/7EU;rM@17/oDiF)h'`0[N49JT[?Tb/fngefa?O?jjK3#E\YUMCd]_Sg)>#m^TE_E5ZD%!*ILAXqCuZTkuYD4?2N"(NU[@Ofg9V&H4rs5Y4k9ZTgs9+__W7UGeE00X5@J8<&;'$C[i2V.bmK6>TOoEC96>=ePG((t2(ok":o<%+&&sqS6Rb-Cf)le=#CH1,Xir=+A\$bCe0Q(]opVA<sjWiDQ>LE&?Ts_@V*Dc4WDD7-#fH/+df$aYq"G'qLUD!9dKfbQr#/5RYuPY%#dKL(6BVG+-]K*C-o-e7,Otq4RQcO_?aF9-!MSgb75#]sHP/od+IFf6e#7-gPB!d%@kd0CP,+5a-p19J6,tmVQ>hDV9bmt$H]3V,%Wn)0XA;0G%$B5+m!AuVH#r?@")%;t3gF3OW`F0?5B[&S,RD`5QX-oDK6TGUE$&/"/n19MDd#hgD=gG>r'O5dl_&tSCd_qd\<XN=l%'nKQU)EL)"7+,cnHS*(MTKe&ikoH/!)+OZ5==']/KIh^(7=G-C<DAsg8tgj1OeVtPXL(9LVG<W#SH23Q?n`p-+iqTZC<_V]Rke>C%Z$%Q+<t)?o,8QD(-FK796WX2)?WXOC8TGfcT`1W<F!Qkc>=KY[JcZ&h+<>P?)Gc?dJ1=G6&gd2-/'Z;Uh;:!!%&U,d7E-Ai^6kB9%WGkfQL<jb4l4Ro@3sYs6+n]-X9MP$%M:V8He-YUNXp65$`"1kp$q)!JaQ^>J!cc\<?u)R3ntrl_2"[J#&\kd@Ms2&uja*fMHjgMV%Di+X71qBpQ@uu7/><W6%G\Yp\>fU4pE==moc4QEXZs@$HknjiQNknA;gZP/h5r?;mpW"D8+1(*>&8%NjnhCtP*.s9JAp"7DfDZ\H%1QTAdG7):l`A'>q\R!6138b?%nhKnrC$m"#(hgWSTn!!afQEeP(+XT,pTbj5FL#.MBhqVqk1l<'EoQ8VfS^^ol'd<,CkkNi)!90=%8gYFGKWhU:B)^PO(oDKn<_6</G;6dddFc@.n<>$ZV:oYa=Cdb[$2TN-jC>MkTB?gYdf>E4]EKGF_Q2scmC7hi,;?Q,8$QpVKG8YI%pGGFW9NCt]YtJWaa2.;CKkSS+BYrQkIQ*+A%^Xk`Wt\hhEIohI;aTd?a\(1uPe<mWb[[!kR3C`[S+pK`SJK]e$_A2ORA:CUQ@\0`%fKiqU4R^J@2S.4]%!JSOhu+>j.r@nC_^4+*`T>aT#b/2_iYrbNIk9$8>?hJ<2t&U/lr\$6f])tYr*&'tRRE0O<%<%T2)%o[oR;H1%&kIg%#r=:=2&3W(0<(^PfD\oFa<e(L--4#dKUEZDZeeQ7M\rZ81))4V&6]18nb4fXS-1-nY[`Fpp6%eiB$rO_3<Y(+ZDG&NJr9E=%-OBmI-OWP06XWpEJlm^<6GjaZM'7G'(m6Qh6NXU;&V)<.9alTlQB$en$q[:](]n3FMuj3WQ$1E@J3gM%e^u%"?j=b@WNO%0=;?li%B:V+(S@Ru-&jobE9dgCeB=GV"&46L*0dL0[L>]tiR=u2UMa?pn63n,cAsX'l&/RY7>N:)3$pm\5I-cfa.$nJ@=390,T*_7t!G;BH%4fu@`dcPqW9>2"rqr!_G"2jL!"iChSm0m0ql#DcbWZd+jd6Kct+>W,HT#s;+9@!aE-P5JIC#MfhP67E.;iQ[7;/88q\\4gTGq!\)%Wop@"(t[?`Kf\J"i'Tf!LSPUk//1_HgR$R@=Z&_sF>48r<PmannBKYToiQdAVEcUu0]QrmF]O&FSJ@7X*.)@o)MH`uc`FHfUFm4g%Q\+dWeBh?l?/(Z^b!<I?PKF6I46N$-$%-Z`4Xm>VVJS9XK;iTh5L%<s9DPeEPuU.UAbA0R+(j>q6#PFFjRi8V6d86<\:qU$enHf^%d>\,!,rX]kE\oSin(5F'NTK%5*WN=Igm7Wff,4/X[G>>sUi&p#J$;h0%9h=uS"[Mn'.uZo!10os;lQhlm=b1R)iACbO/;I'9W<O%%(sNMZmqMrqb@J]_#Hm$>!KjC&+[=5li]'l9R$VFg!Z1)<T4a4+$Kq20S\P-9??Q.E3HYb%)DKS]7a-G@1:eMBjE'a%+?)=l0VCEu%+TM]Yhbd;pp,s:QL!9^<pk,Z,".U<YRNF&=p'";cNaN9n\GW(c[sWcUB^FWJqmYuS['lRhH.VZ'bi$)(78UA:ka<2<=bnWq#Nd:(%*M@Wo5h^?[^uue0o\?]CVP6\l#4-UD7>&i.FkdO2`lhM*U"/S0kHT6so%P&AGr61T!^"HQD+&p`%aq>)%oY7OdVC$EX9E)c@LO9e%0p\LkfTpQO?B>%+ThcPV9l+bQ@AKp%JnQ*XZ3V<D"^p6TYQ40V2J)I3&Lpmd;s]>\i,Of#d.NX<ahi"eC^clhY9.j7BjY<EQrq+O%_!VDfWr0_X>\-iKV)V>fQj1NX8!FT6:INpXYVonfJ."O$e8jKCgi\JX18/8kN*=*0&[gV#L.e)@Hk8g!9-DCSUYlKKgfLNj,gJI$%oh,Y+-@-cFeZiW\6-"n(>m/4@6+2=`$uO%rge^5&YWuTPa:5*C\SGXK.\p)^/W^p2l*YR[H`:dk7b?prn>/b`*'Fuo&D3tt6(6mI%6jnZO6hVC6(&co'D\1XUf`iEG$L('1aFSq?hG6,Y_ng\==4][b(Hhcf3Ug]X(g\Li:GJM(OBCFB'<[a;G8gW@[AC<:lDgKk+Zg0I%9I]4&;"oDj=T7_r`#kIf(`hhe,93bUXBQNql\@nV%3e<i"DW'!\M:+=0sR]W&`&93YlHh[n+8,_CeGKMl=:17er/g=>jKR'j4Zh6%RsbL,[SMG_90LK,/8`Gjq@oQ$j^O*/\jALMR5%Xdi4"#aK#$>54N8[5d\sR()_#,aK1Hf4Y,tPDM+'jn1rY+)h@`j':6B:Ck+LAi%-3XB:DJuLO?HO5T2*H,D6OW#IjMpU3gCk65DjZiE_%hVE+P9$4IG,<c0Z:9cjtL8sTqH"[B3%`),7u,Anp:o*7Ycm^>"s]3I+^D0%BEi-m#X,e;O>U&H6_Wh9&OGOjg!D5XP>,,o47'P7g*o5ld`?RL)c(L/>55KMBI]N1EHFXK+UPTp4V1A;Ls<N,E?(nK;j'(3P@n!a%.@=sc>q1dC=U2BJZDpY,XG0sr;r?\I)l;aiF6_E6k:'2q9,-ib0?-WAoXiiM`=q$[,b(oQca3I-pJ+q=opq[!R.#*Z4U3i".`X8k%\&6f)LZ'OSSJf7)goJ\`@Ft=gMmPDsO8te[V^;A+$f'g:Kp.K@MduJ)Knb!Sr*W5i!>je'Bep/=MVB6sn?kO-e=!3e08W.DS84f=%e<[rjK610WKYaYkA58=i"un7RRYJ=u7hdr%d-rFeG-FUti).0r<WW7%@,Vjf=?=AkQ,2e\"U7KL.6cY)?q\"!!=gKPT/u%',P*p=%jZEW"2U\kV>RLI?`F]Q&%LK*YAA5_\QJ0;jo\Nqa*7d$m;2>[.!Fb.I)#H[:Vg'0]'.GLT;bb/U<StMR:E!"jGiD?pXW[D7BA0^`%3QL&TJPug.6=e4K9_mf*hAeib*W1GF,jVV&$Z;,H%O&HZ,B=VU/8jF^,^V<3YR_&A':0hh8uU9Z6nU"eTWI@RWoEr-n5Y$/ofbmi%]in0>)%5kqZkV#G5gaFf6qO7XBHY\/Hmm,L''GC=)]_OA:`#td[(Dlt)K,8%^nIXlk2INmdT:8mSTAVhD.f.1%nMCm0O--,1]an_%2c6NVkZ&2"<!UdkTo,<ZbRif*5KHU'T49nPChLqFi$Q17V=M9Dr4'\t5l8flekUuMeCaJJ!F\5+HO+MYKUhU+;bMcqC%@fn4`D$E%W=q@mbta4>a-a.GN3B2IBQQ@W"F<:X/31(l)?.kC3-%A.]AlC)BNW&M!P)fM]\m)5(LTMs%_:MfTF#'$g2-g>Pb"'6@8B@CA\iO7%Z>FV*WZpFk;pI\\UUD5F<XQoQ2=6si"E6LJjW@hR792J!<<R.q]LNXB<8_-$";^\ilG5c.ltJ?1#bVr2,p\-U;B7r(:ZKAi4TsR)%h<?D?KUE1Bdd;-Paq/O7*S[,;UmC+ek(Q?M<mFZA+T=h@D!=8WB3)M6ZGYl#!(q/m1hrMm039T@psOjYGL,Z9BJ$$We8L+9'2jaZ%@]naIG(_3<17l7i>`)e/8J@8KkdP%pK7TK$ra!^0qX(9o;#ISU<6?+#'g6ZaSIt)_+[KWP<RO4rTnPuI'r^j\X=t7&Z[jI#"iqd[%+1=dAVMK?8QQV+=$;:^fco0;/3JO$'Md`j,]SN'>"i`K"X!1u\hnHsHZ<qOX($n"!a0MK`2O:5mV&;[^Wh(5cTP^S86sdril5F6Z%iPX<%+,dU;PA9D>@?^%(K<;Y:IiVp,dT6YHB0/V>Qq,D@e6M:#>nAl!];m:^8tSE,KS4K]=/)Q*/tu:93('l]6Sp$`:e@Lr2bd!*%$)tM+s7E&3+3pOdM0^[(0o(.9+o8<+?,"l#!a_elG["Z76&_DX\3=N,Z$n1l+g3W@dX#A_K&[T1=4@$-.kIm.@GK&2_U-f6H:E,>%]9=#_eRp?[U/VQO>%3PFkA)X&&SiqD^Xh%VmFPN)YRaR(PL^T;05tDpV*HkK)E=iR8(&:`CooFqa]B#*75g`YZ,U166,7W-MVbEl%(.bO3V`r->'<b7s],b'6%>ih3\tS&f6:4YbZ_i"aUf)9Ib>q>g`7aOFhcXK\h.O<YVT"tc4,Xg+gIS/A_u7`(ls+eV<#I?1[f]iY%f(CAf)b/UPhMu\jJQiq!\krg)*ZH\5lcoh_qX'YW2..S[InSQddI4TO^rnY1]2G]k?IMjQJhu['q*NLfPMf%'Ve_d\2+!e+CR`-X%2+CJ%3tT!cJ5"Ke_V/M\8V5*j*W9k*_)2GZhGgLGA*L"*0P%RdKs@\I_8/S%<)PT;YDmJVV.p3Q<]uUP).Pp(\"m^b2&78"Nfghg%CO:lc$#r[\_TkSIGDZa]29k1^hQrdk]O]g!8`D+u+$6u="si&H-1guV29ZF^oePc1\"m<l8FJ^0=O^SFeN67C[p`L/g1<r%=dbIs%)=qNF$\-g'/lG!IHC8<,a%4?`OuQ@T$M?1:K1'CP<0uQWWL":&eB8.RoeLeIq$:*fjlaTWhh#^&>WSjN*D<En[PMg%]u6(Gj1.AM%Ci$T^W18&(El(L#N8GZpD:9K6*MPJ7fre\:B,>VuV,B`8rMV.Vf.SMq[)/dhdi@CpH_D1kouj=7X&QHReb%?UN\,kT9M%N%eCA8X%3``R%&:4qHMemPs[-=JATruG>kXjiY^;4`@C]t-'T/($=Tt5s>QGBo5*%rIU,KX$*T`aAZQ6i1t4VTMg>&=4[fJ-&&?=e(\[Ni[^%28*d25X;*e106!R%!!HcCY%"U,[;ukYI%GiZ37O^.ADt(GdWa"[/Oh'.^`l%]p&UQcFuM+c_?qkOFN9"[?D%p86,2X4G7q,#brAP%K*li+P`i7]S9dmZMoG5gEs+[/T_qGoMNZ)#m)Z0@J?qeuGC']'qZ=.6L^0eI2%CjE?K!VP/es,rfL.4)UD1B)fOtOg9XkXila@H2%%K\ZAJU(sGk9D=?PrZfC?GS.$pGN,?0`i*GFCYujN0-b9D?;H'"'i91ZOku:h@NVuJ'&M2STi6O7UGM[X.qJ+!tk_W<"Ulo+,5_o%)YUXb=gk)l-t2O`P`7`[#p6q-G*,IM`.1=VpmEfqp;"3=OeD=^2DQfqGg$/*M%;@d#_P#J^.70AEU(SuIF(n]B?e:kX0-G[mJQ\5%:9'AuBo\uV]If`^3f4*i(WO92C`,#ed-u>1KZO#5oHK=/-`dif&g?^N56LbTe[E8se$3Qhdc5j+or4cHitJI&Va#c>kC-NDO^X=i%/W`L5oLD9+V4B'A::uf2\L$+:L#)9WiOh41L0Z@8Nd\RZ(D[dg(_^MDo@n=j'bi?]_iD9M:A+ZR[Y<L\-tuArA[)OGp@MQM-onP,%EK7G[iR`%[6=q[V/%T42Li)j2"9;aIg^,R!WD"]J:K'`F"jiLT"@$'$R!U;2JZKUih3WT[92+sALrb#.&fmgCbsO\a$,IA*kbRn$%gL^/oDU1+Br^jDHlVX%R_GJQG;,JU=8I1-"S-6Y^/A,oi))2V\+>WH-8fSTqddfk::qH?gOmCW*MYc@`I5N0mQ,p6BfZnSk7;MY=%rHR\r'.5BBVP(hW"#Pksi4he<Yp&T.aV"h<'cfe'2]l3o]i<[CktM83rrt9G`=E>3hLQ7]($c:Sap8j-Qpue_2\fs7O./UGhn\/1%"hSj5Rj@!;d_tcE^,.Ku1Tm9fp.X+Kf+gs6'XRkE%W_1sJeF2&N[Y<o<iT,-AOI0;!@Q+h#jF3n:'GNf1'MLY)8iEF]1+$Oi]Q],%qp[`Gm/K;>0oQ-Z9U/>"@Z$41#5i/nq7#V<fVaZ3)125ILF3c<s%mUiB4,CZK3,8%,+8@8@!SQ>l;M@c2u="O9W7>B"&$C`XB4S5%NK3gQht;$LF8$Dmm3m_3^=1o);+iRIq!E/"m^#*o#0!t$cs@Dr69^[%GsUm"OlbYG"r+"/?9nkC.:V7@R9tKh_Dq]5mVJA?eG<Sj%)!(1?jgUP\pr$q8$RhIUnog3Y-F`M$62N9tF-1cBIJ[:.$\>/B4k01mYIa(i[0.I5qV6Z0=n'qtZGuGA>!ICaY3YgHG0J!f>n;YP%R\(c#iVR\%pE/-a'ide\md!9?R1f-5:^dr"Sre!S"Vg9u17Rc^[n\&?O>\Mh'.=L82NZK]@.B*(g_\?/3['W$DW>A]@\#3TTYBgZ%,d>e3LY<fI%`U*.`7Ki5Ypc"0i-1hr'MilMrl9DWUu*0<2*XIB.%]_8s4I#S#Q;SjY)C=rH3AcO8It!VXWNl&Zr!"qcR6_'_.Lf:%,Tjtu=[Y*^bffY!_L<a3J$u!1e>\GB"HUrU)UAn'eq)5S!ouV.X!:tDhE:7"or&6JZNS(?cl%ET4-UBue63.PAq%<lfdu=e:RPd^%,5$R`<^RmrMCQ8+aQiSb.DU.`6SR"e;ZBQSEA4O=n<XK"_\daX]/0fad\B*:.*.`M>lCUPa:YP\A\"%K4ubF?YibQ,KgG?W(%?Q@%f$YIHr@%aSUGF1elmb6-Ke*:nCPn!YVr:=+Vs&njB4%WV:O;o[#fQVL'[BL^%T;qe.Wt(`K<Jl-Z'KPC(H>SgA*oRVL^@`Rqr1G&%0ho<O/5eidc`hjR0niZWc47[ZeFmKkSc$>Qk!]UV5,d+i@#BJJ;#iWN@=EB2[o-UiN`d?6VP'jKaj1]A'e'SQ,;"G:i%6CR(M*]A%=ZZ;9>cYWkDSL7/*i.aUD%/6;8pTH^Gm-rJ[3*TFPPc!pr^9pYf6Pt]V\Dp2+B+\*Pc.n*LaE_)c1LBG$\JmYUb9C/&!-W@Xib'.%PsW'G136.t8`'nl[AktQac(s!5;L]Ujka;/%/PSnJng%B(o;o\=?>Rh%OMG(q.m="VUsu@Bbp,K\;GFXf0CX+=C*?4gor)t[=g-J%:$_*S;79YH[OUqk,Q!A%h@Db?$;!Y:)J:VbQ?L-3I%"2fg+e]=cQ4#ucm?f+C&?Fpk="%"i3K*qfJYMW@7];>S,F]V;q`5W9_]a-%/`\8a8hDY-ShJ[Ef'\PAr(nF@h'+TS;+VHL)Eu*U=i_EBL-!UZC:>8\$0q,kcIj.84-8,MT>sLZ=7a!$JE_0rfW\ZI%f#%1\3U)U%G6NFU\0h,;M8+?!Hpn@RQ;@l$4o*?&/_QC6H@"&'E*)<q2s!gfoYLW82sLXQZejTO9f=00S\JLdi[.9'Qch;o!S8rbQei<-]m_H^%]W@?<T1i$D2XHKYOl?Gl89!B_P.j38de>*4Qu/4-)_#>+o-6$hh,neEO,QcifD!AY"4tEsRkA=nRU\=(dMrQH$2k@"J?b#hk1]d\%ach&[4ss>H]me!qQ#N!sKJ9%F]<u\n#pF^b]*M?&h>too#<e+fC#U;M]`eW7M,ONuc/NHr@`qe<OsZfY,@;-LTs.7F5h:V6^el!^%niu"5K;u:,Y82_<-Z_J=((]R924$j]_-#YLV,i7.">g1m00b9?Fd2,L\D?+C:,c8WoKsu'9nfV<c2s+6a976"+37EYj.D\WECu,u%j:F'tYur2g)&3aAA"][L?8"pl#=iA9"S9lR7#O%f6kcq[We:+S-=)MeppeM<IG"<p>ADaukPtscksY?iV5jH1jbqWAkW\]3"]rB(%X=HZUG?p<si!94fR*h9+'kRkF\!(UEL$OYNa?n1J1sDGD6>uu.d[7WUS=8brIE8)<%\"EodJL`j*]=f?R(t"eLN%FNEiH2V%n(Us%P%pEB(,JVdBk'AEo8:,e+9"Q^C$]t,Aba)BeQNoXr90&qcAQRf3Y?`NdG]?["S6)!S=io)+^`I[?k)d,0ZeD.)MM1gJ+&k?:!(0G%U!/<cU<tGO\f*9P8>RHaR&L@k@&DuE7^`R.8$#8a%Tq^_EI#Fdra7PH.)UbX22WX[*!F8Qn5;N<D5]?3Fnjos^'"q._NV.$@-f;E%M+5USVD4Z7"?:d%$o'.5_XHbD$ET]./f_Q"&0`>j%TDo7PDr?"E0Y.'W4p]$O;W9kPTqS_qtn`#%cl\c">\#+bp5.W0Y6-C.A[E?%n:IOUFpJq.cpIGY.0C/#,ZSIIF^>Xs<W3EkN]=[R%_GThfSgN!@,l<0V:rCLrkN+eMllJf?6nV_hfOT.C&s-fMDMm/He)Vh7W26D%OO!tFq/D@R4tk.!`;Hsn5u$rr6"lHf>Jic:a\Bn,J-`MYA3l=c"@bY7#D#A1GMQFV=#.F>39b%AP[6JsjNfhs3L:[/a]o\OJ9t')%-sH[]Ga%%@K[UjH[60YkA#1[e^Ae,'JqamDD-*[j\0!Ze%$ZqJ1EN/lFB*Oo%[)bj2L0l,g\c]V?I?TN-m%K1Y@e:\>gaS!Q`u9E%?+_:@-O_G6iM_e"nLJGSo_l>/G@ire;I]!#;P$K)K]lKXX=m6rGV48R0?2]X#SJ%2#/HpJm^GMaFfT.SRDJi3$h-ELmL[ZuL+-E9%3"TF(BJmi2M'bH0bbGj^,=c)UIKfq9+tNt(g<A9e`0lEAKS4l3(W>!@ZS;pkkq%nt(.<M2"Dbbq3tuWfP^=>bE+=3;-A;"H0Jc#`%ZYHH^@)MLJ?UA@FXH:u"$6gE[goIsqUtK^#Y8/$b[9ON-^#.D-G/XAT^)=UEf4n;4+E-c[WP31_)BD\bOk.an@[KfrR=$"L?tK!<%+[Bu<<8KQf:ccVJ%:3Mqb?(:B;#W2Gh_#BeN>6]4Y?MIl<9E=Hofg2_ORFrd1gC5.L5Y;bOe)TO3,[1AaYZ7fXpdNt&ERkIF80kN%Wr.%/bdp92=2DD<?O4Ou<@9SppBZ\2EQs'AiZ23Nn7oV.riJ!qhB3mrDf^m'e*,[n4Q$27m?`>!fD_Clrp,'IJ,f?)[m0fLm?_2Z%rVNc_ro:KVs8DKJ\$o`Err)0'\*nhFleh^3r?"9'kPCN`^]*ren,N1;Da1u7r@`Zt?Qdrr<q0OGq=DB"bM3$tKKh"_~>%AI9_PrivateDataEnd