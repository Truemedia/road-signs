%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 784.1 [Converted].eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Bob Hutchinson
%%CreationDate: 30/01/2009
%%BoundingBox: 0 0 497 512
%%HiResBoundingBox: 0 0 496.2754 511.5826
%%CropBox: 0 0 496.2754 511.5826
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 124 128 8%%BeginData: 30100 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF84A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9%A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AF%A9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9%A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AFA9A9A8AF%A9A9A8AF8585A97EAFA98584A984A984A984A984A984A984A984A984A984%A984A984A984A984A984A984A984A984A984A984A984A984A984A984A984%A984A984A984A984A984A984A984A984A984A984A984A984A984A984A984%A984A984A984A984A984A984A984A984A984A984A984A984A984A984A984%A984A984A984A97EAFAF7EA9A90E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0DA9A98485070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0D36FFA9840E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0DFD05FF7E0E0D0E0D0E0D0E0D85FF0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D36AFFF5A0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84%A90D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070EFF850D3636FF7E0E0D0D070E0D0D2F7E0D0D070E0D0D070E0D0D07%0E0D0E070E070D070E0D0D070E0D0E070E0D0E070E0D0D070E0D0D36FF30%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E5AFFAF850E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0DFF5A0E0D0E36FF360E305B5A850D365A0E365B0D0E0E85%0E0E36AF84360D0E365A5A5B0D0E5AAF84360D0E0D0E0D0E36A9A9610D0E%0EAFFF5B0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D5BFF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0EFF84070E0D0EFF850784FFFFA80D5AFF0D7EFF%140DA9FF0E5AFF5A85FF0E0785FFFF7E0E84FF5AFF7E0E0D0E0D0D30FF84%84FF850D36FFFFA80E070E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DFF7E0E0D0E0DFF7E0E5AFF360E0D5A%FF0E0EFF360EFF5A0DFF5A0E0DAF840E5AFF300E0DFF850E0D0E0D0E0D0E%0DFF840E0D5AFF140D5AFF0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84A9070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0EFF840D0E070EFF5A0784FF%0E070E5AFF0D0EA88530FF0D0EFFA97E85A8A9077EA80E0D0D36FFFFA90D%0E0D0E070EFF5A070E0DFF0D0D5AFF0D0E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DFF5A0E0D0E5AFF%0E0E7EFF0D0E0D5BFF140D5BFFFFA90E0DFF84360E360E0E7EFF0D0E0D0E%0E5AFFFF0D0E0D0E0DFF5A0E0D36FF360D5BFF140D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0EFFA930%365AFF7E0E0785A90E0D0E5AFF0D0E0DFFFF7E0D0E84FF305A7E0E0D84A8%0E0D0EA85A0DA9A80E0D0E0D0E5AFF2F36A8AF0D0E5AFF0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0DFD05FF5A0E0D0E5AAF0D0E0D5BFF0E0D0E85FF0E0E0D0EA8FFFFFF0D0E%7EAF0D0E0D85FFFFFF360D0E0D0E0D0E84FFFFFF0E0E0D5BFF0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84%A90D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E0D0E0D0D070E0D0E0D0E0D0E0D0E0D0E070E0D0E070E0D0E0D%0E0D0D070E0D0E070E0D0E0D0E0D0E070E0D0E070E0D0E070E0D0E0D0E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E5AFFAF850E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D5BFF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E070E0D0E0D0E0D0E070E0D0E0D0E0D0E070E0D0E07%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D070E0D%0E0D0E0D0E0D0E0D0E0D0E0D0D070E0D0E0D0E0D0E0D0E0D0E0D0E0D0D0D%0E0D0E0D0E0D0E0D0E5AFFA9840E0D0E0D0E0D0E0D0E0D0E0E360D0E0D0E%0D0E0D360E0E0D0E0D0E0D360E360D0E0D0E0D0E0E5A5A5A0E0E0D0E0D36%303630360D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D36%36360D0E0D0E0D360D0E0D0E0D0E0D5A7E855A0E0D0E0D360E0E0D36300E%0D0E300E0D0E0D0E0D0E0D0E0D5BFF84A9070E0D0E070E0D0E070E0DFF84%0E0D0E070E0736FFFF0D0D070E0DFD05FF2F0E0D0D2FFD05FF2F0D070EFD%05FF85070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D85FD04FF%300E075AFF360D0E070E0D85FFFFA8FFA80E070EFF84070EA8FF0D0D2FFF%300D070E0D0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0EA9A90D0E0D%0E0D0E84FFFF5A0D0E0D36FF850E3684FF0E0E0DFFAF360D36FFFF0D0E0E%FF7E3630360E0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF%5B0E5AAF850D0E5AFF300E0D0E0D85FF360D0E0EFFA90E0DFFA90E0EFFFF%5A0D85FF360D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0DAF%840E0D0E0D0E0DFF3685840E0D0E0DFF300E0D0EFF36075AFF360D0D070E%0D0E070EFF5A070E070D0D0E0D0E0D0E30A9FFA90D0E0D5A5A845A0E0D0E%0D0E5AFF0D0E070E0D0E0D5AFF360D0E0D0EFF84070E0D0D30FF0E0D7EFF%0D5AFFFF7E0E84FF0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D%0E0D0EA9A90D0E0D0E0D5AFF0E36FF0E0E0D36FF5A0D0E5AFF0D0E84FF0D%0E30360E360D0E0DFF855A5A850E0E0D0E0D0E0EFF845AAFFF0D0E84FFFF%850D0E0D0E0D36FFFF5A5A0E0E0D0E5AFF0E0E0D0E0DFF360E0D0E0D14FF%5A0D5AFF365AFF7EFF0EFF7E0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E%0D0E070E0D0E07AF840D070E0D0D7EAF070EFF5A070D0DFFFFFFA8FF5A0D%07A9A80D0DFD04FF0E070EA9FFA9FFFF36070E070E0D85A80E070EFF3607%85FF0E0D0E070E0D0E0736A8FFFFFF360D075AFF36070E0D0EFF5A070E07%0E0DFF360D0DFF5AFF5A36FF84FF5A070E0D0E070E0D0E070E5AFFAF850E%0D0E0D0E0D0E0D0E0D0EA9A90D0E0D0E0DFF7E0E0DFFA90E0D36FF8530FF%FF0E0D0E84FF0D0E0E0E36FF0E0E0DFF7E0E0D0E0D0E0D0E0D0EA9850D0E%0DFF5A0E84AF0D0E0D0E0D0E0D0E0D0E0D5AAFFF0D0E5AFF0E0E0D0E0DFF%5A0E0D0E0D36FF5A0D0EA9FFFF5A0DFFFFFF0E0E0D0E0D0E0D0E0D0E0D5B%FF84A90D0E0D0E0D0E0D0E0D0E0DFF840D070E0D5AFD06FF0D0D0DFF5A0D%30FF360D075AFF36070E075AFF0E0D0EFF85070D070E0D0E0D0E0D85A80E%070EFF5A0DA9840E0D0E0D0E0D0E0D5A0D0D0785FF0E075AFF0E070E0D0E%84FF0D0D070E7EFF0D0E0D84FFFF0D0EA8FFA90E0D0E0D0E0D0E0D0E0D0E%5AFFA9840E0D0E0D0E0D0E0D0E0D0EA9FF7E857E1484FF30360E5AFF850D%14FF850D0EA9FF0D0E0DAFFF5A3085FFFF0D0E0EFFA9857E855A0E0D0E0D%0E30FF5A36A9FF0D0EA9A90D0E0D0E0D0E0D85FFAF5A85FF850D0E5AFF84%857E5A0D36FFFF365A7EFF5A0E0D0E5AFFFF0E0D85FFA90D0E0D0E0D0E0D%0E0D0E0D5BFF84A9070E0D0E070E0D0E070E0D84A8FFA9AF2FA95A0D070E%0DA95A0E0DAF300E0736A8360D0D0D85FFFFA985840E070E84A9A8FFA9A9%0D0E0D0E070E30FFFFAF0D0D07855A0E070E0D0E070E0D5AA8FFFF7E070E%075AA8AFA9FF5A0E070E84FFFFAF300E0D0E070EA884070E30FF300E0D0E%070E0D0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D140E140D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D140D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0E%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D0E%070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E300E070E0D0E300E%0D36305A305A2F0E0D0E300E0D0E0736300E070E3036070E0D0D0D858484%0D0E0D0D0D5A0D0D070E0D0E305A305A300E0D0D07365A5A0D0E0D0E070E%0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0EFFA80E0D%0EA9FF0D0E84FD05FF0D0E30FF5A0E0D0E84FF0D0E0DFFA80E0D0E5AFFFF%A9FFFF5A0E0D85FF360D0E0D0E5AFD05FF300E0DA9FD04FF840E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84A90D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E7EFF0D0E0D%FF5A0E0DA9A80E0D0E0D0E0D36FF5A0D0E0785FF0E070EA9A90D0E0EFF84%0E0D0E84FF0D0D5AFF0E0E0D0E0D5AFF360D0E0D0E0D36FF5A0D0E7E840D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E5AFFA9%840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5A%FF5A0D5AFF5A0D0E84AF0D0E0D0E0D0E30FF5A0E0D0E5AFF0D0E0DFF840E%0D85FF360D0E0D0E300E0D5AFF360D0E0D0E5AFF0D0E0D0E0D0E5AFF300E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D5BFF84A9070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0D0DFF7E0D5AFF0D0D0785FF845A855A0E0736FFFFA8FFA8FFA80E0D%0EA8A90D0D7EFF0D0E070E0D0D070E5AFF0D0E0D0E075AFF855A855A0E07%0EAFFF847E300E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E85FF0DFF850E0D0E84FFA8AFA9850D0E30FFA9857E85%A9FF0D0E0DFF850E0DA9AF0E0D0E0D0E0D0E0D5AFF360D0E0D0E5AFFA9AF%A9A90D0E0D367EFFFFFF7E0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E075AFF7EFF5A0D0E0DA9FF0E070E0D0E0736FF%5A070E0D7EFF0E0D0EA8A90D0D7EFF0D0D0D0E0D0E0D0E5AFF0D0E0D0E07%5AFF0E070E0D0E0D0E0D0D0D0E84FF0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DFFFFFF0D0E0D0E84FF0D0E0D0E%0D0E0EFF5A0E0D0E7EFF0D0E0DFF840E0D36FF850D0E0DA9FF360D5BFF36%0D0E0D0E5AFF0E0E0D0E0D0E0E850E0E0D5AFF360D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0EA8FFA80E070E0DA9FF%A984A984300736FF5A070E0785FF0E070EA9A9070E0D84FFA95AA9FF840D%0D5AFFA885847E075AFFA984A9A85A075AFFFF5A84FF850D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AA95A0D0E%0D0E5AA985A984AF0E0E0EAF360E0D0E5AA90D0E0D855A0E0D0E0D5BA9FF%A95A0D0E0D5AA9A984AF5A0E30AF85A984FF360E0D36A9FFA9850D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84A90D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E070E0D0E070E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E070E0D0E07%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E5A%FFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D5BFF84A9070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0D07%0E0D0E070E0D0E070E0D0E070E0D0D070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0E5A0D0E0D0E0D0E0D0E0D0E0D0E0D0E5A360D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0DFF7E0E0D0E0D0E0D0E0D0E0D0E0D0E0DFF5A0E0D0E0D0E0D%0E070E0D0E0D0E0D0E070E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D360D0E0D14FF850D0E0D0E0D0E0D0E0D0E0D0E0D0EFF5A0D36%0D0E0D0E0D360D0E0D0E0D0E0D0E0D0E0D0E0D0E0E0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0D7EAFA9FF5A85FFFF0D0E0D%AF300E0DAF2F0E30FFFFFF360EA9FFFFFF0D0E0D0E077EA9A9FFAF0D0D0D%FFA8FFFF840D0D0DFFFFFF840E0736A9AFFFFF2F0E0D36A8FFAF36070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DA9FF8584FFA95A%FFFF0D14FF850D36FF5A0DFF84365A5A0D5AFFA936140D0E0D0E7EFF7E5A%FFFF0D0EFFFF5AA9FF360DFFA93636FF7E0E36FFA95AAFFF0D36FF610D85%FF140D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84%A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E84A90D%0EFF5A077EFF0E0DFF5A0E0EFF300EFFFF30140D0E0DFF5A0D0D0E0D0E07%85A90E0736FF360DFF5A0D0DFF300EFF360D0D5AFF0D36FF36075AFF0E5A%FF0D3630FF300E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0DA9840E0EFF300E7EFF0D36FF5A0D36FF5A0D36A9FFFF5B0D0EFF850D0E%0D0E0D0E7EA90D0E0DFF360EFF5B0D0EFF360EFF0D0E0D5AFF0E36FF0E0E%36FF0D85FFAFA8AFA9360D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D5BFF84A9070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E84A9070EFF360784FF0E0DFF5A0D30FF300D0D0E0DAFA80E0D%FF5A0E0D0E070E0D84A80E0736FF360DFF5A0D0DFF2F0EFF5A070E84A907%5AFF36075AFF0E2FFF300D0D0E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0DAFA90E0EFF360E84FF0D0EA9FF84FFFF5A0DFFFFA9%FF850D0EA9FFA9360D0E0D0E5AFFA985FFA90D0EFF850D36FF5A0D85FF85%A9FF300E5AFF300E5AFF0D0EAFFF84FFA90E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E5A5A070E5A30075A5A0E073684A95A850D%0E0D85A85A0D0E0D367E850D0E0D0E0D84A985A85A0D0E0D842F0E0D840D%0E0D5A84A9300E07367E0E07365A0E070E5AA97E360D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E84FF0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E075A5A0E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5B%FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0DA90D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D36300E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E5A0E07%0E0D0E0D0E0D0E0D0E0D0E07365A0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D36%FF360D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0EFF850D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%30FF360E0D0E0D0E0D0E0D0E0D0E0D0E5AFF0E0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D5BFF84A9070E0D0E070E3036070E0D0E0D0E0D0E070E0D%0D0D3630FF0D0E0D0E070E0D0E0D0E0D0E070E0D300D0E0D0E0DFF7E0E0D%0E0D0E070E0D0E0D0E0D0E070E0D360D0E0D0E0D0E0D0E070E0D0E0D0E0D%0E0D0E0D0E2F0E0D0D0D360D0E070E0D360D0E0D0E0D0E0D0D0D5A2F0E07%0E0D0E0D360D0D070E0D0D5AFFA9840E0D0E0D85FFFFFFA90D0E5AFD04FF%5A0D0E84FD04FF360D0E0D0E0D36FD04FF5A0E0EAFFFFFA90E0DFD04FF36%0D0E0D0E7EFD04FF360D0E36FFFFFF5A0E0DFFA9FF5A0EFD04FF84FFFFFF%0E0E0EFF300E5AFFFFFF5A0E5AFFFFFF7E0E5AFF0D0E36FFFFFFA8140D5A%FD04FF360E0D0E0D85FF84A90D0E0D0E0D360D5AFF36075AFF8530FFA80E%36FF300E5AFF0D0E0D0E0D0EFFA90D5AFF5A0785A90E07AF7E0E0DFF7E0E%0D0E0D0E0785FF5A0DAFFF0E0DFF5A0D0DFF0D0EA9FF5A0E0DFFAF367EFF%7E36FFA90D36FF360DFF5A0E36300DFF840E30360D5AFF0E0DFF7E0E0EFF%5A0E30FF7E36A9FF0D0E0D0D5AFFAF840E0D0E0D0E5A85A9FF360E5AFF0D%0E7EFF0DA9A90E0D14FF360D0E0D0E0EFF0E0E0DFF5A0EFFA9363684FF0D%0EFF850D0E0D0E0D0E7EAF0D0E0DFF305AFF5A365AFF5A0DFF7E0E0D0EFF%850D5AFF140DA9840E30FF0E0EFFFF5A360D0EA8FF7E360D0E5AFF0D5AFF%0E0D0E5AFF0D5AFF14075BFF0E0D0E0D5AFF84A90D0E070E84FF365AFF36%075AFF0E0784FF0E84A9070D0DFF0D0D070E0D0EFF36070EFF5A0DFFA885%84845A0E0DFF5A0E0D0E070E0D847E0E0D0EFF3630FF84857E852F0EFF5A%070E0DFF5A0D30FF0D0E84A90736FF36070E7EFFFF5A070E5AFFFF84075A%FF0D2FFF0D0D075AA90D2FFF0D0D5AFF0D0D070E5AFFAF850E0D0E0EFF36%0E0EFF360E5AFF0D0E7EFF0D85FF360D5BFF360D0E0D0E0DAFFF5A7EFF5A%0EA9FF0E0E30140D0EFF850D0E0D0E0D0E7EFF0E0E5AFF0E36FF850D140E%0E0DFF5A0E0D0EFF850D5AFF360DA9840E30FF0E0E360E0DFFA90E36140D%AFFF0E5AFF0D36FF5A0D0EAFA90D5AFF360D85FF0E0D0E0D5BFF84A90D0E%0D0E7EFF7EAFFFA9077EFF0E0785FF0E0DAFFD04FF300D0D0E0D0E0D85FF%A9FF5A0736FFFFAFFF300E0DA9FFFF0D0E0D0E0D7EFFFFA8FF5A0E0D85FD%04FF0D0EFF5A070E0DFF7E0E36FF0D0EA8A90736FF360DFFFFAFFF5A0DFF%FFAFFF7E077EFF0E0784FFA9A9FF0D0D30FF0D0D5AFF0D0E0D0E5AFFA984%0E0D0E0D0E5A85305A300E0E850D0E305B0D0E0D5A5A365A140D0E0D0E0D%0E0D0E0EFF5A0E0D365A85360E0D0E0E5A5A140D0E0D0E7EFF3685360E0D%0E0D5A7E850E0E0D5B0E0E0D0E5A360D365A0E0D5A360E0D5B0E0E0D8584%5A0D0E0E5A7E5A0D0E0E5B0D0E0D5A84850D0E0D365A0E0D365A0E0D0E0D%5BFF84A9070E0D0E070E070D070E0D0D070E0D0D070E0D0D070E070D070E%0D0E070E7EFFA8FFFF30070E0D0D070E0D0E070E070D070E0D0E0785FF0D%070E0D0E070E070D070E0D0E070E0D0E070E0D0E070E0D0E070E0D0D070E%0D0D070E070E070E070D070E0D0D070E0D0E070E070D070E0D0D070E0D0D%070E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D365A857E360D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E365A0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0D070E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D850E0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D0E070E0D0E%070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E075AFF0E%070E070E070D070E0D0E070E0D0E070E070D070E0D0D070E0D0E070E070D%070E0D0D070E0D0E070E070D070E0D0E070E0D0E070E0D0E070E0D0E070E%0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E7EFF5A360D0E0E5B5A140D0E0D0E0D0E0D0E365A0D0E0D360E36300E0D%145A5B0E0E0D0E0D5B5A360D0E0E5A5A360D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84A90D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E5AFFFFFF7E0D30FD04FF360D0E0D0E0D0E84FFFFFF0D0E84FFFF%A90D0EFD04FF300E0DFD04FF0E0DA9FFFFFF5A0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E5AFFA9840E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E5AFF0D0E0DFF840E0DAFA80E0D0E0D0E5AFF3014A95A0DA9%FF840D0EA9FF0D0E84FF0D5AFF360D360D36FF5A0D360D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5B%FF84A9070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E075AFF0E0736FF30070E30FF0D0E0D0E07AF840D07%0E0D0D7EAF0D0D0DFF360D070EFF0E0DFFAF840D0E0DFFFF85300E070E0D%0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0E07%0E0D0D5AFFA9840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E5AFF0D0E30FF0E0E0D5AFF140D0E0D0E%AF850D0E0D0E0DAF850E0D14FF5A0D0E0EFF0E0E0E85FFFF360E0D85FFFF%5A0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D85FF84A90D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E075AFF360D0EFF84070EA8A90D%0E0D0E0785FF360DA95A0E84A90D0E0DA9A90E0785FF0E0D5A0D36FF5A0D%5A0D0EFF84070E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0D5AFFAF840E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0EFFFF850D5AFD04%FF0E0E0D0E0D0E0DAFFFFFFF5A0DA9840E0D0E0DFD04FF5A0D5AFD04FF0D%36FD04FF0E0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D5AFF84A90D0E070E0D0E070E0D0E070E0D0E07%0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D0D0D5A0D0E070E5A%5A0D0E0D0E070E0D0D0D5A300E070E0D0E070E0D0D0D5A5A0E070E0D0E36%5A0D0D070E365A0D0E0D0E070E0D0E070E0D0E070E0D0E070E0D0E070E0D%0E070E0D0E070E0D0E070E0D0E070E5AFFAF850E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84A90D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D%0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E5AFFA9840E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E%0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D0E0D5BFF84%A9070E070D070E070D070E070D070E070D070E070D070E070D070E070D07%0E070D070E070D070E070D070E070D070E070D070E070D070E070D070E07%0D070E070D070E070D070E070D070E070D070E070D070E070D070E070D07%0E070D070E070D070E070D070E070D070E070D070E070D070E070D070E07%0D5AFFA9FF85365A365A365A365A365A365A365A365A365A365A365A365A%365A365A365A365A365A365A365A365A365A365A365A365A365A365A365A%365A365A365A365A365A365A365A365A365A365A365A365A365A365A365A%365A365A365A365A365A365A365A365A365A365A365A365A365A365A365A%365A365A5AFFA97EFD05FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF%FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF%FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF%FFFFFFAFFFFFFFA9A9532E5228522E5228522E5228522E5228522E522852%2E5228522E5228522E5228522E5228522E5228522E5228522E5228522E52%28522E5228522E5228522E5228522E5228522E5228522E5228522E522852%2E5228522E5228522E5228522E5228522E5228522E5228522E5228522E52%28522E5228522E5228522E522EF827F82727282727272827272728272727%282727272827272728272727282727272827272728272727282727272827%272728272727282727272827272728272727282727272827272728272727%282727272827272728272727282727272827272728272727282727272827%2727282727272827272728FD0427F8272727FD78FF52F8F852FD78FF5227%2727FD2BFFA8FFAFFD05FFA8FD44FF7DF8F852FD1FFF84F8FD04FFA8F827%FFFF7D27F82727FFFFA8F827F87DFFA8F827F852FD3CFF52272727FD1FFF%7D27FD04FF5227F8A8FFA8F8FFA8277DFFF852A85252FF7D277DA8A8FD04%FFA87DA8A87DA8FFFF7E7DFFFFA87DA8FFFF7E7D7DFFFFA87DA8FD1FFF7D%F82052FD1FFF84F8FD04FF277D5252FF7D277D7DF8847D27A8A8527DFFA8%F852527EFFFFFFA8F827F827F827FF52272752FF2727F87D7D27F82752A8%F82727FD1FFF52272728FD1FFF7D27FFFFFFA8F8FF7D27FFA8F827F853FF%7DF8FF7D27F8FFA82752527DFFFFFFA8277D5252A8F8A827525227A87D27%27527EF8FF28527D27277DFD1FFF7DF8F852FD1FFFA8F87D7DA85227F827%F8A87D27A85227FFA82752FF5227A8A8F8847DA8FFFFFFA8F8FF2852A827%7D27275252A8F87D27527D27FF7D27FF5252F8A8FD1EFF52272752FD1FFF%8427F827525227FFA82752A820FFA8277DFF5327202720FFA827F82727FF%FFFFA827A85352FF27FF7D27277DA8272752277DF8FF52527D272727A8FD%1EFF7DF8F852FD20FFFD05A8FFFFFFFD04A8FFFFA8A8FFFFA87DA8A8A9FF%FD04A8FD04FFA8FFA8FFFFA8A8FFA884A8FFA8A8A8FFA8A8FFFFA8FF7D7E%A8FD1FFF52272727FD78FF7DF8F852FD1BFF7D527D59FFA87D537D7DFF27%7DFFFFA87DA8FD1EFFA8527DA8FF7D52A8FFA85252A8FF7D275252FD0AFF%7DA8FFFFFF53A8FD0AFF52272727FD1BFFF8272E52FF7DF85227A87D27A8%FFFFFFF8A8FFFFA8FD1BFFF8522752FF5252FFFF27275227FF2727F8A8FD%0AFF52A8FFFFFF2752FD0AFF7DF82052FD06FF522727A87D52FF7D52FF27%2752FF525252FFFFFFA82727527DFF52272752A8FFAFFFFFFFA8277DFF52%2727FF7D522728A8FF5227277DFFFFFFA8272752FF525252FFFFFF7D27FF%FFF8A87D7DA8A8F852277DFD07FFA827A85252A852A8527DA82752F87DFF%52217DFD06FF52272728FD05FFA8277D7D27A8F87E277D52275327A852F8%7EFFFFFFA827522727A87D2753F852FD06FF27A87D27A85252A8F87DF87D%7D277D2752FFFFFF2752A8277E52F87DFFFFFFA8F87D5227A87D277DA827%525227A8FD07FF275227F87DF8FF277D2752A827537D277DF8A8FD05FF7D%F8F852FD05FF7DF8FFA827A852F827A852275227A82753FD04FFA8A8FFFF%F884A8A8FF5227FD05FFA827A85327FF52275327FF52525227FF5252FFFF%A8277DFF277D2752FD05FF592728F8A8FFFFFFA8F8FFFF277DFD07FF5227%F827F852FF2752277DFF5252272752277DFD05FF52272752FD05FFA8277D%5227FF7D2727FF52275252FF2752FD05FFF8522727FF7DF87DF852FD06FF%F8527D277D27527E27FF2E52A827522752FFFFFF52527D27A85228FD05FF%27522727FD05FF27527DF8A8FD07FFA8F85252277DFF277D52527D27527E%F85327FD06FF7DF8F852FD06FF7D5227A8FFFF527DFFFF522752FF527DFD%05FF7D27277DFFA8522752A8FD06FF7D27AF522752FF7D7DFF7D7DFF2852%F852FD04FF28277DFF527DFD04FFA97D275284FD05FFA852277DFD08FFA8%527DA852A8FF7DA8A8275252A8FF7D2752A8FD05FF52272727FD37FF7D27%2727A8FD3CFF7DF8F852FD14FFA8A8FFFFA8FD1FFFA8FD17FFA8FD27FF52%272727FD13FF5227F852A8FFA827F852A8FFFFFFA852FD1DFF7D7DFD07FF%27FD06FF7D27FD0FFFA852FD06FF27A8FFFFFF7D52FD08FF7DF82052FD08%FF7D7D7DFFA8A87DA8FFFFA82752A8F859FF2752FFF852FFFFFF7DF87DFF%FF527DFFFF7D7E7DFFFFA87D7DA8FFA87D7DFFFFA859A8FFFFFFA8F852A8%FF7D7DA8FF52277DFF7D7D7DFF5327FD04FF7DFF7EA8FFA8A8FF59A8FFA8%52FFA8847DA8A827527DA8FF27277DFD07FF52272728FD07FFA8272727A8%7DF827A8FD04FFAF27277DFF52527D277DFFFFFF272727A82752277DA827%272752FF2727F852FF5227277DA8F82727FFFFFF7D27F87D7D272752A852%F852A85227277D8427FFFFFFA8277E2727A820A82752277DA827A8522727%27FF2727F852A827F852FD07FF7DF8F852FD07FF5227FF52525227A8FD05%FFA852F87DFF522752F87DFFFFFF7DF8AF7D27FFA820A8F8A85227A8277D%7DF8A8F85227277D27277DFD04FF2753FF2753FF277D7D27A8FF5252F87D%7D27FD04FF2752F82727527D275228277EF87DF8FF7D27A8277D84F8FF27%2EFD08FF52272752FD07FF5252FF52527D27FD05FF277DFF2752FFF8A8FF%5227FFFFFF7D27A8A827FF7D27A827FF7E27FF27A8A827A827527D7DFF52%52F8A8FFFFFF5252FF277DFF527DA8F8FFA8277D52527EF8FD04FF7DF852%27277DA9F87D527D7D27A8277D7D27FF20A8A827FF5227FD08FF7DF8F852%FD07FFA82727F8A85227FD05FF52F827F8A8FF52F852F87DFFFFFFA8F827%7D52272753A8F8FF7D27A8277EA8F8FF5227F87D7D27F827A8FFFFFF2827%5284F82727FFA827277DF85227527D2727FFFFFF7D27527DF8A8FF52F827%7DA8F8FF52272727A8277DA8F8FF522727FD07FF52272727FD09FF7DA8FF%FFA8FD06FFA87DAFFFFFFFA853A8FD05FFA87DFFFF7D7DFFFFA8FFFFA8FF%A8FFFFA8FFFF84A8FFFFA87DA8FD05FF7DA8FFA87DFFFFFF7D7DFFA87DFF%A8FF84A8FD04FFA8FFFFA8FFFFFFA87DFFFFA9FF52272727FFA8FFFFAFFF%FF7DA8FD07FF7DF8F852FD18FFA8FD3BFFA8FD0FFF7D5352A8FD10FF5227%2727FD05FFA87D52A8FFFF7DFD05FF52527DFFFF7D7DFF7D7DFFA87DFD21%FF7D7D7DA8FD0FFF7DA8FD11FF7DFD12FF7DF82052FD04FF7D272727F8FF%7D27A8FFFFFF2127272752FF2728FF27F8FF2752FD20FF7D27272752FD0F%FFF884FD10FFA82753FD11FF52272728FD04FF7DF8A8A8A8FFA8F8A8FFFF%5227FFFF7D27A87D27A8F827A82759FFFFFF5252277D2752A8FF522752FF%7D27277DFF7D272752FF7D2827A8FFFFFF7DF85227FFFFFF7D5227525227%A8FF2E52277DFF2727277DFD04FF592752FFA852527DFFFFFFF87DFF7D27%53FFA8272752FF522752FD04FF7DF8F852FD04FFA827F82752FF7D27A8FF%FF5227FFFFFFF8A884FD042752F8A8FFFFFF27F852F852F87D7D2752277D%842727F8FFF8522727A827F8527DFFFFFF5227522727FFFF53F852F85227%52A8277D7DF8A8F8522727A8FFFF7DF8A827527D2728AFFFFFA8277DA8F8%7DF87D5227277D7D272752A8FFFFFF52272752FD05FFA8FF5227A8A8F8FF%FFFF5227FFFFA827A8FF2727527DF827FD04FF277DA827A852527DF87D27%7D7D525227FF277DFFF8FF7D27277DFD04FFA8FF5227FFFF5252FF277E7D%27A827FFFF277D27A8A8F8FFFFFF5252FF7D277D27FD05FFF8A87D275252%7DA8272752FF282727A9FFFFFF7DF8F852FD04FF27275252F8A87D272752%53A8F8527D2727FFFF52F87E7D2728FD04FF2752A8F8A827527D275252A8%27277DF87D277DA8277D59522727FFFFFF5227522727FFFF5227FFF87D52%27A827287DF8A8F8A87D27A8FFFF7DF8A827527D27FD04FFA82727A8F852%27A87D5227277D5227277DFFFFFF52272727FD04FFA8522727A8FFA82752%2753FFA8272752FFFFFF7D52A8A827A8FD04FF527DA852A87D52FF7D272E%FF7E5252597D537DFF52A8522727A8FD04FF522752A8FFFF7D59FF52A87E%52AF275227A8FF52A8A852FD04FF7D2752FFA852FD05FF5252A8842752A8%A827277DA8272752FD04FF7DF8F852FD38FFA8FD07FFA8FD0BFFA827A8FD%29FF5227272EFD78FF7DF82727FD78FF2E277DF852525952525259525252%595252525952525259525252595252525952525259525252595252525952%525259525252595252525952525259525252595252525952525259525252%595252525952525259525252595252525952525259525252595252525952%5252595252525952525259525252595252527D522752FF7DF827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F8272EFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 300 C)
%%CMYKCustomColor: 1 0.4400 0 0 (PANTONE 300 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                       
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-01-30T14:28:46Z</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>248</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6D+YP5gw+XodJuLjSbfW&#xA;dU1m3F873w5xW8T/AGIYU348a0JFK0qak7b3R6M5DICRjGJrbr5l0ms1gxCJMRKUhe/TyDDf+V5f&#xA;9+lo3/InM7+Sv9sn83B/lX+hF3/K8v8Av0tG/wCROP8AJX+2T+a/yr/Qi7/leX/fpaN/yJx/kr/b&#xA;J/Nf5V/oRd/yvL/v0tG/5E4/yV/tk/mv8q/0Iu/5Xl/36Wjf8icf5K/2yfzX+Vf6EXf8ry/79LRv&#xA;+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&#xA;kRcUeIO/pllVFWViSWqTQAV6qX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>215.900000</stDim:w>
            <stDim:h>279.400000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 300 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1375 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 370 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>56.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 469 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 349 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>42.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 116 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>16.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 300 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>44.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 186 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>81.000000</xmpG:yellow>
                           <xmpG:black>4.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -511.583 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 511.583 li
496.275 511.583 li
496.275 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.5 344.531 mo
.5 499.027 li
.5 505.96 6.12158 511.583 13.0566 511.583 cv
483.219 511.583 li
490.153 511.583 495.775 505.96 495.775 499.027 cv
495.775 344.531 li
.5 344.531 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
483.219 .5 mo
13.0566 .5 li
6.12158 .5 .5 6.12207 .5 13.0566 cv
.5 344.531 li
495.775 344.531 li
495.775 13.0566 li
495.775 6.12207 490.153 .5 483.219 .5 cv
cp
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
483.219 .5 mo
13.0566 .5 li
6.12158 .5 .5 6.12207 .5 13.0566 cv
.5 344.531 li
495.775 344.531 li
495.775 13.0566 li
495.775 6.12207 490.153 .5 483.219 .5 cv
cp
/0 
<<
/Name (PANTONE 300 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .44 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
489.255 331.974 mo
489.255 335.308 486.553 338.01 483.219 338.01 cv
13.0566 338.01 li
9.72266 338.01 7.02051 335.308 7.02051 331.974 cv
7.02051 13.0566 li
7.02051 9.72314 9.72266 7.02051 13.0566 7.02051 cv
483.219 7.02051 li
486.553 7.02051 489.255 9.72314 489.255 13.0566 cv
489.255 331.974 li
cp
f
489.255 499.027 mo
489.255 502.36 486.553 505.063 483.219 505.063 cv
13.0566 505.063 li
9.72266 505.063 7.02051 502.36 7.02051 499.027 cv
7.02051 357.087 li
7.02051 353.754 9.72266 351.051 13.0566 351.051 cv
483.219 351.051 li
486.553 351.051 489.255 353.754 489.255 357.087 cv
489.255 499.027 li
cp
0 0 0 0 cmyk
f
166.123 41.3403 mo
166.123 51.7246 159.543 59.6929 151.523 59.6929 cv
136.307 59.6929 li
136.307 23.9136 li
151.523 23.9136 li
159.697 23.9136 166.123 31.8813 166.123 41.3403 cv
cp
f
159.955 41.3403 mo
159.955 34.9146 156.305 29.2598 150.187 29.2598 cv
142.733 29.2598 li
142.733 54.2437 li
150.598 54.2437 li
155.945 54.2437 159.955 48.5889 159.955 41.3403 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
187.09 39.5928 mo
179.328 38.1021 179.328 46.687 179.328 46.687 cv
179.328 59.6929 li
173.724 59.6929 li
173.724 34.041 li
179.328 34.041 li
179.328 36.6621 li
180.407 35.0688 183.8 33.1152 187.09 33.6807 cv
187.09 39.5928 li
cp
0 0 0 0 cmyk
f
193.859 59.6929 mo
193.859 33.9893 li
199.514 33.9893 li
199.514 59.6929 li
193.859 59.6929 li
cp
f
193.191 27.0493 mo
193.191 25.25 194.784 23.605 196.583 23.605 cv
198.588 23.605 200.131 25.1987 200.131 27.0493 cv
200.131 29.0542 198.588 30.5962 196.635 30.5962 cv
194.784 30.5962 193.191 29.0542 193.191 27.0493 cv
cp
f
219.936 59.6929 mo
213.304 59.6929 li
204.924 34.2466 li
211.042 34.2466 li
216.594 51.8276 li
222.249 34.2466 li
228.263 34.2466 li
219.936 59.6929 li
cp
f
231.389 46.7896 mo
231.389 38.7188 236.273 33.4238 243.47 33.4238 cv
250.358 33.4238 254.626 38.4102 254.626 47.9204 cv
254.626 48.5376 254.626 48.8457 254.626 48.8457 cv
237.404 48.8457 li
238.021 52.7529 240.128 54.8091 243.881 54.8091 cv
243.881 54.8091 247.583 54.8091 249.947 52.29 cv
253.34 56.5571 li
249.69 60.4126 243.984 60.4126 243.984 60.4126 cv
236.119 60.4126 231.389 55.2202 231.389 46.7896 cv
cp
f
237.404 44.5278 mo
248.919 44.5278 li
248.713 40.6724 246.812 38.3076 243.521 38.3076 cv
240.334 38.3076 237.815 40.2095 237.404 44.5278 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
274.659 39.5928 mo
266.896 38.1021 266.896 46.687 266.896 46.687 cv
266.896 59.6929 li
261.292 59.6929 li
261.292 34.041 li
266.896 34.041 li
266.896 36.6621 li
267.976 35.0688 271.369 33.1152 274.659 33.6807 cv
274.659 39.5928 li
cp
0 0 0 0 cmyk
f
285.643 41.0835 mo
285.643 42.3687 287.134 43.3452 289.396 43.8081 cv
293.971 44.7334 293.354 44.6821 294.741 45.2476 cv
297.569 46.2754 299.266 48.4346 299.266 51.9819 cv
299.266 56.2485 295.719 60.3096 290.064 60.3096 cv
286.156 60.3096 283.586 59.5386 278.703 55.6313 cv
282.353 51.9819 li
284.872 54.2949 286.825 55.0664 289.344 55.0664 cv
292.069 55.0664 293.56 54.2437 293.56 52.3418 cv
293.56 50.4395 292.531 50.4395 287.186 48.8975 cv
280.759 47.0464 280.193 43.6538 280.193 41.186 cv
280.193 37.6392 282.815 33.1665 290.218 33.1665 cv
290.218 33.1665 295.616 33.1665 299.111 36.8677 cv
296.027 40.7749 li
293.405 38.1533 290.115 38.1533 290.115 38.1533 cv
287.442 38.1533 285.643 39.3872 285.643 41.0835 cv
cp
f
319.941 46.8408 mo
319.941 38.77 324.619 33.1152 332.279 33.1152 cv
339.888 33.1152 344.411 38.6675 344.411 46.8408 cv
344.411 55.9399 338.448 60.3608 332.279 60.3608 cv
325.082 60.3608 319.941 54.5005 319.941 46.8408 cv
cp
f
338.91 46.8408 mo
338.91 41.9058 336.34 38.6157 332.228 38.6157 cv
328.166 38.6157 325.751 41.9575 325.751 46.8408 cv
325.751 51.6221 328.166 55.0146 332.279 55.0146 cv
336.289 55.0146 338.91 51.5703 338.91 46.8408 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
359.659 31.7788 mo
359.659 34.041 li
364.336 34.041 li
364.336 38.8218 li
359.659 38.8218 li
359.659 59.6929 li
354.004 59.6929 li
354.004 38.8218 li
349.788 38.8218 li
349.788 34.041 li
354.004 34.041 li
354.004 29.3115 li
354.004 25.5586 357.757 23.605 361.611 23.605 cv
363.103 23.605 364.491 23.8623 365.931 24.1704 cv
365.365 28.8486 li
363.617 28.8486 362.691 28.8486 362.691 28.8486 cv
360.481 28.8486 359.659 29.8765 359.659 31.7788 cv
cp
0 0 0 0 cmyk
f
72.7974 111.102 mo
52.5947 111.102 li
52.5947 75.271 li
58.8662 75.271 li
58.8662 105.55 li
72.7974 105.55 li
72.7974 111.102 li
cp
f
87.6748 75.1685 mo
95.1284 75.1685 li
107.158 111.102 li
101.092 111.102 li
98.8301 104.419 li
84.1787 104.419 li
82.02 111.102 li
75.6455 111.102 li
87.6748 75.1685 li
cp
f
91.3247 82.4165 mo
86.0293 99.2778 li
96.979 99.2778 li
91.3247 82.4165 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
128.095 97.1191 mo
121.721 97.1191 li
121.721 111.102 li
115.706 111.102 li
115.706 75.4766 li
128.558 75.4766 li
136.988 75.4766 140.587 80.7715 140.587 86.7861 cv
140.587 86.7861 140.587 94.7026 134.315 96.2964 cv
141.77 111.102 li
135.446 111.102 li
128.095 97.1191 li
cp
0 0 0 0 cmyk
f
134.932 86.375 mo
134.932 82.7251 132.413 80.7715 128.917 80.7715 cv
121.721 80.7715 li
121.721 91.7212 li
128.814 91.7212 li
132.773 91.7212 134.932 90.1274 134.932 86.375 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
180.217 90.9502 mo
180.217 111.102 li
174.665 111.102 li
174.665 107.966 li
173.071 112.335 165.515 112.335 165.515 112.335 cv
155.438 112.335 148.91 104.11 148.91 93.3149 cv
148.91 82.1597 155.13 74.2427 165.823 74.2427 cv
172.403 74.2427 176.824 76.916 179.909 82.5195 cv
174.974 85.3467 li
172.711 81.1826 169.37 79.7949 165.566 79.7949 cv
158.215 79.7949 154.925 85.1929 154.925 93.6748 cv
154.925 101.746 158.626 106.784 165.823 106.784 cv
171.478 106.784 175.025 103.082 175.025 97.376 cv
175.025 96.3481 li
164.229 96.3481 li
164.229 90.9502 li
180.217 90.9502 li
cp
0 0 0 0 cmyk
f
213.159 90.0762 mo
213.159 95.3711 li
198.148 95.3711 li
198.148 105.601 li
215.473 105.601 li
215.473 111.102 li
191.774 111.102 li
191.774 75.1685 li
214.444 75.1685 li
214.444 80.5146 li
197.789 80.5146 li
197.789 90.0762 li
213.159 90.0762 li
cp
f
236.898 98.25 mo
236.898 90.1792 241.576 84.5244 249.235 84.5244 cv
256.844 84.5244 261.368 90.0762 261.368 98.25 cv
261.368 107.349 255.404 111.77 249.235 111.77 cv
242.039 111.77 236.898 105.91 236.898 98.25 cv
cp
f
255.867 98.25 mo
255.867 93.3149 253.296 90.0249 249.184 90.0249 cv
245.123 90.0249 242.707 93.3662 242.707 98.25 cv
242.707 103.031 245.123 106.424 249.235 106.424 cv
253.245 106.424 255.867 102.979 255.867 98.25 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
282.321 91.0015 mo
274.559 89.5107 274.559 98.0957 274.559 98.0957 cv
274.559 111.102 li
268.955 111.102 li
268.955 85.4497 li
274.559 85.4497 li
274.559 88.0713 li
275.638 86.4775 279.031 84.5244 282.321 85.0898 cv
282.321 91.0015 li
cp
0 0 0 0 cmyk
f
311.573 85.0386 mo
311.573 87.0947 312.858 88.688 316.406 89.4595 cv
324.22 91.1558 li
328.436 92.0298 331.726 95.4224 331.726 99.9976 cv
331.726 106.784 326.533 111.873 318.565 111.873 cv
312.242 111.873 309.157 110.176 304.377 105.139 cv
309.003 101.231 li
312.448 104.984 315.121 106.27 318.565 106.27 cv
323.038 106.27 325.865 104.779 325.865 101.437 cv
325.865 99.2266 324.271 97.3247 321.393 96.7075 cv
314.145 95.1655 li
308.85 94.0347 305.61 89.8193 305.61 85.2954 cv
305.61 78.8179 310.598 74.7056 318.462 74.7056 cv
318.462 74.7056 327.612 74.7056 331.057 80.5659 cv
326.173 84.2158 li
323.501 80.0005 317.691 80.0005 317.691 80.0005 cv
313.63 80.0005 311.573 82.1597 311.573 85.0386 cv
cp
f
362.324 111.102 mo
342.121 111.102 li
342.121 75.271 li
348.394 75.271 li
348.394 105.55 li
362.324 105.55 li
362.324 111.102 li
cp
f
384.244 73.7803 mo
395.348 73.7803 401.208 81.7485 401.208 92.6978 cv
401.208 103.596 395.759 111.77 384.192 111.77 cv
373.757 111.77 367.331 104.47 367.331 92.6978 cv
367.331 82.0054 373.191 73.7803 384.244 73.7803 cv
cp
f
373.552 92.6465 mo
373.552 101.231 376.636 106.167 384.244 106.167 cv
392.109 106.167 394.937 100.82 394.937 92.6465 cv
394.937 83.856 390.979 79.4351 384.192 79.4351 cv
376.327 79.4351 373.552 84.8325 373.552 92.6465 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
406.682 75.0654 mo
413.057 75.0654 li
419.174 98.8154 li
424.571 75.0654 li
431.666 75.0654 li
437.475 98.8154 li
443.182 75.0654 li
449.401 75.0654 li
441.177 111.102 li
434.339 111.102 li
428.17 84.5757 li
422.207 111.102 li
415.369 111.102 li
406.682 75.0654 li
cp
0 0 0 0 cmyk
f
134.071 154.028 mo
141.885 126.68 li
148.208 126.68 li
137.875 162.511 li
130.164 162.511 li
119.42 126.68 li
125.743 126.68 li
134.071 154.028 li
cp
f
178.487 141.485 mo
178.487 146.78 li
163.476 146.78 li
163.476 157.01 li
180.8 157.01 li
180.8 162.511 li
157.102 162.511 li
157.102 126.577 li
179.772 126.577 li
179.772 131.923 li
163.116 131.923 li
163.116 141.485 li
178.487 141.485 li
cp
f
213.67 140.817 mo
213.67 126.731 li
219.633 126.731 li
219.633 162.511 li
213.67 162.511 li
213.67 146.112 li
197.374 146.112 li
197.374 162.511 li
191.154 162.511 li
191.154 126.731 li
197.374 126.731 li
197.374 140.817 li
213.67 140.817 li
cp
f
232.472 162.511 mo
232.472 126.526 li
238.692 126.526 li
238.692 162.511 li
232.472 162.511 li
cp
f
280.813 135.933 mo
275.003 137.167 li
273.358 132.541 270.017 130.792 265.802 130.792 cv
259.479 130.792 255.16 136.087 255.16 144.158 cv
255.16 152.486 258.707 157.884 266.213 157.884 cv
266.213 157.884 272.124 157.884 275.261 150.996 cv
280.967 152.178 li
277.882 163.179 266.315 163.179 266.315 163.179 cv
253.567 163.179 248.837 153.926 248.837 143.901 cv
248.837 133.106 255.828 125.189 265.647 125.189 cv
273.204 125.189 278.757 129.147 280.813 135.933 cv
cp
f
310.419 162.511 mo
290.216 162.511 li
290.216 126.68 li
296.488 126.68 li
296.488 156.958 li
310.419 156.958 li
310.419 162.511 li
cp
f
339.228 141.485 mo
339.228 146.78 li
324.217 146.78 li
324.217 157.01 li
341.541 157.01 li
341.541 162.511 li
317.843 162.511 li
317.843 126.577 li
340.513 126.577 li
340.513 131.923 li
323.856 131.923 li
323.856 141.485 li
339.228 141.485 li
cp
f
356.161 136.447 mo
356.161 138.503 357.446 140.097 360.994 140.868 cv
368.808 142.565 li
373.023 143.438 376.313 146.832 376.313 151.407 cv
376.313 158.192 371.121 163.282 363.152 163.282 cv
356.829 163.282 353.745 161.585 348.965 156.547 cv
353.591 152.641 li
357.035 156.393 359.708 157.678 363.152 157.678 cv
367.625 157.678 370.452 156.188 370.452 152.846 cv
370.452 150.636 368.858 148.733 365.979 148.117 cv
358.731 146.575 li
353.437 145.443 350.198 141.228 350.198 136.704 cv
350.198 130.227 355.185 126.114 363.05 126.114 cv
363.05 126.114 372.2 126.114 375.645 131.975 cv
370.761 135.625 li
368.088 131.41 362.278 131.41 362.278 131.41 cv
358.218 131.41 356.161 133.568 356.161 136.447 cv
cp
f
137.509 193.254 mo
134.785 193.254 133.037 195.464 133.037 198.549 cv
133.037 213.919 li
127.434 213.919 li
127.434 197.367 li
127.434 196.338 126.354 193.305 123.372 193.305 cv
120.494 193.305 118.746 195.31 118.746 198.446 cv
118.746 213.919 li
112.988 213.919 li
112.988 188.268 li
118.746 188.268 li
118.746 190.581 li
120.802 187.959 124.812 187.959 124.812 187.959 cv
124.812 187.959 129.027 187.959 131.546 191.146 cv
134.168 187.908 138.486 187.908 138.486 187.908 cv
143.267 187.908 147.482 191.3 147.482 196.082 cv
147.482 213.919 li
141.828 213.919 li
141.828 197.315 li
141.828 194.745 139.823 193.254 137.509 193.254 cv
cp
f
155.871 206.106 mo
155.871 188.473 li
161.474 188.473 li
161.474 204.923 li
161.474 206.466 162.245 209.396 165.998 209.396 cv
168.774 209.396 171.242 206.414 171.242 203.844 cv
171.242 188.473 li
176.999 188.473 li
176.999 213.919 li
171.242 213.919 li
171.242 211.606 li
169.442 214.691 164.353 214.691 164.353 214.691 cv
159.161 214.691 155.871 211.349 155.871 206.106 cv
cp
f
189.414 195.31 mo
189.414 196.595 190.905 197.572 193.167 198.035 cv
197.742 198.96 197.125 198.909 198.513 199.474 cv
201.341 200.502 203.037 202.662 203.037 206.208 cv
203.037 210.475 199.49 214.537 193.835 214.537 cv
189.928 214.537 187.358 213.766 182.474 209.858 cv
186.124 206.208 li
188.643 208.522 190.597 209.293 193.116 209.293 cv
195.84 209.293 197.331 208.47 197.331 206.568 cv
197.331 204.667 196.303 204.667 190.957 203.124 cv
184.53 201.273 183.965 197.88 183.965 195.413 cv
183.965 191.866 186.587 187.394 193.989 187.394 cv
193.989 187.394 199.387 187.394 202.883 191.095 cv
199.798 195.002 li
197.177 192.38 193.887 192.38 193.887 192.38 cv
191.213 192.38 189.414 193.614 189.414 195.31 cv
cp
f
212.281 188.216 mo
212.281 180.042 li
217.885 177.78 li
217.885 188.216 li
224.516 188.216 li
224.516 192.843 li
217.885 192.843 li
217.885 206.054 li
217.885 208.111 218.81 208.984 220.404 208.984 cv
220.404 208.984 222.769 208.984 224.105 208.419 cv
224.567 213.457 li
221.895 214.125 218.707 214.125 218.707 214.125 cv
214.081 214.125 212.281 211.863 212.281 206.312 cv
212.281 192.843 li
207.757 192.843 li
207.757 188.216 li
212.281 188.216 li
cp
f
251.17 190.375 mo
254.101 187.908 258.213 187.908 258.213 187.908 cv
260.989 187.908 268.957 190.632 268.957 201.119 cv
268.957 209.396 263.714 214.537 258.059 214.537 cv
254.923 214.537 252.866 213.714 251.17 211.76 cv
251.17 221.888 li
245.516 221.888 li
245.516 188.268 li
251.17 188.268 li
251.17 190.375 li
cp
f
251.17 199.063 mo
251.17 203.689 li
251.17 206.671 254.101 209.242 256.928 209.242 cv
260.423 209.242 263.354 205.386 263.354 201.325 cv
263.354 197.007 260.269 193.614 257.082 193.614 cv
254.46 193.614 251.17 196.03 251.17 199.063 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
296.819 195.413 mo
296.819 213.919 li
291.575 213.919 li
291.575 198.395 li
291.575 195.722 289.879 193.1 287.052 193.1 cv
283.145 193.1 281.603 196.39 281.603 198.395 cv
281.603 213.919 li
275.999 213.919 li
275.999 177.883 li
281.603 177.883 li
281.603 190.581 li
283.299 187.548 287.977 187.548 287.977 187.548 cv
294.196 187.548 296.819 192.38 296.819 195.413 cv
cp
0 0 0 0 cmyk
f
302.835 201.068 mo
302.835 192.997 307.513 187.342 315.173 187.342 cv
322.78 187.342 327.304 192.894 327.304 201.068 cv
327.304 210.167 321.341 214.588 315.173 214.588 cv
307.976 214.588 302.835 208.728 302.835 201.068 cv
cp
f
321.804 201.068 mo
321.804 196.133 319.233 192.843 315.12 192.843 cv
311.06 192.843 308.644 196.184 308.644 201.068 cv
308.644 205.849 311.06 209.242 315.173 209.242 cv
319.182 209.242 321.804 205.797 321.804 201.068 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
355.917 196.133 mo
355.917 213.919 li
350.263 213.919 li
350.263 197.367 li
350.263 196.441 348.874 193.1 345.739 193.1 cv
342.911 193.1 340.444 195.824 340.444 198.446 cv
340.444 213.919 li
334.635 213.919 li
334.635 188.268 li
340.444 188.268 li
340.444 190.581 li
342.346 187.65 347.486 187.65 347.486 187.65 cv
351.548 187.65 355.917 191.403 355.917 196.133 cv
cp
0 0 0 0 cmyk
f
361.644 201.017 mo
361.644 192.945 366.527 187.65 373.724 187.65 cv
380.612 187.65 384.88 192.637 384.88 202.147 cv
384.88 202.764 384.88 203.073 384.88 203.073 cv
367.658 203.073 li
368.275 206.979 370.383 209.036 374.136 209.036 cv
374.136 209.036 377.837 209.036 380.202 206.517 cv
383.595 210.784 li
379.944 214.639 374.238 214.639 374.238 214.639 cv
366.373 214.639 361.644 209.447 361.644 201.017 cv
cp
f
367.658 198.754 mo
379.173 198.754 li
378.968 194.899 377.065 192.534 373.776 192.534 cv
370.589 192.534 368.069 194.437 367.658 198.754 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
33.626 265.74 mo
28.5366 265.74 24.064 262.09 24.064 257.36 cv
24.064 254.276 26.7886 250.164 32.3921 249.546 cv
39.3838 248.775 li
39.3838 247.696 li
39.3838 245.28 38.3555 243.84 35.4253 243.84 cv
35.4253 243.84 31.3643 243.84 27.4058 245.896 cv
25.1953 241.527 li
28.3311 239.728 32.5977 238.802 35.6821 238.802 cv
44.0103 238.802 45.0898 245.742 45.0898 247.285 cv
45.0898 258.954 li
45.0898 260.291 45.5522 260.856 47.249 261.576 cv
44.7813 266.048 li
42.314 265.174 41.4912 264.763 40.4629 263.478 cv
37.3271 265.74 33.626 265.74 33.626 265.74 cv
cp
0 0 0 0 cmyk
f
29.8218 257.618 mo
29.8218 259.674 31.981 261.216 34.3457 261.216 cv
37.2246 261.216 39.3838 259.571 39.3838 257.566 cv
39.3838 253.351 li
33.5747 253.916 li
31.0557 254.173 29.8218 255.818 29.8218 257.618 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
75.5088 247.542 mo
75.5088 265.329 li
69.854 265.329 li
69.854 248.775 li
69.854 247.85 68.4663 244.509 65.3301 244.509 cv
62.5029 244.509 60.0352 247.233 60.0352 249.855 cv
60.0352 265.329 li
54.2266 265.329 li
54.2266 239.676 li
60.0352 239.676 li
60.0352 241.99 li
61.9375 239.06 67.0781 239.06 67.0781 239.06 cv
71.1392 239.06 75.5088 242.812 75.5088 247.542 cv
cp
0 0 0 0 cmyk
f
99.228 263.221 mo
96.2974 265.688 92.1851 265.688 92.1851 265.688 cv
89.4092 265.688 81.1841 262.964 81.1841 252.425 cv
81.1841 244.663 85.5537 239.06 92.3906 239.06 cv
95.4751 239.06 97.5313 239.882 99.228 241.835 cv
99.228 229.292 li
104.883 229.292 li
104.883 265.329 li
99.228 265.329 li
99.228 263.221 li
cp
f
99.228 254.533 mo
99.228 249.906 li
99.228 246.925 96.2974 244.303 93.5215 244.303 cv
89.9746 244.303 87.0444 248.21 87.0444 252.271 cv
87.0444 256.589 90.1289 259.982 93.3672 259.982 cv
95.9375 259.982 99.228 257.566 99.228 254.533 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
137.953 274.068 mo
137.953 274.068 132.709 274.068 128.802 271.652 cv
130.807 266.768 li
133.634 268.156 135.999 268.67 138.518 268.67 cv
140.729 268.67 144.07 268.259 144.07 264.609 cv
144.07 261.216 li
141.448 263.324 138.261 263.324 138.261 263.324 cv
128.956 263.324 127.363 254.328 127.363 251.038 cv
127.363 247.285 129.265 239.162 137.953 239.162 cv
137.953 239.162 142.322 239.162 143.967 241.527 cv
143.967 239.625 li
149.622 239.625 li
149.622 264.609 li
149.622 268.208 149.313 274.068 137.953 274.068 cv
cp
0 0 0 0 cmyk
f
138.569 258.029 mo
142.579 258.029 144.07 255.047 144.07 251.243 cv
144.687 244.714 138.569 244.714 138.569 244.714 cv
134.817 244.714 133.223 247.079 133.223 251.243 cv
133.223 255.099 134.817 258.029 138.569 258.029 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
156.203 252.425 mo
156.203 244.354 161.086 239.06 168.283 239.06 cv
175.172 239.06 179.438 244.046 179.438 253.556 cv
179.438 254.173 179.438 254.481 179.438 254.481 cv
162.217 254.481 li
162.834 258.389 164.942 260.445 168.694 260.445 cv
168.694 260.445 172.396 260.445 174.761 257.926 cv
178.153 262.193 li
174.503 266.048 168.797 266.048 168.797 266.048 cv
160.932 266.048 156.203 260.856 156.203 252.425 cv
cp
0 0 0 0 cmyk
f
162.217 250.164 mo
173.732 250.164 li
173.527 246.308 171.625 243.943 168.334 243.943 cv
165.147 243.943 162.628 245.845 162.217 250.164 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
188.265 239.625 mo
188.265 231.451 li
193.868 229.189 li
193.868 239.625 li
200.5 239.625 li
200.5 244.251 li
193.868 244.251 li
193.868 257.463 li
193.868 259.52 194.794 260.394 196.387 260.394 cv
196.387 260.394 198.752 260.394 200.088 259.828 cv
200.551 264.866 li
197.878 265.535 194.691 265.535 194.691 265.535 cv
190.064 265.535 188.265 263.272 188.265 257.72 cv
188.265 244.251 li
183.741 244.251 li
183.741 239.625 li
188.265 239.625 li
cp
0 0 0 0 cmyk
f
227.154 241.784 mo
230.084 239.316 234.197 239.316 234.197 239.316 cv
236.973 239.316 244.941 242.041 244.941 252.528 cv
244.941 260.805 239.697 265.946 234.042 265.946 cv
230.906 265.946 228.85 265.123 227.154 263.169 cv
227.154 273.296 li
221.499 273.296 li
221.499 239.676 li
227.154 239.676 li
227.154 241.784 li
cp
f
227.154 250.472 mo
227.154 255.099 li
227.154 258.08 230.084 260.65 232.912 260.65 cv
236.407 260.65 239.337 256.795 239.337 252.734 cv
239.337 248.416 236.253 245.023 233.065 245.023 cv
230.444 245.023 227.154 247.439 227.154 250.472 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
250.235 252.425 mo
250.235 244.354 255.118 239.06 262.315 239.06 cv
269.204 239.06 273.471 244.046 273.471 253.556 cv
273.471 254.173 273.471 254.481 273.471 254.481 cv
256.249 254.481 li
256.866 258.389 258.974 260.445 262.727 260.445 cv
262.727 260.445 266.428 260.445 268.792 257.926 cv
272.186 262.193 li
268.535 266.048 262.829 266.048 262.829 266.048 cv
254.964 266.048 250.235 260.856 250.235 252.425 cv
cp
0 0 0 0 cmyk
f
256.249 250.164 mo
267.765 250.164 li
267.559 246.308 265.656 243.943 262.366 243.943 cv
259.18 243.943 256.66 245.845 256.249 250.164 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
293.504 245.229 mo
285.741 243.737 285.741 252.323 285.741 252.323 cv
285.741 265.329 li
280.138 265.329 li
280.138 239.676 li
285.741 239.676 li
285.741 242.298 li
286.821 240.705 290.214 238.751 293.504 239.316 cv
293.504 245.229 li
cp
0 0 0 0 cmyk
f
324.589 244.663 mo
321.864 244.663 320.116 246.874 320.116 249.958 cv
320.116 265.329 li
314.513 265.329 li
314.513 248.775 li
314.513 247.748 313.433 244.714 310.451 244.714 cv
307.573 244.714 305.825 246.719 305.825 249.855 cv
305.825 265.329 li
300.067 265.329 li
300.067 239.676 li
305.825 239.676 li
305.825 241.99 li
307.881 239.368 311.891 239.368 311.891 239.368 cv
311.891 239.368 316.106 239.368 318.625 242.555 cv
321.247 239.316 325.564 239.316 325.564 239.316 cv
330.346 239.316 334.562 242.709 334.562 247.49 cv
334.562 265.329 li
328.906 265.329 li
328.906 248.724 li
328.906 246.154 326.901 244.663 324.589 244.663 cv
cp
f
342.795 265.329 mo
342.795 239.625 li
348.45 239.625 li
348.45 265.329 li
342.795 265.329 li
cp
f
342.127 232.685 mo
342.127 230.886 343.721 229.241 345.52 229.241 cv
347.524 229.241 349.067 230.834 349.067 232.685 cv
349.067 234.69 347.524 236.232 345.571 236.232 cv
343.721 236.232 342.127 234.69 342.127 232.685 cv
cp
f
360.955 246.719 mo
360.955 248.004 362.445 248.981 364.708 249.444 cv
369.283 250.369 368.666 250.318 370.054 250.883 cv
372.882 251.911 374.578 254.07 374.578 257.618 cv
374.578 261.884 371.031 265.946 365.376 265.946 cv
361.469 265.946 358.898 265.174 354.015 261.268 cv
357.665 257.618 li
360.185 259.931 362.138 260.702 364.656 260.702 cv
367.381 260.702 368.872 259.879 368.872 257.977 cv
368.872 256.075 367.844 256.075 362.497 254.533 cv
356.071 252.683 355.506 249.29 355.506 246.822 cv
355.506 243.275 358.128 238.802 365.53 238.802 cv
365.53 238.802 370.928 238.802 374.424 242.504 cv
371.34 246.411 li
368.718 243.789 365.428 243.789 365.428 243.789 cv
362.755 243.789 360.955 245.023 360.955 246.719 cv
cp
f
385.468 246.719 mo
385.468 248.004 386.958 248.981 389.22 249.444 cv
393.795 250.369 393.178 250.318 394.566 250.883 cv
397.394 251.911 399.09 254.07 399.09 257.618 cv
399.09 261.884 395.543 265.946 389.888 265.946 cv
385.981 265.946 383.411 265.174 378.527 261.268 cv
382.178 257.618 li
384.696 259.931 386.649 260.702 389.169 260.702 cv
391.894 260.702 393.384 259.879 393.384 257.977 cv
393.384 256.075 392.356 256.075 387.009 254.533 cv
380.583 252.683 380.019 249.29 380.019 246.822 cv
380.019 243.275 382.64 238.802 390.042 238.802 cv
390.042 238.802 395.44 238.802 398.936 242.504 cv
395.852 246.411 li
393.229 243.789 389.939 243.789 389.939 243.789 cv
387.267 243.789 385.468 245.023 385.468 246.719 cv
cp
f
405.765 265.329 mo
405.765 239.625 li
411.419 239.625 li
411.419 265.329 li
405.765 265.329 li
cp
f
405.096 232.685 mo
405.096 230.886 406.689 229.241 408.489 229.241 cv
410.493 229.241 412.035 230.834 412.035 232.685 cv
412.035 234.69 410.493 236.232 408.54 236.232 cv
406.689 236.232 405.096 234.69 405.096 232.685 cv
cp
f
418.423 252.477 mo
418.423 244.406 423.101 238.751 430.761 238.751 cv
438.369 238.751 442.893 244.303 442.893 252.477 cv
442.893 261.576 436.93 265.997 430.761 265.997 cv
423.563 265.997 418.423 260.136 418.423 252.477 cv
cp
f
437.392 252.477 mo
437.392 247.542 434.821 244.251 430.71 244.251 cv
426.648 244.251 424.231 247.593 424.231 252.477 cv
424.231 257.258 426.648 260.65 430.761 260.65 cv
434.771 260.65 437.392 257.206 437.392 252.477 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
471.506 247.542 mo
471.506 265.329 li
465.851 265.329 li
465.851 248.775 li
465.851 247.85 464.463 244.509 461.327 244.509 cv
458.5 244.509 456.032 247.233 456.032 249.855 cv
456.032 265.329 li
450.223 265.329 li
450.223 239.676 li
456.032 239.676 li
456.032 241.99 li
457.935 239.06 463.075 239.06 463.075 239.06 cv
467.136 239.06 471.506 242.812 471.506 247.542 cv
cp
0 0 0 0 cmyk
f
158.318 291.034 mo
158.318 282.86 li
163.921 280.598 li
163.921 291.034 li
170.553 291.034 li
170.553 295.661 li
163.921 295.661 li
163.921 308.873 li
163.921 310.928 164.847 311.802 166.44 311.802 cv
166.44 311.802 168.805 311.802 170.142 311.237 cv
170.604 316.275 li
167.932 316.943 164.744 316.943 164.744 316.943 cv
160.118 316.943 158.318 314.681 158.318 309.129 cv
158.318 295.661 li
153.794 295.661 li
153.794 291.034 li
158.318 291.034 li
cp
f
175.134 303.885 mo
175.134 295.815 179.813 290.161 187.472 290.161 cv
195.08 290.161 199.604 295.711 199.604 303.885 cv
199.604 312.985 193.641 317.406 187.472 317.406 cv
180.275 317.406 175.134 311.545 175.134 303.885 cv
cp
f
194.104 303.885 mo
194.104 298.951 191.533 295.661 187.42 295.661 cv
183.359 295.661 180.943 299.001 180.943 303.885 cv
180.943 308.667 183.359 312.06 187.472 312.06 cv
191.481 312.06 194.104 308.615 194.104 303.885 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
242.99 297.1 mo
238.261 299.516 li
236.41 295.661 232.657 295.661 232.657 295.661 cv
228.956 295.661 226.18 299.414 226.18 304.297 cv
226.18 308.923 229.162 312.213 232.555 312.213 cv
232.555 312.213 235.176 312.213 238.518 308.358 cv
243.093 310.363 li
239.957 317.097 232.041 317.097 232.041 317.097 cv
225.255 317.097 220.525 310.928 220.525 304.348 cv
220.525 296.483 225.152 290.674 232.452 290.674 cv
232.452 290.674 239.083 290.674 242.99 297.1 cv
cp
0 0 0 0 cmyk
f
262.428 296.637 mo
254.665 295.147 254.665 303.731 254.665 303.731 cv
254.665 316.737 li
249.062 316.737 li
249.062 291.085 li
254.665 291.085 li
254.665 293.707 li
255.744 292.114 259.138 290.161 262.428 290.726 cv
262.428 296.637 li
cp
f
267.911 303.885 mo
267.911 295.815 272.59 290.161 280.249 290.161 cv
287.857 290.161 292.381 295.711 292.381 303.885 cv
292.381 312.985 286.418 317.406 280.249 317.406 cv
273.052 317.406 267.911 311.545 267.911 303.885 cv
cp
f
286.881 303.885 mo
286.881 298.951 284.311 295.661 280.198 295.661 cv
276.136 295.661 273.72 299.001 273.72 303.885 cv
273.72 308.667 276.136 312.06 280.249 312.06 cv
284.259 312.06 286.881 308.615 286.881 303.885 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
303.772 298.127 mo
303.772 299.414 305.264 300.39 307.525 300.852 cv
312.101 301.778 311.483 301.727 312.872 302.292 cv
315.699 303.321 317.396 305.479 317.396 309.027 cv
317.396 313.293 313.849 317.354 308.194 317.354 cv
304.286 317.354 301.716 316.583 296.833 312.676 cv
300.482 309.027 li
303.002 311.339 304.955 312.111 307.474 312.111 cv
310.198 312.111 311.689 311.289 311.689 309.386 cv
311.689 307.485 310.661 307.485 305.314 305.942 cv
298.89 304.091 298.323 300.698 298.323 298.231 cv
298.323 294.684 300.945 290.211 308.348 290.211 cv
308.348 290.211 313.745 290.211 317.241 293.913 cv
314.157 297.82 li
311.535 295.198 308.245 295.198 308.245 295.198 cv
305.571 295.198 303.772 296.431 303.772 298.127 cv
cp
0 0 0 0 cmyk
f
328.285 298.127 mo
328.285 299.414 329.776 300.39 332.038 300.852 cv
336.612 301.778 335.996 301.727 337.384 302.292 cv
340.211 303.321 341.907 305.479 341.907 309.027 cv
341.907 313.293 338.36 317.354 332.706 317.354 cv
328.799 317.354 326.229 316.583 321.345 312.676 cv
324.994 309.027 li
327.514 311.339 329.468 312.111 331.986 312.111 cv
334.711 312.111 336.202 311.289 336.202 309.386 cv
336.202 307.485 335.173 307.485 329.827 305.942 cv
323.401 304.091 322.836 300.698 322.836 298.231 cv
322.836 294.684 325.457 290.211 332.86 290.211 cv
332.86 290.211 338.258 290.211 341.753 293.913 cv
338.669 297.82 li
336.048 295.198 332.757 295.198 332.757 295.198 cv
330.084 295.198 328.285 296.431 328.285 298.127 cv
cp
f
150.396 383.179 mo
150.396 387.98 li
134.972 387.98 li
134.972 364.01 li
139.772 364.01 li
139.772 383.179 li
150.396 383.179 li
cp
0 0 0 1 cmyk
f
160.051 364.01 mo
166.589 364.01 li
174.624 387.98 li
169.245 387.98 li
167.951 383.724 li
158.894 383.724 li
157.6 387.98 li
152.425 387.98 li
160.051 364.01 li
cp
f
163.32 369.083 mo
160.154 379.434 li
166.555 379.434 li
163.32 369.083 li
cp
0 0 0 0 cmyk
f
192.601 378.039 mo
198.525 387.98 li
192.805 387.98 li
187.596 378.651 li
183.987 378.651 li
183.987 387.98 li
179.22 387.98 li
179.22 364.01 li
190.694 364.01 li
193.895 364.01 197.402 367.21 197.402 371.092 cv
197.402 371.092 197.402 376.03 192.601 378.039 cv
cp
0 0 0 1 cmyk
f
192.465 371.126 mo
192.465 369.458 191.069 368.402 189.639 368.402 cv
183.987 368.402 li
183.987 374.088 li
189.571 374.088 li
191.069 374.088 192.465 372.863 192.465 371.126 cv
cp
0 0 0 0 cmyk
f
214.072 363.738 mo
214.072 363.738 221.154 363.738 223.606 369.493 cv
219.111 371.773 li
217.852 368.402 213.936 368.402 213.936 368.402 cv
209.987 368.402 207.637 371.365 207.637 376.233 cv
207.637 381.035 209.987 384.064 213.8 384.064 cv
217.035 384.064 219.35 381.852 219.35 378.822 cv
219.35 378.447 li
213.357 378.447 li
213.357 374.293 li
223.98 374.293 li
223.98 387.98 li
219.486 387.98 li
219.486 386.311 li
217.137 388.696 213.562 388.696 213.562 388.696 cv
207.433 388.696 202.496 383.35 202.496 376.131 cv
202.496 369.185 206.82 363.738 214.072 363.738 cv
cp
0 0 0 1 cmyk
f
245.458 373.612 mo
245.458 377.936 li
235.652 377.936 li
235.652 383.077 li
247.331 383.077 li
247.331 387.98 li
230.852 387.98 li
230.852 364.01 li
246.242 364.01 li
246.242 368.573 li
235.652 368.573 li
235.652 373.612 li
245.458 373.612 li
cp
f
281.007 374.667 mo
278.998 374.667 278.044 376.131 278.044 377.97 cv
278.044 387.98 li
273.312 387.98 li
273.312 378.106 li
273.312 375.756 272.393 374.667 270.895 374.667 cv
269.021 374.667 267.864 376.233 267.864 377.97 cv
267.864 387.98 li
263.302 387.98 li
263.302 370.751 li
267.864 370.751 li
267.864 372.045 li
269.294 370.751 270.248 370.275 271.813 370.275 cv
274.027 370.275 274.741 370.582 276.478 372.454 cv
278.317 370.616 279.61 370.207 281.552 370.207 cv
285.263 370.207 288.021 373.612 288.021 377.221 cv
288.021 387.98 li
283.39 387.98 li
283.39 378.106 li
283.39 375.756 282.471 374.667 281.007 374.667 cv
cp
f
304.686 382.499 mo
307.442 385.495 li
305.229 387.503 303.766 388.354 300.634 388.354 cv
295.288 388.354 292.02 384.405 292.02 379.127 cv
292.02 374.429 295.05 370.309 299.715 370.309 cv
304.788 370.309 307.92 374.088 307.92 379.74 cv
307.92 380.932 li
296.548 380.932 li
296.649 382.907 298.454 384.336 300.735 384.336 cv
302.029 384.336 302.744 384.133 304.686 382.499 cv
cp
f
296.548 377.425 mo
303.527 377.425 li
303.425 375.723 301.723 374.19 300.021 374.19 cv
298.284 374.19 296.82 375.552 296.548 377.425 cv
cp
0 0 0 0 cmyk
f
317.085 388.457 mo
313.306 388.457 311.093 386.346 311.093 383.043 cv
311.093 380.115 312.862 377.016 321.17 377.016 cv
321.17 376.063 li
321.17 375.042 320.148 374.395 318.582 374.395 cv
317.255 374.395 315.008 375.178 313.373 376.166 cv
311.16 372.794 li
312.386 371.875 315.348 370.207 318.515 370.207 cv
323.315 370.207 325.801 372.045 325.801 375.382 cv
325.801 382.567 li
325.801 384.098 326.21 384.542 327.81 384.813 cv
326.21 388.422 li
325.392 388.422 323.111 388.116 321.953 386.652 cv
320.421 388.116 318.991 388.457 317.085 388.457 cv
cp
0 0 0 1 cmyk
f
318.549 384.61 mo
320.456 384.61 321.307 384.064 321.307 382.634 cv
321.307 380.456 li
317.8 380.966 li
316.268 381.205 315.961 382.022 315.961 382.975 cv
315.961 384.098 316.642 384.61 318.549 384.61 cv
cp
0 0 0 0 cmyk
f
337.327 370.684 mo
338.042 370.343 338.894 370.241 339.711 370.241 cv
343.456 370.241 346.282 373.135 346.282 376.608 cv
346.282 387.98 li
341.753 387.98 li
341.753 378.106 li
341.753 376.166 340.8 374.599 338.928 374.599 cv
336.715 374.599 335.284 375.893 335.284 377.629 cv
335.284 387.98 li
330.723 387.98 li
330.723 370.718 li
335.42 370.718 li
335.42 371.977 li
336.306 371.228 336.578 370.957 337.327 370.684 cv
cp
0 0 0 1 cmyk
f
356.953 377.084 mo
359.813 377.494 li
362.844 377.902 364.648 380.013 364.648 382.703 cv
364.648 386.175 361.754 388.593 357.634 388.593 cv
354.06 388.593 351.642 387.708 349.36 385.426 cv
352.765 382.43 li
354.161 383.86 355.728 384.677 357.396 384.677 cv
358.757 384.677 359.848 384.098 359.848 383.213 cv
359.848 382.499 359.132 381.818 357.702 381.545 cv
354.706 380.966 li
352.05 380.456 350.483 378.447 350.483 376.097 cv
350.483 372.625 353.174 370.411 357.601 370.411 cv
360.017 370.411 362.061 370.82 364.443 372.964 cv
361.516 376.063 li
360.323 374.667 359.064 374.225 357.498 374.225 cv
356.17 374.225 355.251 374.973 355.251 375.825 cv
355.251 376.404 355.557 376.915 356.953 377.084 cv
cp
f
31.1343 413.62 mo
31.1343 406.639 35.2202 404.085 39.3057 404.085 cv
43.0171 404.085 47.6475 406.639 47.6475 413.62 cv
47.6475 418.76 44.2769 422.642 39.5439 422.642 cv
34.3345 422.642 31.1343 419.068 31.1343 413.62 cv
cp
f
42.9829 413.62 mo
42.9829 409.568 41.5869 408.308 39.5439 408.308 cv
36.9565 408.308 35.9009 410.418 35.9009 413.62 cv
35.9009 416.412 37.2627 418.523 39.5439 418.523 cv
41.791 418.523 42.9829 416.412 42.9829 413.62 cv
cp
0 0 0 0 cmyk
f
58.7993 415.594 mo
62.3403 404.835 li
67.1069 404.835 li
61.353 422.03 li
56.1094 422.03 li
50.1509 404.835 li
55.1563 404.835 li
58.7993 415.594 li
cp
0 0 0 1 cmyk
f
81.8936 416.547 mo
84.6514 419.543 li
82.438 421.552 80.9741 422.404 77.8418 422.404 cv
72.4961 422.404 69.2275 418.455 69.2275 413.177 cv
69.2275 408.478 72.2578 404.359 76.9224 404.359 cv
81.9956 404.359 85.1279 408.138 85.1279 413.79 cv
85.1279 414.981 li
73.7559 414.981 li
73.8579 416.957 75.6626 418.386 77.9438 418.386 cv
79.2378 418.386 79.9526 418.182 81.8936 416.547 cv
cp
f
73.7559 411.475 mo
80.7358 411.475 li
80.6338 409.772 78.9312 408.24 77.229 408.24 cv
75.4922 408.24 74.0283 409.602 73.7559 411.475 cv
cp
0 0 0 0 cmyk
f
93.8159 406.469 mo
94.8374 405.107 96.5737 404.46 98.3447 404.46 cv
98.583 404.46 98.7871 404.46 99.1958 404.495 cv
99.1958 408.956 li
97.6973 409.023 97.2549 409.023 97.2549 409.023 cv
95.314 409.091 93.7139 410.453 93.7139 413.21 cv
93.7139 422.03 li
89.1172 422.03 li
89.1172 404.699 li
93.7139 404.699 li
93.8159 406.469 li
cp
0 0 0 1 cmyk
f
121.168 402.588 mo
120.658 405.958 li
122.122 405.107 123.041 404.699 124.437 404.699 cv
129.476 404.699 132.643 408.24 132.643 413.517 cv
132.643 419.101 129.306 422.574 123.722 422.574 cv
119.023 422.574 116.572 420.702 115.04 416.105 cv
119.568 414.674 li
120.011 415.798 121.202 418.148 123.756 418.148 cv
126.139 418.148 127.706 416.105 127.706 413.449 cv
127.706 410.93 126.003 409.16 123.586 409.16 cv
122.156 409.16 121.134 409.738 119.977 411.236 cv
114.972 410.418 li
116.844 398.196 li
131.587 398.196 li
131.587 402.588 li
121.168 402.588 li
cp
f
143.347 402.588 mo
142.836 405.958 li
144.3 405.107 145.22 404.699 146.616 404.699 cv
151.655 404.699 154.821 408.24 154.821 413.517 cv
154.821 419.101 151.484 422.574 145.9 422.574 cv
141.202 422.574 138.75 420.702 137.218 416.105 cv
141.747 414.674 li
142.189 415.798 143.381 418.148 145.935 418.148 cv
148.318 418.148 149.884 416.105 149.884 413.449 cv
149.884 410.93 148.182 409.16 145.764 409.16 cv
144.334 409.16 143.313 409.738 142.155 411.236 cv
137.15 410.418 li
139.022 398.196 li
153.766 398.196 li
153.766 402.588 li
143.347 402.588 li
cp
f
157.626 403.235 mo
161.406 396.698 li
166.479 396.698 li
162.733 403.235 li
157.626 403.235 li
cp
f
180.14 397.923 mo
184.702 397.923 li
184.702 415.594 li
184.702 417.433 185.009 417.875 185.996 417.944 cv
186.575 417.977 187.052 417.944 187.699 417.773 cv
188.141 421.792 li
186.541 422.2 185.009 422.472 183.919 422.472 cv
182.796 422.472 180.14 422.098 180.14 418.08 cv
180.14 397.923 li
cp
f
189.978 413.62 mo
189.978 406.639 194.063 404.085 198.149 404.085 cv
201.86 404.085 206.491 406.639 206.491 413.62 cv
206.491 418.76 203.12 422.642 198.388 422.642 cv
193.178 422.642 189.978 419.068 189.978 413.62 cv
cp
f
201.827 413.62 mo
201.827 409.568 200.431 408.308 198.388 408.308 cv
195.8 408.308 194.745 410.418 194.745 413.62 cv
194.745 416.412 196.106 418.523 198.388 418.523 cv
200.635 418.523 201.827 416.412 201.827 413.62 cv
cp
0 0 0 0 cmyk
f
217.234 404.733 mo
217.949 404.393 218.8 404.291 219.618 404.291 cv
223.363 404.291 226.189 407.185 226.189 410.657 cv
226.189 422.03 li
221.661 422.03 li
221.661 412.156 li
221.661 410.214 220.707 408.648 218.834 408.648 cv
216.622 408.648 215.191 409.943 215.191 411.678 cv
215.191 422.03 li
210.629 422.03 li
210.629 404.767 li
215.328 404.767 li
215.328 406.027 li
216.213 405.278 216.485 405.005 217.234 404.733 cv
cp
0 0 0 1 cmyk
f
237.303 421.042 mo
232.74 421.042 229.88 417.74 229.88 412.973 cv
229.88 407.934 232.876 404.597 237.438 404.597 cv
238.46 404.597 239.618 404.562 241.286 405.789 cv
241.286 404.801 li
246.019 404.801 li
246.019 421.586 li
246.019 424.992 242.58 427.648 237.949 427.648 cv
235.124 427.648 234.511 427.614 230.221 425.604 cv
232.297 421.859 li
234.17 423.391 237.405 423.391 237.405 423.391 cv
239.686 423.391 241.661 423.119 241.252 420.123 cv
239.72 421.178 239.073 421.042 237.303 421.042 cv
cp
f
238.154 416.888 mo
240.265 416.888 241.354 415.764 241.354 413.79 cv
241.354 411.475 li
241.354 409.909 239.992 408.682 238.222 408.682 cv
235.873 408.682 234.544 410.147 234.544 412.667 cv
234.544 415.663 235.43 416.888 238.154 416.888 cv
cp
0 0 0 0 cmyk
f
260.562 413.62 mo
260.562 406.639 264.647 404.085 268.733 404.085 cv
272.444 404.085 277.075 406.639 277.075 413.62 cv
277.075 418.76 273.704 422.642 268.972 422.642 cv
263.762 422.642 260.562 419.068 260.562 413.62 cv
cp
0 0 0 1 cmyk
f
272.41 413.62 mo
272.41 409.568 271.015 408.308 268.972 408.308 cv
266.384 408.308 265.328 410.418 265.328 413.62 cv
265.328 416.412 266.69 418.523 268.972 418.523 cv
271.219 418.523 272.41 416.412 272.41 413.62 cv
cp
0 0 0 0 cmyk
f
285.877 406.469 mo
286.898 405.107 288.636 404.46 290.406 404.46 cv
290.645 404.46 290.849 404.46 291.257 404.495 cv
291.257 408.956 li
289.759 409.023 289.316 409.023 289.316 409.023 cv
287.376 409.091 285.775 410.453 285.775 413.21 cv
285.775 422.03 li
281.179 422.03 li
281.179 404.699 li
285.775 404.699 li
285.877 406.469 li
cp
0 0 0 1 cmyk
f
306.284 406.503 mo
306.284 404.562 306.727 402.894 307.646 401.396 cv
309.178 398.876 311.493 397.923 314.898 397.923 cv
321.163 397.923 324.466 401.941 324.466 410.01 cv
324.466 418.42 321.163 422.642 314.592 422.642 cv
310.982 422.642 307.884 421.212 306.931 417.603 cv
311.425 416.002 li
311.902 417.024 312.515 418.182 314.796 418.182 cv
317.759 418.182 319.665 415.697 319.427 412.939 cv
319.188 413.143 317.315 414.744 314.251 414.744 cv
309.382 414.744 306.284 411.542 306.284 406.503 cv
cp
f
311.255 406.469 mo
311.255 408.75 312.854 410.385 315.001 410.385 cv
317.417 410.385 319.019 408.717 319.019 406.265 cv
319.019 403.881 317.417 402.248 315.103 402.248 cv
312.821 402.248 311.255 403.95 311.255 406.469 cv
cp
0 0 0 0 cmyk
f
327.543 403.235 mo
331.323 396.698 li
336.396 396.698 li
332.65 403.235 li
327.543 403.235 li
cp
0 0 0 1 cmyk
f
360.562 413.517 mo
360.562 417.74 358.995 422.302 352.356 422.302 cv
346.091 422.302 342.788 418.114 342.788 409.943 cv
342.788 401.601 345.717 397.651 352.186 397.651 cv
356.51 397.651 358.825 399.082 360.051 402.792 cv
355.659 404.426 li
355.182 403.302 354.398 402.009 351.811 402.009 cv
349.258 402.009 347.453 404.291 347.726 407.151 cv
348.44 406.469 350.619 405.448 352.832 405.448 cv
357.702 405.448 360.562 408.411 360.562 413.517 cv
cp
f
355.829 413.756 mo
355.829 411.475 354.263 409.806 352.016 409.806 cv
349.666 409.806 348.031 411.475 348.031 413.926 cv
348.031 416.309 349.666 417.91 351.947 417.91 cv
354.263 417.91 355.829 416.241 355.829 413.756 cv
cp
0 0 0 0 cmyk
f
363.45 403.235 mo
367.229 396.698 li
372.336 396.698 li
368.591 403.235 li
363.45 403.235 li
cp
0 0 0 1 cmyk
f
370.293 403.235 mo
374.038 396.698 li
379.146 396.698 li
375.4 403.235 li
370.293 403.235 li
cp
f
391.124 404.903 mo
395.925 404.903 li
398.819 415.56 li
401.44 404.903 li
406.445 404.903 li
409.102 415.56 li
412.063 404.903 li
416.626 404.903 li
411.928 422.03 li
406.445 422.03 li
403.927 411.406 li
401.373 422.03 li
395.959 422.03 li
391.124 404.903 li
cp
f
420.169 422.03 mo
420.169 404.699 li
424.731 404.699 li
424.731 422.03 li
420.169 422.03 li
cp
f
419.794 400.375 mo
419.794 398.945 420.952 397.719 422.382 397.719 cv
423.88 397.719 425.038 398.945 425.038 400.409 cv
425.038 401.839 423.88 403.031 422.416 403.031 cv
420.952 403.031 419.794 401.839 419.794 400.375 cv
cp
f
428.413 413.517 mo
428.413 408.512 430.898 404.188 435.938 404.188 cv
437.708 404.188 438.866 404.426 440.704 405.652 cv
440.704 397.991 li
445.369 397.991 li
445.369 422.03 li
440.704 422.03 li
440.704 420.974 li
439.206 422.234 437.776 422.438 435.802 422.438 cv
431.035 422.438 428.413 418.863 428.413 413.517 cv
cp
f
437.062 418.318 mo
439.444 418.318 440.738 417.024 440.738 414.674 cv
440.738 411.952 li
440.738 409.909 439.343 408.308 437.163 408.308 cv
434.439 408.308 433.077 410.385 433.077 413.347 cv
433.077 416.412 434.439 418.318 437.062 418.318 cv
cp
0 0 0 0 cmyk
f
461.748 416.547 mo
464.507 419.543 li
462.294 421.552 460.829 422.404 457.696 422.404 cv
452.351 422.404 449.082 418.455 449.082 413.177 cv
449.082 408.478 452.112 404.359 456.777 404.359 cv
461.851 404.359 464.983 408.138 464.983 413.79 cv
464.983 414.981 li
453.611 414.981 li
453.714 416.957 455.518 418.386 457.799 418.386 cv
459.093 418.386 459.808 418.182 461.748 416.547 cv
cp
0 0 0 1 cmyk
f
453.611 411.475 mo
460.591 411.475 li
460.489 409.772 458.786 408.24 457.084 408.24 cv
455.348 408.24 453.883 409.602 453.611 411.475 cv
cp
0 0 0 0 cmyk
f
37.8345 447.668 mo
37.8345 440.689 41.9204 438.135 46.0059 438.135 cv
49.7173 438.135 54.3477 440.689 54.3477 447.668 cv
54.3477 452.81 50.9771 456.692 46.2446 456.692 cv
41.0352 456.692 37.8345 453.116 37.8345 447.668 cv
cp
0 0 0 1 cmyk
f
49.6831 447.668 mo
49.6831 443.618 48.2871 442.357 46.2446 442.357 cv
43.6567 442.357 42.6011 444.468 42.6011 447.668 cv
42.6011 450.46 43.9634 452.572 46.2446 452.572 cv
48.4917 452.572 49.6831 450.46 49.6831 447.668 cv
cp
0 0 0 0 cmyk
f
63.1504 440.519 mo
64.1719 439.157 65.9082 438.51 67.6787 438.51 cv
67.917 438.51 68.1211 438.51 68.5298 438.543 cv
68.5298 443.004 li
67.0317 443.073 66.5894 443.073 66.5894 443.073 cv
64.6484 443.14 63.0483 444.502 63.0483 447.26 cv
63.0483 456.079 li
58.4517 456.079 li
58.4517 438.748 li
63.0483 438.748 li
63.1504 440.519 li
cp
0 0 0 1 cmyk
f
83.4888 448.962 mo
88.6982 448.043 li
88.8682 450.801 91.1494 452.095 93.3628 452.095 cv
95.7119 452.095 97.0737 450.869 97.0737 448.827 cv
97.0737 446.818 95.916 445.831 93.499 445.831 cv
91.1836 445.831 li
91.1836 441.472 li
96.8696 441.472 96.8696 438.85 96.8696 438.85 cv
96.8696 436.91 95.4395 435.786 92.8521 435.786 cv
90.5366 435.786 89.0386 436.637 88.6641 439.633 cv
83.5566 438.884 li
84.1694 434.289 88.0513 431.497 92.9541 431.497 cv
98.2314 431.497 101.738 434.663 101.738 438.578 cv
101.738 440.008 101.67 442.357 99.1509 443.618 cv
101.943 445.047 101.807 446.443 101.807 448.962 cv
101.807 453.797 99.5254 456.589 92.8521 456.589 cv
87.438 456.589 84.2715 454.036 83.4888 448.962 cv
cp
f
108.355 449.031 mo
108.355 446.545 109.343 444.876 111.727 443.753 cv
109.479 442.561 108.73 441.064 108.73 438.817 cv
108.73 435.547 111.794 431.905 117.378 431.905 cv
123.303 431.905 125.891 434.935 125.891 438.884 cv
125.891 441.064 125.175 442.561 122.996 443.822 cv
125.414 444.979 126.265 446.614 126.265 449.065 cv
126.265 453.763 123.167 456.726 117.378 456.726 cv
111.522 456.726 108.355 453.763 108.355 449.031 cv
cp
f
120.919 439.088 mo
120.919 437.352 119.625 436.228 117.344 436.228 cv
114.893 436.228 113.599 437.285 113.599 439.055 cv
113.599 440.792 114.927 441.88 117.344 441.88 cv
119.66 441.88 120.919 440.826 120.919 439.088 cv
cp
0 0 0 0 cmyk
f
121.464 449.336 mo
121.464 447.362 120.068 446.136 117.344 446.136 cv
114.688 446.136 113.19 447.362 113.19 449.303 cv
113.19 451.176 114.654 452.368 117.378 452.368 cv
120.068 452.368 121.464 451.176 121.464 449.336 cv
cp
f
143.179 442.799 mo
140.455 442.799 li
140.455 438.884 li
143.179 438.884 li
143.179 433.436 li
147.877 432.143 li
147.877 438.884 li
152.303 438.884 li
152.303 442.799 li
147.979 442.799 li
147.979 450.563 li
147.979 452.299 148.626 452.469 149.307 452.469 cv
149.988 452.469 150.499 452.333 151.861 452.061 cv
152.916 455.909 li
150.771 456.487 148.831 456.692 147.571 456.692 cv
145.937 456.692 143.179 455.84 143.179 452.606 cv
143.179 442.799 li
cp
0 0 0 1 cmyk
f
154.937 447.668 mo
154.937 440.689 159.023 438.135 163.109 438.135 cv
166.82 438.135 171.45 440.689 171.45 447.668 cv
171.45 452.81 168.08 456.692 163.347 456.692 cv
158.138 456.692 154.937 453.116 154.937 447.668 cv
cp
f
166.786 447.668 mo
166.786 443.618 165.39 442.357 163.347 442.357 cv
160.759 442.357 159.704 444.468 159.704 447.668 cv
159.704 450.46 161.066 452.572 163.347 452.572 cv
165.594 452.572 166.786 450.46 166.786 447.668 cv
cp
0 0 0 0 cmyk
f
182.193 438.782 mo
182.909 438.442 183.76 438.339 184.577 438.339 cv
188.322 438.339 191.148 441.234 191.148 444.707 cv
191.148 456.079 li
186.62 456.079 li
186.62 446.205 li
186.62 444.264 185.667 442.698 183.794 442.698 cv
181.581 442.698 180.151 443.992 180.151 445.728 cv
180.151 456.079 li
175.588 456.079 li
175.588 438.817 li
180.287 438.817 li
180.287 440.077 li
181.172 439.327 181.445 439.055 182.193 438.782 cv
cp
0 0 0 1 cmyk
f
202.568 438.782 mo
203.283 438.442 204.134 438.339 204.952 438.339 cv
208.697 438.339 211.523 441.234 211.523 444.707 cv
211.523 456.079 li
206.995 456.079 li
206.995 446.205 li
206.995 444.264 206.041 442.698 204.168 442.698 cv
201.956 442.698 200.525 443.992 200.525 445.728 cv
200.525 456.079 li
195.963 456.079 li
195.963 438.817 li
200.662 438.817 li
200.662 440.077 li
201.547 439.327 201.819 439.055 202.568 438.782 cv
cp
f
228.016 450.597 mo
230.774 453.593 li
228.561 455.602 227.097 456.453 223.964 456.453 cv
218.619 456.453 215.35 452.503 215.35 447.226 cv
215.35 442.527 218.38 438.408 223.045 438.408 cv
228.118 438.408 231.25 442.187 231.25 447.839 cv
231.25 449.031 li
219.879 449.031 li
219.981 451.005 221.785 452.435 224.066 452.435 cv
225.36 452.435 226.076 452.231 228.016 450.597 cv
cp
f
219.879 445.524 mo
226.858 445.524 li
226.756 443.822 225.054 442.29 223.352 442.29 cv
221.615 442.29 220.151 443.651 219.879 445.524 cv
cp
0 0 0 0 cmyk
f
241.13 445.183 mo
243.991 445.592 li
247.021 446 248.825 448.111 248.825 450.801 cv
248.825 454.274 245.931 456.692 241.812 456.692 cv
238.236 456.692 235.819 455.806 233.538 453.525 cv
236.942 450.529 li
238.338 451.959 239.905 452.776 241.573 452.776 cv
242.935 452.776 244.024 452.198 244.024 451.312 cv
244.024 450.597 243.31 449.917 241.879 449.644 cv
238.883 449.065 li
236.228 448.554 234.662 446.545 234.662 444.196 cv
234.662 440.723 237.351 438.51 241.777 438.51 cv
244.195 438.51 246.238 438.918 248.621 441.064 cv
245.693 444.162 li
244.501 442.765 243.242 442.323 241.675 442.323 cv
240.348 442.323 239.428 443.073 239.428 443.923 cv
239.428 444.502 239.734 445.013 241.13 445.183 cv
cp
0 0 0 1 cmyk
f
264.911 442.799 mo
262.188 442.799 li
262.188 438.884 li
264.911 438.884 li
264.911 433.436 li
269.61 432.143 li
269.61 438.884 li
274.036 438.884 li
274.036 442.799 li
269.712 442.799 li
269.712 450.563 li
269.712 452.299 270.358 452.469 271.04 452.469 cv
271.721 452.469 272.231 452.333 273.594 452.061 cv
274.648 455.909 li
272.504 456.487 270.563 456.692 269.304 456.692 cv
267.669 456.692 264.911 455.84 264.911 452.606 cv
264.911 442.799 li
cp
f
276.67 447.668 mo
276.67 440.689 280.756 438.135 284.841 438.135 cv
288.553 438.135 293.183 440.689 293.183 447.668 cv
293.183 452.81 289.813 456.692 285.079 456.692 cv
279.87 456.692 276.67 453.116 276.67 447.668 cv
cp
f
288.519 447.668 mo
288.519 443.618 287.123 442.357 285.079 442.357 cv
282.492 442.357 281.437 444.468 281.437 447.668 cv
281.437 450.46 282.799 452.572 285.079 452.572 cv
287.327 452.572 288.519 450.46 288.519 447.668 cv
cp
0 0 0 0 cmyk
f
298.819 442.799 mo
296.095 442.799 li
296.095 438.884 li
298.819 438.884 li
298.819 433.436 li
303.519 432.143 li
303.519 438.884 li
307.944 438.884 li
307.944 442.799 li
303.62 442.799 li
303.62 450.563 li
303.62 452.299 304.267 452.469 304.948 452.469 cv
305.629 452.469 306.14 452.333 307.502 452.061 cv
308.557 455.909 li
306.412 456.487 304.472 456.692 303.211 456.692 cv
301.577 456.692 298.819 455.84 298.819 452.606 cv
298.819 442.799 li
cp
0 0 0 1 cmyk
f
316.877 456.555 mo
313.098 456.555 310.884 454.444 310.884 451.141 cv
310.884 448.213 312.655 445.115 320.962 445.115 cv
320.962 444.162 li
320.962 443.14 319.94 442.494 318.375 442.494 cv
317.047 442.494 314.8 443.277 313.165 444.264 cv
310.952 440.893 li
312.178 439.974 315.14 438.306 318.307 438.306 cv
323.107 438.306 325.594 440.144 325.594 443.481 cv
325.594 450.665 li
325.594 452.198 326.002 452.639 327.603 452.913 cv
326.002 456.522 li
325.185 456.522 322.903 456.214 321.745 454.75 cv
320.214 456.214 318.784 456.555 316.877 456.555 cv
cp
f
318.341 452.708 mo
320.248 452.708 321.099 452.164 321.099 450.733 cv
321.099 448.554 li
317.592 449.065 li
316.06 449.303 315.753 450.12 315.753 451.074 cv
315.753 452.198 316.435 452.708 318.341 452.708 cv
cp
0 0 0 0 cmyk
f
330.616 431.973 mo
335.179 431.973 li
335.179 449.644 li
335.179 451.482 335.485 451.924 336.473 451.993 cv
337.052 452.027 337.528 451.993 338.175 451.823 cv
338.618 455.84 li
337.017 456.249 335.485 456.522 334.396 456.522 cv
333.272 456.522 330.616 456.147 330.616 452.129 cv
330.616 431.973 li
cp
0 0 0 1 cmyk
f
350.806 438.953 mo
355.606 438.953 li
358.501 449.61 li
361.123 438.953 li
366.127 438.953 li
368.783 449.61 li
371.745 438.953 li
376.308 438.953 li
371.609 456.079 li
366.127 456.079 li
363.607 445.456 li
361.054 456.079 li
355.641 456.079 li
350.806 438.953 li
cp
f
391.529 450.597 mo
394.287 453.593 li
392.074 455.602 390.61 456.453 387.478 456.453 cv
382.132 456.453 378.863 452.503 378.863 447.226 cv
378.863 442.527 381.894 438.408 386.558 438.408 cv
391.632 438.408 394.764 442.187 394.764 447.839 cv
394.764 449.031 li
383.392 449.031 li
383.494 451.005 385.298 452.435 387.579 452.435 cv
388.873 452.435 389.589 452.231 391.529 450.597 cv
cp
f
383.392 445.524 mo
390.372 445.524 li
390.27 443.822 388.567 442.29 386.865 442.29 cv
385.128 442.29 383.664 443.651 383.392 445.524 cv
cp
0 0 0 0 cmyk
f
398.787 456.079 mo
398.787 438.748 li
403.35 438.748 li
403.35 456.079 li
398.787 456.079 li
cp
0 0 0 1 cmyk
f
398.413 434.424 mo
398.413 432.994 399.57 431.768 401.001 431.768 cv
402.498 431.768 403.656 432.994 403.656 434.458 cv
403.656 435.888 402.498 437.08 401.035 437.08 cv
399.57 437.08 398.413 435.888 398.413 434.424 cv
cp
f
414.487 455.091 mo
409.925 455.091 407.065 451.789 407.065 447.022 cv
407.065 441.983 410.062 438.646 414.624 438.646 cv
415.646 438.646 416.803 438.612 418.472 439.838 cv
418.472 438.85 li
423.204 438.85 li
423.204 455.636 li
423.204 459.042 419.766 461.697 415.135 461.697 cv
412.31 461.697 411.695 461.663 407.406 459.654 cv
409.482 455.909 li
411.355 457.44 414.59 457.44 414.59 457.44 cv
416.871 457.44 418.847 457.168 418.438 454.172 cv
416.905 455.227 416.258 455.091 414.487 455.091 cv
cp
f
415.34 450.938 mo
417.45 450.938 418.54 449.814 418.54 447.839 cv
418.54 445.524 li
418.54 443.958 417.178 442.732 415.407 442.732 cv
413.058 442.732 411.729 444.196 411.729 446.715 cv
411.729 449.711 412.615 450.938 415.34 450.938 cv
cp
0 0 0 0 cmyk
f
436.827 438.408 mo
440.368 438.408 443.364 441.54 443.364 445.626 cv
443.364 456.079 li
438.7 456.079 li
438.7 445.524 li
438.7 443.719 437.746 442.732 435.703 442.732 cv
433.558 442.732 432.469 444.434 432.469 446.34 cv
432.469 456.079 li
427.872 456.079 li
427.872 432.041 li
432.469 432.041 li
432.469 440.008 li
434.307 438.646 435.295 438.408 436.827 438.408 cv
cp
0 0 0 1 cmyk
f
449.564 442.799 mo
446.84 442.799 li
446.84 438.884 li
449.564 438.884 li
449.564 433.436 li
454.262 432.143 li
454.262 438.884 li
458.688 438.884 li
458.688 442.799 li
454.364 442.799 li
454.364 450.563 li
454.364 452.299 455.011 452.469 455.692 452.469 cv
456.373 452.469 456.884 452.333 458.246 452.061 cv
459.302 455.909 li
457.156 456.487 455.216 456.692 453.956 456.692 cv
452.321 456.692 449.564 455.84 449.564 452.606 cv
449.564 442.799 li
cp
f
39.168 483.285 mo
39.168 481.99 38.6235 481.139 36.0698 480.628 cv
31.9839 479.777 li
29.5664 479.301 26.4004 477.223 26.4004 473.207 cv
26.4004 469.359 29.9072 465.648 35.5249 465.648 cv
35.5249 465.648 41.8237 465.648 44.9902 469.393 cv
41.5176 472.832 li
38.6914 470.415 35.3545 470.415 35.3545 470.415 cv
33.1758 470.415 31.8818 471.469 31.8818 473.036 cv
31.8818 474.295 32.8013 475.113 36.9209 475.692 cv
41.4834 476.304 44.582 479.13 44.6157 483.114 cv
44.6499 486.451 42.7773 490.672 34.4697 490.672 cv
29.7368 490.672 27.5239 489.414 24.2549 486.11 cv
28.3408 483.011 li
30.5879 485.191 32.1543 485.873 34.7417 485.873 cv
37.4316 485.873 39.168 485.055 39.168 483.285 cv
cp
f
66.6426 485.327 mo
66.6426 490.127 li
51.2188 490.127 li
51.2188 466.159 li
56.0195 466.159 li
56.0195 485.327 li
66.6426 485.327 li
cp
f
81.2012 490.707 mo
74.6982 490.707 69.5566 485.498 69.5566 478.245 cv
69.5566 470.789 74.3237 465.681 81.2012 465.681 cv
88.2148 465.681 92.7773 471.061 92.7773 478.28 cv
92.7773 485.634 88.0107 490.707 81.2012 490.707 cv
cp
f
81.2012 486.077 mo
85.2871 486.077 87.4321 483.011 87.4321 478.245 cv
87.4321 473.444 85.3213 470.38 81.2012 470.38 cv
76.9111 470.38 75.0044 473.376 75.0044 478.245 cv
75.0044 483.081 76.9453 486.077 81.2012 486.077 cv
cp
0 0 0 0 cmyk
f
96.4814 466.022 mo
101.725 466.022 li
105.368 482.433 li
109.113 466.022 li
114.459 466.022 li
118.204 482.433 li
121.881 466.022 li
127.125 466.022 li
121.234 490.127 li
115.48 490.127 li
111.769 473.887 li
108.126 490.127 li
102.372 490.127 li
96.4814 466.022 li
cp
0 0 0 1 cmyk
f
158.898 476.815 mo
156.889 476.815 155.936 478.28 155.936 480.118 cv
155.936 490.127 li
151.203 490.127 li
151.203 480.254 li
151.203 477.905 150.284 476.815 148.786 476.815 cv
146.913 476.815 145.755 478.381 145.755 480.118 cv
145.755 490.127 li
141.193 490.127 li
141.193 472.899 li
145.755 472.899 li
145.755 474.194 li
147.186 472.899 148.139 472.422 149.705 472.422 cv
151.918 472.422 152.633 472.729 154.37 474.602 cv
156.208 472.763 157.502 472.355 159.443 472.355 cv
163.154 472.355 165.912 475.76 165.912 479.369 cv
165.912 490.127 li
161.281 490.127 li
161.281 480.254 li
161.281 477.905 160.362 476.815 158.898 476.815 cv
cp
f
182.577 484.646 mo
185.334 487.643 li
183.122 489.652 181.658 490.502 178.525 490.502 cv
173.18 490.502 169.911 486.552 169.911 481.276 cv
169.911 476.577 172.941 472.457 177.606 472.457 cv
182.679 472.457 185.812 476.236 185.812 481.888 cv
185.812 483.081 li
174.439 483.081 li
174.542 485.055 176.346 486.485 178.627 486.485 cv
179.921 486.485 180.636 486.281 182.577 484.646 cv
cp
f
174.439 479.573 mo
181.419 479.573 li
181.317 477.871 179.615 476.338 177.912 476.338 cv
176.176 476.338 174.712 477.701 174.439 479.573 cv
cp
0 0 0 0 cmyk
f
194.976 490.604 mo
191.197 490.604 188.984 488.494 188.984 485.191 cv
188.984 482.263 190.754 479.165 199.062 479.165 cv
199.062 478.21 li
199.062 477.189 198.041 476.542 196.474 476.542 cv
195.146 476.542 192.899 477.326 191.265 478.313 cv
189.052 474.943 li
190.277 474.023 193.24 472.355 196.406 472.355 cv
201.207 472.355 203.692 474.194 203.692 477.531 cv
203.692 484.714 li
203.692 486.247 204.101 486.689 205.701 486.961 cv
204.101 490.571 li
203.284 490.571 201.002 490.264 199.845 488.799 cv
198.313 490.264 196.883 490.604 194.976 490.604 cv
cp
0 0 0 1 cmyk
f
196.44 486.757 mo
198.347 486.757 199.198 486.212 199.198 484.782 cv
199.198 482.603 li
195.691 483.114 li
194.159 483.352 193.853 484.169 193.853 485.123 cv
193.853 486.247 194.534 486.757 196.44 486.757 cv
cp
0 0 0 0 cmyk
f
215.219 472.832 mo
215.934 472.491 216.785 472.389 217.602 472.389 cv
221.348 472.389 224.173 475.284 224.173 478.756 cv
224.173 490.127 li
219.645 490.127 li
219.645 480.254 li
219.645 478.313 218.692 476.748 216.819 476.748 cv
214.606 476.748 213.176 478.042 213.176 479.777 cv
213.176 490.127 li
208.613 490.127 li
208.613 472.866 li
213.312 472.866 li
213.312 474.125 li
214.197 473.376 214.47 473.104 215.219 472.832 cv
cp
0 0 0 1 cmyk
f
234.845 479.232 mo
237.705 479.641 li
240.735 480.049 242.539 482.161 242.539 484.851 cv
242.539 488.323 239.646 490.741 235.525 490.741 cv
231.95 490.741 229.533 489.856 227.252 487.574 cv
230.657 484.578 li
232.053 486.008 233.619 486.826 235.287 486.826 cv
236.649 486.826 237.739 486.247 237.739 485.361 cv
237.739 484.646 237.023 483.965 235.594 483.693 cv
232.597 483.114 li
229.941 482.603 228.375 480.594 228.375 478.245 cv
228.375 474.772 231.065 472.559 235.491 472.559 cv
237.909 472.559 239.952 472.968 242.335 475.113 cv
239.407 478.21 li
238.215 476.815 236.956 476.373 235.389 476.373 cv
234.062 476.373 233.142 477.122 233.142 477.973 cv
233.142 478.552 233.448 479.063 234.845 479.232 cv
cp
f
263.698 470.686 mo
263.188 474.057 li
264.652 473.207 265.571 472.797 266.967 472.797 cv
272.006 472.797 275.173 476.338 275.173 481.616 cv
275.173 487.2 271.836 490.672 266.252 490.672 cv
261.553 490.672 259.103 488.799 257.569 484.204 cv
262.098 482.773 li
262.54 483.897 263.732 486.247 266.286 486.247 cv
268.669 486.247 270.235 484.204 270.235 481.547 cv
270.235 479.028 268.533 477.258 266.116 477.258 cv
264.686 477.258 263.664 477.836 262.507 479.334 cv
257.502 478.518 li
259.374 466.294 li
274.117 466.294 li
274.117 470.686 li
263.698 470.686 li
cp
f
303.727 476.815 mo
301.718 476.815 300.765 478.28 300.765 480.118 cv
300.765 490.127 li
296.031 490.127 li
296.031 480.254 li
296.031 477.905 295.112 476.815 293.614 476.815 cv
291.741 476.815 290.584 478.381 290.584 480.118 cv
290.584 490.127 li
286.021 490.127 li
286.021 472.899 li
290.584 472.899 li
290.584 474.194 li
292.014 472.899 292.968 472.422 294.534 472.422 cv
296.747 472.422 297.461 472.729 299.198 474.602 cv
301.036 472.763 302.331 472.355 304.271 472.355 cv
307.982 472.355 310.74 475.76 310.74 479.369 cv
310.74 490.127 li
306.11 490.127 li
306.11 480.254 li
306.11 477.905 305.19 476.815 303.727 476.815 cv
cp
f
332.206 481.65 mo
332.206 486.792 329.277 490.434 324.817 490.434 cv
322.469 490.434 322.128 490.196 320.017 488.834 cv
320.017 495.235 li
315.454 495.235 li
315.454 472.763 li
320.017 472.763 li
320.017 473.682 li
321.481 472.491 322.399 471.981 324.375 471.981 cv
329.516 471.981 332.206 475.828 332.206 481.65 cv
cp
f
320.017 483.011 mo
320.017 484.817 322.025 486.383 323.83 486.383 cv
326.452 486.383 327.439 484.339 327.439 481.343 cv
327.439 478.075 326.452 476.168 323.66 476.168 cv
320.323 476.168 320.017 479.13 320.017 480.323 cv
320.017 483.011 li
cp
0 0 0 0 cmyk
f
344.863 472.457 mo
348.404 472.457 351.4 475.589 351.4 479.675 cv
351.4 490.127 li
346.735 490.127 li
346.735 479.573 li
346.735 477.769 345.782 476.781 343.74 476.781 cv
341.595 476.781 340.505 478.484 340.505 480.39 cv
340.505 490.127 li
335.909 490.127 li
335.909 466.089 li
340.505 466.089 li
340.505 474.057 li
342.344 472.696 343.331 472.457 344.863 472.457 cv
cp
0 0 0 1 cmyk
f
365.909 481.718 mo
365.909 474.739 369.994 472.185 374.081 472.185 cv
377.791 472.185 382.423 474.739 382.423 481.718 cv
382.423 486.86 379.052 490.741 374.319 490.741 cv
369.109 490.741 365.909 487.166 365.909 481.718 cv
cp
f
377.758 481.718 mo
377.758 477.667 376.361 476.407 374.319 476.407 cv
371.731 476.407 370.676 478.518 370.676 481.718 cv
370.676 484.51 372.038 486.622 374.319 486.622 cv
376.565 486.622 377.758 484.51 377.758 481.718 cv
cp
0 0 0 0 cmyk
f
391.225 474.568 mo
392.246 473.207 393.982 472.559 395.753 472.559 cv
395.991 472.559 396.195 472.559 396.604 472.593 cv
396.604 477.053 li
395.106 477.122 394.663 477.122 394.663 477.122 cv
392.723 477.189 391.123 478.552 391.123 481.31 cv
391.123 490.127 li
386.526 490.127 li
386.526 472.797 li
391.123 472.797 li
391.225 474.568 li
cp
0 0 0 1 cmyk
f
412.107 466.022 mo
416.67 466.022 li
416.67 483.693 li
416.67 485.531 416.977 485.974 417.964 486.042 cv
418.543 486.077 419.02 486.042 419.666 485.873 cv
420.108 489.889 li
418.509 490.298 416.977 490.571 415.887 490.571 cv
414.764 490.571 412.107 490.196 412.107 486.178 cv
412.107 466.022 li
cp
f
434.781 484.646 mo
437.54 487.643 li
435.327 489.652 433.862 490.502 430.729 490.502 cv
425.384 490.502 422.116 486.552 422.116 481.276 cv
422.116 476.577 425.146 472.457 429.811 472.457 cv
434.884 472.457 438.016 476.236 438.016 481.888 cv
438.016 483.081 li
426.644 483.081 li
426.747 485.055 428.551 486.485 430.832 486.485 cv
432.126 486.485 432.841 486.281 434.781 484.646 cv
cp
f
426.644 479.573 mo
433.624 479.573 li
433.522 477.871 431.819 476.338 430.117 476.338 cv
428.381 476.338 426.916 477.701 426.644 479.573 cv
cp
0 0 0 0 cmyk
f
447.896 479.232 mo
450.756 479.641 li
453.786 480.049 455.591 482.161 455.591 484.851 cv
455.591 488.323 452.696 490.741 448.577 490.741 cv
445.002 490.741 442.585 489.856 440.303 487.574 cv
443.708 484.578 li
445.104 486.008 446.67 486.826 448.339 486.826 cv
449.701 486.826 450.79 486.247 450.79 485.361 cv
450.79 484.646 450.075 483.965 448.645 483.693 cv
445.648 483.114 li
442.993 482.603 441.427 480.594 441.427 478.245 cv
441.427 474.772 444.117 472.559 448.543 472.559 cv
450.961 472.559 453.003 472.968 455.387 475.113 cv
452.458 478.21 li
451.267 476.815 450.007 476.373 448.44 476.373 cv
447.112 476.373 446.194 477.122 446.194 477.973 cv
446.194 478.552 446.5 479.063 447.896 479.232 cv
cp
0 0 0 1 cmyk
f
465.07 479.232 mo
467.931 479.641 li
470.961 480.049 472.765 482.161 472.765 484.851 cv
472.765 488.323 469.871 490.741 465.751 490.741 cv
462.177 490.741 459.759 489.856 457.478 487.574 cv
460.882 484.578 li
462.278 486.008 463.845 486.826 465.513 486.826 cv
466.875 486.826 467.964 486.247 467.964 485.361 cv
467.964 484.646 467.249 483.965 465.819 483.693 cv
462.823 483.114 li
460.167 482.603 458.601 480.594 458.601 478.245 cv
458.601 474.772 461.291 472.559 465.718 472.559 cv
468.135 472.559 470.178 472.968 472.561 475.113 cv
469.633 478.21 li
468.44 476.815 467.182 476.373 465.615 476.373 cv
464.287 476.373 463.368 477.122 463.368 477.973 cv
463.368 478.552 463.674 479.063 465.07 479.232 cv
cp
f
337.9 410.333 mo
337.9 406.583 li
329.65 406.583 li
329.65 410.333 li
337.9 410.333 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Bob Hutchinson) ()%%Title: (784.1 [Converted].eps)%%CreationDate: 30/01/2009 14:28%%Canvassize: 16383%AI9_DataStream%Gb!Q;k?8fre*+=Ch1Gtg,"[u2"=>Mu-:\_cYQ,8oO?d73GJ>6_g.t_(l(69JL&H2hfFK+tFKA`t?.538WSMJU^:'V+mJj>b9d?bY%<n]C<Zt1"NREYBj8YbUPP&i0Ka*P:J=b+(u:=X2#)E9b+:ebV'Bg;7I)m.soVu>!+G0B8b]@1%WQ^[T&[oB67A)>aBRuLU`o3Um^%SXb:CWchJ/^G[/EqX=0<c:V9LCb40+8F,kbrOK1r-D,#B:@"V,Ir$)jT8gm^GBho^#PK26I+mfW@)an!.a=mHn+PK(HofrUika=,%5rGbp9"I+qoud/5]2G2b[$"I1Wg-WDK3MQ6!`FB-4>u,qi-DK[VPjJhEt81I%&o-EG(G\_"+(BB%sa-4P?ODS_^N#^j@kJkUY/NS%>ENP)#fR^Je;%HI`2[BB!R03rm*/,^q6euCe9eCdf$AUKq6S*<8$h&f&9?,4/$0U=rg2.8m#n7b^s:)jC""fcG+k!Rl#T-4NB^_g%s&hq^f,n=']ls.(@f,B^JW`U0dlW!V+$dK8C=%N$92GE/7d%GWg8!j`mM'?@rUs`r$%og+CX"o'J3s79i]!uY<pr.0H9gBTAfoX6%P'.Q5#`*H'rb%uN"uuNo[*IAAA@BZr6%_VZWX6GjFMUi&Q>YViZ$uk$UVI(4aabl.(&PcfGh54=R3Nj*_p7T>CMRKa9C%gq[lU^R%&d:ALNPkSoEmf(n_&k^V!(!g?BX)[[PEkl2c\dn?5G^`=]`?rtlE:1P<<F\C3GA_q<s&</.eR*g0s(L_DE%Qa0)aHjAlIW[Y2aHD%_V^%Kr[sO_.Ek)uhtU1&nYr\?VmRGOVQDBWCKVF%ZRi1h=]ikQC,Oj\Tn%7m"ftXQJ(V>/^flEnf"t5X)f(_^=K>]HQK9kc.@7;7%XbKVe29Wkf[2M64eS#m_@ldsX+$(ToMCnXF"=sJk>.>pWNO<_"I&6HQXpBMe*F'3U`cZ>nd'gG2r/KTQ7JIgKU2Zhij,3=bXrICM%.BWutUsPpt@kCq%rl.",)O>C@i63X/.244qn2G2U=&*C(k>(208&q$=*:Xs>+4e=%iG\(>@Z[a]5,/t4^K:lqa"^8]6JLMrn2Gg6%ePZ8)D`Vqj_;A?&f8%*i(+GMF\C0ne6r!hDF&"q>B68S:l<&t]NPgIQSB`0g:?P'dV*/mId2Mp)f"omVb/Dh=CV"9W'\A,TYnj0S%>T\Y+D2Z06%^%FLiKVT4LI.#]5cL7%0W,X\D)cT/.?kT-?Z;N5\C9,.W7,`8gi2Bq,CF?MmT>C.:4&o+l#Z]^cCAo%V.PU+$6.\d%NVoRD/%D.Y8S'lj$I7XM'!tH6S(#'D5AVobLi^/C15E0N"3u]i&mG`Wn@A,cno8BY[&'cPj<+At;Gh$*1lX[2J*B28T\m^qqCe*g%9j/b?dXS]"^Pfl!TB";eNl/n\fY:mX4qW;/^J]o;(Ot\a<2NQe-/pTV=09p>i\18.\GrKi8)3'AMHBYFJ"qL%I@="kbZ`7GMM7d'%XMOADImHp@fg>ZGX[d1fafukjKSfrFMU13:5U$+3>:6KI:N&tY?%_#7%Ag((U47]j@VYf[>N=EX__DmqPmmSEefdhPr$AI8CAGV"%G!uYhM%KIV?u3-N*@C_QM$rp;If<o\.qTC_?UOaP&+`sn!GL3;+;dlihms!?Y*m9!W!1dJV'>_!(6:aW-I*"pM*[fOGtc*gl+?`V%iGX(9`W3Kj>cTC8b8,h\F#89f,m##rDAN.Mb`Z,):r-f6]0tpb*L"^[MHFs/W(U<^7JKYnQpjltJ"SDbC.i,J<sek!UJe*b!@9u)%a8L\])"tjU95).b%(*9s%](tX@TUt:;@V,9a:DC1n0,GQj'PD=fFFNFHrSK.8u_TE6Bq-pn2\q@$2t%'IiQ3$5Os3dBC$T%!8!94%4CXhH&6a'&L.WOc>G81toLNLcNQr1&+UeZN8"ruYa2S)2)OSa0I4$Nipu`Vh.0-<tED4:sD1NH>fUiY6%p#'m\@dgI,`K9^;YVXT%:/b#28tu:%nNX*K(&X,@;Z9.C(N:^'/$ZKZ4<$[`=PgWR^TeShKl6oa]!sn`2tP.*Ip<^\A<^S_(Mr^q"AJSOC/c,`4pMs.UjN9N%E;8'.'T0gaF[Z8^K*EhrYJo8V(c21"[(i8cU4dks`ag)o,P+>qC\1!t7Yk^GOoA=Go%'PU;(._09N(c20Fa;grZ4&=#.8k]$d\Eo%P4np"[[rTS&&[*$(.XT@'oCKcCIC9,7Jg-i%s"UG=Y4ACq<_lbm'rdgVct8Y'sNW3?d1u'UpVMXo_3qMe1nMh&Tbl&q95gLiW"bc%r_tpL,rX;t!o?o9BiGk!Q1'/LcYEf-PM1USrJ1=T$!:&\m6G9#1HS3X:2E.'s)Hd,bLfL%CVOD:d.d<&i]nPGVfET]&VVX@c#a?:%.?m\]i9X_$<"\8kiu#c@]YUNgC--rO:ON5,;lRPSY+@qS.P(ns\&r0K78GM]c_/"=IkWYAKama-EC&hNRgJ=di.aLcEJ\M6g#SRU%UTU9Wcc8O>E=B#elfrUsL5B#jjC]%-!'a?,K%:W"7$&B"qVM+f[6+dOCoE>QR,o=,Bn=TnNe=G_Y5(2B:<;]o&,s];&[S2hcCEls%ckqce,RCaK-&h?>Wkn4"@72\#X;r"/i%&j<n%fk>>GP:^K.jK%"?%d[HDA-.UI&ac=D8Ko$Redn*tfPL/&i?P/,0k&ES[c<j3@WV%4NRZa']s]ZS?=9[3;$.0d4>n?22&0kPq>>[#O>2>p,NOAQVm2&amOard;_4Jb&e7)I>kCO3i@-F?m:D!$(a,9pp!Wa/^Xp%7ga+u%<=1g-T[sh%4IlFe')#bhMIJ;S?fCe"eIUTW(;;2\p-*mu0osi$IGZ.b9NG&bOT;@^RnEtjCXT]]Q7*7U(cWL6K0KXLBZZ;pF%j3G%)UpE+/gK.\ijr,*GG$h(Zm6?`:jp:X)mSb[a&G)rlK#(\Pbp.V>\*@9+nnRP"8YC;:s"5mDHFO.-A=YJ_:P`lHD5OFH=,=9#hlmm%+IHQbJUA]CV:ld^P=^/)M$m!EfS#t,XJ^Zg@lB#@Y)q\2o]hhHd(I9W2]^YmOs6#6]JbZs$%5@O51Kpl2AM8@iA?$$eDbqm"0_R7%nF5#Frjq9jqH$,$UG]do[?3uYLURcDr57LjhqQkgq&.\:YfnQre*l(u5T:MNTNPf3JFGC3l@70HXp-7O__Hs[;;ig+o(*o9O0#5d%p-e8@MO9=ZDMeBDqt_PR]ZU-]d[J@!O@R7PU%9$t=kK@Z'pmDeDlL9o2dSS:kZj<E0rRTY.[an(jV"bP5K^QkVFB6jklOXk::<NC%p6Kf*<V@]K(AHN??5m8>&Tk!,3gW[Bn+UROJma_C]0\)C\d#@o-=^ABFRlr9(X!N)hA,p_RG?sE?Rj&cpr!*Bd5bsfnq]B6d*Rj4%>+G'$87"=<&r0:K`MF_1")QkPD/*dA*r-;4A(Vj51NZT:.(q:,jt.`5/a^_(%9(H'>&&kCDYI$-Ft(4;r%bKX1PgO^78N&b*jD]p%RLf,RP0?%VhH)0Ze:O:EgoocoR-rkR4ra)d8."rSnVIeVSk+AJs3s6!qQ+Yi$h`VFbWJA`LI9>d,@^?F)6qbU74oi4Qea31jMHrG%hdC9H!tS2/JB&/tZ>mCB#O22;fR:tN3SHsS+O3jcJ(dS&'5u6q!LS@6,CTg)AFc7"`^+CUAi)u(,eH9!eWq$oEa^mD7ikRs-\pCu%'U`%`7]DL,aa>PgW^Sj!K?lOG#qsXVEN!k0_KrQoE]QJ%=lOWHiM#*PQSB`2gpI.]FuqQtQRD-4gjK9Z%Fj:QBn0W;m%<*[1^d]M%h)55CT"l7odFa*"@7Uc6+u$2mhF\nbN\8Y5T6W1"@$8q]c=.Bs;JPTc$;%'^grs7ZJB>Wtj&Er(_g\O1-#<Os>s7(@!'HIj4P0^+%W'`*-CcFYY-%&!"K.E,`5@&8=p+-t2>Bf^m[2]&hSg9<gOa+4EY<\k=jJ3aj:1FWQ8"f)6!XpS"]GA;epa-c7amBn73Nc&@cCrXa%4.bQ-;$ndkFA#%!CpG-->19$'C(2?CBmkGNP+G5,3ro$b:]6u"&U*.]#6-!q3KG>5K^D#V4Drt2*j/C*Q/H!-ZX]SYMgp[oPK:D]%:G;5V]JYZs;kJTj@I\hjG)etZjF,CN5OLOmOXpJN!@KJP8uZsZnLjgHW(r1Y=7#Qu$K09T:B7\hoUFc<Z&aS8rqM07$rDF0q$DYg%EulRj:u7@EL$a7D$o4>,>Sg]'?]spHr^&=<[@5auUE`WC:f)[CPK/KKI=QDV_?("+%RkSc*HB&H5O-A3]5C'#kp:M0A8JLg\2uNR%ks>&kB]K/-N(8BQ;j0("<`GAWP['-U!2=Q`O_R:EU8Q%TVJSEtJPqBnO3phg\NTkLYmX\>&l2ANmMJp3MqB(sH?b%'p.`jDdW<lZ%Ccj3d7/[GYQ3[lVJ'1"dMIHGOq$)He^dKd@"FiG^r#K:fn,*,"0`NN.Nna:=q\a;/JF3(>P`HltpYag+_kf_20>-s+('*(O@?J$l%+2?>j0#$"AM[9*2Sb![<43.JbG3(!J18n3_`T;O-Y=\@A/)ssn!/Gl)%)UIl:W>=X=m3:$mX[oR;HKS.E@OZhYQ4GICJ*Prhp";W%`HLp5JK61;7]kMkDdDHPT4DjMCdb6ch&YGi;9_8M^j#P:;_iFGb,!E\>*"0q3@/^<7>L#W!2]5uV%n;:Sj]+qbDMm&U*k"q51SRT%'SR+Qq;UT5m@nq_b-$&(NPp:fq4=$k-*j&#WdBn]SXQA;p2&m]Lti2<MoZPI6`4R0q)KZhBiTU#$J/]f`T\9e;!/M`K6gd=SHs:O%cgqQQeVj+#371/K`r%Z5lHdfJiZ(2-D4meUps,RhMssYp4I_,S-9KPp]L+^joR4:36YGfKQZu,q(L,/mnEYH?=/PbjB5:W+'sZqi%CuC\$j)b-W(S<q3lZ"kKT@t9lo>M'9r4q)sZj""2cd*R:s+,21NmBjQMA>Oo;#83g526t(C4)=(f$;$g*QirCJ!I.j[Gs9D;uH5-%>.Q4/0M9Z9fmMp^[e!M\^@!-Cl#Yh*iH*Q-kB[9DkS(\>j2F7E@Ob_u*!,(O4D2r\ma'ujlp]2UQ$<3VLXIS=Oif9Da7J+*>Ubp\%ZDU-;Uj`X0K'i0\U_=)US>S]Y`_M<;f#T-AO*QNi/fs2K'JA@Y_FL9k7Nt:f9UInOK:X`k\7QH9aTpkS?IgFDrU-YJ.c7_s)3eg,%,'V,u't:T_[tci6(G93SBB5'Ci+Zp%S9m-%fZ,KkmYP7r@\!-a^.HX*g;Gi\f!VRHB6Ud0A&#nD,la]N#C?<#q6f(om(#)[@omrG%%R!$P$\+5-Ot+1%7CEgBlZ`AdZ2&4QAf\H$GO,obrIaH9MXOrf1T31I6/qF/`u_F,nm2844#JXsk+ClO-.ql4"m5AirkEk?26o^H%Y5b`(rnP94@UQ=5GWULe"c&*^-'Fns$d.fT+6M&_i7U&Vh*2a;(G^O'K2>:!-cel&^GtaaP'SU4m0J_5o0Mb.lAt[m$M-V]lOJ/1%;O2&djL2:;-at\-;Pm!=mhCIIbu$/A,l]-$MuQbKLinX=BG8hC*@qgsBL=g0=qd2?cPWF(#LR#lMg7841K'/`3',*n"m.2dbZ<i#%\p6[@bTQM0.W1!$Xgn6t7K0.a@dB^f(-Qih^O5CqG'frlmeY`HpB\=m``j6BScG*?Wo6i7pEcjsp-<IYqH;,.)4+6Ve,9Su9Zk0c%\X))21iNt_k)5&cR:kp`)=jpJ[rUSSLEum+R<^"45;\F$.BTng."f:\6cQWtAMWqh;54JZ16F[KbE[Zhj.$':l26\(kPTEce#KQX%ii<Z17^k^t.T)6*[lEX@Z'E@k9]BuPc6!q]s2*@'g&1kd4*?^g]lO/1J?d5)QHjcs2YBmr)39d(;PCC-`0QT)Ro06k.4cC`8btg3%>;PQj5GL)A4kY09C"/*^d_c%Tpf`'iTYL+]e#5E'G\jT?9O4]fRc_C]bhlAHC!E<cd!EWrJ*GV9R\SR2"97WSJ\ThupdpX`d!EWr%J)/aj8%G\/CD@e`cW\SmiKaTC``q%E>)D>hZ$2JKkDB:`QsJZ&e/I#(F/XKkccOg1@<R?c6g2dgd'bIa1UboYF@80]9'DePUirDc%oiS(*q5r?&"1Beu&+i-,Yq&8E`@T9.6bhZ"16\_4j5cdE:Dk&'`fjMbV@9U88!$6YofEA,`c4\3XpSBC/Y7a9f?&Ko3jBL,=pOqu%cYtaPC_mEe-LT)+'KI/sG8H9#Kpqml6&Nn*I0Tp_"1I2bEW4SlnP/-T/N'gT*$*b=d:I-(H^m+!S'E'f:A\I2Cim5qJf+VArh^%6%#*%OP>LV!ph!c8R!FI4*4Me4)Q(Z3s`A'=\jg!dR,3T1USZO@96d%Gp;G+n@go-m5TqbMSU*Gda*'+W,%-uq[%F.I/#CAs)iTinc%Tq;W"C4\3TD@:g:3N"4U`@QH6Q[e0oEC:a/BZEIhN0bhqQ1,a<fIYC39q>0FKt3!8aj((@V>V'$e0p(e)-%8"<0ST'282OY-S$Tk%\/=,WLTmgWNi>$jdKlDmIptjJ"kKDIK>/k%:n1F4TeNBSnaS%S?l=tlGo,AU6"`PcXjIm2Fc-jq(_lk3iWO*QR3uta5%@KQoS1"]%FEe1]b6CJ0<(tk;pk23hLJ\ghA1e=+<3C4GOM6Op`-8D#.]I:,dXb#%.[(-<3d-d/3jdFOT/?jL%>Yl/fO,^l/_I,>Ol/\+Tc?[=%5X:m!>35A9Hqd,.rQl;;b\7r#.Dr,PH&D>hk,$O-'[u.!^dKBQ)4HMq?!,Vs/obS)A2T=8.",K=j<K[6!AEMX/sH)Y/jVJZON/be%h:9tu()@2B*NqT#[HJO.%X#0ac'9J13emO&p?,%)JPC`7<u/&dC:l3'P>Vso7H)?C8MuXG)U\bqX>2bN!g?ld&NDPE;_FcV9\rT8%\\mACUpS<H`:XHZM2\R#[[&J*kVks;A7S:kK'O!iW=6a%k:2L!1:BWD'\tZHSh[36Cdg5tl>2f*D&-+QCS/h5^P/=/37+AqRrTO9%Gste1$5po6;b0!@@>RS]I#^+E,_lhio]A3AU/FN;%EIfmPb'qFHajb*T4oCC=2&R(&Ss&W"/"@pS?KIK,%Zd)=qZ[NI8P4s.uA%>%(qm`KY"%Zd<c_u8a>JuNe4`38d!k1+2Y2OE1X,-`nX>uBpfnXN;0ru&@^p`Gp-UQ(Feukhm>K^PMX?Ol2ODfj'+lYFXq'Tr>d!"J%NORhn>BDH5@Eie=LHZN?0=T'%KVf=BPZi0R$Y%'\I8a_;.Gce)I=cB]>YZGaI1jT*[0tYWWL)>[>]MW,EhtbSFP"CJ):Y1N_^-ka%"uTJ3;$k-J9e9k_7ept(.kr!'lOp\0<cbZ%=XR?6f+#)=KauWJkR1;bQ"6aBYrUCFe=tBJ;D$1Fb>aK88hjcpUbN3XqLm<2fD`u$%FlaqlK@-4TT.hA&EG=%`r,(I8SjTV8YrW5-KQPW7'*OZMehZW5HuMYFoh:KnEdj!AXZZkA?2+qpcKKJTOh!^9>$"CI,Q&uRdi!+o%Nn_GQVQQe(o4#/&,:"UAZWuYO;Z'Rgd[.p8R,fW8agK6Xh.b;X-@;,EiP15/m$9W6/P^.hWb8hpi[^ZWONKG.k'/G!r`c`QB>+)a%Go^XFeCZ`%SlD\[?dVM_AQ1/F<3rN\fDk"!j3h::%$JQ2Gii;Z<$BT,#c)[0p7Q.Aq/:5#90GefTe6MIoEg_&KF94^EfZ!b-%.Ku%(H&;:HnD_IE+DNI1Th;':!L)t3/>pBE1<0`,2`E4[Kj:k\M_/c8I?%nC\Zu3)R/AF;LmM%#]l_!Wktp$jVlj#<7f2t2<?ZprDDRr%p-41c-X&k$M#46#Q!B+8=WoWcR;+2pKs*kSRrUKPQp`-np7QZh;OQhR5#Z>FdkR6?n'H25>JB*^lRp/eHBn7f6:VV/VV6RD(Kne8%EFmm*NX9\)S$0KGnDsFUNmJJ,s3W2.ju=Ekg3I4"Z6!;cjWh95]8BGF;P2_<Hrcsg\"L:Fc$UiI-*i=;:cSjL$\HAD4-[]BG\d53%e3Y<1j<qcYPsSX;7hMl^,GX)3A[([0d*!7#*PaU>5J\"?\)qXW]6lMeDaCXm%s_rADm00ka`)mef<f2E-h/`MI)<FUCKqqTj*!EV%h_CQbh\/\"R0&@[cq&[KMAn>co$T)93p;pGh\u5(BkbtW,p;Ah+_-WFH$#'^5'QEYhU\**B-'r>.Cg.PZmPE5<CCRigd\>bXbs0S%p)<r=1\[.Co9]=2U\=2l0fGB8*%(T=HdJPdr4?-J,f_',D*?m$Xn5Q&rJoLrG54S08"Fh0rCiioT?3;G7^)hXDlG&?mge&JqmD+o%`MO-d'Bee^fnW(%STb$CVtJP7AW)W:qaUF`K=CS=V[r6G2]d;:kq"=rT2,9e]gf1(qCs)F;6=!i1t)">1aZT*htYcf``'M@/t18;%C?ppMZi)%il^$%)O6Q-+c:<968'Q@\hFWoO\*(HV5N#*R?mPRaAI1E"pKl:EAu#%OFo.tA^&??aq#4#1n>>)<]%#tg?d`TSG15j0%qoJ/q'pDOss3DPBLbrcc[O?Y17q*52,8E;RJ(uGK4+%0UpeU=k>]2N-T0)_,Qe."c!<Sk),LL/A&D!KBp[.*YpKc.0<,tt,oNiW.%NRL,(]uGCuD[;?#f@D/X+qZkF[dEf"]Z*-`qGR?,O?S"E2,a%qmEiKJ_'k5UjlL0D3-9cSI=h3^p\nte\uGUFX8SY+q3#&UAT'hk%ebdVJchV\^T`3e=0;\6;YO<R;G#h%'+/T`qV>2'X3_Al-c$*+aP&hptq'URc"s8:]d=9S6H9ZiL;b92?l/bJDD\Bg49]`8G>"tjb%0J*,J'8.*Wl,BgqW8;=jUQA%eh5A,-NlNSk;Zld9+$F#LS:Pn>6P]?5H<%H!F;\<]2ru\<NM8&=pU6f-HmDW8N@[d\19A>X,?fh]%k`tH;Ch-(rFCVNe/`S(T(.!\B4VS=+Lm5/QEeZkV-i-aC<hkK$?lK?#.>B[<'/5B_LH-ip)!-PmL0XHQG;>-f&.GNl$=B_=I71Ue%]D4[m(cq4&L31`'>%p4ndHI9)cs<5m#M-_0Y7F0Mp!02jHhM'dnbCgf:S0JTm:N!<CAtm=qTsZoQKt2LPD+:\Bt#0n.\WsGcte3&%3U/H4NF!O6FWT0M#.`OH4+QIE,HdoMs*\goi:/REd!<=npDR>gY1W!gBs#.]M[B#/eTuIcD*E+]/QtY;kB?o"mSj&6qt#F@-i9aj%^&+S]l)k)X3Ip4kJ(0s9?5Les+n]"k]\,uiSo=X,kd9'G7KU@^gCJ4^a!?c*2((eZUTWo(1bDC#9s?Mu%U_$6:@[Y6CJP67@mWMA%KLDR-^XhkCN?j0!Mq*:jUTaTXR+8J,hb;G-]SCsFf7*aH-.uWqLF_1A)P3luJ]3e8j'U(J0UI:9<;qC*ddGS6rk[=`De=W>oC_)"%/rN`Iaq`,e3e,SV2oD!YB+j;)q0,J<e&XP8VT1:N^POB3mp:rMYeYlKNO[O:kOl+SP%7"_ino\=<R$qlB#^t<V=FE[P!kbN2?2NU%JLi7XgCXh)Dth$ifP<VB%Qgj>'GeHj_)D;nj\M]/BtN8JBTt2ep:"gecr#;e']'eBqBHhEj3FDRjud5s=XYI#F\.jbJom02Q;/CD%m<YtaIXq5O3]iTZGoB(nDU#lg6bS?EQX!UpE/')[N_1BrVQ$$n!6(Kq]&)]-\*KU*oL$7Dm\JD*]t7*pEuTtNn9(O6]Bs4Df78_f%i_r<IIVXN7g[=gacZJW1d"/08_1XVsDff@7-hT*nq"9,-?rDjd0mTW6RM.l!%=2qLP1K#>G8t+<dQA$:]apKDoLq*@k?b(Cl@.66%XrdRq)8&/1]<D7`82ptXk#dR5Mi4_'/l))tK>bhlIl,SdNW8_#e]69JrVj5#gAB>f*p[i#d'd"o4nn9gNV$*FK4E8(`Oa"hq,)Wh%oF]#g^&-qBW]+:Q/@@K'+$X(Q%!8QRQIKor\[[hUp3UWm4+ee^8:T,R)BHW0HbW]"(fNf<`L^;FUUt[Dilh#G+8,&9cp4UoIWC(%%*uqNP58p('N/)SO)ZVNJ?X&M3\(>?/2.A%"1g`ITY36&g(Jsu;Mb;WM&+IfoVb#I*X*+asQiC_]oRM&OlcjbAJVuM<a=0,<P&G9X%SQ`e]jP[R^FLj.DGfh`DpjZt$*ZL/m"Hq%P[!SCbWf4Ae>6$>Tg*5j"GKJ\RR7hLT=GdQ'BqUKBGd,C!Ui%'d>%V/*Ohkc?k+Yj)%^#^mqO@h9i4CX9#hWiT4?]fJMCR`I(TD\3"*85':nV+T/fSK$p^JR*!e9(BI1ariHj_u=NeidPCFXe',$nGL5!a+<%e*?H2pO\d@%MMH0[nSr`n$bJ%kn^5J+@$4T)q!1&jSJNWO$EesIY:"SrNhM0WP)\aCV==]XGYI#pRBCX<JKY6l62^,(TqMSun_fm.GU7VZ6/WoO%Lq7)[NLnnnp:YZfK,lj3\T_^-26kG:Y2+BK78BH)q*Pd;_6pj^,rKpSZ1\*PQoV/<d<t^FS5O$kLK6>@Uemro.Tj!K"tB!9r@QX?%ID)"/@#?f_A*Q0ug)o9PIVSOrO%g-W!pat*pO#tEcq)ttZggP\))7Iqmf!r(1U9WRnI-oFO/R2FEt@Y=O)3E9e7kq]:?oLn.HIP]%IAoFh3Xm55")FV$Cc/eQ!@ZRrmmkZu8qVX'F\oE":E1jk59AN5'tOuM-P[^"Onp;SK;!QI"*YeJ!02No+d##4[HjqqRgV=RQpjD)%0[lI",0N-<Cg]0W?B^:Z@R`18M5H!O=FII.,],^dO].^N`0:%B9\_X.6Z*:^$.Bs!mpMC_]05hMea.;T2f1XfAk-M:7g\;][k<Z3%`+l">do3a'MlZR2X#9rVe1?Z?md"qp53S4+.h^@gZfjt[O/-7^kqu)Y](P@Eqq'\O4bA$c.]q1i=XIRW&0r,Ar*K,mh2@XMeoWM*%qe#fc/YXlFN+aTh@tobr:EYU&g7A96qHs5*`$guL$IQmJ_e/il?>m/r&\=:lX[W[#(s2Q..QYF3!h2d8!6TVk4W",Y/_IAHWkd%r%$[_9@i2M2+K=nXa,31__ere6g`@5g!>OUmKD?Op470)*gabL"a>nN3lDT?6B`mpBoKG@\h^#"&#H=reAZ9.@TFer4gW%H=VcmA1_%Z/9DKIpBjo&R8!]XcLb+]+r<O`4gLe$.=e[$a<nT4g/:g.j66*a"NO1K,%AW3Jlrd4,-?[.GPJ;O%)9AbR+m$#HAk\I5#TKgC58#%iB>4+1_9&)7`e;#Z/'ccp4Mk>#=adG(84*(9kVdnVn)Ho`]Z<:oc?)<5I.3E&!)1`VuP+Q/0LILUmcmW*Rm@ok*<uS=5BMk7T>8X%@Tinc78/Y%pqGtB5fb3)!hb4s3ciCd4qJF%Bq*?q1m!#+@DOODN\JAT>5.FW!u,>tJcN#Y#@*Tj[t3#o7!H`8`rh4@rF4VMRW[8)%d/'m90UNZUhqIgLhDuLM'GV5M88h<p+A8_U>5tA&&!lPI8$c(b/ol(GNT0$)p[fhn78JWs+T,@lO6(BgP"+uK]X-XcPm0PcHX0l8%.rWGIiNICcn]U/Dq79nbT)C5^kTr`CXD@/#qWm^U>20%Z/!!T7mCPiudoil`[[J#Imn:FhO,LuRG&=M\]f^_2h_&7(_A'J]NH4E&%_mnLGpV(gEos]-Vqq"\jET<mnRoAGE6f[M&MRL$7EM$<sq,sqXQ)d[UC$Wf=naQ8=]_8aJr2*9]MgO8T8*ea((9b(%VA?X)f;Gp8%8hQBs>!CcPQs+[!Q)UUHhe,m2V(4pTY?b_q;3$X=Z#kSi9'Sb57kn\fA3o%NT5t`aDLK+UX-1Wdnm,m$gR-[.Kn?ERJF0?\cYU"9%dJ;13G*T^[8k52YFga&lqW;cU$dI1e[.(I:l_X3Z]WdgQpRFG,AS^RhdFGi*A6:Ucd69R-Kai@_q0D^T)D^O10Cs8D6h(TmUQAo&%Xm72eCqu^u1X5gpFmu&2Vf'(%(KX,CK-%5@Xfmt-^83SNCL(1n0YW8MC<at->T]?LK,RhC9!)VEq?DXNaKX.$hp-%2?Te`7<2i#D%CkiMs75M*H@=p`n>?dXK(aX.'[EiorI!1Q$2;/.7SU4^PK-&:^q/E?X0(LZ+:a!jV.N&pj@9C5-r2a-7!7)0bebEkNEp(W^K77Wd%$Q[_X:f_37n&rV[K0FBp*VD14d"CW#bbs"K%iVf:o22O`#%\F%OOAm7;Qk]X2<M(X=.A@XJV-_Ll=T7Q8o==4"C)hW<bj$l3p&oQ%TN?>0XaP@.4QtA_g6]LmbIJHHQ'$gW3d*-m!5/8AGq-k=>5dtlo.\G]I!9ILWJcB]$k0^qpR]NH?F<#qCYd`*prN`R>0ctFC7Dch%Fmu'DF\1855ISP(YSLs*Sa!kpGP0ks%XQcDCkiM3S,<+c$5rJJ&LdHsn$=+Kem85tY?'DF$68\SkB/.od*mF/m$AP'BZr8K7Cc64%$c.J`/^KqMhCYf5%XN-,edWWVQ+=somQSM=]!$KghC+'d>$_'?l#b(!K3g4%h24K!0A^,e:S7$>63dBs.6m.5(4uiT3.H?\aW)i8%%17?j]tM&d?#.'WOaR]YFC4iDh5^Yh>!#f`071`$A5Jq0T2b(q/C1Odn+CrJdju7MW]D0-52FuaC7:D_?S<ohk`Tl2<2Ma*\<d*+%X^5n^Y\P8oVHIV?/[7V!$4FR61J]sY:Lm;(FJ\DM`P[O14h01^6'm_Rr1`[gR;873c]?UkollE+\rj*IGm6-5jrP>,9[[QTb.D-0%<!Gd"@r]aR\A;VFK7d?ql*[SZD&Dp"P]+ntX`X?T#$j77q,[@(]iKP+K;LF#`qeJ_(Vh`qn!>q0Dp0u#N31t6Pd]#O%scn/18R4L%J,#VH>0N?=VHGhs_6&^m%M6PWCWKGY/ui7hX7YY,>/"<q;>)njNBA9snCJW%hT:Kap9^db4mlK^:Wpo[e9?[19k=Bt=-^[YSWg;/%GKOXqXV^R#Ak>"rR$mM.'bJ"!.;,.Ifs'&)E^'/a$\%qp9'PuGD"_sI:2Rls(["_4oXUUAN14b.`UiXif[E"FqeVrCp@LWGDH4k"%@Y<!fPj94aB3=KWb0S8sKoi2sCusjKV^:5!!O3^Mjn=(%%r8kXgf\iTOJd:C27Kf*L-2Tu=pi$OrK-4:1MZ0tD(Y,=WOdF=r@R*p%6X)]udp>Bbp,K6^rSIJcgtKDXSZRA.>mEUE\jo\?oA>?mPm'r1]Bt<>eh'YY[Puh&F2.(jHHiFm`jajA:Q>/lMdNmTj05FG6!A_C%I6WjcQ^8L`N35?k9I/?g8+uIhZ./1_;!GC%p5tJBZg*T@.F^6@F>hVW\<1hTq8&o7Y:A/3X0]rkokP%0Q!1__HRP4Rq;"JQGl#5p%rlR';2EDjS)L4fE,OQt&G0W=@2aVEEpRTkT6>Z%p:YZs%Y"rF#>5)\#YA<n(^k's7E-G?C4MnZcXj*sg/TYRfE*j7/nt>-g6K[T5%>Lr[^=>m*tFW!C,FR:e)3iGq<.inKk-.Y$n((B6@fDU$JTYDZTh-)F%K0Fb[1*["jFB96iP2=f=!&cH:p/_!^>>9CiYL?X":ucXu%%,0tG;KKQ<;],nW88TN&Ji="M_iN_ANN8Pq5lnXeRRcgnf1LFGcp?''GRPOui>XV=O\+fqpbI4nZq*O"MtY4tfV$:'9CcP7An?h$%RXARd^65_WC/@(Y,C=/D5P>`_BZqRGH;n']H^<DQo._jqEifkDqV4f5;1JP?7-m,f>W?O'a)@tNkN\6-lUH'j=a]F#k,)LD/\75]%G8A6Wm!WU.oZA@_-4U""b[edJ7-AdIJG+`.?oAbl)f*Y=j!0$-?t+'?r!:#cafo.F9?H%&JLo*V;#-u_<e#;%Uub2^?E[t^08/!+%I[`ZZgAG1qM\Q3qQ9>54+^`C,1b'C@"U)B0li^%>q>4]#DP`Fd/QJ/$0*Y2jY;p4dP!Rt!J_YsH#O(4b>9ECW"4q`R'u)s'l\%c!%688aH2J'6$r8%#^puJCnk$K3j!^u,o3?3[nn@,tG7%Y;<$O'R!B1kT(420uCPh`aN5/s9I6!(:V-[#9#Crd:"LD";N1Gn0Xi?\TT%08%+hf,bJd=%aX,!Sl5GMB7g+%e-X\1:Eu2UtEF-HKMsRWXOX<ePa^PRfTZ;ZCUo&YTlHc!8(;$>YKj.m4b]=Nm@^!6(,<r2s/PS%0fg3`C8Gp7qm-2Us7IUU,3rH'n'S1.OX5E!lO"g0gT&]c^3q)95mT3<*NtLMK-eammMDLtmQjbt*t"<5AdH3-KkkD!d6#Z1b&Jku%H8i[)]QN*PZ*Qa!;b7\`6pq_$3qq@kLj\BVCCLAB4/)h_1ZHC8?%3?#^&96Y.V1ugU0c;tp.N#;kbNNs9qI*E#K\";kEUXjcB_(*%2C3WTMkPI3?;mH<\XO.^4Zj4[_P0k9HjW/1]N:WQS(!4[[7NdtXQm+W;bK6uT?Lm]ptbL6<PM`.?ru2X)T;+)Q<KoOgE,*q6G0rG%VW*-6G+Xa?\]6;(FC"YWVCUKu,VeQ?$8\AS&ubE\%t3M(%)0tU)AY,cnV7;hdk;"](_&$m;851'm>C73%b',"`l7H=U=+(d1Ts+_%B9>u2T9g4D=JSqU/B",\ZI]bBQqsFc[n%:dic1@BqBnmaO5m7*/oU\tBI)p=H!@4m0#th7M-pM#NOq"$$-he"&?[Qi^.hCV/%9L'%AN,dl"rub#;!@,LX1N_P;Dj^F3^^E*JTb!B"44U%-$C'@ee0PK;OIYd_20H3=op%6b0[,\*#Jo-3"[`a,-l&'"-XS1pNqWFT0bhh%XhNY<2cSZ<H\Q'(;hVXeq61XXA4e,;/M*aU4!4^le`6gc"?!QYh3L:(+k\P8iZjCJIdb4C*M+^BfL>#"H8?3H!'>uQ&-7t+!5E_E%"[JHi+1f2CinQ4#HTkED!$+J]$A2:s@``P!.m8$KoXdS0bAiC(-(H+b-`.(fT+IV7I%IG^T>Lbh/5k=BTthS0`?TmZ(d),+%Kahs%i]4j7HoCHN]F:ri--QqJ-%0rJH9+5VnqBS)JuSeK>D/V-9Ls=oh>NKf64tB'Kr(biThA$iI#AA<R_Ec][Qe5GK1/<'ftsXBDVXCo%N,m;U=qEqM!*c-)o'=eYE?>^ND5c@g?AUj4g]tZ)`l7fPU;5g:H_D)oYORMP.`XZV#-TbpZ#\@cRF:rOGpYg2;)4t8q;l+1m$J[7%7a5mX))@h[MK%1N"p67tPu&'Am!9E*B`,/U^,DT_.YUX9YPb2%T#;dV0Zg5Kjr8b81*n14(uksRh#V@?l'J(Dj&:&N!l/<h]%4hC%FM,%u#]p^4Z?(]=B',mf'_&(1A_EGiG;:!.ns%)?4<EAc62[j[pB9318$6=\<S1HkG\`DoiRRhPff72GBb?_%9dGoIBbdm2T,igK%-#)W0B45&j+hc7i9+`*b[@a8uZUlJ,B6h#>It6CNHCo;F)l#3-=F>SSB5\DsH$SQ,@i0WL!P/V72o9n^b4!2m7;VgRmI>lI&I:WR%Hm^Drr#Cr7&m*A0lXJ0:,T;oL"<);J8Ml<ko*OcnJlrs@d7!%F@0@W5)d8tikSNT%!YVX4VGDa:E?dZ(,`:X\_:&pib_DW-?;2V2%ib&oW4;.+rP()tqDLMM\]su'rBYYDQSq1N&>DriNa]jOG@AQLO`"%)J<^DdZ@3@IgV+D41^B%Pn#<SInCHUH/]=^ZaAFYUfS=$u\%@+@aT=Ws!6Za!:jCgDGlq9n]fCI326XEb=6,nUK:1ktsfB\N?1na29ogeU7lRRTibqh[BV(M/bVGb9(9YupZ=W84RET.VCee+`cH%c"QhLpJ>-TKZAj3eqh^)GK7k\fbjFrY:H=TV&8PiKVhNA@kK!?Z24+l7'mg'PJh^*T?RL6&<VE2%Fdt@39`pR;&]]^CcO8B4M3RW%aY"%d_Nh3U#4J_YYhBX8Emm[#F=NQ<%q:3pIjOE)84,Wk(c$L5%@i+Y`MuL2/oO6PrZp9If1BB7VNM4&KU=WWF"($Ci:8)&V]$bH%07uUCnnG&tj)eVu\k#@(qqtU&:eY'WnnQjUQj-;\`5e'/("60IPEt:jR`F<@RD"7XU-5/C^g,uk5,m#>fNAj;_XpLnmL==t((km:%FuB50(_af:$;nh(i8NFH4n0(q^[FW4^6L-69IY'BJP9f$0Kf89<B1DajD/sjjNMR.hp$3:ZIQUdhc480qpekYG4W.c[XM1%3HWXd%F@<l;+GVR1K9#`J'?Hl*cCgBnb?-cHMiem!DRSJj3HX\^JJiQ=:OKep]''P`3EpHm*4jK_8HrI6[c!6-FO:tJEjjmc3HWYoCf7G"%=?1KN)0F@A+$YN53eK%=68Ck;?$$:Ak7(B6#Eg=[hE5e/&?"-$#!P-_kVL^!83/'V]u$T)%W:aE';Yq[6VQns(Y;/P*6GspG^\=c%35nC6O620X9-0*S&n6_\Vj%lj5".\\cA_8,E4I0U_%N<ZPMd^1jn2uRZT-r<]KS>oNq0o6Kh9m_PVcl++8qZh,>F#+5/p$o,2e\2%AM3D@;DNj;X[XB98L4].^uQ"n*UY1C5pQiH3d0.X/C!A*L7M5#=k\q)ToO^-SV4pl[ueKM_^$RX#hBqTdYl4bM$%)J-&!_YL"lM3%2]MfKGSDFq6q"7('%'i]IMQ&G0qJ.2)=Fo@c\RAf'do9gpKBeAH_[*;fggcgh'G$I8N3:YUQ2\3I,`JI`J4*R0a=U'#a>$YW^Ht"%dF)=kL.Sfb0\%:e@e^tEa/oWlQ7ND;b2_g,R1kGKphos`BAf!:JVDc`0!H,(BAgZTeHem$)(r<Nq@*;\8O//F3<%p`^aIIgb7'HH%coaL!"EPPl\B(L9Qs!O(iB-2i)>N9``T5b^#I3dSMkT=19bLq3GS'HNId%4e4\+h1\"dg5<)NgF4$IAF1]*i"VfBo4I(?1.=9h\)%LLr^_mT*i.qg!O5B.n(&['pW?&_qO>((\*<06(oJM="ccX2MXh`Po.k&RWgS>cM$Q%/G'9K(Ot:dY+L-`NneP0F"i2'#tg*#UCgL%`d=l7UYnHj(L3%V9JjO$)ttB7cW3++XOs0$kM?bfAgesXl5V9iOX*(B/7ZaOFi#r/i_5<Lp=Si)&NP<e*WnCt)0SD-Gu"uc!@N\d%_C7CUj!0,Z1[mLc/od[1@S0]DHs^\,\dY*,,VosGZ%ts\'p/ecSaK41)]DK.Ls0$u6tBO@;np<JF@dZ3n)&^@1..X2dq;afZbo:D%!meZ3Roi)@rS%HM&AceRCkBGi.MJ##2KhIm0ogU.A"MYs1c54Z\;tZ.#n@Jo)`o62,4Ltl2f*e8.!1'(ErmaMdIFpJTX"F"lcVX)%o(\@bbI]!j@eWK^Q/gMYCbeLJh`/+._W*=;"a,!PSt&Md,1Fp$-]pT9o^:6_,NdOq^,IU..'IOD*(]Y7nP#Z%-ZOZn80O*NL#W]"%?ufOt&2\uc\S^RmWWt;"cG,PMAMM+7Wp"j0$d4>F0.];S%i5f?:OK#lGs5L2qo:%G%u9=U#;b@o5G9!d&"!3Il8\TYo!prH&NAs%%\5BR9LWbHoheF4ffnAqTW#YDA`(`97DD28VZ@s*W&*JF8J?6@0QOejt5;EIOUjP0%Y&?_Bf[s@2eQY3i?S(`88E_ToGbk6[$pPC3%SV?Or$un=VTm3%$V&s-!G+SISA:-VXYI,3^LR7YnI1btIX("Qr=IEFWOaaY*%".DukNI*i-V,V(pQ8`>XSu=/n?ZQr7l_K<0o%De%cN4Y44rZ]1"hui^IcGP@UWISLM)`O#a$Ph6cc,^<8Q&:P@)LXJ32R*ZibcK,T-;lAaEo63N6d4pTt^.qn%'\@,fpPj)tngqk$m6`%1N@?&ME9PnlO13+!(oUal<tZIbWn5RN\AGe:GO0fq]msq^J?$uouH5`1/cZejb[ND69c.)8B"m^OcbP"9Hk\ro@K/=#!+_jbnF#B%#)RS=CA`o759&I%Hq[(#\a)qD%7=(QW#Qa7>A)Sf3+B^Y`!7ZV$HF8IYsd4%<4M"/9/"5<b9Di5.jp\k(U!K[R0n^q5LqY23u'B5%8RNHo`2<mY0^=YeJK"@,Im@JM]K3dJ\*4`V/EoGRm-HNUqaZMl-3t`(B>"Fk@NlcRb5[X`&N:M>$=!Js4T92$;/bVd;4`hFH(6(+%V`LS"ja5VR0ZR<piiY7LZBrYE4T`W5VB<>k1OClmj5&Xk;d_9GiDni\;[^4<lI8_njSRHT`U2p>dbWs:eA>A98nIM`&_8L//aqPa%9)eD+B'O'3r?b=.8"@66DV9j3if<SepOoOon#ST0gQq;Eod7:^mq5GQ6B^0eImdl#:"O9LA^pR>h+H7,aIq+C-S<K5@<WZY@CJ+*%L(B0nC:f,pF0U>&cD2G\T+NM[a."I)TY=qq]P9K<;"J7,oD?Bp=GEAdFVU2.p8ioWWmlK87qL=ahXVKW@>!,U#2N0X63ln"T>/W=%ACsWTR'Fq(EXAY0U/nks`J7B<DL@jGJ:-@eGl:->c/<o'1Q;P1k\\(5$#4Y[GAe?jFlJhp$rP<[cupige1&R2NcM/ZO50R_fV:+g%^)\E7Pq2i4AOD/lgshpVd'/^HcU%tFL>QLK)?$St^aTGW*^'93HUg`7<&%h[L7Ypoq'NWp__<s9S)f`%iK!&t-Ng9>[tmPGlPoO1%\]?2Ska0@:>p"LD;:IH*ak%>Xqh"H@o0bj)]k8U08cqqE"S]q_T@0>$_n3sUkd]rW(XRFP]p$O79,*.!4.FNt/EP<"LeTLk/nesu%M.b9@9n_qk:GSClBL,3G+-U?dKqG`EA2[^)=@d7UU=jYYD[;b!2I/Y/4D$LBB1a_A/gb<r68i+GS0^$PZSAfNJo^+-ch<<]9c%=W%qTee.+Iau3QS.X<$DV7_"c68po1q-2/ndjN^J$>N/h!&]=A"e"V@,.S8YgR)flY'.TdH=)(Y$t`41rtoF?s2$k?!\,9c";E8S6FG%&n9hQFGV+uFuEXQ2G2mFpp%-hJo^+saf^J4dfnj]Ktam/jD;E#>e9_.b$hX@Ji[:$]HLR>P"caW9,D[4is==[5pf=EIcZC=F?X)o%NRMEVTa:lm63f4>%>WdD%@9d*HFa2+`Eg:,*PdrChZ:[N+Q&$fd1bb,%U^F74_Lq7';(HMhM+F>\90O:qs'oXMb2`+(F5A>6nng>%0t13'_MLYE-(eG&75$7h*njS*Qq>8%<>R]mJD91[/tj:t8k-HNSe+Z%\'Omr9Z3a.&O`MJ+%g,:ftptMlOeR:HUNMLO-2on`&2c!%S;'Xbc(1NgLl:\U3fb+$@A5Ed9=hLWC[Sk0=2lQ7:#PEli>:;Z[@j1.mXh6G>__5,fA$g''SA$LM`ulYi0q7p8ksI81&dWR^tcCe%Rn'+fAs*copj9/e-^JE8YmV?6A<&(SdO((!Z^^/07L4FR=jJV=;o>4jo[>2G4RbbFlrPN,U`8F^Y>85/%UJiQNo]s.`Fl"n4%+hM%Z'03Hi!iW!)n*&)N\Y5+%ADu0p;J^B5EWl:j)\+rTnprXWRFZhqgWE#"*fmCHm6>P[h0h]015FHRo:h`$-dpNIR^s(FeBQ/^Br\Z%QlqSUQ12:$FuE6-/_A)C`7j+.lp,%ImmbN-;KQa"PPGKT-*i5fUj`2Z/GRO@`9XR&:nG*.JC8r)CZHAuMnpuN/;l_YmIA+^;]5K\%7n1Zq3M0Qrk4p9@0K^F,OWj"e]J2%=G4Q(XfdLA)P9>u2DRZ).1]CS[BKtP6<_Y6D$bKT#]MU&%.Ka7DTbA:fGBgst)Iu2`)`j*)%pa0$]a5(us?(;5=:.-@?_^%1r-,$d6]Gp;"bfB8,0^OP+;/XMq5+a7aVS#L]F"[:GE].Ys8T2+sMiCNpL-*_0Y5rk&NHieo3;[Ck%Let"EE^kdWXAu/3jhc>gSDa.%@V93.P)dn,bYBGT0fH9p_0`=U5@[3i/r<pqJ]-:2d0H3f?S&p`7/?49+YDs6\;RZkn3HjV8PFB9%L7[ape!T:KcD)+V_Bc"j:1Sfb<#S\S7TaI>PP";8\2:(n[JS=o_.)3n!PC[10+!XH-;%a9>C0#]PmK)%\kM%o-hT"Y3f2-;L*SMD%p__kZQlqA;R:-A"o#AFl;2*tM>jho@>Y1@80FW8C;mICpdcFt'N(X!cY43F@S/_-k?'%3mhjrDBO3j.NHlNo!9TnF^hbE`XW^Ja=%3L;]f)(Ibeh1BjmhjkIuT3%^90-KR@50"D8P`R)bk\,Km&H'.Xm^E8<@lW-,FuifFQDNen.pQM#h\lFIS6C<]ID`G+1?S+,:;5o`%]u$k/]J%"`Ytpt@Zqa]IFCbCChSV7RXVBjKL%cXs0;5q+Sc5ftGS8lm=7&$G`jo%qic[KFl8mqE\_:sZFASh-FE$N=1#G-1lF4B\%YX'A+mU7W:8qVFgdo)V%bY,jG&LRRkr]0lDY1/dK2]nWE#N/n:4HeToL0%3gErW5/fopXI2Co.f4P^RTdV<&4FKN^:d]\SU60B.h%q^!d"0B^%Cc(Ba"2]"MgVgH-A'ftR.k0N-F%o+&Ik3qof$k`*mlc8amRf7WBrV'?/4_s3O[X*3Ia8&);RP0WfR$tr-R3+kidE*Ug%g%PNt=mL8UmX>eK0%>=?>,q\95rTOQRjW67g!O%V,fCB0+c3]D0E,Wbk`hnArQ:3lX2;3FCAt^4N-[9Q-0c,-JT*6\93<J(VD?ZK%W_h3=FYVCnWeda`Ki$rIfW;HIq[NhIh@#KZ1"]XY3NZ`@[liI1_5J'WfMbu141HL^'mgo`C._qo!@O0!S6#QPr!-Hf*@j%?_4)da%i[WktR((W0(j"[u;l\ljNn1W6YEjL^(2VuHV!=!K^FpW&L;O-(E-3A:4BK^_O46R'*67&Bj2B"-7_N>:ektnD-<YlZ"uJ%>d!p4\%7)1(n(Q7lgWWV^I)r`/.'`6`S,O44DcFroh8*@u>9YE>5+8K68p.[!sD86JKi9SkhM-kFkMV[q0?j44P5C(<[N($NiD#MWSn6[^+%%ks#ce=6<U>>^^@OGRL6G+7sGPf0PO1%.+>.`^h'R.hSRkI+)TS/Y73NI.Pp&pdN,;ng"%;(A5?hBu"Y%'l*=[t8M2)%D'9s8N"B%S]0KOQFsQV>BGJ/$HP`WcJj5:+m'N3bEKTFkafm?+VoEsc7fff84X[j(Cmh_V&Vao?Ui-=$t-'M*5JfQO<i!N9U]B:=a_N*!JUmB%JK2H[ilORCW#'&M-HcHaRKFCRMcgljL:U58/6=Z2(1>Q1^pkqb:iHhcUL'&C:S%`W1^>_>NuYV*(7bPPGj[TD(S5k*M+dY2De,@$%V0kWuiPrBlO1sR,hO5DP;EiutCk'j/I'Gbi'=j?g:ib%pGS@WP0AtX)?Z7H$aDG&n^6C;7rlVJujmu6HdITgB4Ou<Z:L%Y=I'90`%^m`KZTn;b+)`j0uUjN%A+SKZ(mtP<GqMf^Q2X.o(d91[WGW->Y\f:\*:^QR_9Ccu!naH-TO1a#(S5,]l]me@!(?H3Rj4rr:D6Wn5%&<2">T=isq>Q"WkH62<W^Zb8_4HjR9Hi5.T2EuZGEd'8tJ0__X07#p+a(kO!rM"6')^<%;[*([=>rdagrIQf\`N=UGN1nYfoo$Q7%Dre",Tu+[/DkJ$.?GC/8MJ07$h!5c)X5@mjnV---%sK,QW;$.6HgrJ5Nd;e>s'EJ(?@m5fL;2=nqGt@!dPAYPIaPY$7:n^nEN`_k%HA[(;@a'2t_RC_/oc\PtqHgr#"4uW40GCtJ01:&h>Q)Rf8rHhnT&7UIM0o2q2nHYbJ+S*d4O>.ZeSiD'p_)[OLgEF:iu:5O6+YTb%m/-Pj)=]H7*/X.W96Am2m!J]*DtW.cN-hb#aDD;?m7,/hMb/j;1?ZP1L5*Cn0D\_anZD>%JlaKN]oR)&2Y?Ydmc,7Y%E!,W)u`%8%;1**XgD^@coc*0G^5uRt![Cbkh!6ndCa%^$(RFkVm(IjXag&eYqF-l6PfC_Xf2%i:J6+o#>FWLtoc#s\FejB_JpJ$VX>02(9B]R"%h8_I'1-G7Sh>%nlB09/=;oGee$/_9pH`u=9jK3kS&br'goaAof$BE!F^`<&S^Zb;E5@2@NH&B,^chh%Y,WSZ:p\H1s>C%GNgqA0a%\,$Qm=,%!`b=FcXjQXLJHi9ZJ_c.u(1`ZL$^M(O3]>ll,]m^!TP]$.%g)1di?GG\m%V41GmFfG5lPFsjGVHaQ[!V`Q+m*AD7.)?1%EN``V2G]%)`4@sc8ac80<Xs-ck;`54%4[-f[*L-iC%NUX4d]Q3H&8NkFM<q4^K1cbeB!TBaFj6$Zpi;a`.p"#7:JkZA\n)3OOmr7%"p.@0E)WFpe#bBX-h!!O]5*WmSb82uc$]!G\"`/85=POV5$]=s0V<*,na*42REGG0r%^,7':bN'h0td7Xo0k)Y-*6i(;I#D>V2P\%^9s5@olj`Ara&o.C:hM$V:L+O;mq\obKA\e_4@n+rq*932B+<ll+UJS[@HWs?7>!mQRCl]kr"`agU4cdIJG(f>VDYo.mNL#&!bo(%b9uE>7.2S>oZK8Vf7*G'e*0j'SaMR4C8\8D/irqm-ek2u^S!l3d_j;S\`MG`mDJ=D_@tRf(I,*qV\[!W/rsV8eRg7OFLq/4bKF+%%HFf2&aNcUa1-7tabMiEgbKAE?SdII-?huGdIM%gk['sN3ln"pU2BJRYW9ock^=,n(^U2b7K[RQ5jjKD;>li(8&R6c=!,KOR@.Z[K%?XIa74.V#c7Bt9?Amha\r8lp>I;Vu_Q$,emmHNT!Z?:E]hOV3bmP/d*MN,+E=^>9R%W7MYm;<8P&s&=CKmcIoq,?j>N?tb]#%Zc%%Xur'ErQ;j4GcS2.Tm^H2oY+#DIm#K_QLf/6QuQ>uR]SPpbc[Mogr.WZ;iA]F#FKa_J<)UcQAbV"eC+?Xp=-tB%'6i8kqJR'f4SiV%-oYehKsJ9nI]_d5>h.ZmlJ>Kq+K&8jp)WpMqLOh0q0<uE?[NKq?HKrVk=BB:[d`-PP\_sJ^7nHJZ;84S$d`@0SrWP%pUQ)e(YRE*%lnX#qAmb:k4S?[*;%E5u%r\'D-#`3"`V9(4\%)>6qbN:T]`O\e\ih\fa=CA">Eg2YB?P)g6$\k\87fjeX`T!*_&r(*72rJESr<N_%U$=hO"b^HU8q(Pm6'TJ9Dj?[-"2#^YN4lW_"*cINJ1CH$#lVukCHoGGqs`N37>\^VDJu'/!06)n`QD)U?d!?Um&9[)M`E=m+s9c*%B'g=f57k+g*5O$6bA/S.b**bSeVB,)7+nifg)Q`KDDD%\lO8fdLq1P?d+\E'JN,Vn(5$An)k3lfb,W0qeiP<<F3b3oZ(m)P]uocg%e>_prgdlVAX3ZD"'.%LE]Cse,Xfk[c]ai`_n_T_hD9;,bbr3"Z?9?KPe,J]Lp%n2L_=adceVhUf`60h)DVNo?L6nrFSJ1ge+T\:B%@6\]ppeE8;WuRJr#f-0sp%[GYoR6`Q[n"05bTo-^'CK_$[=$TJkJ_SEfVrGSSGqYPrMTp-Qb(_ZkMNJnLSNuo9^6q";%*8\;Y.S@%?i+$7Dt*)KB)A9*X\CCKgp4-^K=,1cj`#b["hg]eRk"_JKjnhEi=d0E,(?RsRB<+Hk%[!PZME$S&7!YerOTLB/%4m3^M4MT>-hgA%/l/MY94+$DBA`QDCq8-);nZ6j^6B+S\%j'"/`=doc474Q>0>,fYc569c19>KrDrdNH[iFVRX86Y^mFWmcW-lf>hslLG^?@5`+igp%-L@kUqu>M\'=g\ZiFf9RHJoKT%Bb;IqgLO_IrLriK!<!V/e6_BiOEkc2?2B8T3?+Qrr?a>iis'e/ct=QjO^Q5oE()^Qpl7?G_6]@%<U-3t1fk\/KLT"apThl9G<J\lgZ2DghYJT,^dTRMna]OK!+*'Sf_:mo[lO,fFuOn<[`t/[qfmWT^[C/i07,]OnZPS9Mo>Gq_,U@K%HqU?NEH/3U"ge(6+.U4sG%X'D(@;kLP^LWc9Yu<gLhkZI'"9O&bJ2nkO2*EST\NH[o6qJZ^of.YWia^I"itsQKEh_imeZ'[`]-h6%g2XR1\^EWjW@kniSlG1Moe30(AlH`r?sWP`Zg_"shGbD7]df-)_Fu7_YM-t%ZLPV=c<EOqCEK-h3p7LgX\#-?P7:fJ4]AXo2/`b4%c:<]?:g6#`4t;V]<i+8JHgon!Me:ht?0[f?b$+W-hN25qU_L"-hWJ2Bb4rU4h]I7J)*31<c<m`^Dj&L>b,3amhRP)d4nlTm!jrkK%+%L>fB"R3o6Jo<c?(B=q3/<n9kEHfuGB;L9Hc\_r-ED%?4tC<-bQIQQC&N+(Q+fsGK'p3/?'5!IJNOhd\E<do'i[iSQ-OM[WPod(%qZ^4?jM?4ej/+7qXVGjg0RXVTlMHG8_?kVa6Xa0R*fUi(*dA>%InKdX^u\NW?_rKjVf[&KA2:DVkmcK6^m6pf?p6jIZ;F*Zh'<Qt%:C5Kgb37]0iE"k6,sI\&\BC>R]7X?38:e"E90gRGSbg<V@,qJ&I.rKH$h#JL.c"%Lc/K-70Zn/1k0O:KV&'D1Tg0/3co7#l=U'KS%`h<V?jQ;ko*hb;Lm$*Hl=<QPT].TlWdep6UK'f2@l/1Yf3hZC;.7!q7osqqqfKO[m5g]A-9Eu)`qdFS#8*$^qV2K\9\W;t!]9$\<%\k(0KXMrot[:Y0X_VYCIWq>ia`Cj*h@'<`RH4KN#)J,'OBc/b/(;SK(@YpD%;C=E_*2qqjUDKhe5uc62#nW$^+tM,R#^8f0G*\X?%F6R_@/nCt%9u:FP\s0ft8eG2mPoO8l?-%*VG9Nn?*1\$!D_8mkm:%7!mm<bl;$]66W"RZ:=r2c?,N-?tKC]",(G8uCgQg67pPh`r%DnUE^HqNe-F<(3j-)d/l`ZeG@T0VrjNCA"&6=WUOHsW\Td5ZS=WT4^L2V<^O@j<QmVQg`"&Op8]F.bAPT1&g@4>g49EQmR<F`4r6%/GLK_Ulgj-@R3h%dQ.([nj3E2(Hi"k.QKp#B]KG8/-q4T/\$1;9@ClhUM=<P>R/;+c[q0m=,&@TaJ*V[U4VFD"OTt>()7f:-CDq$%N=([Z'1>Gf()7f:-3ueU_PlBP0gYI,P!oP,@Y0i`H13FK#aibnf2&]N+4-Aop\X9NIOQ`6pX_k4gf"@&cX.L]94^NHDj!s^oK'O(%8bp=bSRZ-+kR_*<T#]NEg+:Nmq*t*+aS%\10!E_o?X2R<jmjNah$\8!!koT&p./a[;K$$\$F%tFDj45U9.i[2J2S37-egY%nc6#S%Eob$#\ojL[%(,DLaDU[Z,"U1(7WI8>c'$GG\tl]^EDkLr@*uB&k(?BRI<,_HN#(d%-]p9(==knSeWrDA9'+gZ[Xo(^b8jt*.`+LD%nF[eQ&e..:AEC@%3\FR'g2q%IqtR7;o(:_:4>#G1!kL=Tg;<bcY4S#CBjh_D=7PY:*'B.Ro(@6/;3e2ClI+?a^3X"5].,]*h0HG7%qU5>WlRCS.bab)E9ZMlPq3-96d5gR+5/4PS9<$H@^:9r<kH2dJXj^sR2?)@2Zlf/5NE.^GP0Ok>b<%eG=_U"**ujGjcPlt^X_Q25%Wa9^fa1A_9YJ2^iWjV6_](.hjnQKjJ2(sF9Q[\<D(Q1rRg1'`%H29;2?+f$JF_t>%jkACBEJ_<6>nW7W9,`2_XYN-,+:pTqVl_%>%`P^H:F'pib[s)&^5.,X+rAM'nosm8OI8k5pRk:7M>YH_2b6iY.0&<d;]?1=oZ'WD[E:?WnL-<$:V6(Wcn"n><R.WdWZ!a4P>H2Gm%Ro$]rD=d#ili<@FlX6u*Y&2YqZR:gqTAO8%X'>>*da_f,P,@PLhhgrmPmFI;]CM3n`PY0'&a/6pSliVZIU")%DT[Sr]._@[3_*jd%h`.7*&SupAE+Y+MO!<p\^'a"4O`!MMk2nGtqQnpY9$rCim+8GU=:kCRo@[[oH(mKOOrfiDp[3Y[q8'W<80/<\o<Qp<g6:8\OWH("%m_&#o#B\]uh:e@$]4Hn@bkj<]C5W0V)'qHB=@(&LOQSCd5bXWkgY1-G.lFfcqqI(ap[KH0ErVi-p,u`*D7s'pPq8Nu3QA]QWmRq(%p2d<s(IY24gP=i?lh9<67V*@g<GaJ*J,4orreqa(g:Xiaa9OlO8JJ?c:G^Ot_E?JpS#a]NXA"fFqd$0:*&u:,T"I&+#PAq`+4UE!%H;nFXbg1CG/tT7iXS$YpTP4@QbVGC?qK.VBn(!E[$Hc_#>:q9VD8-&Fjsp-P=n?R8ThY2Ca-?SrN_7F-no/9J:X*s?IHo_F&j'9t%cI_Me:1(h>I6T6qWL#3bL"6(1=[elt6eOg;l$T?"[\(aE2HDRbqXsU;hU0J]\_KPr?ld"RXR%V*2oW,0bUsb?HHE=nrHQ",f!;nl%"eKS/D;TiBhRAc\eS":7XgEN5qID)PUR2-8^G3@rdG8M:SoVT\f?-n$lK6]XX@/\]:[a^\>5>Q*=k)>@:PreMlRp]A01c!#T;?/^%m'5&fm.\XU<q^3Jjl:NU!a'735_-VXmt73X:]-I=,<hdr`GpZ47QQSa`.<]Ipurasg7VYu9:m;]_8dQKhe[b5KK2!e02qp,Y2!qM%9B37]5Z'VPG"UQ>-%(&ZP6a=Y,nq]u^/sW":4YcboWk#6lpu'?_P$f"!qTXGl+C&"^0(Sq\$kAc$n`24*QlMb4H=R+BRafASt-3F%C\cn`i8F4R1ZZUC9K,2g%<d:gU0->IA@!fA7p."YaF\ql]HL3SQhD1lY3[bsA)qne:J;.p>g!FLLYaZ>/2a>028;7q9a_Ym3OZZ(%bsfS>5&Mg?D15c:I&Y\HIEWf9*,g#s[CJnDn)E+mR]0!B.:;jIX"9gd;1?'aSps_2IdX60l9kNKZLdt"lI21f#AHSL8\j;"pFXFA%9:6?JIU1.s(:thaA(o.bbm..40b,\RHipRY34K4'EOn\:'%/CUIOsTn?+d82h^qep\+$V<-@-2!WI@"3\pH/8pNWp#^8HnV0AH&[%,-\A`Xb-iOdXd/#$REXW7JrBkbOVHffZ`YHmRsIM\?k"b*"U'_[;WZ^g<gOOI8@5b`[!c3FnIP,F6P0%F,=_1a)<T,1;7TpJK,9=%)(hAe+@)%2/DP@>HO^1al,eI+mqoi$5k&)?nB:TK6#\?,J:qq[#d+=:=JSn#!Zj%O!CHbNJH17Mdo7?%P;-H(A[j-h0#8lE&087u%S\I)[j6X/$b>(&3rO\:b@nF6kD2!.qE4;1jl8`l$r'%t'ILn76cn9cpN]@?gL)@7TqecJDVYbdM?'+Ztj36JY0;R]c7+If"8sSgn%T3jcf["dT.!T$#O&gTmjfY_q'j'u=#F*&3BUlo3Ike?*C^tnIC]=<mdU="t>`knh,_++7,m=#$(dE@nFFnF5ql2^SU&pM`pM?d]8%K=a%c;.l>AEV1rq:q$,%*^%KnJ%2k,--]JirS7+:mD$7084$f`X1Gka:?is]q7C>88Rt@Q^O#D`#iG)DbjebQ,7oZt`i`MD0pg8o%PWGef&Bj95O#RB2`i`rdij__KrX`@/c!@uPb&b)-&!o>?7ZN)=IH,C=3KWi604PXFrED4L,/at*(cLed^#9-]Vh<=pW#GJa\Yd'"%7J+_Rs%1g3DpojFUZCn$9&ZiIm/%;30UZ.W13j<-NeFL#q*)l\/q.pf>ha>fV^uu#^a3:u/hsF2SDkh5K;UnR3L?N"GMY#,K(JiY%`CGbHZUS!Ln+1k9d\\)*1<"_"k*!*R2n-'$c6(-QY.Q3j^*i:tb/8/"OFZK+(n'abD(\H8H;Y`*X!T_=DonL:TklC.+q7b3$3h1[%kpAlKlWbZIN9+?hU[fU0=X*<l_6]P"43QFJln:'5mV"7D._u+O5c[C&$6&Odr-H;bQaBtFj/eMU8,[(Ao/nA06SQ(7h''Hmb_^$1%C?'L:WVg5U%SKN/`fZ;+]"U#gbl?f2iJq99j@+QtbTqKs=/>eFo<jj(nbgSqYO[Ubqb]I+[_@rHUjE9IFL,r0!e(ZHYAUF?(V>5R%Idd"6WRR3R00*u$mS?AqHO6n"R&?SAdha9O]gU^BbJHYNkuuuaj2Y6^e2DbjiVm&ZBGV.71sFRaR<gNX<Ls5Zf?I=$JQFVi[i\2/%O7286gQe\+fh;=P!YFs@n<%\KW@pHFEq$a<>(1oLr7p"25F-oMcGu+!/\P0H?8fQ9(n""`bPVlXR#c(<V)#HYg9ES$J(Em.4+g_O%r&V7`=Ne,hVMg5=]@G@#lKS]W0?+V$jh6_m*s#0@&JqltqJP<5m!XZU=_rK6a6\50lr0=ejI!XLO?JQn<ueR@m00CC8WVR)ht7[S%$Ja:GX0s)29taLQ"!sk)?N1*XR!5CHo4r-Frb&!i;Ub9Q!rqf">tD#bPL`D@^6i$6GG!$@\nQ:N^"5kfmde=lYO_P:HYp7WSNkRR%=EM*gGJ7!IYG>mg4/fc[cGFC^4/`ULk&Dd=%VBsP;US#/\bo7'%t>)Jk;fBC.7!EqnDtU:p^K[l8K6pmoZ^/XrJ3%#;Pol2/PT%,%Wf^4Z`D41[7B0M3RAs\lpS8ubB0*&][Zk%5d:$aDPq/5UZt8D-W[#6E;l9!D'WfH8TGPM!0hfbB1/0'-l*`2?PtK]eckA'RkI<H1%mCh!_J0*<j!e6K*@?AH@O,=0TLBlA:XsiQ*4G#rEbVJ.0Tpi2t5(C%T0?':A(@a+2R&lts$rI#j1)tqJH>m3,dq<60;n:->T>O;q%@:8B^e:$t8rsN3nEiNkiBjJ&cVI^^&@o9,d1gS/<e/WY1CJ)n%<F(RFQBYZ/\O?KF"#))[ZdbN*!5Z8fMZPdtFMj!3eVbV!kGSkI%U]"AnRPQfY/J(=bQXr#%+s\kR#%$;ldd:$a&NC_[%jr^uM+`isEg`1k*S#0RVj_qWYT4$CDM`n6>NA,r/`@gk3u.uP0=\es?q_D>%Jt/t\3SUf=%QRh"F%/IC>gU"b'("C/!Bdh^^kMM6Q*B5j!AHk(oi%<6r*prMm@:&P)Sf+4.2LjZ.\nr[#t$Fug'W?R_m.W.4OP8!%(*sJ?[@lZT[NWfe7%'kj3D6]@LtoFV=YkaVQtF/IARZF*Dp*`t%aO`u:d?:1@E2mfncIW&TRI^deq^Sb$#,*`k,;+L!)FO;?'O:<%m$q342,Ue0Pl^B^!a?_m/:87F\3))#.#<"P-K^s85g!hBH>o_lN5.<dH%E2dlJr;,KAp5?3!$SJ)IWMi_+]b"=:Kf&9`HPV8LVtC%#:RnR!m<,(n=V1#psKF6AMAjE0M%V"dk$jd6IW.NS3XP!TFFKn'Ukkr`<r7ka&3m"ah^t7@D*T#!*b)p]<ci#ARm-bL4#Y^7S^Fp%TH\Ye"244ZJ=</r*>kTFBl"2Y"qn0@*2XU-S7PeL+j#<G+#FO2L1*-;j8fI=7@T/df7FM:erst_X26Gsj#s2+),Ltt*an(&Uk'pJ%9V%2F5cWchd*A2I>K`SJgXEt7OHMF>j9(R:$sCaS_Y8Wj"GH/E'XCnnLjdN'Es9P04_6MY(J?&P_H(e_AqQ<Km)nu@4f>#[j_=%Q%$:0S[j^?1W+^j%M=:muUS>.5Y;5!-M:1t"\)GhCFU$J-r8fgkkn0!Mp>En@Z!lr[p^Sn(470tXqd'H?u8S*dR(Sk7(!N=d>Xt"*M%nRUmcClafH26:Elr(ocs&ApI47F0YuArrG7L+\bLLgW[hL*Oi;N]RT*6A7#j&#eT?83gJ^O^;u8j?'FJPYX_%(p=+k^LLB7.)EHg%cr?i6/kBD9>m!>#^cdNVF[8::,ooF;N[o()EP]fk8==1eX9YH]=9Xs<--Oj[Jd=%nkd5J&/cd^\!8\'K0%\OE*?&66_0:3E$=$p&%^^)&b9Nb]=8muSF,NP[L&b=@%P8HVf6.)0V*`sc27VROK107fI)Gl</(PKFhMadf\;ohV:![03%=+s>C)dq'EWZhF4g%6m5_(9F4%L_rQtJUiW/<<mk9UPf@X6j!uk&^;u)?r[F5"Id..(sns&-Hoddl(dGh.FAJ*<B;&83\c:)6?J<+.dD!6,#nZ/-;&fcM4Vb2DOH6-%5p_5q(BA-!7tJmi!&@02i%.mD[UVn:5huDF+k[Z^BlUg/Gtj3!0H+%n$Bhd!K2ttYUTl6J.Wgbp0F1\%"pdBYh/[>S*JSF2'N,9H%G#j39!7-HP=k&$`BPKg]Gc:hM:ajs)_Q40U&c#Qgm$nQ#6S?d%oWY<'?l9)%TOE\-6:s*B3#n/2-=JEt%gV3c."NF6dq%iZ)-TcB%3]mBFb!\L/3\43"kJ^:t[fGrm0M@ba!QA$BEK1rIh*4FVa$CjP_qC>ETS_`=&Y6!'6N]X\rbR670*)i@omu>4j]X:M(+<5n&2eL:%DPLH)l%rkA+\o7@#+2dF0"+V`H[*X5V.?Nf2$.Orfkd-U*M=Cs->jCY)=T5R!]ClRiakAT+GbSP$6VZ8i,g/K_8$_:\L#T4VGo7:%!26gUB`kbnK:!]b>65\$UYE4hH2o/3^hVF$pGs]rW]FO%"V$!=F&\Z],>)@(TVWB_-pG*UBLS2B"5ju7b+o(>'"8:*]R\kCkQiKL%L:lulT9gZK6&V4g-+B1%EU:dOPAP8a>eV0@/5YR:V?\%/mrFgHI1<!MJtiL9+iT!1:<Ih9J20^])o/4V)/4Y5Ea->ZAL^/gR5>_h%D."5XS*h`Q6'sYTh@'t&d'Y?>:&ls:XDZ.GW<'Y1YRF%)<<1F>;iB54$X26a*jj>>dF!%_-4gr,)IX+4DR9HG#08C.+I-BuVQ&=E%jA2]Xo"lMqgo]Z^"[)oC4bu+M;_Vc7'>S.11^)W>!.:g1hjRHjSgXXQdqf(;("A>ITedci#)]BVTRN=k6;SOA!qiN"iX+24Orea"%VI:sIoS=[2MkI0U6<`tSc3+duI;McJNc;cF'WO3R35hJ1OQ/Jm(<-Q#:K&8[+;uG%R=AtrGSu&e4;CNne$dU1-`[9i>sJ]"L-E[B%!X`m'*!;s-;OO_"P;/]p!!L-697uUB_Ge?3Q"m(Mcpc?R.$E_2_jW+hh?bSt\R?*=5_Y7aWWc1$!Gs[4&nNOpL^#gt0L=&N[eq._%0%1pq4"mqUJC-*UirJtO!]0q1RK9G\&#b2V;Y@mFb[rQ?/Pk'8b**qJ"pDOK(2.LIC(V/91)!rB"/Z7AM/=1!@N:V\+JRQ`#6@V(%+9C*rlHp<:!=nb*,KcH(m+F^TaXn1$KC]<VWMTp`kXHW?K!7PhQkfle<1QDuGaSPk7Vl"-%k^5]%Xe=.".>tN#Zcje<>a6%E2m.3%-OH(="<FJ)_GgPV%G7,<<+;Q!B;%U?b%qJ?!CAZ&XVB,NEmQ:W*&=&GR&VQ[+Hlj;="4<Y&o(Pt<o='@Y8I&=OnGA_Kf\_-4@dH]%\.&p#f]-dnnC8jfdS9ABd-4!&%W$"OrEu3V"%,FkQ'XaC+L2^84g1[r=>8(@+G(i)=QgB"2H_af1I7O?X<)^4m]'tVcU4e$Qf-X"%5WY'pW)Z)E&nV;fbV1cAjH`mb*$YZa<!J"Rcq4!;P_r@(mKkFSA@!(;9#Tlt)H;N]7:NVtSHU<A)*lbR8<4lc8Q7mX%#)8Yb<VYL%fc+$=Of![LDe[%!Y*91'":3D\!fLlbUd\J(=J4@U_.A""HN@n.&-0gaK,Ffg$4T,2b@M1>WR*n"TkZH%oQ>#96j](Z1(Gr<X,7`d%Q7CE_dBcfJ+f,f0gd=\u!BI*WYe[2+=,ui#[B&-RGR6Fq@&bZc87!ViNpB3'3k2gJQ7WLUI]Fp86n2[dO$OBI:,T=:;^E`':0WH$%_+>DUeCZA%0PG5^%d?Qm0n^lGge!AYi!:"<9_8IG@mMCN'OL>q68_SDY3!qKHNFNn>b2nF!<3J'\4)h(+E7eYB/DqG^f/U*=t3B_%3:]kEQ69krg2U*H#VH4a69''_C)^90c61ecd*X*^.K]5qENpO+>Qq7?F13lc#rYh0?p,cE@3I(h-E1XP]DaFL@>GXtQjsRANA*K9%*&Lj8nc>1IQ&LfD2!.piKE,i"UTd6.)<-.@^,#fhi.%Do,UFQoctjID-BNmHUDT_aM+#]5i0r\r:bl._21l:c(_;]@BEpo*MBUTW%&0Qd7".@aDI%s[FmL8^s*Ir?%g&_-@+o(6a6fK.!p-me/W!DE<;[Z/lVo5CiQB"$1<e*H>OUJ!H%[*/Q]-0YP<5N6?>rPdg+q8?n%i];]Fk7EKRWJCZr,D/I:PW1KjKYUZFNM2PLq]8lIp^RJ%R7r;W:SEn&j>gEHI47cr!?c-6\.WAG`\a>$J/1[),&W6P`RTS2e3jVg%>D#tJ>)l1`c;<gBCt$8r"<^Lf&\LB#\jf9/7XXD\OjbZI\i&ckn,cuCP`lq=GO#OWA4FN\r?D!16_k?Y623,pb"%%HM$)QhiNX5-%\:B]=#VHc3M\m\;9_MrR!s[Tj@a`mEg%@,9%+A0Q@Xu^rfI3/)M`?9^!79Ys[K1<n/]7MoghsoF82/1$qDaiD_oo'r5_i,eaL*j:%*ahd$%JjFr8E76lB\r#>-eOVLOQ9/a?uZKP$?edq>r#L_22WgA/81.D&r47=,@=n*<WEdi89hueFUU*uM4Us9?BZdG6X_KO"QTj>%(cK8hUQK>u0a&>=$+,<kWRup'j\?_mcNX\=YV8".!^',/)cDq%E5Epm?"UPS-jTu965g#YXg'XCs27[!lCimLaGsM+!$He_n?ae*%Ta0C0L5Ac)9=MTOJ[BO&+(9[I6FK'@AY>?2_NK5J@$07\"#sSk$6F[!e.dn:b@Lc0+>0/D0J<R<:fJIG"._^35Z8RdmT@tL<HL_.%U(#8@S;js"S\F(p^WT$Wcg[/"<5H`/4DcfVVP*"3bPZE)7NpGG/3kYg[t6NU]3M42Z:@8$pHm5T%OtCVIf';-DmCT,<$oj.2o5q<%^al>lB3h_MKC&bFi0FM4iJ'KTbG6^^A;nJ1Q1;9L"g"%P#:@8L#+7?$mo\!nKH\m8\=I:I5jelBaXc=eK??k&oSQ+IF_JF?3mn,R%jL-0='GY1Y5aa_N\%eRk^:(_*p!R\SOA<AT>jlPB<2N0HE;pME##pigAb,cs]b-G:8\laP_oT:(%8U`3BOD(u#2RRFkdDt8;c3&2%&br(YaqO8lD1`liZ7M50X8opAd(i&tnN+1hWhH$pUQP-sU'0fA*n3PLPURC9@\DD5]/n%*$4LC<AIVR:E6$BYJT_q]=A,e#L9$3j%2$Ihn:oSr+"ZmXF*^#?il,;]f^tFHnf]:)jTR.;&E_HBWjujjo;+n_R+3"mI`2d@gh(=3>=GB.dQ?aA93M?1u$a^7S[it9/0g2)(%T`3mr%g:tODp#KG"')IR+WWr<"5*L#NLe7M/PD7uT-3$":C>U(0#GN^j"ci+#m:R_5YZ#@MP[$nf\%jVRj7X]bJ2ric"uKFL!JnP%r3rj8&&6i[2`&!;:m:CgVKF,%cZqZ*=NAj`</1leASldLEJ.SKegoTBcg0n7k&Er4=i1+#OutB:_)j3./qg/H+P!r'rjF!.%<8D\%`R<.6DtA(aKAtfUIQYer]uT+dHi7-)AE/l^SP;1XBtKj&ZG=IhY=qXCVqhrK4&.$%l;qU!'RY,Y)\(ZPJVA4Dj*f)I2RJ'#?=II(%iuOJPA;@M;!A<X*Yn%0Hooq*<gGj]q\%9\ZXREi`YJBqJ_&.7SToL4=afWRs3)Fr>l5O%8'(!#u2KAKIjBQ*eN):Wu2q,U@Sorit%oep?q2O:PZ"M/eIY:_)Dmt2i3.Z3X,X`.C.Al#G?AY;E?Yb*q1hDDs;d54jE]?Tl*&*.KXY6r91)_+UT]@q5\6dqO-)&WiE#!?Q7%%H?$Fg#Y+-Akr[HJ8pZc(`^/h1QBkd+\5V9S>!pDI8^^0(\5omD[0pL\!!BAYVk)o-[sM\E\OcFVNSapFW;/Y;dV.?]ejp(6@S/,%jU4hcI!t"qXl[Uh.[IT$(jM@O7'up=@iDn=+jE'$-$np8+^5r8g)3GRG1su,?k"<Q#br6nGH@9P1!Gho]:Q:t5?m4YdU]EOK'Tk8%YQi)_G6H[s=;(SRN@Kk>\gj+'+_.6aO^nMdh&6@'r"O'(,h0/hhdcWY*JTf-Ckd)E:MJFa1%f+JLN:6nnk4^eH/k[M`G%;l.%UUs%jYooT3!63"*U*=\Q>O/81*3iJ6B:GLVP]bDL[$MP]-BE63eljPUsI&_!a"kCL5>pUhTq.?I<ZjDG++i#A*po[0JV:cUK.5NU7cUr%:)t;Phs`0?EFS?*5(A@HUg'"]@ln]7`6ctlGpmWAT6?XO0A)hU?l#qX3_ldeln!HZ)5:dG`i%X1KGTk6[BA8n=:Cu)oGn&lV&RpC%Becb&>CbAfpOX$mOC'3L%QWk#Xk"$n77u_#f7DNB_i-SnY-gp:1,_nL-L,4c=#p!c<;kk6NLgF7#=O@!_sHJ%VDnqZ<K(a>&(sk%%;+77uimb*TG3C4-qdDS"6+'4PgcGb^btrU4=*I-\<lLeTW(leSjAEiG`cQi[68uqaeNb2P]Q7<r\^c^2]F-_q>VPi@X,%!c[HMh(%$)O[1-jj(;\>8t5p-M6Kl'*-ne1L`88cd</0b^cOU/@Nu'0QT48j\E+g,?YY)maqGn.n.WlYl,%#VlhC\/k4IML^P<f^Y&_K*#Yg%mW>>o36Dm9cVq\n_T(/mJK<<&NnC%6Nu`8pk`.6D"CdnRI7P'O'fM>SPMe:0n8E&a*#tm:NP42he>>)"]Q%UlLRsR4iP7*Fc.LRG%OfqfAAroSkf!JI=7c%25I$HSZ.q=qTNRk\1%A@37S_CS`l_e-#>gKIa`stM&l[8Qr4026Jk6ZdqLoZ-.A8%'.-F+ocB/ak&,7i1E%O1O/XeM['aBi[FF'7Nm+9]H^d9T%bgaflkR<deHunO=s?Nr5&(4%+``[IQW$>(2K12\7FVoZE<geV=tpIfi?=pbG]E5L:P=cGX)5%#EKpM++(T^Wgp;AcaR>Jn6M((8feZe?AO[:Srg3Z714?f"L`3$+\iK7p=SEdW'f(Lp[-8h99hlRk>p>OC_i,;WGlm[YJIT'Y4Y=m%=N@ppdq:Ubf'i?8L`Q$?GM!h=ha)C@+-#kp%)T3,NUC$K:Vn6n@Rfk/i)I=,-=c6jl0jD)@^i'$2Ns`T)-4>=RuX$$_;KMF_\Q>n%rj\XEC"][qceHCbF2XrMNgi2>MF#pnC['r=h3$;t&<nE"`NOs6[1/>,R2Pf02@eD[$pI$?$gSG5njF=)8$l;DaVR=K,;;A9o@?=1%Yo"C\0V28?1LdQJB+%>FWnWFO&f?qZDAoe[p)Op3/R9m^+=t/%Y,@Yj,3_&g>83k-Fei%mZL\c[*Ga=m`Y,NARr&HjmOM^U3;WE3%+%'d!.m>o;c#-#AWdPDr4D[OBO4<G-;9"Wk#"Nh;lXf4W&qh28qjG*2P#]NP5EsP?]kej:`?m`1>'[<l?pJRWrNtJB;a9eJ*`'\Y%+N4'B11'6BDU(4RblPAQCZuu]cOGdm[?<(NMV%&t91Tt_^in`C`fkdGa,%[ZVcO`*;lfRCdq&4DEBt>q+B$bb`ik'78k($YH[cEW%Jf2q&>3qkU5oWb;eGa2b*Oi#IXBg(gfr?Xk6EEi7*;X_)IMm,/1U+7JL)-\STXS#a_>Uk3Yd=jXK$?uY]Pb0Q<4TR"K_ubG4n^Nc%qIgW(MQHkIo4=`B/UG>rkX2l/pb.S3G]P6A@UAo34^S5(r=/s?<B&6B["?'MFuogATG5ID$o!]*4q]\/On3s8KYR>GnREYRqMo+$%YYU\?$KO#rWigeo,7R7QdO1!&Z6C=IIB;j`:Q;#2*E$dJNA_Yg#[1W6%2iMpKCQM[$!bqbNNPKV-e;EekigB`A_ciW5+Wa[fOS;Y%rHENXI0:mtlq:WimC4j]M;N_;M;O=^bbj0W*6HsT#ikod=$k.#2TBX\X`b)Ii/36_nCiT(O0?`?D3ZfUX^KA-PD,^O+_4Y!o,kt:%=[:a2U<67O&.Zg2r.*]1:CC*m,U8\D*W$C'afTNC],>1R+e9Wo?91J^B9V["d*NbmnbRV1\"LGI@Y7VNhTU0%^uL'o/'K+G@DY(&%+daSIgW-fn\#s)/Acr"mdnQ5\"AIEBVqDm5c/G(L([6*a@!ok*H1&5fD:+]_BP>L*(^mE<G$5H>&,fDIF[-a/@mA!(`;N@\`+bh1%Jf2$3Rg8b)oq2DlS@NB&4cTc,F5tbdNHlMTb)aqRjE0G\O1FD[g@>'qCnHT(21@0%\Bjuo](ksu?g&<W-01lLom>o&XJH6n<S&s+%nsGbZ/9H<*oE[ISYP;=Mfe,]G9P?!X*cdlW!.#6iPe<4d`6nt9-OdOT!<Q(lIsr6,77]S]d2F%^iQ7<+041rl$++^Bpr=XhK3`t-%X[R7*b<As1R03I09.N+Yq5LTLm]^[`>HAHa$aGp5L`C\f'F`mo%AOXm8f7>+=V^g[+F">J&WRmTrS$1R?2%PsMk:f6I\\p8_he%"%XfW;)0(N^)8r08b`H\,;r#/opk@RMl@T^5spRVRmUCXEehW@6:ch^;AqEfjd<[V[0Lt;cR[6VatA9'(][2S&1BT,'ST@c@E_G*/,%6KVq$LsEn[!4AFaS*5(V0N0+67)mP6FP&Bt0kicbK?!+(,/QR!YnNo)&Kf)j,V'=D"8=Xu]YX0/`SeDHk(*CO2SF;9k2gd>-p)Si%eNH'#N[dBmI4eWfA'<@V3&BpNOb`)YK$TT`N<QU.Vm\mn,`ltupfuHTr6DPbeBX9G>@C2AiJ'eigNOZE'=#[+JrEb#2=o1>rFXsS%//U,9`dogTHMf-2/"gC0$91#=3Rj.rIM65Q+>!\H=;">fM:-9D[)>/d8L+R.l5]rg`G1a[i7_?W(1bg2cGjN$VaZrjAgEas<;sqd%76#HCq[L7>0d'U5\ib8u3-Z&kh&YP_M,mlN>XuBW#t@_3(m%H3cbS*H2]dR!hBJ^#ch/H(`"G:nL.?-8Jb)W\no#TV)rH@S$Na0M%I7\dDq,%"5fHtbGJGc]-M_B/M4%)+6:SG<MVHsrba4C_?U]oloJMttre0a7p_5XPf$p[Dn*B.)Ej66sIAR7SiQ?fNh,UUU5"Krkn%91XAT@,ms5%-'q,cgP6$@4HLJ#n$7`nLJ%E.?J8a=&.DT++3j#A=Q<5j'GSJ,t"k:`5WCL_Lk6*$=lho(u^O:-VV#C'=&(<:sP@?%1;a]knY)!?YT5sRi_+0XZ,uA!f^<a\d*pjZ2^^Au<^]oI<js'`dQo%Nr$Gm<fK]^PFX?pp\Y7?2`oOp=(R5QCg+=^$>-/BZ;=AY_%Iof)T++l"_Ip)c5)ctS,/18P!;KbX1b#*hQCOC`Y7*",d)8%cr;#6Vt]5t$I>WJ\geI;+d+!T</234;Hfrp(fJ%mp`hcrO/QHhfn%V>9$h9A=mVRX1#,E:j(O(M#&9cUeuE3)N4=#1=g@?-?YSllpVk;Nr/t4gf%o!DXfuZ=n9Zi:j2de9mdPe3`koc!k[(8)32TW!W8G%Vq=t]][[uU*RKRh>AFKfC[B#<RJ9U^O!\iTklooe0mkWQA2LiFP4=W:\fs*-X-jWac)d+Y`sL$Slc:_JgK_.a7Q:4J/j4OH$,PU/%9@Er8KZUl*q<WGT0k/=JltAKIcE1B'N8Io#7'ELh&En>M&mA.qNqkD!6e\rN*P80`_Yc+<DWk.Q$,^IrhI1K@IYRn=5MC(HhSr$,%CnBJYiTQ&,p&4Bj@(9a\JVn\]R<%A^\^5qb<b"sk5(S]$Z#P>:Z79"Acb`455rL#5bY,F'W08ldf9qn5+Z:-Z4.]XOW"]k"oH19/%lpcG;4SQDLCF??3mGLLEY:X$8'iKTrKlQKFUm)r^>&jJj)Rk_/ETq")G>8A)Q%O!Bl?Km\jB[mHBjE_Y^FYa]>pf3LS*oB>%YVnd%\'_n:So1(0T9d59h)MdBVVBA-V!?AY/`/OHe?or3jfR*AqMk)-jM*48b_NuP*3ud[)Nucn+9aq(Kd/orR2W93')K:WjPn$R`k]%G%7O5F[:;$"af,j]*;NT71JQ2`ZAA@V4d,Y0s:cXCAQB!8^WkSJ#2LKi=4)@$i<Q"=(<0M3r%2h\.0VM&8LXb^:B`@8h;ri;EHRu5T%dSe?YE15<m@[Qr0$(&B'aJ/oT(kQ>sE@cS`nX/KD.+p?q.S=o8j5I:K<%b'-MD2d$6Hg/h[S(AC=aCpI(@_k=&uH)XEj)unGDTG*%=ItV!_`Q(:)>*<4eL$qS$RIFi>fsdBYt4AQ@Eaa4"HYng^m$!7b&<`0ZJ@)ZPMi[R+'60'FiA/uD?M[Z$M6<5frb>aRAHBcH=?W]%\aSkhI)VI2Kdcpo(p$hN\[gW%f/'V#n*<Wl5L,19mdZ%8^lg+^NE,)fH%Y58]faVSbtuZ',G'dfqirmbd\gi0RGDE=".M`B3<CFi%0>rAPXm0.2d,kpH".4"RHmGdgU-^sJ-Lks,P%&\V_6^NF1niFdq4Q?#1Oi0/g$oO@Q*JRH<,ceU/nQH:+7o%:V&)NCZT&*A<5/^,%'jCi!LCb[BCNoH^0eZE>j\.QFXRYpA,.=c4&ZmN-*dTZR@hRc:;TJPf>6oW0?'?P2j<o*(PGc(E`!V_@FgWF2aK_:E]2jq-egK=]%;oT$mXO828(Hs]S@eheY8'tqS+'j"m-$A$'@Ou/_bL$[.Eg:+21lEXk.E4mDP9N1F31>WI[;:,>-rndQZ=SkQ<'6=sX"HL"B#4^M%\+`#d,*q-Lr7T$"7?7!<2[N+4j1sRkSLiP/9Yl#;2WWGZ6Kpse.=C9q1)TOP&N@okfAS4&ERM7<Lo$-HIjm5F-rUhd2R-0G]%Fd$%B<C`Z).kBpX$!Vob$2-0)R7FnmEC\rM]<@;T1d*<3L%FIQ?_GC`%I2'3+OG35@]\:KM1_N?fQ^U)IHUJE@>7kDN33$Pkur6E)OQ[%R^<dAP=fs4/"H*mlTUo+GWl(opXlBkXhA(3>2WnPN%<rSQU+LN`jEm^1A-+Z<`aNECm?Y!YO]K[R`=D?*b->3b`[7:j%<?/X06Q6%YEp5[F-ShK<dA(gPuk&FH'+j1b7gE^3@=K;RMi4BOkI2ZIOoPV_3ckH12!`1(Z\4+$h]gJZ-_5h3SVs(([G8g02#IV*Q_bTo/4(O%Hm9-C_Ld*j@-Nu)H(*`!i:\\D_XGQrjqT=[<mN]K^?)Bl/DZGEBOnPEXcDZ+=a+BVECU5Am`9Y"\g%^hk1=uNVG=6ohXC-1n)'us%-,NqU2/EGO;'$]E.jQ\c&ZeHI>9\4%/8W4Td=lq1:nnW2L>J)G,*;IYIQ'!*_)CZX\#EEAd<`OOJak7HX@iHRNE3OAKK;P.5OS8"%$cpiNlhrXaNj1CFopWlD]+:GOLR/t$7c1@X8N9`YU;Cf)RN#;`4X"MZ!ZR$_L"s20j7\0D#WG)K4#"sT;1(YQR8!MJqFsVX,8+Wp%O(9GAJ#82l\CXmWq^n-+QGAds[c;tlZZig@j:e/1o"bs!j9EWW$Hc%851i+eEH*Q($]Y%0$RHN64oZPbC.fAti(+n\!i9d5cJ/Lp%W77$#2N?sC^cma`"bY<m>`hu1Ue^eZ(h#6t">)b4A18pF7[s42(:J[Mq&+N--AT(_DAU.<Dr4q>BLrR%KUnDb&MsHt@I)qHj'(*o%6#fa]14r5[o;P`F)r)ui-ikC(=jNm'\(tpKHFlsiQTOuV/H4[+p6LD7r.k'ChI_`bnK:62,\0S=0k4aQG'l.TW?6TtMc"ki.G8W`%@_cr&_!f=BrKT(D>q?0e15CgD#%)W\!>r,m/AQ::hec.+#&aeM`ie)h6ItHRrkPbhc/!uj>q%rS*hD'b\ck2187*jhTf;Ok'9.&`%c.Vipq`UO6G1l,NLEs+Ygoc;f-r5g5]4+[@4\^UKA;oW80Y2[L\:Jm&bC@Qg3!T&?0G/dCN+C#.0d%-S.*t;;+B,&cCSk^1Mr=KA%\HdjV=+SYmfkV@(A6rYdFW8fJ.`,)2meO2/I1o03a=h*H2ck"+.Tl#JSu)A&$%\Yrbh0W`Fthl`fWU'`E9j:=j^@fJ2MXW76eSoW%H6&ss!]3bFAB\%'Uu1fuA&9d4E&fM=iGKDc:_bJ//1pTjZ62[4S8FR8n5dI[9(hgd`=Z!AhTFOc(l9cTm+auL@9Y!<&IDg4!O0Wt%i1XR\d[+Y>1-**X#f/!:$^9rS-!ROZ?V%q3=,J4j!oW,=Q!,?+Df'%oQT"@L,7LN?9eYAm%Vp+LHn(,+*I4IJ0sZ9i(qf%lZV%.\%anK_9Tneh2l;2<8^t.1ljh"+[nu$OaL^FrR'*knoM.hUc+r,SJ:4^@G#](MV%+(B])Wsl.02<m@V6GJ`jZQtKe*Hc,*ijT;AqA0Y%'%f=;8?m"laO^Vq<bf#'F?1")+<$1t'*!/_B2e^Gj0>8&1AN0GR?Iim:F>ahj@.J=Hb<+NfC+TiNls2J.!$,5qN\:-SFDSaT_K>b%3*(uhD+M;V\!`$_'E9SN)\7c9*1Ap;WOgMOn1[3?6&l^&Ui`ST`VM-)5WT!W!K[bQf^M/[/G8T/8/QeB]0=QHc&5<V7o]1c<^K=\%ITo3hZl367k@L]N:hp5A&6[>C-2@#:DUH8VK272->_d?HT4Z@,iA/)KE6FIlWgllnZ![Z</^\<*PBF.b&oq2!O:AF&^!,qsD8'eJ%40l[gV%%U/R?bLd"p1"Gd-Ldj>Yf`uDDar(n&8>5T1oaMOK[ru3N7G0>tmjuM8(.T2Q!8Vd=r(2o'.4A5qaN7+m#0KCSYcF7))dG%4f?Qm>(U+i)1!IeQXs:"9!#I)`=dp%M`(-<;9OJ"`E7[CBrO2V9-#3+2"+Q4]!Sp>[+<8l/`(rXFbjVO.ILslF\:ef=R4=_:[Q'-%f#c;bkHM.48((QOCp%n;QX*M^>/f*-=blTP(JV&sgoA0`\72QjJEM;`lK<#QIpVElY0;-qd`4&pm.qV9^Ndm-CSbC*aE8,t<d1gY%JQV/f`(G6tfC_:ZBEAcU=<eV4SP0<X%:AD=3Sc`.f2?f</bQp1;SW"I];B.uCL9H#(;"+e/StJ*.IkgK`D4]&=U3DbVhPN:-aAWP%C91BpBsBb9+BnRb?Anbn=gQc\iT'q-n,DaqJ,`#=k5-N+E7/GLZ0@AG2du:`rY4%F<%78YW$$4p%%DOIhI>d[T5WR9[0ZF6>)rV$%[A]J=.m7lRnK4](d2<PsW;OXK#*4jXbt_Wpa3K-]_fd9jje"lk]+cP2fLtsf3[]tt#;@n%!-V;]].kaXA[A]ZnL[_q9$m<>njq"5%M;8Y2pY&[1:aH;'Em:.A'LlY__KJ)#pK[H99Q&6HcC=Q1r3XVHhqqpX$=%AjfO`hVa-?AbBY,*2ngalq6IB[$&*;H&21>GuhjgtV%J+d+SM)!R$Jh>johL@%qp.b@XgLB&%MXUZgl/NSG#6`m4WI$ftp_qaV_L?sP$Po')5^oa!r:/4_a-p*3`Q,6];,SEn0@?/qE[6V%%oQFKi5,qm\#&qlA,\TjA(!gjoU67h.>EO(ORQ<cSHMdE@"I-A7ZJ'Gi>`b&8QKdoOfQgZoMKfaok9tPkqrG)&jIpm&f6sMcA-aa?%@YYuL$+ZDG+YXV=]31@[+jE.8/_5%00b-ktI*srM>0:AH<JL%QfP[[^5P5%9kqkrPMkJ3Cjk=q>QUYW&YpO^rY#OUZa'-<6)$m3H%XZB7pTMq#8j+)ihkP9U1-'D6sVSc%<_$j]G=2njl`D<Jq\tIqiB=@m&:DMrRf)-SI+bI_3<V?o\'7bC1>WqPKnZB9S)Q)B)_rd;6%^A6KJ^JDhVAF<:Y:uu>Uokm*l[i8sbNDWKmAhaCKO20bUd'O,tLYcJo7;DjWm?Y_aMP<e1Pgp)q]b'WK0N09&oh'(eX`&'fKLA<N%9:b)%+Bd,s%$>)J]]R[LOb42NR1d"kFX^LpW^:_EccZ`u,T7@mee(hQ'k3;/c&,Yu+-+*OZ./Z`CV*?jI`Z<-]mJ&a413=2MV"]c%onoCqq@!HIU2C_9'5%uqkH@$#NJ%uRYqbj&@;1ZSlAb%S#Hd7hR@lFL8p""\$N%7=/IW^)*\/2m\_2^t=TODt>BC.G36BRi.AKR]%dS",B41D&5G+0LBXB8JrXA6-;7(MMQ\Cus!,PMiI![@b7VFC-,N8'd^(#nPTTfWos)R7H[6n?JG`45T](C6oj^07:p9l.ltRh^OM%]H\Bc)eR\b*Xf;)5Y'g!j<c!h+lgr<o*g;$*EL]:[5uS%V$gpW>=t?AS?0RgEY[cBp<3C4NdV6j!V"g@<>BQT8Vk`4`#?M&[hb[!%W>edA1:::u4!dlZeUIDPKd@\"p3g1cFs:dh<(';L/k;-q!.-3)<KT![OKOPf1M_P-QZ:b2`I,!flr]NMn<@\?OiKu/p/Mbc@9'jf%n1UaTKpED0.\<3!E@53r(g1dP't5G+:jA(BPDbibK5mMeUmX!&$!#SM4'/G,Y&mDN*AaUVHi$r2iq,$e&(C5?3qan*K85,iH0?Q-%Hn(HY_Qf:uP>f5=Cof0MB[W.8f8B0L;5fVmR<'-QH@2LmS)rS;a2inuQooC%k,:>6F7;<9/h?2NRX-K@@-X=f<=>>h"n@#cpe#1"%$8OP\,I'XDH<r09:aRMQ,[NR!eIk3CJXL`>0uYd0(`P7n"[BlnN4hg2O<)1%4=s\oPBH9hJn'*X!pQ#jd;44E>JiRpUenMLe*l2S%gLc.3F/MQ%rt6ZJ2JYQHckL7)mma?e;h/pF.tf.e(:4ZWQm1g"ZR+;5'k;/Q0`i6Z`.b%GAa0,2Yp<!G2Q\EPT0mtUl.r-+GPl<T%OEk;^Rr+]Z`7&'haCY\Vj!1eX.6%UbH\`j$N@V[d*8b7]&X@fK_)ob%1G,Pa@SIZ\Bna?0-L<In`nCX,MXj2<V7S1#'P#j$'``7N%,i$uJQs@MQZmOg4#1>*LcJp-Xqr2KLm`-p\hM;o6!d*f^`:CDfED*[5Woc3`Zgu-LM2;OpV5ZuoIWeo.D731g<o*2PKVH(6j"$R[%*0s,dD!OGfWdS#>-=Z4AAH>E*#[!/Did^^aSTD`P59?N2[)uu-.NY,)6OS'`7NNX@maL^a>IpffiEg!Z_]tB<hGpk7luj%EhUdU,%V.N^u8NlFu[[^</Ge!p]IOiTbC,J&Vn)j5+Pt\H^gO-C%^gsU>kFJe/#S]$n0-O&b+HJ(_F&<2MCLM"0=Mis@j*<.Mm4&$KJ.dG8%IU&'QlBp[2+f2?\30d&lqmOFGpPdFHR$BuGm40<b)T(%Aase!_m$D2nM#fZ?q"m@?$!#f(Lu]7BZ0b<nAA.9u&K$pF0ULU[7Nlt%%1+nD.mq1aS"-3sbb7TZrOS?9A(:*i.<U3tcT8g`@4u].X/k*(7?lU?oUnUf#$O[g/>:bV@Zlp#i[AO]XZh_*)+J@QY.1RPV[;ArX%fAEobnJc&(92P8(4llJVXc&&,N/&]dh!L:(;U1)H6QX2CZH`:\AYoi0(dTY40--P4`+6*s$?BYcJeCq,:VWH+IDW_m7FoXCaf)49%IlGQH_*M5+[QSLt8i4E!frQtB@LEiFk"cO?p-MN"auqfV:u+]!Fa0s8-4JLFP#EVLfRe6j"@f+]ntGOu=k$U2ZC$rO?(Mk4eNtf_%`4/V2h!-e4p+CB)XU,S"f[<DP</o_XS6V6dnVj$Ng(dn(.UBS82<nd;$:`tub0CS?h^jI^C=OlP*CR:,f89"@#LS[_ioZW&5/Vdb%p*n5R0'oft&pGHT+=i>64-VOI\)!kbo!$%]PQ[%JB_L)7[3*Mhr7VB_ic)VsgerENpJjU\q>XTH%4`23.EI@`Zttu?VHbP;,mPKk%+=`uR;kp,4,AeV68r'MMWREY+LG7L]-C^1\6d_mMfEnB-I:OM9P`\:XH,/JUibOdh;L*VG#Y[cJ'DCH2Yd=k]:ds'i[hss70h$Pg%h`bPrA#QMTc92*<b,n]]9giT/B/Ks.FC0hJ51D'E`Hejt5SiaXX@J;4K:lB+P\>beVC]Kr$lgE9DHD,O_!6k4;-Jg%'ANig.1jA!%(4]s,=2+[`L]sKi@ZoXWda_BWdFG>"083t@Sbl<T*%Np79GbrA?-kQ&OC9dSi^+1<C7PVN0:(fK>2a<XcLeu,&:$8@at_[jKpna*%GskdmMJ_@$.a%/b>pijr>a;X\hh[VeFS.'gVfEPh&dK6X3S!7<`WrQm+dViH,V!&;l[jM>XnD8\AdrHcOj?Wn_,sh6FEFCVKcG'U%Mb6WXh^!ooRMk9CZ;t:640gRenku7;;FC>u$7$Bf?u'3@V"*$CBR%:,]]Gu4C\H6",,E!C?=-jX?F:eL.uRV[e'Q.X\ke7FMl"BX%[@.ko\cAWe/M0RBNCEBeWm1&#ou;[[dRr.s=t7BWp.&IH]Pl"[Ip-$bKWgi1(<I%;p[hWmI*7oUVkq?lP^UknlXjX9>D[JJ)QSgZ%n$'1-^98`%iKC29Z3@0(MdK(6D],s^XOl_p?(mN5bS_W4><)c9Da3,AcUp[C$F\KgNW,dPh58IKln`'CjE\U]9^&"8WI1)I6dmb-%)uNL@cmC(3Y,<9^rd/Y0]G5ALLB2GA=k\WS2OXJaRW#X%(]mU7]+OKZaVANdOh6>nIKkD=EX#46<c\g+QabZMBM(X2s7k(/5lI4`%m&u-t(D:t#939KrO2]66$*-?rcE),LP@!=*BQY$4D&5ug,in"$QI^Ug9\EKQV;QdCk+Qq]<c2-YU>JW4Gl9ZNgNNB6T0D#'WHbYk%p,hLVWtV1Nn@rS*nMX*@o@l3)!of+?Rq`&?Qi"r`MtOAP5*W%"FJl+_lEWY:gLn'pRI[2sQ,?IXF6Q?M&>W!^'\uLJe*WN@b&So*%_W?82j@H[`+fiR>6_8MP8NL$Ag1^f7U_O7FM+C*$l149sGf3\`L0`8f/n<jWA#hjqFo7hV>-<,b,?A(@!1g5M/#aqCqgCUNa/Z<V%=R$\/CrpGc(.5>fgT%ehY5A2;fPZ/_TB_ndY%s=63VbZ<:R`IAJ:*nCKmTJhEX1)m(3h?eFspe>KJ6CSc)V>XD*!"jd`lCop]ug9%$j/pVQ$V*uY-d-"9Qj3%N#Snsi2P73,YPuppSf_ldcbel0dWo)C)up1)E%I6L2tsoH,_>5\1Y%k>LWDPc)JD.>$_JAW4KrLC5%il%GnJ?'arXBq&:OcM?Rp4I&d14gk^f6]T6cZ'J`,,%%0ga3l5ku`&s^/>X6*Hs`&fF=D]9X9&ok(t*+V'7lngrO(F&^$m:f&)9mVI$%e4D28FTmL+63b#!]/de[<=;?lb]uAq9C#<6/!1.MAgJ&q#Z;2d;Q-V\_:8Uk=Fd`d4#MW97$^+*i*43A8,==23URCEe*;]Oq;1_0%I/dH\qNjAp)0)5Q[P"20e^oafo7Fgc5K+&G`c0d-\qjDJq5n;@`WD!L2R%=`M5ktDko,c7^UANNiM]!3<>YU?f@]E@\R,T9_7B<<%mga/?AGGX_'jI#hG9^u\V7:50ac/i3\qU!CJGA?DjqYgeHIi4g\!4WZXths>;W:V"n$PCDqmZB;,?-*9/F3dSY9-uS1D%UWk%*d`%il)s?Z916K"jk=a\Wn#k#s$4*QOF=SKqY1i1O1EX<WFSg!-:M[!n@QaF[Le%dE$+6$k3M_6UP7$"]_Bc/T7=:.E!m3Z0*:;''3^$%K2bq7')O\nH+nnZ6P9IBZ$<,QBL?a.`M$6@S0^WM?oON=Z,\JGiWHV,>KCnIn"N[]<n)n%5S9_"3PbgV(9b`8$#H)^%fRa2=3#/X%2tQ01"m1!j<p4mc)'eE!WbkV$B[nl<f8=#k63(JD27G2PBLk'3HXIEdr\S9[ZKom?PM6m_^@AaI<i[Bb.@<U1Tu%+8;ti0j=]bPQ%%a_\!.D:uYAtP[_2M:@AT/e&1@ah&RYLI;]Yejj)YZ?;s2jBnqi@Jh.a&MB8(qlTd:cD7.jR(R<[ZDAp@DfZ[aY:*HH\:VHJZ-H_%oF<s[E_-(gGS1^:bAm`P9HqSHXBrS,X]$bM)"LbQ$Koa-k9gb"UeUPR=(U?rRn"pW<kOpaYtLJ$oCaP3p@W\qB9J[.c;.Zc=2q\6%!+F=%g%Dt_.Vpp8K-Rn]2UfSbZWo\`S\l3T(<D_q+!6&nEOo4$REiaV-Y3YII<*+a@ZE2im#+n()6DoMD->R]R4e>J/!2?KkIrd7%@Qm7]KWK@.bg3oA\ZMY*R!"A0%RP-",CFH7:'#8jUfTS/VQL!IYF-uJc@1uMB[c=l3QG9:_40Yu(.F9MXOTRJRN(MjhC@TGD0[YH%cY"lVTt#8;@$&OF1,_QT5.o*tr)E1aq!RI<<Q'RCGK\='>4#8DN<_JlN*ThZQR9-[UFSKa$_pfrJSVlY5g1moggntaqRs(cZ/<<6%m3A@dQ")<2US`p;gXD`;YD%cN:KX.jle"_2cdP(0Ze1moWsVl=TTbuRR=0G=XV;Q,O6>?qqE2HfbsZ$`1Kpp!$Frj5C%2o2WSB=N%nB:C@_?)gMWf)%f5mX!,_Q)-/cbCcZcAXL*::fjnT7;3D-5*UM]HL](qpK?<,DA]mmu30igWfYm)1*5%N=28\RTk4e/4:&4<2d%f%>:dJLja$Qc)5Ocd<U/"**9&F.!e^#?VBJdX?V!CjfAAnGs+b=*dH[<]-(a0'<!:lj'6_UZK`36qMFuX>qp)5Ho(\#I74[i;5O$qc%M%k$]nZ^lAmK^f%NiK[dnuPT9Rd=eVT%V[8Gpj2[&sK.mPIBV/0h%*sJ*Hi>T`mmtbHB:A'I$ShQFBtb8cS0^N7]rj_DDTk+4F/)%q:%lP[D:ibhW?br5cc3k0Bnem-<g6/eD"Fe?H:F=jL\Nu2(+kK<.1_nV@,#8r^mTA0eX\m"ct+u0N-50`hkfAe&>I4SVuqnWAQLg%ZEfju`*5NoY'1E0.3Sg5)!NBOWDUWuibQ8Xo/`k_pe[+_S.)&9/0[,:)1X7b7MfEB!6T98iP41Gj??F]X@*9V&m;+%cWY2/S@$?;%$#q^c@#GFY-$p4\h9A`hC2q'&)1^%17[_cK"#VDC+:pJi,fh#+SQal^?%0YfB@t9*jFC,("*a>m$<B/Da8k;%0lCm9C0'<KeUc>/%n:WmN&LRZ7qAt>Im5SLJ+$1?jpE!q+Rr12#pMS"b)1ZYXPH0`<WPX?f!FC,WQI!6?HRu^H`,uAsAl9aVQ"1or/Jla1W1H#9r^(!<%6-EdkUXcJQXiL4op7fUJ!eqP9We<7/c7"O'L[o3?=[d<YR,8_Npper'YorKgiZQk?pJ5g)#$l&YV/K()Zi*nn$];ZkZpcQj@Nd4%%6tJ\TmM5Rf3[;_F!N\IE!i$6@Kuu-S@];26:t-c)Fs;lB<MB3;B_?U5kN0%%a@&aK-BA+WT+-qI[d!m(g8Wa&.?S[L,XcA2\\8G?%XuNX%!4?IKg1a?BDAe?6+d%Lkq#7$'`_0.;P_;Mq\hq.-N*3Dnd5-kklDDrm_)<'aWm.U>F0eKM#q;2)c"d+m[S<'^EN!uo]n)EU%b\EWfdh;A&!0)DLYtL!;imP<M6lOGZ_]1LC?_OnAQpt&TN95ib^2h1iXc>P\'j'%d$aGR>6YY=S.u]m::nOUY"[Ecnr&,$6EAg2k%"C0&),dbE^VK+Gf?$?EL$q;WN9FLaAfP++(:Ha0nd=`h,[VOr*C:+jV3Jt-J=?nR:W;&1Fg]F/ch(#7t<g8X!lq(Z>CP6oM%oW=B%QSH:QBjQ5O`WrFnE!CT+(6W!ca;"`W`8Ai9E%,7-+\$"*Fr7?I*K(&%Z?$8f$9tV&94/UIi#e=iH_qGZF/7H;l]e[3>oSg#Z>,it%,l%QNHC!bj$X"us^<a#q=_;rj"W0aDT/FUr@>sqP#4trl)PLUo:Jrp]f9NJ5o9a+KKX*&A'#o%sJ#s\`6kX'N*;AO'ORWo\o-NE2%NJp,qgs-k@Yj:aYn3W6G$+VYajm`p"ViCt>_VJKD7E@\cr?SI;D+b.^T$,nDhMAbp/.*[TK7X`W>!pYl**\tc1_%Pk3e!ZaD]m?6%*S(@PW5:Se/P5sBJ]SC`=b+kM%@=o9859@HgTgBsgFm(%Lj0os[LgF]a(q`T<D:ngd`^/9>rYe&@k3YW/pM,cmDYIlU2j,jSoIh2%J9iDGdmB#l1j3_/XU)R>9ne#G0lj)61][I!0sX*&9P,1qOq\O2]PSf]0C*:hdE"P+A`'[5Y93M+e@\EIIKi/4odaJ3^F-m\a5<mn%?Dcg;F^cQgajQfUebGN6c`+?#3PtZ*q6%MF&NW'H;<647+?25Qp-e8BX]Nom^LfXnjni9oTH$;)>?G(tQYL![,,&UXT,ERIe:7<%%@;M??b1-Brb^YE$\2+mbV6=Anp:l0(:\a=bcA<?R4"\YT'1Pk8<Ws4%A7$MGV#n4^2]d/N`(4-7hi?Klcc_Fu0sTJAV$qJU?V2lD%Rp:1&[[U`>8ML\YR;O9&_aC\/.j"$iW[&+O,7$$T3,*/l9A!P1b.pkg1Os@Lk!-Q)Uo6S8!MYI_>aqB8I<-Z>=0Ed>o1q;jRZeGh%Mu24$C;l.SE9C"(ABC;A/QlBb22-]n&;lifrFlg8c(hZB]EJ%s%s)qUh3;(W?Q@G*A,-7]"0ZK"H4YZj"*s73>g]QG43*NG'B1,#%d#u7g1$n*l92\P-m,G[4[3#^5If#>CJ"0GiaCa8?*Ga](;9"dAP+8g=Bld77BV.)Zj?E-0bIk'@=kQ>Ql`DG&DK^o+m4f0;?MS#T%'+G:O>22)7^trKflI=i57QJT>lj$hj*')<6N/?.CVC_o\h-i0f;QCkuPgN/+fra,4AVN#morBkGhtlfoOuGQV@AYK)n$(!`0)S]+%L,NVXh3#XR+frUFpH!)!#>k`=DU3B\"VIAC9P2$dqq.gG>D;`4QO$)\N/C(;%=1`i)2QV86YS)*YBO]RDm2'bJZZIF[Rjm$=X"NV%=NkJ3PtgSgF4k3_a-b%8@P/ZorK<_`n*dM<Dd?Mrm_==l>`QP+mG?;sMPF751m]l%p6^QI<7jPs;eoFdMebVFEO5GX:Smo(qn+E&%i-/>\0&7Q"N7>Q7isb"B$o6u-MH8J*\\e#nh_u+ZHR9j^m'%Ci4DET6B#udT?Z?<`6EH-47,2I0"'+](iq5\i$=kqS358\M&iM=9%bLt&;*E233L2.Fc%\kCB]!7J"n5ukMOG?_l>.g`A]&`'6dQ+kQ?>%,n%.?`d`j,LUfC@YZ!@R54fO;`9VcZ_i#,RP#,J%+-"BFqr%^dH=99:=gWdLg%f3A2EBA,Ram@(1#%mL!jaogdc>>beb?mKbMML1-YskGYq.YrO3QRj6,;nG#Nk"iXn38Fi_D,)/=*-ne3(R\=\W%Go<`m\K)sKobhVKN&qAZ47%/I.B;eloU8Q=CWJRqF.u[i@k^<n6XHG.3F,Hh[3H2nTcJ`,bH8ilEh"r0J0"r9>4L=e`tL@fO&53i%NGprtoC5d\0C#:e`bWJodeXQeRH<qGO>[hFj.IV'SfJhMo1_b3lFh2u-?`Q:$Ln[#[[1^Xla3$S3u]LC[XKRXS#,,tV?@C>9+l,Z%Tq";7]^3>dEg&BX;idqK[Ia-GPG(k+loZs;!j"o@C+&T!C>;I"6TY+h`,f)E'%.O9kR!Gq:0^AQ@`p<jo=E54IYF!XX=YqMA@UH;%(PMRU0NT:CDr4rrSrbGBP1>53&m5"46KkTG2mDMhhPQ.t*>[p3_PVV\_,$IC?1@nL_L8@1OR@GG@8sOMSTLn&5'geYrQn;1jO9H7%2RO2q,`cFGm=b4.iHjp-,n`8!]_TZ.A@^X2OUpd+:(lROam3J@nu#qZO-%p+[*gfBn]J_`QKCI_giKMBlR/D6QC]!D\=h[B6%LTW%3M<4?L]L&4p@pnI8R#n)_beB.<VMe`XaVoDjlPNsDI/m5h;bO<C6:hdV%R)4Ljk#?U-(oVG,#f-.#H5J8P+_f[R3]qi'HMZ>3\WS%CfaLW5$FZcDri#6-[l"U-X\rk,40#P-MmPF>o\`m(;G6LV;9p.cMY&=*D=.1'\%L-%4lY`>)LE@/FDT8eo"NW=kR997[854or$V>%-;T=;GcRTAJBurojI826IG2rdWjJ4<o0GkAf$\FWn$@&iCOqL@RaRXj0p6CuRWf1@n)clE2nr%_eOqIBY(InnZE2c8;MR76>LU*M%<&D1Of%lI.CVdtD:8_Oq?m16(hLYge0T%@a&ep;<m=AAgSVd/ZQa#^.Jp2KWdgU0f4qW8Z<NqR?-#YQ<J$jn*Gtaj\Y-R[:mDSU$%g<ScSMAeejY@`^^:ph`4!oQS1+%Oe]RVg4(<+eOhKikY7Ba@hCY&0ctE2Jjd3KTYEg@?<0)rMECr%g^@]Rce`S!d67%hG:0N(`M<%]+g4RC:?=Np+.qs*M]AVKYc5<X\$HS`M78BO6/#jR]1Ab2mX);m%^JtnZm[cntTJ<^-'5Kk!$)PFqXqeO3RBgEebq$>i@UJRrY!p%4u-;]aEK*uWAH?Q7LN[>I;kVG:C4jkHeK*SC^p&/jk8n2[>o_5R%UC$bB:\tV&5gXA`PS8l@_>'=qYS)0IbeC8(h@6i*!)HJo\<R%q:")0acTWJUS<.*<>-(IdT`\)G!2tP=m#1Q*CbKK(i@hj5.4`?GGtg_SQto"eh2Uj"rF=G\^_T$(5g6f"EITVQTr/$.P](J\q`k/%nh:q-dtH2(I4>8Y7HomAW"u-Op3#7^]<UloLj?j>[8KNS\,0@sWEgfcdX=@[(1j^4)(X\e$'Xc8T'E4B-E)FUG]#FGl"9;Z#T1gK%l`_A^$pj,A1KoJMJp+VW2bu44oK\UoQ\D-4B$,O54%+]\FAE"H[3AVihN+m.";5m6KM=Nro<]CY_E\F?<pi'(+m>gDUT"tXck0lG%!8Iq?:`(0O.o:NHShUV)>Xf"ac]r"satbV(#gHm)2aT?Hom=lag<=]QX:VQKiQO1J8Q[,Qr1,#=aU/&Ln=R<-K(l_P52F)kLlEhk%PJ]bq%4raGC/_=t1S7^(f+'e!f@+oEAbMCni']gt*Ktiba3kTKH(NR?>GOHI%M#SDN-.enfSJ^j9]F\sdO,s@$FH-96IEYkAq>h?%f;t)U:NE6[r9a$:T\X)+dY!Fr@-_qZ)(gO!H)J<?GMJh_rU[+Fi=OG]_bi"ILa%RjnrFRkkLW$@[oFd.&^#7N8Xcm$\9^9Zr#JVl%.'pkhbZq[iW3"_^r:*g#Oe5rb#$'k5-"Ah.7=*SG,G<0Kp_3sW1M=cJN"ZA5BYm;fd#BAF/cp&Q-ru(/h?6D3_Uk>jVb+#cbk!NA%S#;CaRGb:n1QU'?'sF8nWP5D4BYJC9.&s:l>PT4.IYj,6/d^68OVDgl`tcIc$4;ZSWuC]@N=.IWVp/mD$uF([\38+"pK@5hi*:GO%#X,D!Tg\@mK/PI@gWV?jfhN&'*I!(Rkn.#r;AUCgR=:nR!Hm>1HQY6=[n^=L`R*N6&<^<L+dD1i%b/:U;cLO'R!,J$.GmAB:S#,A%bi7rIrt>92)85(c-Y\:_+(GF_C]f4B@l3ERV).>,1lSnG)R.$2jH[V+go`bOjLRO$HQ'6VR^\Tl,($%^k#4__@3Hf@#`?XGZ.(F)%dacq*@u*?R&[[#`#$MG2T;!O!VW$:#%$E$TBiMj.4gWS9hQ(I>TtcZ_fQp1/El)(n:;;40Ka-ELRF8ABmnij,L-t!']YdWCm^3ng%@%k=_D!LI3ZKX!\*$T5Y+24fE&8q5bj3Lb;l*@2$djrU6')F]f?q]f+7hX$T9*_`oG@%dVXiOL`R(?l`%L!m`[OSV[<bk[$Cn;2>%i*YZ13uH7lh5XR4ioYV7B\"GlkV":-Bh&I5:+E%oeCC;:5o!jh?$%C3;gs1W?lH5.P#pUl\;J8h^i<8(ec>Qjq]!UnHuIFR-kY/r%j.9(%Y&b,hdei89=AA5*0tq6_W8D84gH\WYqp@D^3S>S`b/efN60gp'Y.oI7>aJ$e$__$^(j9DEC$#N]`gG4'9W2)r2G"r"AZDag%(_jD))_aj_(5I09dK5S#ik?uHB2J_LaMG?+1bhLX!$&a>G27AiK+s#.r#b?ZU=+8G?6X'5pT2+ObX]FAb'F^.I3$<g;Lp*NRNSNt%e7RrjYGnu\D&KD6PK]>YBao=fh@'L<c+#0mn2P&/8@u;)qZ2[]d@1Wb,-*&^]IZHVO@5q/X,LY2_gWm?`Yb^,)&-^kqHF@3pTcVm%fI&9,dMm#9j7CNB=/JF0AB5&AVCqbIV7n)#*m.A^cC"qf&6tO1-+jWP2"?S2Q*lE*GlG"&4N&H#cEj<ID9Y."8jl)VKR:CgMWi^'%><_8FC^i85rVb38)X.3?:0S>.k0<Nha*?B'Pabc%JY]IZXICA0:V*nti+=`Irk=*%ln'R48#r3-jMO_&gp%/VK=in'`dm\dM\S71%Nk]t5e)Ucm`KnDD9A]X\h6rN$f!2JZNm.\@N_>r?T44`/L#I8o8$"erpk5nA,Sm<8P23Srs&ZR[)5-6:^HF-o9O@9;p6Y`(_ViFk%O\\iVhF-9cE9^g'WSPpJUj5.4hoF[</7!WEbctF81I9[ghd1V:&kaZ_j6JC\F&lb$3jl2:X01$K\+eN8PPSoc=elQ9T"q-5S\X-B%lK8FX4'%Pok,klFS[Nd?f"[<r<QEMfOh.]R\G6>]p!G<(9t]F*f$%l@'ZSDo4523Vgr>>Z10;9;`h;[SAaDK3c%rhQjU<Z$i&Xd_%Y\Bh+O_h\!Dk&Z+kB>Od\DdVOI*e([_kc5%l#S3B:rt4Ln\(4I7^TStR1.<%F-b<4_OFtJB(9>m=S+2RB)?5XI'tcOmn_F2Z80D?%+oP0D'3Wa:\^EB/Ia!h_-:P>6QA:Za=B-'p*Go]=Md>Y54Vkm^iD%OUp,3F3S-cLl"Z!O=A2?3bes6Vk5A/h;<EeWZDP[,+$a:%[%]p37t0XphlW]ehWKUg**[?Ih?%U/fgb7ON/[B3bT-]dqP88G,u.e>@t:!&#(nka<\PA-bVb#h>h\:Ro!cU!XO]d&l?;Yq)h:*D`[%I0poDBt*>n9!4mE>_^<oZE9>)GV-egN#$fX']W4EY&+%*ao^9n+("g%C`IJ!OCOPk;-ALbN:to%*&Y&/eKt-21W)O%;arO.ji!/s%>YJIcEgVNm1;2K?Pl*)l1*ES4U=am+N9"ifV>O0[AM'g,VFmdWF23sqD;1?0&/`:#%'W*akL7R;02X6R6*KB'i7Ll3$*,%I9Z1Vn%H:C:QqHk3J]hH=;3]?iYH^IuBVIK?=R#keDd`4jcXIe5Xs1fmZgd[>ek/K2p13(Q^\J*i1Q2)tH`U'/85nhf>#\]QUZ.VumN5e'4%ppS$Pg:kn4;9I26W`Z32=rQ97:o#itQ:jKb@B[,cl@@sUF@`Bh,[Oplg/g$S6g>j9-ELFS)^@QW"_S@BiDZe&,B!gSq=FtF7D'qB%_"*!Y;E`K3?u)i8>:OpH48Snk,)+u6`Gebh^4`$N@5jQ"_nl3%'Nm4-7T\O`M.8+Kj417XAo6IjG#PPU_1dS>Om\ZS]S33ZKrC.$%XRED>@5t\R"Jj/Elup!LDAA6]jqi4E2XS2<ma^TAD0!inqK&XZO,q(SVssSUh`C4n$5I`TNg(AAFX"K9:c=QQOOCf?5$Vn.OHt\t%=(_i^4Bog=KmGON.I:5F8nU*nqV+b=*;H/cMY6j''0s/Q_%>_.E(tp]7*#XeY_]DU@c,,4@%#,!/S.>,$r-%P"#5P0,b&Jd+i<?X%BH:,2@^j!u4F<qE<lKo)=-:An54tkdfIiB4$nc&=oFqZW;Un37Gp["]`a/qqLfP?"=/_9?8g)81XQ(jA\dV#k,]0EqRH-*;VtXL(%VOJkE7E+S:J(i=P>D]<Aeq[<hDHjHu=B-M768qM=2$8bOI-ad"[4JHhHC$*>&aR'b\_]kknBD4_Wl[sF)"!`*nsG*Gj*nSWDQ0pE%GZ-I*ahIX/=(7CKV.(Wjr0j>4h?lWpf'KCm")K)ajNUpH$snd%n5YBAc$T;P^Fs](,[OEe=.pRiO'n\(C27+t(TK$?VL4acM]@)D%B!&1g<JVWA(PfLF`pQdtI'fo[*3r3gJXeNON0U'.=Ks-i.e#t!*OkM,5$Rto"KLPpB.b*bbWr2t]%LhdefS0)eX/'jE&fJ8cH;G>%_3?[9<X33"1fAP3P19RAE/n$$7Bm.tX(;`Bmn:a,Os_Mkf!_N7-h!pRWl,Z?0)Mdr&"Ao^!a;W[*MJAW<:Msm,8^iW.]p@+-pjD'%r8Ej[19QD3iVT]m7Y7@U)CSss[:DJY/0iQ?OCD1a+B3&*;C@`J@T:]9Q<8mWk!3UX%`Lj;X%rB8[ohF+JM#,=`<FSh=[AJj9."@R%,ZBs--FN+p8:;r8JY]G0QMO%=1s0RI`Bn96Dg7&J,-?HRk7Pt;8M5d_X2rh%R%>%,<ViJt@C5;*?Ls'(F]2T"$:VPK7=;L>UoA"*%)QYRWMB>qHUUroF#%D@\C3@a*JZ_NK&rLd=Bt+G[3PR-Ha$PmubbpqFQ@0\6kDK/N/p.k;kWLQ1cW.^L.q;\3<4^n-"2p6p`&D`3%bRdl"`cKTtOBNYo<re@C>a.ATg)kJh>P>uA<R8dBc&;)i\(I.0ch,u$=L4O,<\2X7?;!>];VR+(P4gT%,YPfq&(P_;""d^Pcs3oo%oBQA\fkpCm),S('<\7?Do`ZWGOYj?ocfRZ@Ba_kZ(Wm1-X^iJ$-K`MGRZNrCmI:c*e3Op?nK_,BX*S(/pAg.WVgOBL`k+Ci(C@WG%_Y_fO%pihrl[9^>BN[@0PjM9.Bbs0l]BL]s/Up&/"AKp!NHQjr"@`<SlMiFOp4gAm,fjUk6:K^Og(P;\-o<pXl9l[C"DH(#DaZ/H%C$(/PcdI>uOH<kk%/SYodcMkUf3.rsm,!`9n<nb&%U0Rg:Z[DfW?e=89O!GmOEF*n''8km(Lq#`mpu66(4IQg\nidDD.a5NX\NCV%jmHnA+g@+V3@7q[dAoq"c?bWul[A]VZ)MV,,W!?V'*"G+.-8NB!n9AugIeUGCPjT!^4'B"Zq0c1SWQ+k0s!n70X-],ZP\[8NR<f@%4@B9NL:l#nF[%`M#oJ5hmgcF%#S9dp`[1L+iblDI+V.E^V'8=.pmC`MQd9^s"str;p:=kLHC/EE\L<bkgF-$1GLt=J82_k;Cf2+7%JFH-eBYE%^GX?N/#altX".M:`5K2d6p2ikJ7"oP"q5',F.0I^PB))p`')`Ja>.V>d7ptRhB]B]VFhYn^_#BaNS$DEl.*<K3+I0Jd%]LoD^'Jtuc4+T!^mg6%,)?Wk0+XsQR"X*PqM^*_;/Hl`:B'K`6\=/TNQHL5TF/BLC*a:<9_k^!#]hU1W4m05TW]JO[ANPP$F1)36%7!XE=)/Xa8en#qZ.XR0Xi_OL48gB.5fmEm>cA/&KFV-RqMrLJ<--Meh5tBP*gZlmC.(W;3kVn1]G*LJ`d6q0WZKN[S/c(#MM`sp7%Sl3>2nA$JaPFo"*NS#K4#1)]t[:#Ep!st0?_VBOr-j$Nh4jTM;Zcf.?,/mSt$"H,NTJX4$Uu*k^>Z]1P:?)Ad8cNoWr7m7&\4p>s%W9\]6l%<-iZ";DI]uN/pV>E#[;jVNo^61dj]'!+*k."PPrRX5XMF9ujrOfF!X)BfN/D7AfhAiE*:4!cS*$p\dHWEJgSs?Noc[rDH%G,AV5j?llX:;3a$XW0u<f2\Yn):M8.HPUEW\\#bL"k?<b6'FHi7h*`*$A0)sXa,(`>8:ET""dZ_\pTFb?p7e;g\e4V-c@T?:RIFL%:Qi9C/R#e_.Jo;tMeo/_?mgjJ+"dHD/R"-c(=uj/U(p4$Zk>8K>)^[13qK)nYj3]r$];Z*9>R+":9+lf2D(b)Cj.dOdAZKfP@''7%QAPZ`XbgJJQ,Tk*I3l$k2D$7gWnZC1fXCBu/Ko#\$>a!a+SFB&fX+sd]6JbNI%`4V4[?Td]0:(_I>s5)Jc2+)LU@4(L^i:h>5pQD%lh%a?qVRDLC<c(:S>;IncWcZ;RDIL)0/F4aD1GsTSXVNfns^-Z5A^DjR*W.FG>`k_VrbZ\s-3u-)l;lMQ@C$^r%hs.J)@A;F=dH?%`lmQ,:UJd)T+&;YNUd,InqU!h$E,WX5[sO:XKHB5pdo4(m.=^iQ=BY?LK_.M1?i!ukVA\YJs08#r2%#lVq&QZb$M-@']JWZqRXZn%C+7YAop6P]'!96?,>*s!r]jrc46ESNPh2\+ec2r#A]MTBX^pD8lJI"9W*9mp:FYqB!5L*AJ,&j9XO$EgJ,$O'r4B`@n_a@$rSQdf%q"VbAs3LXnr5X<dT:^W4op<GmrSN,&i=Gt]ci<X(s7Y&/s6lS0q<Q'crTg)*qob$bs78JTbJ4#Ohu<1r`kVHHVn`5m?iTM#rq_s'%s8'M0jo9pkT<.1)pqqUZ0E::srrLF[bc:~>%AI9_PrivateDataEnd