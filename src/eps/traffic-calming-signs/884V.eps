%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 884V.EPS
%%Creator: Adobe Illustrator(R) 14.0
%%For: Bob Hutchinson
%%CreationDate: 02/02/2009
%%BoundingBox: 0 0 116 163
%%HiResBoundingBox: 0 0 115.3707 162.1709
%%CropBox: 0 0 115.3707 162.1709
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 24582 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFA77C8382837C8382837C8382837C8382837C8382837C838283%7C8382837C8382837C8382837C8382837C8382837C8382837C8382837C83%82837C8382837C8382837C8382837C8382837C8382837C8382837C838283%58A7FD04FF837CFD55FF7C83FFFFA77CFFFFAE83AEA7A883AEA7A883AEA7%A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883%AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7A883AEA7%A883AEA7A883AEA7A883AEFFFF7CA7FF58FFFF822C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C7CFFFF58FF83FFAE335733573357335733%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%57335733573357335733573357335733A8FFA7A87CFF7C332D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C3382FF83AE83FFA72D5733572D%5733572D5733572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733572D%5733572D5733572D5733572D5733572D5733572DA7FFA7A758FF82332C57%2C332C572C332C572C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C572C332C572C337CFF83A883FFA72D%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%57335733573357335733573357335733573357335733572DA7FFA7A758FF%83332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D337CFF83A8%83FFA733572D5733572D5733572D5733572D5733572D5733572D572D332D%5733332D572D572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733A7FF%A7A87CFF7C332C332C572C332C572C332C572C332C572C332C572C332DFD%0483A783A77C822D332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C3382%FF7CA883FFA73357335733573357335733573357335733573357335733CF%FFFFAEFFFFFFAEFFFFFF5857335733573357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%33A7FFA7A87CFF7C332D332C572D332C572D332C572D332C572D332C572D%83A8572D572C5883332C58FFFF58332D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C3383FF83AE83FFA72D5733572D5733572D5733572D5733572D573357%2D7CFF582D57333357A72D572D58FFFF583333572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572DA7FFA7A758FF7C2D2C332C332C332C332C332C332C332C332C%332C33A8832C332C332C577C332C332C58FFFF57332C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C337CFF83A883FFAE82A783837C825882575857572D573357%578282A7A8FFA7A8A7AEA7A8A8FFA7AEA7AEA7FFFFFF7C572D5733573357%335733573357335733573357335733573357335733573357335733573357%33573357335733572DA7FFA7A758FFA7827CA783A783A8A7AEA8A82D58A8%FD19FFA8582C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D337CFF83A883FFA72D332D57%33572D5733572D57A7FD1BFFA7572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733A7FFA7%A87CFF7C332C332C572C332C332C332CA8FFCFA7AEA8FD0FFFA7AEA8FD04%FFA82C572C572C332C332C332C572C332C332D8258572C332C572C332C57%2C332C572C332C572C332C572C332C3382FF7CA883FFA733573357335733%5733573357A8FFA8FFAEFFA8FD0DFFA8FFA8FFAEFFFFFFA75783FFAEA87C%8257572D573357335733AEFFFF8357335733573357335733573357335733%5733573357335733A7FFA7A87CFF7C332D332C572D332C572D332CA7FFFF%5757A7FD0DFFA8FF573383FD04FFA82D57578282AEA8FFA8A758572D332C%57FFFFFFAE2D332C572D332C572D332C572D332C572D332C572D332C3383%FF83AE83FFA72D5733572D5733572D57335733A7FF572DAEAE827C838283%7C8382837C837C83FF582DA7AE82587C575733572D333357578383FFCFFF%A7822DA8FFFF835733572D5733572D5733572D5733572D5733572D573357%2DA7FFA7A758FF83332C572C332C332C332C572C332CCFFFA8FF582C332C%332C332C332C332C332CA8FFAEFF7C0A332C332C572C332C572C332C332C%5757A7A8572C82A8FFA8572C332C572C332C572C332C572C332C572C332C%572C337CFF83A883FFFFA8CFA7A783835858335733332D5757A7A7823357%33573357335733573357335733A7A7822D57335733573357335733573357%33572D5733572D82A8FFFFFF833333573357335733573357335733573357%335733572DA7FFA7A758FF835757827C8383A8A8CFA7A7838257572D330A%332D332C572D332C572D332C572D332C332D332C572D332C572D332C572D%332C572D332C332D83FD06FF2D332C572D332C572D332C572D332C572D33%2C572D337CFF83A883FFA72D572D572D332D57575858A7A7AEA8AE838357%5733332D5733572D5733572D5733572D5733572D5733572D5733572D5733%572D57333358FFFFAE58FD04FF823382335733572D5733572D5733572D57%33572D5733A7FFA7A87CFF7C332C332C572C332C332C332C332C57578383%A8A8A8837C2D572C332C572C332C572C332C572C332C572C332C572C332C%572C332C5783FFFF832C3383FFFFFF83337CFF58332C332C572C332C572C%332C572C332C3382FF7CA883FFA733573357335733573357335733572D57%335733575883A7FFA8A7585733572D573357335733573357335733573357%33573357335783FFA87C33572D82FD04FF573357FFA8582D573357335733%5733573357335733A7FFA7A87CFF7C332D332C572D332C572D332C572D33%2C572D332C332D332D7C82AEA8A758572C332D332C572D332C572D332C57%2D332C572D332C57FF7C0A332D5757FD04FF832D332C83FF822C572D332C%572D332C572D332C3383FF83AE83FFA72D5733572D5733572D5733572D57%33572D5733572D5733572D5733587CAEAEA757572D572D5733572D573357%2D5733572D5733572DFF838258AEFD06FFA75733572D58CFA82D5733572D%5733572D5733572DA7FFA7A758FF82332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C577CAEA7822C332C572C332C572C33%2C572C332C332C58A8A7A7FD04FFCFA8FFA8572C332C332C57A7AE2C332C%332C572C332C572C337CFF83A883FFA72D57335733573357335733573357%3357335733573357335733573357335733333382A8FF5857335733573357%335733572D57575782FF58337CFFFF7C57FF83FF335757572D573357A7FF%335733573357335733572DA7FFA7A758FF83332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C3357AEA8582D332C%572D332C572D58A8FFAEFFA8FF8257A8FF577CA833A7FFA8FFA8582C572D%33A7AE2D332C572D332C572D337CFF83A883FFA733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D573383FF83%2D572D5733572D82FFAE58A7FFFF58FFAECFFFAEA88233FFFFA758CFFF7C%2D573357A8A72D572D5733572D5733A7FFA7A87CFF7C332C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C332C%57A8832C332C572C57FFA72C2D57FFA8A72CA7FD04FF2DA883A7832D2CA8%CF572C572C57A8582C332C572C332C3382FF7CA883FFA733573357335733%573357335733573357335733573357335733573357335733573357335733%572D57FF822D57335758FF573357FF7C82FF572D82FFFFA882FFA77CFF7C%3357FF575733572D83AE572D573357335733A7FFA7A87CFF7C332D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C58AE572C572D7CFF572D7C7C3357FF33572D82FFFFA7FF8383%837C2C57FF582C572D332CCF58332C572D332C3383FF83AE83FFA72D5733%572D5733572D5733572D5733572D5733572D573357575733572D5733572D%5733572D5733572DAE82332D5757FF58332D332DAEFF572D58AEFF8357FF%A72D332D337CFF57572D57333358FF33572D5733572DA7FFA7A758FF8233%2C572C332C572C332C572C332C572C332C572C332C337CFF7C332C332C57%2C332C572C332C572C3358A72C332C3383FF58572D83FF822C3357835733%2C82FF832C5758FF7C332C332C572C33A8582C332C572C337CFF83A883FF%A72D57335733573357335733573357335733573357335733FFFFFF575733%57335733573357335733572D83833333573357A7FD04FF83335733573357%33573383FD04FF83573357335733572DA78357335733572DA7FFA7A758FF%83332C572D332C572D332C572D332C572D332C572D332C57A8FFFF572D33%2C572D332C572D332C572D33A7822D332C572D33578258572C572D332C57%2D332C572D57588257332C572D332C572D3357CF2D332C572D337CFF83A8%83FFA733572D5733572D5733572D5733572D5733572D5733572DA7FF832D%5733572D5733572D5733572D5758FF2D5733572D5733572D5733572D5733%572D5733572D5733332D5733572D5733572D573357A85833572D5733A7FF%A7A87CFF7C332C332C572C332C572C332C572C332C572C332C572C58A8FF%83332C572C332C572C332C572C332CAE58332C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572CA757332C332C33%82FF7CA883FFA733573357335733573357335733573357335733573357AE%FFFFFF5757335733573357335733572D5757573357335733573357335733%5733573357335733573357335733573357335733573357333383A72D5733%5733A7FFA7A87CFF7C332D332C572D332C572D332C572D332C572D332C33%57FD04FF7C2C572D332C572D332C572D3357572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D8383332D%332C3383FF83AE83FFA72D5733572D5733572D5733572D5733572D573357%2DA7FD04FF82332D5733572D5758A7A8AEA7FF585733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D577CA72D%5733572DA7FFA7A758FF82332C572C332C572C332C572C332C572C332C57%2C3383FD04FF832C332C332C58A8FD06FF582C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C7C83332C57%2C337CFF83A883FFA72D573357335733573357335733573357335733572D%AEFD04FFAE572D573383FD08FF8357335733573357335733573357335733%57335733573357335733573357335733573357335758AE335733572DA7FF%A7A758FF83332C572D332C572D332C572D332C572D332C572D3383FD06FF%582CA7FD09FF832C572D332C572D332C572D332C572D332C572D332C332D%332C572D332C572D332C572D332C82A7332C572D337CFF83A883FFA73357%2D5733572D5733572D5733572D5733572D572DA7FD04FF7C83FD0CFF8333%2D5733572D5733572D5733572D5733572D5733827C5833572D5733572D57%33572D57333358A733572D5733A7FFA7A87CFF7C332C332C572C332C572C%332C572C587CA783A77C587CFD04FFAE58FD09FFA8FFFFA72C332C572C33%2C572C332C572C332C572C332CAEFFFFA8572C332C572C332C572C332C57%2C7C83332C332C3382FF7CA883FFA733573357335733573382A7FFA8AEFD%16FFAE5883FFAE572D5733573357335733573357335733572D83FD04FF83%573357335733573357335733337CA73357335733A7FFA7A87CFF7C332D33%2C572D332C83FFFF7CFD18FFA82D57FFFF33332C572D332C572D332C572D%332C572D3358FD04FFA72D332C572D332C572D332C572D837C332D332C33%83FF83AE83FFA72D5733572D572D58FFFF5757FD18FF5757338358573357%2D5733572D5733572D5733572D573357CFFFFFFF575733572D5733572D57%33572D5783822D5733572DA7FFA7A758FF82332C572C332C3383FFA73358%FD17FF83332C572C332C572C332C572C332C572C332C572C332C332C83FF%FF83332C332C332C572C332C572C332CA857332C572C337CFF83A883FFA7%2D573357335733AEFFAE2D83FD17FF822D57335733573357335733573357%335733573357335757A7AEFFFFFF8382335733573357335733572D57AE58%2D5733572DA7FFA7A758FF83332C572D332C57A8FF833358FD17FF58332C%572D332C572D332C572D332C572D332C572D3358FD08FFAE57332C572D33%2C572D3333CF2D332C572D337CFF83A883FFA733572D57335733FFFF832D%58FD17FF5733572D5733572D5733572D5733572D5733572D5757FD0BFF33%572D5733572D572D82A75733572D5733A7FFA7A87CFF7C332C332C572C7C%FFFF33332CA8FD06FFA8FD0FFF33332C332C572C332C572C332C572C332C%572C332C7CFD0BFF7C2C332C572C332C337C832C572C332C3382FF7CA883%FFA7335733573383FFFF7C573357A7FD05FF82575783A7FD05FFA783FD06%FF575733573357335733573357335733573357335783FD0BFF8233335733%57335733A87C573357335733A7FFA7A87CFF7C332D332C57588357332D33%57FFFFFFA7FFFF7C2C332D332C5733572C572DCFFF8333A8FFFF57332C57%2D332C572D332C572D332C572D332CAEFD0BFFA82D332C572D332C57A857%2C572D332C3383FF83AE83FFA72D5733572D572D332D5733FFFFAE5758FF%FF57572D5733572D5733572D57CFFF573333A8FFFF33572D5733572D5733%572D5733572D573357FD09FFCFFFFFA85733572D57335757FF33572D5733%572DA7FFA7A758FF82332C572C332C572C332C57CFFF2D3358FF83332C33%2C572C332C572C337CFFA8572C332CA7FF822C332C572C332C572C332C57%2C332C3357FFFFA8A7FD05FF8383FFFF2D332C332C572C8283332C332C57%2C337CFF83A883FFA72D57335733573357588233FF83573357CFAE335733%5733573357335733FFFF822D5733572DFFA8573357335733573357335733%5733573383FFFF58AEFD05FFAE57FFFF8233573357335783832D57335733%572DA7FFA7A758FF83332C572D332C5783FF5757CF572C572D83FF572D33%2C572D332C572D57FFA82D332C572D3357FF57332C572D332C572D332C57%2D332C5783FFA857A8FD05FFA857A8FF58332D332C572DAE57332D332C57%2D337CFF83A883FFA733572D573383CFA7573333FF57572D5757FF335733%572D5733572D5757FF575733572D573357CFAE33572D5733572D5733332D%57335733FFFF832DCFFD06FF33A7FF822D5733572D58A8572D5733572D57%33A7FFA7A87CFF7C332C3358FF83572C332D83FF572C332C57AEA72C332C%332C572C332C82A7332C572C332C572CA7FF572C332C572C332C577CA857%332C57FFFF5733A8FD06FF5758FF58332C572C3358A72C332C572C332C33%82FF7CA883FFA72D82A8FF58572D5733A7FFFF5757335733A8FFA8335733%5733573357A8FF3357335733573358FFAE33573357335733577CFFFFFF57%337CFFA85733FD07FF5783FF822D5733572DAE7C5733573357335733A7FF%A7A87CFF83A7AE822C332D332C337CFF7C572D332C572D83FF832D332C57%2D332C83FF832C572D332C572DA857332D332C572D332C82FFFFFF572DA7%FF822D57A8FD06FF5858FF57332C572D57A8572D332C572D332C3383FF83%AE83FFFF82572D572D5733572D5757572D5733572D5757AE835733572D57%335758AE82572D5733572D5733572D5733572D57333333FFFFA72D82FFFF%575733FD07FF7CA7FF822D572D5758AE2D5733572D5733572DA7FFA7A758%FF83332C572C332C572C332C332C332C572C332C332C332C572C332C572C%332C332C332C572C332C332C332C572C332C332DA8FFFFA8AEFFFFA8572C%57A8FD06FF8258FF57332C332CA77C332C572C332C572C337CFF83A883FF%A72D57335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733A8FD06FF82572D5757FD07FF%5833335733572D57AE582D573357335733572DA7FFA7A758FF83332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C57CFFD05FF2D332D332C57A8FFFFA8A8FFFF%822D332C572D3357AE2D332C572D332C572D337CFF83A883FFA733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D57335757FD06FF572D5733572DAEFFFF7CAEFFFF57%5733572D572DA7825733572D5733572D5733A7FFA7A87CFF7C332C332C57%2C332C572C332C572C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C572C58FF83A8FFFFFF58332C572C3383FFFF7C7CFF%FF582C572C332C57A8582C572C332C572C332C3382FF7CA883FFA7335733%573357335733573357335733573357335733573357335733573357335733%5733573357335733573357335757FF58FD04FFA72D5733572DA7FFFF58A7%FFFF57573357335757CF3357335733573357335733A7FFA7A87CFF7C332D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D58FF7CA8FFFFFFA8332C572D337CFFFF%577CFFAE572C572D332CA783332C572D332C572D332C3383FF83AE83FFA7%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5757CF83FD05FF57572D572D83FFFF%5783FFCF33572D573357A87C33572D5733572D5733572DA7FFA7A758FF82%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C332C58FD05FF7C2C332C3358FFFF%577CFF83332C332C3357AE2C572C332C572C332C572C337CFF83A883FFA7%2D5733573357335733573357335733573357335733573357335733573357%33573357335733573357335733573357335733FD05FF575733573382FFFF%5783FFA73357335733A78357335733573357335733572DA7FFA7A758FF83%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D57FFA87CFF57332D332C3357%FFFF577CFF58332D332C57A8572C572D332C572D332C572D337CFF83A883%FFA733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733FF7C83FF572D573357%2D58FFFF33A7FF822D57333358CF33572D5733572D5733572D5733A7FFA7%A87CFF7C332C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C57FF7C58FF2D332C%572C332DFFFF5783FF57332C572CA77C332C332C572C332C572C332C3382%FF7CA883FFA7335733573357335733573357335733573357335733573357%33573357335733573357335733573357335733573357335757FF5783FF57%2D5733572D82FFA82DA7FF582D573357A858335733573357335733573357%33A7FFA7A87CFF7C332D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C5857332C%8357332C572D337C832D332C8358332C3358A82C572D332C572D332C572D%332C3383FF83AE83FF832D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572DAE7C332D5733572D573357%2D5733572DA7FFA7A758FFA7332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C57A8572C332C572C332C%572C332C572C3383FF83A883FFFF7C5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733337CAE33572D573357%2D5733572D5733577CFFFFA7A758FFFFFFA8A883A783A883A783A883A783%A883A783A883A783A883A783A883A783A883A783A883A783A883A783A883%A783A883A783A883A783A883A783A883A783A883A783A883AEA7A783A783%A883A783A883A783A8A8FFFFFF83A883FD59FFA7A87CFFFFFF83837C8382%837C8382837C8382837C8382837C8382837C8382837C8382837C8382837C%8382837C8382837C8382837C8382837C8382837C8382837C8382837C8382%837C8382837C8382837C8382837C83828383FFFFFF7CA883FFFF58572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5758FFFFA7A87CFF83332D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C3383FF83AE83FF83%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572DA7FFA7A758%FF82332C572C332C332C332C332C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C332C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C337CFF83%A883FFA72D573357335757837C8382835857335733573357335733573357%335733573357335733573357335733573357335733578283335733575783%7C5733573357335733573357335733573357335733573357335733572DA7%FFA7A758FF83332C572D332C7CFD05FFA82C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C3357FFFF832D332CAEFF%FF2C572D332C572D332C572D332C572D332C572D332C572D332C572D337C%FF83A883FFA733572D57333357FF8257335733572D5757572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D82FFFFFF822D83%FFFFA8572D572D57575733572D57335757572D572D5733332D5733572D57%33A7FFA7A87CFF7C332C332C572C58FF820A332C332C5783FFFF832C337C%AE83FFA8582C57A8A7A8FF83332DFF7C332CA8A7572C572C3357FF83FFA8%82FFAEA8AE2C332C7CA8FFA8822C332C82AEFFA87C2C3357A87CFF57332C%332C3382FF7CA883FFA733573357335757FFA8A783AE5733A7FF83A7FFA7%2DA7FFFF83FFFF5757FFFFAEA8FF7C57CFFF3358FFA72D5733572D82FF82%57FFFFFF57CFAE572D82FFFF7CFFFF822D82FFFF7CFFFF822D83FFFFAE82%3357335733A7FFA7A87CFF7C332D332C572D58FD05FF8233FF835733AEFF%5782FF333383FF3357FF832C57FFA72C83FF5758FF57332C572D3357FF7C%3383FF5733A8CF2D33A7FF572D2DFFA733A7FF332D33FFA73358FF7C332C%572D332C3383FF83AE83FFA72D5733572D5757FF7C5733572D82FFFFCFFF%FFFF33A7FF572DA7FF5757FF7C3333FF833357FF83AEAE5733572D573358%FF832D57585733CFA85733FFA8573357A8FF33FFA8573357A8FF2D83FF57%2D572D5733572DA7FFA7A758FF82332C572C332C58FF822C332C3357FF82%572D5733337CFF2D337CFF3357FF832C57FFA72C33A8FFFF832C572C332C%3357FF58332C332C57A8AE2C33A8FF2C332DFFA757A8FF2C332DFFA7337C%FF2D332C332C572C337CFF83A883FFA72D573357335758FF7C5733572D57%AEFF5882A7822DA7FF572DA7FF5757FF823333FF83572D83FFFF57573357%33573382FF832D57335733FFAE572D82FFAE57A8FF832D83FFAE57AEFF83%2D83FF583357335733572DA7FFA7A758FF83332C572D332C58FF822C572D%332C58A8FFFFFF7C337CFF2D337CFF3357FF832D57AEA72D3333FFA8572C%572D332C3357FF58332D332C57A8AE2C572D83FFFFFF832C572D83FFFFFF%832C337CFF33572D332C572D337CFF83A883FFA733572D5733572D573357%2D5733572D57577C3357335733573357335733572D5733572D575782FFA7%2D572D5733572D5733572D5733572D5733572D573357575833572D573358%575833572D5733572D5733572D5733A7FFA7A87CFF7C332C332C572C332C%572C332C572C332C332C332C572C332C572C332C572C332C572C332CAEFF%FF57332C332C572C332C332C332C572C332C332C332C572C332C572C332C%572C332C572C332C332C332C572C332C3382FF7CA883FFA7335733573357%33573357335733572D573357335733573357335733573357335733573357%57825757335733573357335733572D573357335733573357335733573357%33573357335733573357335733573357335733A7FFA7A87CFF7C332D332C%572D332C572D332C58585833332D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C5757572C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C3383FF83AE83FFA72D57%33572D5733572D5757AEFD04FF7C5733572D5733572D573382A85733572D%5733572D5733A7835733572D57335757FF83332D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572DA7FFA7A758FF8233%2C572C332C572C332CAEFF833358A8FF58332C332C572C332C3357832C57%2C332C332C332C33A8A82C332C332C572C57FFA72C332C572C332C332C33%2C332C332C332C332C572C332C332C332C572C332C572C337CFF83A883FF%A72D573357335733572D82FFA72D572D57FFFF33577C5833577C58335858%57335757A782582D577CFFA88357573357335757FF83573357335758A782%582D57578257A783582D5733588283575733573357335733572DA7FFA7A7%58FF83332C572D332C572D337CFF57332C572D83FF5733FF7C3357FF7C33%7CFF573357FD04FF572CFD04FF832D332C572D57FFA72D332C3383FFAEFF%FF572C58FD04FFCF572C7CFD04FF57332C572D332C572D337CFF83A883FF%A733572D5733572D5733A7FF5833572D337CFF5757FF832D58FF830B83FF%572DFFAE5733FFA73333FFA8572D5733572D5757FF835733572D58575758%FF7C3357FFA75782FF5833FFFF5757FFAE33572D5733572D5733A7FFA7A8%7CFF7C332C332C572C332C3383FF33332C332C83FF572DFF7C332DFF7C2D%58FF2D57FFAE8383FFFF2D33A8A82C332C572C332C57FF832C572C332D83%A8CFFF822C58FF7C0A58FF7C33FFA88383FFFF572C332C572C332C3382FF%7CA883FFA733573357335733573383FF832D587C57A8FF3358FF832D58FF%832D83FF5757FFA8A783A7835733FFA7572D573357335757FF8357335733%FFFF8383FF583357FF7C3357FF5858FFCF83A783A7335733573357335733%A7FFA7A87CFF7C332D332C572D332C5733FFFF577CFF83FF833333FFA757%58FF7C2D7CFF5733A8CF2D3357572D57A8CF33572C572D332C57FFA72D57%3357FF830B58FF822D58FF822D58FF822DFFA8572D582C572D332C572D33%2C3383FF83AE83FFA72D5733572D5733572D5758FD05FFA7573357A7FD04%FF832D83FF582D82FD04FF585733A7FFFF7C332D57335757FD05FF58A8FF%CFFFFFA85758FF583358FF583358FD04FF822D5733572D5733572DA7FFA7%A758FF82332C572C332C572C332C33578383CFFF582C572C577CA7577C57%3357832D332C577CA758572C332D827C572C332C572C5758837C837C572C%828382577C2C5758572C5758572C3357837D7C2D332C572C332C572C337C%FF83A883FFA72D57335733573357335733572D5757AE575733572D573357%2D5733572D5733572D573357335733572D5733573357335733572D332D57%33572D5733572D5733332D5733332D5733572D5733573357335733573357%2DA7FFA7A758FF83332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D337CFF83A883FFA72D572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D572D83FFA7A77CFF83332C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C3383FF7CAE83FFFF7C572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5758FFFF83FF8383FFFFA7A783A883A783A883A783A883%A783A883A783A883A783A883A783A883A783A883A783A883A783A883A783%A883A783A883A783A883A783A883A783A883A783A883A783A883A783A883%A783A883A783A883A783FFFF837CFFFF8283FD55FF837CFD04FF83825883%7C8258837C8258837C8258837C8258837C8258837C8258837C8258837C82%58837C8258837C8258837C8258837C8258837C8258837C8258837C825883%7C8258837C8258837C8258837C8258837C825883587C7CFFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 370 C)
%%CMYKCustomColor: 0.5600 0 1 0.2700 (PANTONE 370 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-02-02T11:35:08Z</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>184</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7zcXFrq9tdazrN01r5Wt&#xA;Wdbe3V2jWdY24NPOUIdlZxSOMddiQa0zEJEwZSNQH2+/9DSTe5+li589/kqp4jRYWA2Dfo+E1p3q&#xA;wr9+Y35nT/zfsDT42Lu+xr/Hv5Lf9WSD/uHwf0x/M6f+b9gXxsXd9jv8e/kt/wBWSD/uHwf0x/M6&#xA;f+b9gXxsXd9jv8e/kt/1ZIP+4fB/TH8zp/5v2BfGxd32O/x7+S3/AFZIP+4fB/TH8zp/5v2BfGxd&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 370 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName> 370</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>60.000004</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.058825</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1375 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 370 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>56.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 469 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 349 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>42.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 116 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>16.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 300 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>44.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 186 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>81.000000</xmpG:yellow>
                           <xmpG:black>4.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -162.171 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 162.171 li
115.371 162.171 li
115.371 0 li
cp
clp
[1 0 0 1 0 0 ]ct
6.65576 .283691 mo
3.12744 .283691 .283691 3.16406 .283691 6.69189 cv
.283691 50.6118 .283691 111.56 .283691 155.479 cv
.283691 159.008 3.12744 161.888 6.65576 161.888 cv
40.6753 161.888 74.6948 161.888 108.715 161.888 cv
112.243 161.888 115.087 159.008 115.087 155.479 cv
115.087 111.56 115.087 50.6118 115.087 6.69189 cv
115.087 3.16406 112.243 .283691 108.715 .283691 cv
74.6948 .283691 40.6753 .283691 6.65576 .283691 cv
6.65576 .283691 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.566928 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
6.65576 .283691 mo
3.12744 .283691 .283691 3.16406 .283691 6.69189 cv
.283691 50.6118 .283691 111.56 .283691 155.479 cv
.283691 159.008 3.12744 161.888 6.65576 161.888 cv
40.6753 161.888 74.6948 161.888 108.715 161.888 cv
112.243 161.888 115.087 159.008 115.087 155.479 cv
115.087 111.56 115.087 50.6118 115.087 6.69189 cv
115.087 3.16406 112.243 .283691 108.715 .283691 cv
74.6948 .283691 40.6753 .283691 6.65576 .283691 cv
6.65576 .283691 li
cp
/0 
<<
/Name (PANTONE 370 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .56 0 1 .27 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
57.6675 3.48779 mo
6.6377 3.48779 li
4.87793 3.48779 3.45166 4.91406 3.45166 6.67383 cv
3.45166 109.777 li
3.45166 111.537 4.87793 112.964 6.6377 112.964 cv
108.697 112.964 li
110.457 112.964 111.883 111.537 111.883 109.777 cv
111.883 6.67383 li
111.883 4.91406 110.457 3.48779 108.697 3.48779 cv
57.6675 3.48779 li
57.6675 3.48779 li
cp
ef
74.6587 30.1997 mo
74.5513 30.1641 li
74.4429 30.1279 li
74.2993 30.0918 li
74.1909 30.0557 li
74.0474 30.0195 li
73.939 29.9839 li
73.7954 29.9478 li
73.687 29.9116 li
73.5435 29.876 li
73.4351 29.8398 li
73.2915 29.8037 li
73.1831 29.7676 li
73.0396 29.7319 li
72.9312 29.6958 li
72.7876 29.6597 li
72.6792 29.6235 li
72.5356 29.5879 li
72.4272 29.5518 li
72.2827 29.5156 li
72.1753 29.4795 li
72.0308 29.4438 li
71.8872 29.4077 li
71.7788 29.3716 li
71.6353 29.3354 li
71.5269 29.2998 li
71.3833 29.2637 li
71.2388 29.2275 li
71.1313 29.1914 li
70.9868 29.1558 li
70.8794 29.1196 li
70.7349 29.0835 li
70.6274 29.0835 li
70.4829 29.0479 li
70.3394 29.0117 li
70.231 28.9756 li
70.0874 28.9395 li
69.9429 28.9038 li
69.8354 28.8677 li
69.6909 28.8315 li
69.5474 28.7954 li
69.439 28.7598 li
69.2954 28.7598 li
69.1509 28.7236 li
69.0435 28.6875 li
68.8989 28.6514 li
68.7554 28.6157 li
68.647 28.5796 li
68.5034 28.5435 li
68.3589 28.5073 li
68.2515 28.5073 li
68.1069 28.4717 li
67.9634 28.4355 li
67.855 28.3994 li
67.7114 28.3633 li
67.5669 28.3276 li
67.4233 28.2915 li
67.3149 28.2915 li
67.1714 28.2554 li
67.0269 28.2197 li
66.8833 28.1836 li
66.7749 28.1475 li
66.6313 28.1113 li
66.4868 28.1113 li
66.3433 28.0757 li
66.1997 28.0396 li
66.0913 28.0034 li
65.9478 27.9673 li
65.8032 27.9316 li
65.6597 27.9316 li
65.5513 27.8955 li
65.4077 27.8594 li
65.2632 27.8232 li
65.1196 27.7876 li
64.9751 27.7876 li
64.8315 27.7515 li
64.7231 27.7153 li
64.5796 27.6792 li
64.4351 27.6792 li
64.2915 27.6436 li
64.147 27.6074 li
64.0034 27.5713 li
63.895 27.5352 li
63.7515 27.5352 li
63.6069 27.4995 li
63.4634 27.4634 li
63.3198 27.4272 li
63.1753 27.4272 li
63.0317 27.3916 li
62.8872 27.3555 li
62.7798 27.3193 li
62.6353 27.3193 li
62.4917 27.2832 li
62.3472 27.2476 li
62.2036 27.2114 li
62.0591 27.2114 li
61.9155 27.1753 li
61.771 27.1392 li
61.6274 27.1392 li
61.4839 27.1035 li
61.3394 27.0674 li
61.1958 27.0313 li
61.0874 27.0313 li
60.9438 26.9951 li
60.7993 26.9595 li
60.6558 26.9595 li
60.5112 26.9233 li
60.3677 26.8872 li
60.2231 26.8511 li
60.0796 26.8511 li
59.9351 26.8154 li
59.7915 26.7793 li
59.6479 26.7793 li
59.5034 26.7432 li
59.3599 26.707 li
59.2153 26.707 li
59.0718 26.6714 li
58.9272 26.6353 li
58.7837 26.6353 li
58.6392 26.5991 li
58.4956 26.5635 li
58.3521 26.5635 li
58.2075 26.5273 li
58.064 26.4912 li
57.9194 26.4912 li
57.7759 26.4551 li
57.6313 26.4189 li
57.4517 26.4189 li
57.4517 26.4199 li
57.4517 25.3398 li
57.4517 25.3398 li
57.5952 25.3398 li
57.7397 25.376 li
57.8833 25.4116 li
58.0269 25.4116 li
58.1714 25.4478 li
58.3149 25.4839 li
58.4595 25.4839 li
58.603 25.52 li
58.7466 25.52 li
58.8911 25.5557 li
58.9995 25.5918 li
59.1431 25.5918 li
59.2866 25.6279 li
59.4312 25.6641 li
59.5747 25.6641 li
59.7192 25.6997 li
59.8628 25.7358 li
60.0073 25.7358 li
60.1509 25.772 li
60.2593 25.8081 li
60.4028 25.8081 li
60.5474 25.8438 li
60.6909 25.8799 li
60.8354 25.8799 li
60.979 25.916 li
61.1226 25.9521 li
61.231 25.9878 li
61.3755 25.9878 li
61.519 26.0239 li
61.6626 26.0601 li
61.8071 26.0601 li
61.9507 26.0957 li
62.0591 26.1318 li
62.2026 26.1318 li
62.3472 26.168 li
62.4907 26.2041 li
62.5991 26.2397 li
62.7427 26.2397 li
62.8872 26.2759 li
63.0308 26.312 li
63.1753 26.312 li
63.2827 26.3481 li
63.4272 26.3838 li
63.5708 26.4199 li
63.7153 26.4199 li
63.8589 26.4561 li
63.9673 26.4922 li
64.1108 26.5278 li
64.2544 26.5278 li
64.3628 26.564 li
64.5073 26.6001 li
64.6509 26.6362 li
64.7944 26.6362 li
64.9028 26.6719 li
65.0474 26.708 li
65.1909 26.7441 li
65.3345 26.7441 li
65.4429 26.7803 li
65.5864 26.8159 li
65.731 26.8521 li
65.8384 26.8882 li
65.9829 26.8882 li
66.1265 26.9238 li
66.2349 26.96 li
66.3784 26.9961 li
66.5229 26.9961 li
66.6313 27.0322 li
66.7749 27.0679 li
66.9185 27.104 li
67.0269 27.1401 li
67.1704 27.1763 li
67.3149 27.1763 li
67.4224 27.2119 li
67.5669 27.248 li
67.7104 27.2842 li
67.8188 27.3203 li
67.9624 27.3203 li
68.1069 27.356 li
68.2144 27.3921 li
68.3589 27.4282 li
68.4673 27.4644 li
68.6108 27.5 li
68.7544 27.5 li
68.8628 27.5361 li
69.0063 27.5723 li
69.1147 27.6084 li
69.2583 27.644 li
69.4028 27.6802 li
69.5112 27.7163 li
69.6548 27.7163 li
69.7632 27.752 li
69.9067 27.7881 li
70.0151 27.8242 li
70.1587 27.8604 li
70.2671 27.8965 li
70.4106 27.9321 li
70.519 27.9683 li
70.6626 27.9683 li
70.8071 28.0044 li
70.9146 28.04 li
71.0591 28.0762 li
71.1665 28.1123 li
71.311 28.1484 li
71.4185 28.1841 li
71.563 28.2202 li
71.6704 28.2563 li
71.8149 28.2925 li
71.9224 28.2925 li
72.0669 28.3281 li
72.1743 28.3643 li
72.2827 28.4004 li
72.4263 28.4365 li
72.5347 28.4722 li
72.6792 28.5083 li
72.7866 28.5444 li
72.9312 28.5806 li
73.0386 28.6162 li
73.1831 28.6523 li
73.2905 28.6885 li
73.3989 28.7246 li
73.5425 28.7603 li
73.6509 28.7964 li
73.7944 28.8325 li
73.9028 28.8682 li
74.0464 28.9043 li
74.1548 28.9404 li
74.2632 28.9766 li
74.2632 28.9761 li
74.6587 30.1997 li
74.6587 30.1997 li
cp
0 0 0 0 cmyk
ef
3.45166 20.876 mo
3.5957 20.9121 li
3.70361 20.9121 li
3.81152 20.9121 li
3.91943 20.9121 li
4.02783 20.9121 li
4.13574 20.9121 li
4.27979 20.9478 li
4.3877 20.9478 li
4.49561 20.9478 li
4.60352 20.9478 li
4.71143 20.9478 li
4.81982 20.9478 li
4.96338 20.9478 li
5.07178 20.9839 li
5.17969 20.9839 li
5.2876 20.9839 li
5.39551 20.9839 li
5.50342 20.9839 li
5.64746 20.9839 li
5.75586 20.9839 li
5.86377 21.02 li
5.97168 21.02 li
6.07959 21.02 li
6.1875 21.02 li
6.29541 21.02 li
6.43945 21.02 li
6.54785 21.0557 li
6.65576 21.0557 li
6.76367 21.0557 li
6.87158 21.0557 li
6.97949 21.0557 li
7.12354 21.0557 li
7.23145 21.0918 li
7.33984 21.0918 li
7.44775 21.0918 li
7.55566 21.0918 li
7.66357 21.0918 li
7.77148 21.0918 li
7.91553 21.0918 li
8.02344 21.1279 li
8.13184 21.1279 li
8.23975 21.1279 li
8.34766 21.1279 li
8.45557 21.1279 li
8.56348 21.1279 li
8.70752 21.1641 li
8.81543 21.1641 li
8.92383 21.1641 li
9.03174 21.1641 li
9.13965 21.1641 li
9.24756 21.1641 li
9.3916 21.1997 li
9.49951 21.1997 li
9.60791 21.1997 li
9.71582 21.1997 li
9.82373 21.1997 li
9.93164 21.1997 li
10.0396 21.1997 li
10.1475 21.2358 li
10.2915 21.2358 li
10.3999 21.2358 li
10.5078 21.2358 li
10.6157 21.2358 li
10.7236 21.2358 li
10.8315 21.272 li
10.9756 21.272 li
11.0835 21.272 li
11.1919 21.272 li
11.2998 21.272 li
11.4077 21.272 li
11.5156 21.3081 li
11.6235 21.3081 li
11.7676 21.3081 li
11.8755 21.3081 li
11.9839 21.3081 li
12.0918 21.3081 li
12.1997 21.3438 li
12.3076 21.3438 li
12.4155 21.3438 li
12.5239 21.3438 li
12.668 21.3438 li
12.7759 21.3438 li
12.8838 21.3438 li
12.9917 21.3799 li
13.0996 21.3799 li
13.2075 21.3799 li
13.3159 21.3799 li
13.46 21.3799 li
13.5679 21.416 li
13.6758 21.416 li
13.7837 21.416 li
13.8916 21.416 li
14 21.416 li
14.1079 21.416 li
14.2158 21.416 li
14.3599 21.4521 li
14.4678 21.4521 li
14.5757 21.4521 li
14.6836 21.4521 li
14.792 21.4521 li
14.8999 21.4521 li
15.0078 21.4878 li
15.1157 21.4878 li
15.2598 21.4878 li
15.3677 21.4878 li
15.4756 21.4878 li
15.584 21.5239 li
15.6919 21.5239 li
15.7998 21.5239 li
15.9077 21.5239 li
16.0151 21.5239 li
16.1597 21.5239 li
16.2671 21.5239 li
16.3755 21.5601 li
16.4839 21.5601 li
16.5913 21.5601 li
16.6997 21.5601 li
16.8071 21.5601 li
16.9155 21.5601 li
17.0591 21.5957 li
17.1675 21.5957 li
17.2759 21.5957 li
17.3833 21.5957 li
17.4917 21.5957 li
17.5991 21.5957 li
17.7075 21.6318 li
17.8159 21.6318 li
17.7993 21.626 li
17.6099 21.9531 17.4692 22.3066 17.3813 22.6748 cv
17.4194 22.6758 li
17.2749 22.6758 li
17.1675 22.6396 li
17.0591 22.6396 li
16.9517 22.6396 li
16.8433 22.6396 li
16.7349 22.6396 li
16.6274 22.6396 li
16.519 22.604 li
16.4116 22.604 li
16.3032 22.604 li
16.1958 22.604 li
16.0874 22.604 li
15.9795 22.604 li
15.8716 22.604 li
15.7637 22.5679 li
15.6558 22.5679 li
15.5474 22.5679 li
15.4395 22.5679 li
15.3315 22.5679 li
15.2236 22.5317 li
15.1157 22.5317 li
15.0073 22.5317 li
14.8994 22.5317 li
14.7915 22.5317 li
14.6836 22.5317 li
14.5757 22.5317 li
14.4678 22.4956 li
14.3237 22.4956 li
14.2153 22.4956 li
14.1074 22.4956 li
13.9995 22.4956 li
13.8916 22.4956 li
13.7837 22.46 li
13.6753 22.46 li
13.5674 22.46 li
13.4595 22.46 li
13.3516 22.46 li
13.2437 22.46 li
13.1357 22.4238 li
13.0273 22.4238 li
12.9194 22.4238 li
12.8115 22.4238 li
12.7036 22.4238 li
12.5957 22.4238 li
12.4873 22.3877 li
12.3794 22.3877 li
12.2715 22.3877 li
12.1636 22.3877 li
12.0557 22.3877 li
11.9473 22.3877 li
11.8037 22.3877 li
11.6953 22.3516 li
11.5874 22.3516 li
11.4795 22.3516 li
11.3716 22.3516 li
11.2637 22.3516 li
11.1553 22.3516 li
11.0474 22.3159 li
10.9395 22.3159 li
10.8315 22.3159 li
10.7236 22.3159 li
10.6152 22.3159 li
10.5073 22.3159 li
10.3994 22.3159 li
10.2915 22.2798 li
10.1836 22.2798 li
10.0752 22.2798 li
9.96729 22.2798 li
9.85938 22.2798 li
9.75146 22.2798 li
9.64355 22.2437 li
9.49951 22.2437 li
9.3916 22.2437 li
9.2832 22.2437 li
9.17529 22.2437 li
9.06738 22.2437 li
8.95947 22.2437 li
8.85156 22.208 li
8.74316 22.208 li
8.63525 22.208 li
8.52734 22.208 li
8.41943 22.208 li
8.31152 22.208 li
8.20361 22.1719 li
8.09521 22.1719 li
7.9873 22.1719 li
7.87939 22.1719 li
7.77148 22.1719 li
7.66357 22.1719 li
7.51953 22.1719 li
7.41113 22.1357 li
7.30322 22.1357 li
7.19531 22.1357 li
7.0874 22.1357 li
6.97949 22.1357 li
6.87158 22.1357 li
6.76318 22.1357 li
6.65527 22.0996 li
6.54736 22.0996 li
6.43945 22.0996 li
6.33154 22.0996 li
6.22314 22.0996 li
6.11523 22.0996 li
6.00732 22.064 li
5.89941 22.064 li
5.7915 22.064 li
5.68311 22.064 li
5.5752 22.064 li
5.43115 22.064 li
5.32324 22.064 li
5.21533 22.0278 li
5.10742 22.0278 li
4.99951 22.0278 li
4.89111 22.0278 li
4.7832 22.0278 li
4.67529 22.0278 li
4.56738 21.9917 li
4.45947 21.9917 li
4.35107 21.9917 li
4.24316 21.9917 li
4.13525 21.9917 li
4.02734 21.9917 li
3.91943 21.9917 li
3.81152 21.9556 li
3.70313 21.9556 li
3.55908 21.9556 li
3.45117 21.9556 li
3.45166 20.876 li
cp
ef
3.45166 31.5317 mo
3.5957 31.5679 li
3.70361 31.5679 li
3.84766 31.5679 li
3.95557 31.604 li
4.09961 31.604 li
4.20752 31.604 li
4.35156 31.6396 li
4.45947 31.6396 li
4.60352 31.6396 li
4.71143 31.6758 li
4.85547 31.6758 li
4.96338 31.6758 li
5.10742 31.7119 li
5.21582 31.7119 li
5.32373 31.7119 li
5.46777 31.748 li
5.57568 31.748 li
5.71973 31.7837 li
5.82764 31.7837 li
5.97168 31.7837 li
6.07959 31.8198 li
6.22363 31.8198 li
6.33154 31.8198 li
6.47559 31.856 li
6.5835 31.856 li
6.72754 31.8921 li
6.83545 31.8921 li
6.97949 31.8921 li
7.0874 31.9277 li
7.23145 31.9277 li
7.33936 31.9639 li
7.44775 31.9639 li
7.5918 31.9639 li
7.69971 32 li
7.84375 32 li
7.95166 32 li
8.0957 32.0361 li
8.20361 32.0361 li
8.34766 32.0718 li
8.45557 32.0718 li
8.59961 32.1079 li
8.70752 32.1079 li
8.81543 32.1079 li
8.95947 32.144 li
9.06738 32.144 li
9.21143 32.1797 li
9.31934 32.1797 li
9.46338 32.1797 li
9.57178 32.2158 li
9.71533 32.2158 li
9.82373 32.252 li
9.96777 32.252 li
10.0757 32.2881 li
10.1836 32.2881 li
10.3276 32.2881 li
10.4355 32.3237 li
10.5796 32.3237 li
10.6875 32.3599 li
10.8315 32.3599 li
10.9395 32.396 li
11.0835 32.396 li
11.1914 32.396 li
11.2993 32.4321 li
11.4434 32.4321 li
11.5518 32.4678 li
11.6953 32.4678 li
11.8037 32.5039 li
11.9478 32.5039 li
12.0557 32.54 li
12.1636 32.54 li
12.3076 32.5762 li
12.4155 32.5762 li
12.5596 32.6118 li
12.6675 32.6118 li
12.8115 32.6118 li
12.9194 32.6479 li
13.0273 32.6479 li
13.1714 32.6841 li
13.2793 32.6841 li
13.4233 32.7202 li
13.5317 32.7202 li
13.6396 32.7559 li
13.7837 32.7559 li
13.8916 32.792 li
14.0356 32.792 li
14.1436 32.8281 li
14.2876 32.8281 li
14.3955 32.8643 li
14.5034 32.8643 li
14.6475 32.8999 li
14.7554 32.8999 li
14.8994 32.936 li
15.0073 32.936 li
15.1157 32.9722 li
15.2593 32.9722 li
15.3677 33.0078 li
15.4756 33.0078 li
15.6196 33.0439 li
15.7275 33.0439 li
15.8716 33.0801 li
15.9795 33.0801 li
16.0874 33.1162 li
16.231 33.1162 li
16.3394 33.1523 li
16.4829 33.1523 li
16.5913 33.188 li
16.6997 33.188 li
16.8433 33.2241 li
16.9517 33.2241 li
17.0591 33.2603 li
17.2036 33.2603 li
17.311 33.2959 li
17.4556 33.2959 li
17.563 33.332 li
17.6714 33.332 li
17.8149 33.3682 li
17.9233 33.4043 li
18.0308 33.4043 li
18.1753 33.4399 li
18.2837 33.4399 li
18.3911 33.4761 li
18.5356 33.4761 li
18.6431 33.5122 li
18.7515 33.5122 li
18.895 33.5483 li
19.0034 33.5483 li
19.1108 33.584 li
19.2554 33.6201 li
19.3628 33.6201 li
19.4712 33.6563 li
19.6147 33.6563 li
19.7231 33.6924 li
19.8315 33.6924 li
19.9751 33.728 li
20.0835 33.7642 li
20.1909 33.7642 li
20.3354 33.8003 li
20.4429 33.8003 li
20.5513 33.8364 li
20.6948 33.8364 li
20.8032 33.8721 li
20.9116 33.9082 li
21.019 33.9082 li
21.1636 33.9443 li
21.271 33.9443 li
21.3794 33.9805 li
21.5229 33.9805 li
21.6313 34.0161 li
21.7388 34.0522 li
21.8472 34.0522 li
21.9917 34.0884 li
22.0991 34.0884 li
22.2075 34.124 li
22.3511 34.1602 li
22.4595 34.1602 li
22.5669 34.1963 li
22.6753 34.1963 li
22.8188 34.2324 li
22.9272 34.2681 li
23.0356 34.2681 li
23.1431 34.3042 li
23.2876 34.3042 li
23.395 34.3403 li
23.5034 34.3765 li
23.6108 34.3765 li
23.7554 34.4121 li
23.8628 34.4121 li
23.9712 34.4482 li
24.0796 34.4844 li
24.187 34.4844 li
24.3315 34.5205 li
24.439 34.5562 li
24.5474 34.5562 li
24.6548 34.5923 li
24.7993 34.6284 li
24.9077 34.6284 li
25.0151 34.6646 li
25.1235 34.6646 li
25.231 34.7002 li
25.3755 34.7363 li
25.4829 34.7363 li
25.5913 34.7725 li
25.6997 34.8086 li
25.8071 34.8086 li
25.9517 34.8442 li
26.0591 34.8804 li
26.1675 34.8804 li
26.2749 34.9165 li
26.3833 34.9165 li
26.4917 34.9521 li
26.5991 34.9883 li
26.7437 34.9883 li
26.8511 35.0244 li
26.9595 35.0605 li
27.0669 35.0962 li
27.1753 35.0962 li
27.2837 35.1323 li
27.4272 35.1323 li
27.5356 35.1685 li
27.6431 35.2046 li
27.7515 35.2402 li
27.8589 35.2402 li
27.9673 35.2764 li
28.0757 35.2764 li
28.1831 35.3125 li
28.3276 35.3486 li
28.4351 35.3843 li
28.5435 35.3843 li
28.6509 35.4204 li
28.7593 35.4565 li
28.8677 35.4565 li
28.9751 35.4927 li
29.0835 35.5283 li
29.1909 35.5283 li
29.2993 35.5645 li
29.4077 35.6006 li
29.5513 35.6006 li
29.6597 35.6367 li
29.7671 35.6724 li
29.8755 35.7085 li
29.9829 35.7085 li
30.0913 35.7446 li
30.1997 35.7803 li
30.3071 35.7803 li
30.4155 35.8164 li
30.5229 35.8525 li
30.6313 35.8887 li
30.7397 35.8887 li
30.8472 35.9243 li
30.9556 35.9604 li
31.063 35.9604 li
31.1714 35.9966 li
31.2798 36.0327 li
31.3872 36.0684 li
31.4956 36.0684 li
31.603 36.1045 li
31.7114 36.1406 li
31.8198 36.1768 li
31.9272 36.1768 li
32.0356 36.2124 li
32.1431 36.2485 li
32.2515 36.2485 li
32.3599 36.2847 li
32.4673 36.3208 li
32.5757 36.3564 li
32.6831 36.3564 li
32.7915 36.3926 li
32.8989 36.4287 li
33.0073 36.4648 li
33.1157 36.4648 li
33.2231 36.5005 li
33.3315 36.5366 li
33.439 36.5728 li
33.5112 36.5728 li
33.6196 36.6084 li
33.7271 36.6445 li
33.8354 36.6807 li
33.9438 36.6807 li
34.0513 36.7168 li
34.1597 36.7529 li
34.2671 36.7886 li
34.3755 36.8247 li
34.4839 36.8247 li
34.5913 36.8608 li
34.6636 36.8965 li
34.771 36.9326 li
34.8794 36.9326 li
34.9878 36.9688 li
35.0952 37.0049 li
35.2036 37.0405 li
35.311 37.0405 li
35.3833 37.0767 li
35.4917 37.1128 li
35.5991 37.1489 li
35.7075 37.1846 li
35.8159 37.1846 li
35.9233 37.2207 li
35.9956 37.2568 li
36.103 37.293 li
36.2114 37.3286 li
36.3198 37.3286 li
36.4272 37.3647 li
36.4995 37.4009 li
36.6079 37.437 li
36.7153 37.4727 li
36.8237 37.4727 li
36.895 37.5088 li
37.0034 37.5449 li
37.1118 37.5811 li
37.2192 37.6167 li
37.3276 37.6167 li
37.3999 37.6528 li
37.5073 37.689 li
37.6157 37.7246 li
37.688 37.7607 li
37.7954 37.7969 li
37.9038 37.7969 li
38.0112 37.833 li
38.0835 37.8687 li
38.1919 37.9048 li
38.2993 37.9409 li
38.4077 37.9409 li
38.48 37.9771 li
38.5874 38.0127 li
38.6958 38.0488 li
38.7671 38.085 li
38.8755 38.1211 li
38.9839 38.1211 li
39.0552 38.1567 li
39.1636 38.1929 li
39.272 38.229 li
39.3433 38.2651 li
39.4517 38.3008 li
39.5239 38.3369 li
39.6313 38.3369 li
39.7397 38.373 li
39.812 38.4092 li
39.9194 38.4448 li
40.0278 38.481 li
40.0991 38.5171 li
40.2075 38.5171 li
40.2798 38.5527 li
40.3872 38.5889 li
40.4595 38.625 li
40.5679 38.6611 li
40.6753 38.6968 li
40.7476 38.7329 li
40.856 38.7329 li
40.9272 38.769 li
41.0356 38.8052 li
41.1079 38.8408 li
41.2153 38.877 li
41.2876 38.9131 li
41.396 38.9492 li
41.4673 38.9849 li
41.5757 38.9849 li
41.6831 39.021 li
41.7554 39.0571 li
41.8276 39.0933 li
41.9351 39.1289 li
42.0073 39.165 li
42.1157 39.2012 li
42.188 39.2373 li
42.2954 39.2373 li
42.3677 39.2729 li
42.4751 39.3091 li
42.5474 39.3452 li
42.6558 39.3809 li
42.7271 39.417 li
42.8354 39.4531 li
42.9077 39.4893 li
42.98 39.5249 li
43.0874 39.561 li
43.1597 39.561 li
43.2671 39.5972 li
43.3394 39.6333 li
43.4116 39.6689 li
43.519 39.7051 li
43.5913 39.7412 li
43.6997 39.7773 li
43.772 39.813 li
43.8433 39.8491 li
43.9517 39.8853 li
44.0239 39.9214 li
44.0952 39.9214 li
44.2036 39.957 li
44.2759 39.9932 li
44.3472 40.0293 li
44.4556 40.0654 li
44.5278 40.1011 li
44.5991 40.1372 li
44.7075 40.1733 li
44.7798 40.209 li
44.8511 40.2451 li
44.9233 40.2813 li
45.0317 40.3174 li
45.103 40.3535 li
45.1753 40.3892 li
45.2476 40.3892 li
45.356 40.4253 li
45.4272 40.4614 li
45.4995 40.4971 li
45.5718 40.5332 li
45.6792 40.5693 li
45.7515 40.6055 li
45.8237 40.6411 li
45.895 40.6772 li
45.9673 40.7134 li
46.0396 40.7495 li
46.1479 40.7852 li
46.2192 40.8213 li
46.2915 40.8574 li
46.3638 40.8936 li
46.4351 40.9292 li
46.5073 40.9653 li
46.6157 41.0015 li
46.687 41.0015 li
46.7593 41.0376 li
46.8315 41.0732 li
46.9038 41.1094 li
46.9751 41.1455 li
47.0474 41.1816 li
47.1196 41.2173 li
47.1919 41.2534 li
47.2993 41.2896 li
47.3716 41.3252 li
47.4438 41.3613 li
47.5151 41.3975 li
47.5874 41.4336 li
47.6597 41.4692 li
47.731 41.5054 li
47.8032 41.5415 li
47.8755 41.5776 li
47.9478 41.6133 li
48.019 41.6494 li
48.0913 41.6855 li
48.1636 41.7217 li
48.2358 41.7573 li
48.3071 41.7935 li
48.3794 41.8296 li
48.4517 41.8657 li
48.5229 41.9014 li
48.5952 41.9375 li
48.6675 41.9736 li
48.7397 42.0098 li
48.7759 42.0454 li
48.8472 42.0815 li
48.9194 42.1177 li
48.9917 42.1533 li
49.063 42.1895 li
49.1353 42.2256 li
49.2075 42.2617 li
49.2798 42.2974 li
49.3511 42.3335 li
49.3872 42.3696 li
49.4595 42.4058 li
49.5317 42.4414 li
49.603 42.4775 li
49.6753 42.5137 li
49.7476 42.5498 li
49.7837 42.5854 li
49.855 42.6216 li
49.9272 42.6577 li
49.9995 42.6938 li
50.0718 42.7295 li
50.1069 42.7656 li
50.1792 42.8018 li
50.2515 42.8379 li
50.3237 42.8735 li
50.3589 42.9097 li
50.4312 42.9458 li
50.5034 42.9814 li
50.5757 43.0176 li
50.6118 43.0537 li
50.6831 43.0898 li
50.7554 43.1255 li
50.7915 43.1616 li
50.8638 43.1978 li
50.9351 43.2339 li
50.9712 43.2695 li
51.0435 43.3057 li
51.1157 43.3418 li
51.1519 43.3779 li
51.2231 43.4136 li
51.2593 43.4497 li
51.3315 43.4858 li
51.4038 43.522 li
51.439 43.5576 li
51.5112 43.6299 li
51.5474 43.666 li
51.6196 43.7017 li
51.6909 43.7378 li
51.7271 43.7739 li
51.7993 43.8096 li
51.8354 43.8457 li
51.9077 43.8818 li
51.9438 43.918 li
52.0151 43.9541 li
52.0513 43.9897 li
52.1235 44.0259 li
52.1597 44.062 li
52.231 44.0977 li
52.2671 44.1338 li
52.3394 44.1699 li
52.3755 44.2061 li
52.4478 44.2417 li
52.4829 44.2778 li
52.519 44.314 li
52.5913 44.3501 li
52.6274 44.4219 li
52.6997 44.458 li
52.7358 44.4941 li
52.8071 44.5298 li
52.8433 44.5659 li
52.8794 44.6021 li
52.9517 44.6382 li
52.9878 44.6738 li
53.0229 44.71 li
53.0952 44.7461 li
53.1313 44.7822 li
53.1675 44.8179 li
53.2397 44.854 li
53.2759 44.8901 li
53.311 44.9258 li
53.3472 44.9619 li
53.4194 44.998 li
53.4556 45.0698 li
53.4917 45.106 li
53.563 45.1421 li
53.5991 45.1782 li
53.6353 45.2139 li
53.6714 45.25 li
53.7075 45.2861 li
53.7798 45.3223 li
53.8159 45.3579 li
53.8511 45.394 li
53.8872 45.4302 li
53.9233 45.4663 li
53.9956 45.502 li
54.0317 45.5381 li
54.0679 45.6104 li
54.103 45.646 li
54.1392 45.6821 li
54.1753 45.7183 li
54.2114 45.7539 li
54.2476 45.79 li
54.2837 45.8262 li
54.356 45.8623 li
54.3911 45.8979 li
54.4272 45.9341 li
54.4634 45.9702 li
54.4995 46.0063 li
54.5356 46.042 li
54.5718 46.0781 li
54.6079 46.1504 li
54.644 46.186 li
54.6792 46.2222 li
54.7153 46.2583 li
54.7515 46.2944 li
54.7876 46.3301 li
54.8237 46.3662 li
54.8599 46.4023 li
54.896 46.4385 li
54.9312 46.4741 li
54.9673 46.5103 li
54.9673 46.5464 li
55.0034 46.582 li
55.0396 46.6543 li
55.0757 46.6904 li
55.1118 46.7261 li
55.1479 46.7622 li
55.1841 46.7983 li
55.2192 46.8345 li
55.2192 46.8701 li
55.2554 46.9063 li
55.2915 46.9424 li
55.3276 46.9785 li
55.3638 47.0142 li
55.3638 47.0503 li
55.3999 47.0864 li
55.436 47.1226 li
55.4722 47.1943 li
55.4722 47.2305 li
55.5073 47.2666 li
55.5435 47.3022 li
55.5796 47.3384 li
55.5796 47.3745 li
55.6157 47.4102 li
55.6519 47.4463 li
55.688 47.4824 li
55.688 47.5186 li
55.7241 47.5547 li
55.7603 47.5903 li
55.7603 47.6265 li
55.7954 47.6982 li
55.7954 47.7344 li
55.8315 47.7705 li
55.8677 47.8066 li
55.8677 47.8423 li
55.9038 47.8784 li
55.9399 47.9146 li
55.9399 47.9507 li
55.9761 47.9863 li
55.9761 48.0225 li
56.0122 48.0586 li
56.0122 48.0947 li
56.0474 48.1304 li
56.0474 48.1665 li
56.0835 48.2026 li
56.0835 48.2388 li
56.1196 48.3105 li
56.1196 48.3467 li
56.1558 48.3828 li
56.1558 48.4185 li
56.1919 48.4546 li
56.1919 48.4907 li
56.228 48.5264 li
56.228 48.5625 li
56.228 48.5986 li
56.2642 48.6348 li
56.2642 48.6704 li
56.3003 48.7065 li
56.3003 48.7427 li
56.3354 48.7788 li
56.3354 48.8145 li
56.3354 48.8867 li
56.3716 48.9229 li
56.3716 48.9585 li
56.3716 48.9946 li
56.4077 49.0308 li
56.4077 49.0669 li
56.4077 49.1025 li
56.4438 49.1387 li
56.4438 49.1748 li
56.4438 49.2109 li
56.4438 49.2466 li
56.48 49.2827 li
56.48 49.3188 li
56.48 49.3545 li
56.48 49.3906 li
56.5161 49.4268 li
56.5161 49.4629 li
56.5161 49.5347 li
56.5161 49.5708 li
56.5161 49.6069 li
56.5522 49.6426 li
56.5522 49.6787 li
56.5522 49.7148 li
56.5522 49.751 li
56.5522 49.7866 li
56.5522 49.8228 li
56.5884 49.8589 li
56.5884 49.895 li
56.5884 49.9307 li
56.5884 49.9668 li
56.5884 50.0029 li
56.5884 50.0391 li
56.5884 50.1108 li
56.5884 50.147 li
56.5884 50.1826 li
56.5884 50.2188 li
56.5884 50.2549 li
56.5884 50.291 li
56.6235 50.3267 li
56.6235 50.3628 li
56.6235 50.3989 li
56.6235 50.4351 li
56.6235 50.4707 li
56.6235 50.5068 li
56.6235 50.5791 li
56.6235 50.6147 li
56.5884 50.6509 li
56.5884 50.687 li
56.5884 50.7231 li
56.5884 50.7588 li
56.5884 50.7949 li
56.5884 50.8311 li
56.5884 50.8672 li
56.5884 50.9028 li
56.5884 50.9751 li
56.5884 51.0107 li
56.5884 51.0469 li
56.5522 51.083 li
56.5522 51.1191 li
56.5522 51.1553 li
56.5522 51.1909 li
56.5522 51.2271 li
56.5522 51.2988 li
56.5522 51.335 li
56.5161 51.3711 li
56.5161 51.4072 li
56.5161 51.4429 li
56.5161 51.479 li
56.48 51.5151 li
56.48 51.5869 li
56.48 51.623 li
56.48 51.6592 li
56.4438 51.6953 li
56.4438 51.731 li
56.4438 51.7671 li
56.4438 51.8394 li
56.4077 51.875 li
56.4077 51.9111 li
56.4077 51.9473 li
56.3716 51.9834 li
56.3716 52.019 li
56.3716 52.0913 li
56.3354 52.127 li
56.3354 52.1631 li
56.3354 52.1992 li
56.3003 52.2354 li
56.3003 52.3071 li
56.2642 52.3433 li
56.2642 52.3794 li
56.2642 52.415 li
56.228 52.4512 li
56.228 52.5234 li
56.1919 52.5591 li
56.1919 52.5952 li
56.1558 52.6313 li
56.1558 52.7031 li
56.1196 52.7393 li
56.1196 52.7754 li
56.0835 52.8115 li
56.0835 52.8472 li
56.0474 52.9194 li
56.0474 52.9551 li
56.0122 52.9912 li
56.0122 53.0273 li
55.9761 53.0991 li
55.9761 53.1353 li
55.9399 53.1714 li
55.9038 53.2075 li
55.9038 53.2793 li
55.8677 53.3154 li
55.8677 53.3516 li
55.8315 53.4233 li
55.7954 53.4595 li
55.7954 53.4956 li
55.7603 53.5313 li
55.7241 53.6035 li
55.7241 53.6396 li
55.688 53.6753 li
55.6519 53.7114 li
55.6519 53.7832 li
55.6157 53.8193 li
55.5796 53.8555 li
55.5796 53.9272 li
55.5435 53.9634 li
55.5073 53.9995 li
55.4722 54.0713 li
55.4722 54.1074 li
55.436 54.1436 li
55.3999 54.1797 li
55.3638 54.2515 li
55.3638 54.2876 li
55.3276 54.3237 li
55.2915 54.3955 li
55.2554 54.4316 li
55.2192 54.4678 li
55.2192 54.5396 li
55.1841 54.5757 li
55.1479 54.6113 li
55.1118 54.6836 li
55.0757 54.7197 li
55.0396 54.7559 li
55.0034 54.8276 li
54.9673 54.8638 li
54.9673 54.8994 li
54.9312 54.9717 li
54.896 55.0078 li
54.8599 55.0435 li
54.8237 55.1157 li
54.7876 55.1519 li
54.7515 55.1875 li
54.7153 55.2598 li
54.6792 55.2959 li
54.644 55.3677 li
54.6079 55.4038 li
54.5718 55.4399 li
54.5356 55.5117 li
54.4995 55.5479 li
54.4634 55.584 li
54.4272 55.6558 li
54.3911 55.6919 li
54.356 55.7275 li
54.3198 55.7998 li
54.3169 55.7793 li
54.4829 55.7422 54.6528 55.7236 54.8237 55.7236 cv
55.0825 55.7236 55.3403 55.7671 55.5854 55.8516 cv
55.5796 55.8677 li
55.7593 55.6157 li
55.939 55.3638 li
56.0835 55.1118 li
56.2271 54.8599 li
56.3716 54.6436 li
56.5151 54.3916 li
56.6597 54.1396 li
56.7671 53.9238 li
56.8755 53.6719 li
56.9829 53.4199 li
57.0913 53.2036 li
57.1997 52.9517 li
57.271 52.7358 li
57.3433 52.4839 li
57.4155 52.2314 li
57.4878 52.0156 li
57.5229 51.7637 li
57.5591 51.5479 li
57.5952 51.3315 li
57.6313 51.0796 li
57.6675 50.8638 li
57.6675 50.6475 li
57.6675 50.3955 li
57.6675 50.1797 li
57.6675 49.9634 li
57.6313 49.7476 li
57.5952 49.4956 li
57.5591 49.2798 li
57.5229 49.0635 li
57.4517 48.8477 li
57.3794 48.6313 li
57.3071 48.4155 li
57.2349 48.1997 li
57.1274 47.9834 li
57.0552 47.7676 li
56.9478 47.5518 li
56.8394 47.3354 li
56.6958 47.1196 li
56.5874 46.9033 li
56.4429 46.7236 li
56.2993 46.5073 li
56.1196 46.2915 li
55.9751 46.0757 li
55.7954 45.8955 li
55.6509 45.6797 li
55.4351 45.4995 li
55.2554 45.2837 li
55.0757 45.0674 li
54.8589 44.8877 li
54.6431 44.6714 li
54.4272 44.4917 li
54.2114 44.2754 li
53.9595 44.0957 li
53.7437 43.9155 li
53.4917 43.6992 li
53.2397 43.5195 li
52.9878 43.3394 li
52.6997 43.1597 li
52.4478 42.9434 li
52.1597 42.7637 li
51.8716 42.5835 li
51.5835 42.4033 li
51.2954 42.2236 li
51.0073 42.0435 li
50.6831 41.8633 li
50.3589 41.6836 li
50.0356 41.5034 li
49.7114 41.3232 li
49.3872 41.1436 li
49.0269 40.9634 li
48.7036 40.7832 li
48.3433 40.6396 li
47.9829 40.4595 li
47.6235 40.2793 li
47.2632 40.0996 li
46.9038 39.9556 li
46.5073 39.7754 li
46.1118 39.6313 li
45.7515 39.4517 li
45.355 39.3076 li
44.9595 39.1274 li
44.5269 38.9834 li
44.1313 38.8037 li
43.7349 38.6597 li
43.3032 38.4795 li
42.8716 38.3354 li
42.439 38.1914 li
42.0073 38.0117 li
41.5757 37.8677 li
41.1431 37.7236 li
40.7114 37.5796 li
40.2437 37.4355 li
39.7749 37.2915 li
39.3433 37.1475 li
38.8755 37.0034 li
38.4077 36.8594 li
37.939 36.7153 li
37.4712 36.5718 li
36.9673 36.4277 li
36.4995 36.2837 li
35.9956 36.1396 li
35.5269 36.0317 li
35.0229 35.8877 li
34.519 35.7437 li
34.0151 35.5996 li
33.5112 35.4917 li
33.0073 35.3477 li
32.5034 35.2397 li
31.9634 35.0957 li
31.4595 34.9878 li
30.9556 34.8438 li
30.4155 34.7358 li
29.8755 34.5918 li
29.3716 34.4839 li
28.8315 34.3755 li
28.2915 34.2676 li
27.7515 34.1235 li
27.2114 34.0156 li
26.6714 33.9077 li
26.1313 33.7998 li
25.5552 33.6919 li
25.0151 33.584 li
24.4751 33.4756 li
23.8989 33.3677 li
23.3589 33.2598 li
22.7837 33.1519 li
22.2075 33.0439 li
21.6675 32.936 li
21.0913 32.8276 li
20.5151 32.7559 li
19.939 32.6479 li
19.3638 32.54 li
18.7876 32.4678 li
18.2114 32.3599 li
17.6353 32.252 li
17.0591 32.1797 li
16.4829 32.0718 li
15.9077 32 li
15.3315 31.9277 li
14.7554 31.8198 li
14.1436 31.748 li
13.5674 31.6758 li
12.9917 31.5679 li
12.3794 31.4961 li
11.8037 31.4238 li
11.1914 31.3521 li
10.6157 31.2798 li
10.0034 31.208 li
9.42773 31.1357 li
8.81543 31.064 li
8.23975 30.9917 li
7.62744 30.9199 li
7.05176 30.8477 li
6.43945 30.7759 li
5.86328 30.7036 li
5.25146 30.668 li
4.67529 30.5957 li
4.06348 30.5234 li
3.45166 30.4878 li
3.45166 31.5317 li
cp
ef
3.45166 89.8154 mo
3.55957 89.7803 li
3.63184 89.708 li
3.73975 89.6719 li
3.81152 89.5996 li
3.91943 89.5635 li
3.9917 89.4922 li
4.09961 89.4561 li
4.17139 89.3838 li
4.27979 89.3477 li
4.35156 89.2754 li
4.45947 89.2402 li
4.53174 89.168 li
4.63965 89.1318 li
4.71143 89.0957 li
4.81982 89.0234 li
4.8916 88.9873 li
4.99951 88.916 li
5.07178 88.8799 li
5.17969 88.8076 li
5.25146 88.7715 li
5.35938 88.6992 li
5.43164 88.6641 li
5.53955 88.5918 li
5.64746 88.5557 li
5.71973 88.4834 li
5.82764 88.4473 li
5.89941 88.376 li
6.00781 88.3398 li
6.07959 88.2676 li
6.1875 88.2314 li
6.29541 88.1592 li
6.36768 88.124 li
6.47559 88.0518 li
6.54785 88.0156 li
6.65576 87.9434 li
6.76367 87.9072 li
6.83545 87.8359 li
6.94385 87.7998 li
7.01563 87.7275 li
7.12354 87.6914 li
7.23145 87.6191 li
7.30371 87.584 li
7.41162 87.5117 li
7.4834 87.4756 li
7.5918 87.4033 li
7.69971 87.3672 li
7.77148 87.2959 li
7.87939 87.2236 li
7.98779 87.1875 li
8.05957 87.1152 li
8.16748 87.0791 li
8.27539 87.0078 li
8.34766 86.9717 li
8.45557 86.8994 li
8.56348 86.8633 li
8.63574 86.791 li
8.74365 86.7549 li
8.85156 86.6836 li
8.92383 86.6475 li
9.03174 86.5752 li
9.13965 86.5391 li
9.24756 86.4678 li
9.31982 86.4316 li
9.42773 86.3594 li
9.53564 86.3232 li
9.60742 86.251 li
9.71582 86.1797 li
9.82373 86.1436 li
9.89551 86.0713 li
10.0034 86.0352 li
10.1118 85.9629 li
10.2197 85.9268 li
10.2915 85.8555 li
10.3994 85.8193 li
10.5078 85.7471 li
10.6157 85.7109 li
10.6875 85.6387 li
10.7959 85.6035 li
10.9038 85.5313 li
11.0117 85.459 li
11.0835 85.4229 li
11.1919 85.3516 li
11.2998 85.3154 li
11.4077 85.2432 li
11.4795 85.207 li
11.5879 85.1348 li
11.6958 85.0635 li
11.8037 85.0273 li
11.9116 84.9551 li
11.9839 84.9189 li
12.0918 84.8467 li
12.1997 84.8105 li
12.3076 84.7393 li
12.4155 84.7031 li
12.4878 84.6309 li
12.5957 84.5586 li
12.7036 84.5234 li
12.8115 84.4512 li
12.9199 84.415 li
12.9917 84.3428 li
13.0996 84.3066 li
13.2075 84.2354 li
13.3159 84.1631 li
13.4238 84.127 li
13.4956 84.0547 li
13.6035 84.0186 li
13.7119 83.9473 li
13.8198 83.9111 li
13.9277 83.8389 li
14.0356 83.7666 li
14.1079 83.7305 li
14.2158 83.6592 li
14.3237 83.623 li
14.4316 83.5508 li
14.5396 83.5146 li
14.6479 83.4424 li
14.7197 83.3711 li
14.8276 83.335 li
14.9355 83.2627 li
15.0439 83.2266 li
15.1519 83.1543 li
15.2598 83.083 li
15.3677 83.0469 li
15.4399 82.9746 li
15.5479 82.9385 li
15.6558 82.8672 li
15.7637 82.7949 li
15.7495 82.8516 li
15.7588 82.4609 15.7637 82.0703 15.7637 81.6797 cv
15.7637 81.6523 15.7637 81.624 15.7637 81.5957 cv
15.7637 81.5713 li
15.6914 81.6436 li
15.6558 81.6797 li
15.5835 81.7158 li
15.5117 81.752 li
15.4395 81.7881 li
15.3677 81.8242 li
15.2954 81.8594 li
15.2236 81.8955 li
15.1519 81.9316 li
15.0796 81.9678 li
15.0435 82.0039 li
14.9717 82.04 li
14.8994 82.0762 li
14.8276 82.1123 li
14.7559 82.1475 li
14.6836 82.1836 li
14.6118 82.2197 li
14.5396 82.2559 li
14.4678 82.292 li
14.4316 82.3643 li
14.3599 82.4004 li
14.2876 82.4355 li
14.2158 82.4717 li
14.1436 82.5078 li
14.0718 82.5439 li
13.9995 82.5801 li
13.9277 82.6162 li
13.8916 82.6523 li
13.8198 82.6885 li
13.7476 82.7236 li
13.6758 82.7598 li
13.6035 82.7959 li
13.5317 82.832 li
13.4595 82.8682 li
13.3877 82.9043 li
13.3516 82.9404 li
13.2798 82.9756 li
13.2075 83.0117 li
13.1357 83.0479 li
13.0635 83.084 li
12.9917 83.1201 li
12.9199 83.1563 li
12.8838 83.1924 li
12.8115 83.2637 li
12.7397 83.2998 li
12.6675 83.3359 li
12.5957 83.3721 li
12.5239 83.4082 li
12.4517 83.4443 li
12.4155 83.4805 li
12.3438 83.5166 li
12.2715 83.5518 li
12.1997 83.5879 li
12.1279 83.624 li
12.0557 83.6602 li
11.9839 83.6963 li
11.9478 83.7324 li
11.8755 83.7686 li
11.8037 83.8047 li
11.7319 83.8398 li
11.6597 83.876 li
11.5879 83.9121 li
11.5518 83.9482 li
11.4795 83.9844 li
11.4077 84.0205 li
11.3359 84.0566 li
11.2637 84.0918 li
11.1919 84.1279 li
11.1196 84.1641 li
11.0835 84.2002 li
11.0117 84.2363 li
10.9399 84.2725 li
10.8677 84.3086 li
10.7959 84.3447 li
10.7236 84.416 li
10.6875 84.4521 li
10.6157 84.4883 li
10.5439 84.5244 li
10.4717 84.5605 li
10.3999 84.5967 li
10.3638 84.6328 li
10.292 84.668 li
10.2197 84.7041 li
10.1479 84.7402 li
10.0757 84.7764 li
10.0039 84.8125 li
9.96777 84.8486 li
9.89551 84.8848 li
9.82373 84.9199 li
9.75195 84.9561 li
9.67969 84.9922 li
9.64355 85.0283 li
9.57178 85.0645 li
9.5 85.1006 li
9.42773 85.1367 li
9.35596 85.1729 li
9.31982 85.208 li
9.24756 85.2441 li
9.17578 85.2803 li
9.104 85.3164 li
9.03174 85.3525 li
8.99561 85.3887 li
8.92383 85.4248 li
8.85156 85.4609 li
8.77979 85.4961 li
8.70801 85.5322 li
8.67188 85.5684 li
8.59961 85.6045 li
8.52783 85.6406 li
8.45557 85.6768 li
8.41992 85.7129 li
8.34766 85.748 li
8.27588 85.7842 li
8.20361 85.8203 li
8.13184 85.8564 li
8.0957 85.8926 li
8.02393 85.9287 li
7.95166 85.9648 li
7.87988 86.001 li
7.84375 86.0361 li
7.77197 86.0723 li
7.69971 86.1084 li
7.62793 86.1445 li
7.5918 86.1807 li
7.52002 86.2168 li
7.44775 86.2529 li
7.37598 86.2891 li
7.33984 86.3242 li
7.26758 86.3604 li
7.1958 86.3965 li
7.12402 86.4326 li
7.08789 86.4688 li
7.01563 86.5049 li
6.94385 86.541 li
6.87158 86.5762 li
6.83594 86.6123 li
6.76367 86.6484 li
6.69189 86.6846 li
6.61963 86.7207 li
6.58398 86.7568 li
6.51172 86.793 li
6.43994 86.8291 li
6.36768 86.8643 li
6.33203 86.9004 li
6.25977 86.9365 li
6.18799 86.9727 li
6.15186 87.0088 li
6.07959 87.0449 li
6.00781 87.0811 li
5.93604 87.1172 li
5.8999 87.1523 li
5.82764 87.1885 li
5.75586 87.2246 li
5.68359 87.2607 li
5.64795 87.2969 li
5.57568 87.333 li
5.50391 87.3691 li
5.46777 87.4043 li
5.396 87.4404 li
5.32373 87.4766 li
5.2876 87.5127 li
5.21582 87.5488 li
5.14404 87.585 li
5.07178 87.6211 li
5.03564 87.6572 li
4.96387 87.6924 li
4.8916 87.7285 li
4.85596 87.7646 li
4.78369 87.8008 li
4.71191 87.8369 li
4.67578 87.873 li
4.604 87.9092 li
4.53174 87.9453 li
4.49561 87.9805 li
4.42383 88.0166 li
4.35205 88.0527 li
4.31592 88.0889 li
4.24365 88.125 li
4.17188 88.1611 li
4.13574 88.1973 li
4.06396 88.2324 li
3.9917 88.2686 li
3.95605 88.3047 li
3.88379 88.3408 li
3.81201 88.377 li
3.77588 88.4131 li
3.70361 88.4492 li
3.63184 88.4854 li
3.5957 88.5205 li
3.52393 88.5566 li
3.45166 88.5928 li
3.45166 89.8154 li
cp
ef
91.6509 112.964 mo
91.7231 112.784 li
91.7954 112.604 li
91.8667 112.424 li
91.939 112.244 li
91.9751 112.063 li
92.0474 111.884 li
92.1187 111.704 li
92.1909 111.523 li
92.2271 111.344 li
92.2993 111.164 li
92.3716 110.983 li
92.4429 110.804 li
92.5151 110.624 li
92.5513 110.443 li
92.6235 110.264 li
92.6948 110.084 li
92.7671 109.904 li
92.8394 109.724 li
92.8755 109.544 li
92.9468 109.364 li
93.019 109.184 li
93.0913 109.004 li
93.1626 108.824 li
93.1987 108.644 li
93.271 108.464 li
93.3433 108.284 li
93.4146 108.104 li
93.4507 107.924 li
93.5229 107.744 li
93.5952 107.563 li
93.6675 107.348 li
93.7388 107.168 li
93.7749 106.988 li
93.8472 106.808 li
93.9194 106.628 li
93.9907 106.448 li
94.0269 106.268 li
94.0991 106.088 li
94.1714 105.908 li
94.2427 105.728 li
94.2788 105.548 li
94.3511 105.368 li
94.4233 105.188 li
94.4946 105.008 li
94.5669 104.828 li
94.603 104.647 li
94.6753 104.468 li
94.7466 104.288 li
94.8188 104.107 li
94.855 103.928 li
94.9272 103.748 li
94.9985 103.567 li
95.0708 103.388 li
95.1069 103.208 li
95.1792 103.027 li
95.2505 102.848 li
95.2866 102.668 li
95.3589 102.488 li
95.4312 102.308 li
95.5034 102.128 li
95.5386 101.948 li
95.6108 101.768 li
95.6831 101.588 li
95.7192 101.408 li
95.7905 101.228 li
95.8628 101.048 li
95.9351 100.868 li
95.9712 100.688 li
96.0425 100.508 li
96.1147 100.328 li
96.1509 100.147 li
96.2231 99.9678 li
96.2954 99.7881 li
96.3667 99.6074 li
96.4028 99.4277 li
96.4751 99.2842 li
96.5474 99.1035 li
96.5825 98.9238 li
96.6548 98.7441 li
96.7271 98.5635 li
96.7632 98.3838 li
96.8345 98.2041 li
96.9067 98.0234 li
96.9429 97.8438 li
97.0151 97.6641 li
97.0864 97.4834 li
97.1226 97.3037 li
97.1948 97.124 li
97.231 96.9434 li
97.3032 96.7637 li
97.3745 96.584 li
97.4106 96.4043 li
97.4829 96.2236 li
97.5552 96.0439 li
97.5913 95.8643 li
97.6626 95.7197 li
97.7349 95.54 li
97.771 95.3594 li
97.8433 95.1797 li
97.8784 95 li
97.9507 94.8203 li
97.9868 94.6396 li
98.0591 94.46 li
98.1313 94.2803 li
98.1665 94.0996 li
98.2388 93.9199 li
98.2749 93.7402 li
98.3472 93.5596 li
98.4185 93.416 li
98.4546 93.2363 li
98.5269 93.0557 li
98.563 92.876 li
98.6353 92.6963 li
98.6704 92.5156 li
98.7427 92.3359 li
98.7788 92.1563 li
98.8511 91.9756 li
98.8872 91.832 li
98.9585 91.6523 li
99.0308 91.4717 li
99.0669 91.292 li
99.1392 91.1123 li
99.1743 90.9316 li
99.2466 90.752 li
99.2827 90.5723 li
99.3188 90.4277 li
99.3911 90.248 li
99.4272 90.0684 li
99.4985 89.8877 li
99.5347 89.708 li
99.6069 89.5283 li
99.6431 89.3838 li
99.7144 89.2041 li
99.7505 89.0234 li
99.8228 88.8438 li
99.8589 88.6641 li
99.9312 88.4834 li
99.9673 88.3398 li
100.002 88.1602 li
100.075 87.9795 li
100.111 87.7998 li
100.183 87.6201 li
100.219 87.4756 li
100.254 87.2959 li
100.327 87.1162 li
100.363 86.9355 li
100.435 86.7559 li
100.471 86.6123 li
100.506 86.4316 li
100.579 86.252 li
100.615 86.0723 li
100.651 85.8916 li
100.723 85.748 li
100.758 85.5684 li
100.794 85.3877 li
100.867 85.208 li
100.903 85.0635 li
100.939 84.8838 li
101.01 84.7041 li
101.046 84.5234 li
101.083 84.3799 li
101.119 84.2002 li
101.191 84.0195 li
101.227 83.8398 li
101.263 83.6963 li
101.334 83.5156 li
101.371 83.3359 li
101.407 83.1563 li
101.443 83.0117 li
101.515 82.832 li
101.55 82.6523 li
101.586 82.5078 li
101.623 82.3281 li
101.659 82.1475 li
101.731 82.0039 li
101.767 81.8242 li
101.802 81.6436 li
101.838 81.5 li
101.875 81.3198 li
101.947 81.1401 li
101.983 80.9961 li
102.019 80.8159 li
102.055 80.6357 li
102.09 80.4922 li
102.126 80.312 li
102.163 80.1318 li
102.235 79.9878 li
102.271 79.8081 li
102.307 79.6279 li
102.342 79.4839 li
102.378 79.3037 li
102.415 79.124 li
102.451 78.98 li
102.487 78.7998 li
102.523 78.6558 li
102.559 78.4761 li
102.594 78.2959 li
102.63 78.1519 li
102.667 77.9722 li
102.703 77.8281 li
102.739 77.6479 li
102.775 77.4678 li
102.811 77.3242 li
102.846 77.144 li
102.882 77 li
102.918 76.8198 li
102.955 76.6758 li
102.991 76.4961 li
103.027 76.3521 li
103.063 76.1719 li
103.099 75.9922 li
103.134 75.8481 li
103.17 75.668 li
103.207 75.5239 li
103.243 75.3442 li
103.279 75.2002 li
103.279 75.02 li
103.315 74.876 li
103.351 74.6958 li
103.386 74.5522 li
103.422 74.3721 li
103.458 74.228 li
103.495 74.0479 li
103.495 73.9043 li
103.531 73.7241 li
103.567 73.5801 li
103.603 73.436 li
103.638 73.2559 li
103.638 73.1123 li
103.674 72.9321 li
103.71 72.7881 li
103.747 72.6079 li
103.747 72.4639 li
103.783 72.2842 li
103.819 72.1401 li
103.855 71.9961 li
103.855 71.8159 li
103.891 71.6719 li
103.926 71.4922 li
103.926 71.3481 li
103.962 71.2041 li
103.999 71.0239 li
103.999 70.8799 li
104.035 70.7363 li
104.071 70.5562 li
104.071 70.4121 li
104.107 70.2319 li
104.107 70.0879 li
104.143 69.9443 li
104.178 69.7642 li
104.178 69.6201 li
104.214 69.4761 li
104.214 69.2959 li
104.25 69.1523 li
104.25 69.0083 li
104.287 68.8643 li
104.287 68.6841 li
104.323 68.54 li
104.323 68.396 li
104.359 68.2163 li
104.359 68.0723 li
104.395 67.9282 li
104.395 67.7842 li
104.43 67.604 li
104.43 67.46 li
104.466 67.3164 li
104.466 67.1724 li
104.466 66.9922 li
104.502 66.8481 li
104.502 66.7041 li
104.502 66.5601 li
104.539 66.3804 li
104.539 66.2363 li
104.539 66.0923 li
104.575 65.9482 li
104.575 65.8042 li
104.575 65.624 li
104.611 65.4805 li
104.611 65.3364 li
104.611 65.1924 li
104.647 65.0483 li
104.647 64.9043 li
104.647 64.7603 li
104.647 64.5801 li
104.647 64.4365 li
104.682 64.2925 li
104.682 64.1484 li
104.682 64.0044 li
104.682 63.8604 li
104.682 63.7163 li
104.682 63.5723 li
104.718 63.4282 li
104.718 63.2485 li
104.718 63.1045 li
104.718 62.9604 li
104.718 62.8164 li
104.718 62.6724 li
104.718 62.5283 li
104.718 62.3843 li
104.718 62.2402 li
104.718 62.0962 li
104.718 61.9521 li
104.718 61.8086 li
104.718 61.6646 li
104.718 61.5205 li
104.718 61.3765 li
104.718 61.2324 li
104.718 61.0884 li
104.718 60.9443 li
104.718 60.8003 li
104.718 60.6563 li
104.718 60.5127 li
104.718 60.3687 li
104.682 60.2246 li
104.682 60.0806 li
104.682 59.9365 li
104.682 59.8286 li
104.682 59.6846 li
104.682 59.5405 li
104.647 59.3965 li
104.647 59.2524 li
104.647 59.1084 li
104.647 58.9644 li
104.611 58.8203 li
104.611 58.6768 li
104.611 58.5684 li
104.611 58.4243 li
104.575 58.2808 li
104.575 58.1367 li
104.575 57.9927 li
104.539 57.8486 li
104.539 57.7407 li
104.539 57.5967 li
104.502 57.4526 li
104.502 57.3086 li
104.466 57.1646 li
104.466 57.0566 li
104.43 56.9126 li
104.43 56.7686 li
104.395 56.6245 li
104.395 56.5166 li
104.359 56.3726 li
104.359 56.2285 li
104.323 56.0845 li
104.323 55.9766 li
104.287 55.8325 li
104.287 55.6885 li
104.25 55.5806 li
104.25 55.4365 li
104.214 55.2925 li
104.178 55.1846 li
104.178 55.0405 li
104.143 54.8965 li
104.107 54.7886 li
104.107 54.6445 li
104.071 54.501 li
104.035 54.3926 li
103.999 54.249 li
103.999 54.105 li
103.962 53.9966 li
103.926 53.8525 li
103.926 53.7446 li
103.891 53.6006 li
103.855 53.457 li
103.819 53.3486 li
103.783 53.2051 li
103.747 53.0967 li
103.71 52.9526 li
103.71 52.8447 li
103.674 52.7007 li
103.638 52.5928 li
103.603 52.4487 li
103.567 52.3408 li
103.531 52.1968 li
103.495 52.0889 li
103.458 51.9448 li
103.422 51.8369 li
103.386 51.6929 li
103.351 51.585 li
103.315 51.4771 li
103.279 51.333 li
103.243 51.2251 li
103.17 51.0811 li
103.134 50.9731 li
103.099 50.8291 li
103.063 50.7212 li
103.027 50.6133 li
102.991 50.4692 li
102.918 50.3608 li
102.882 50.2529 li
102.846 50.1089 li
102.811 50.001 li
102.739 49.8931 li
102.703 49.749 li
102.667 49.6411 li
102.63 49.5332 li
102.559 49.3892 li
102.523 49.2813 li
102.487 49.1733 li
102.415 49.0649 li
102.378 48.9214 li
102.307 48.813 li
102.271 48.7051 li
102.199 48.5972 li
102.163 48.4893 li
102.126 48.3452 li
102.055 48.2373 li
102.019 48.1294 li
101.947 48.0215 li
101.911 47.9131 li
101.838 47.8052 li
101.767 47.6611 li
101.731 47.5532 li
101.659 47.4453 li
101.623 47.3374 li
101.55 47.2295 li
101.479 47.1211 li
101.443 47.0132 li
101.371 46.9053 li
101.298 46.7974 li
101.263 46.6895 li
101.191 46.5454 li
101.119 46.4375 li
101.083 46.3296 li
101.01 46.2217 li
100.939 46.1133 li
100.867 46.0054 li
100.794 45.8975 li
100.758 45.7896 li
100.687 45.6816 li
100.615 45.5732 li
100.542 45.5015 li
100.471 45.3936 li
100.399 45.2856 li
100.327 45.1777 li
100.254 45.0693 li
100.219 44.9614 li
100.147 44.8535 li
100.075 44.7456 li
100.002 44.6377 li
99.9312 44.5298 li
99.8589 44.4575 li
99.7866 44.3496 li
99.7144 44.2417 li
99.6431 44.1338 li
99.5708 44.0254 li
99.4985 43.9175 li
99.3911 43.8457 li
99.3188 43.7378 li
99.2466 43.6299 li
99.1743 43.5215 li
99.103 43.4136 li
99.0308 43.3418 li
98.9585 43.2339 li
98.8511 43.1255 li
98.7788 43.0176 li
98.7065 42.9458 li
98.6353 42.8379 li
98.563 42.7295 li
98.4546 42.6577 li
98.3833 42.5498 li
98.311 42.4419 li
98.2388 42.334 li
98.1304 42.2617 li
98.0591 42.1538 li
97.9868 42.0815 li
97.8784 41.9736 li
97.8071 41.8657 li
97.7349 41.7939 li
97.6265 41.6855 li
97.5552 41.5776 li
97.4468 41.5059 li
97.3745 41.3979 li
97.2671 41.3257 li
97.1948 41.2178 li
97.1226 41.1455 li
97.0151 41.0376 li
96.9429 40.9297 li
96.8345 40.8579 li
96.7632 40.75 li
96.6548 40.6777 li
96.5464 40.5698 li
96.4751 40.4976 li
96.3667 40.3896 li
96.2944 40.3179 li
96.187 40.21 li
96.1147 40.1377 li
96.0063 40.0659 li
95.8989 39.958 li
95.8267 39.8857 li
95.7192 39.7778 li
95.6108 39.7056 li
95.5386 39.5977 li
95.4312 39.5259 li
95.3228 39.4536 li
95.2505 39.3457 li
95.1431 39.2739 li
95.0347 39.1655 li
94.9272 39.0938 li
94.855 39.0215 li
94.7466 38.9136 li
94.6392 38.8418 li
94.5308 38.7695 li
94.4224 38.6616 li
94.3511 38.5898 li
94.2427 38.5176 li
94.1353 38.4097 li
94.0269 38.3379 li
93.9185 38.2656 li
93.811 38.1938 li
93.7026 38.0859 li
93.5952 38.0137 li
93.5229 37.9414 li
93.4146 37.8696 li
93.3071 37.7617 li
93.1987 37.6895 li
93.0903 37.6177 li
92.9829 37.5454 li
92.8745 37.4375 li
92.7671 37.3657 li
92.6587 37.2935 li
92.5513 37.2217 li
92.4429 37.1494 li
92.3345 37.0776 li
92.2271 37.0054 li
92.0825 36.8975 li
91.9751 36.8257 li
91.8667 36.7534 li
91.7583 36.6816 li
91.6509 36.6094 li
91.5425 36.5376 li
91.4351 36.4653 li
91.3267 36.3936 li
91.1831 36.2856 li
91.0747 36.2134 li
90.9663 36.1416 li
90.8589 36.0693 li
90.7505 35.9976 li
90.6069 35.9253 li
90.4985 35.8535 li
90.3911 35.7813 li
90.2827 35.7095 li
90.1392 35.6372 li
90.0308 35.5654 li
89.9224 35.4932 li
89.8149 35.4214 li
89.6704 35.3496 li
89.563 35.2773 li
89.4546 35.2051 li
89.311 35.1333 li
89.2026 35.0615 li
89.0942 34.9893 li
88.9507 34.9175 li
88.8423 34.8452 li
88.6987 34.7734 li
88.5903 34.7373 li
88.4829 34.665 li
88.3384 34.5933 li
88.231 34.521 li
88.0864 34.4492 li
87.979 34.377 li
87.8345 34.3052 li
87.7271 34.2334 li
87.5825 34.1611 li
87.4751 34.125 li
87.3306 34.0532 li
87.2231 33.981 li
87.0786 33.9092 li
86.9712 33.8369 li
86.8267 33.7651 li
86.6831 33.729 li
86.5747 33.6572 li
86.4312 33.585 li
86.3228 33.5132 li
86.1782 33.4409 li
86.1792 33.4399 li
86.7554 34.9517 li
86.7554 34.9517 li
87.2231 35.168 li
87.6548 35.4199 li
88.0874 35.6357 li
88.519 35.8877 li
88.9155 36.1396 li
89.3472 36.3921 li
89.7427 36.644 li
90.1753 36.896 li
90.5708 37.1479 li
90.9673 37.3999 li
91.3628 37.688 li
91.7231 37.9399 li
92.1187 38.228 li
92.479 38.48 li
92.8755 38.7681 li
93.2349 39.0557 li
93.5952 39.3438 li
93.9194 39.6318 li
94.2788 39.9199 li
94.603 40.208 li
94.9634 40.5317 li
95.2876 40.8198 li
95.6108 41.144 li
95.9351 41.4316 li
96.2231 41.7559 li
96.5474 42.0796 li
96.8354 42.4038 li
97.1235 42.728 li
97.4106 43.0518 li
97.6987 43.376 li
97.9868 43.6997 li
98.2388 44.0596 li
98.5269 44.3838 li
98.7788 44.7437 li
99.0308 45.104 li
99.2476 45.4639 li
99.4995 45.8237 li
99.7153 46.1836 li
99.9673 46.5439 li
100.183 46.9038 li
100.363 47.2998 li
100.579 47.6597 li
100.795 48.0557 li
100.975 48.4517 li
101.155 48.8477 li
101.335 49.2437 li
101.515 49.6396 li
101.659 50.0356 li
101.839 50.4316 li
101.983 50.8638 li
102.127 51.2598 li
102.271 51.6919 li
102.379 52.124 li
102.523 52.5557 li
102.631 52.9878 li
102.739 53.4199 li
102.847 53.8521 li
102.956 54.3198 li
103.027 54.752 li
103.135 55.2197 li
103.208 55.6519 li
103.279 56.1201 li
103.351 56.5879 li
103.387 57.0557 li
103.459 57.5239 li
103.495 58.0278 li
103.531 58.4961 li
103.567 58.9639 li
103.603 59.4678 li
103.639 59.936 li
103.639 60.4399 li
103.639 60.9438 li
103.675 61.4478 li
103.675 61.9517 li
103.675 62.4556 li
103.639 62.96 li
103.639 63.4639 li
103.603 64.0039 li
103.603 64.5078 li
103.567 65.0479 li
103.531 65.5879 li
103.495 66.0918 li
103.459 66.6318 li
103.387 67.1719 li
103.351 67.7119 li
103.279 68.252 li
103.208 68.792 li
103.135 69.3315 li
103.063 69.9077 li
102.991 70.4478 li
102.919 70.9878 li
102.847 71.564 li
102.739 72.104 li
102.631 72.6797 li
102.559 73.2559 li
102.451 73.832 li
102.343 74.3716 li
102.235 74.9478 li
102.127 75.5239 li
101.983 76.0996 li
101.875 76.6758 li
101.731 77.2881 li
101.624 77.8638 li
101.479 78.4399 li
101.335 79.0518 li
101.191 79.6279 li
101.047 80.2397 li
100.903 80.8159 li
100.759 81.4277 li
100.615 82.0039 li
100.471 82.6162 li
100.292 83.2275 li
100.147 83.8398 li
99.9673 84.416 li
99.7876 85.0283 li
99.6431 85.6396 li
99.4634 86.252 li
99.2827 86.8643 li
99.103 87.4756 li
98.9233 88.124 li
98.7427 88.7363 li
98.563 89.3477 li
98.3472 89.96 li
98.1675 90.6084 li
97.9868 91.2197 li
97.771 91.832 li
97.5913 92.4805 li
97.3755 93.0918 li
97.1948 93.7402 li
96.979 94.3516 li
96.7632 95 li
96.5835 95.6123 li
96.3667 96.2598 li
96.1509 96.9082 li
95.9351 97.5195 li
95.7192 98.168 li
95.5034 98.8164 li
95.2876 99.4277 li
95.0708 100.076 li
94.855 100.724 li
94.6392 101.372 li
94.4233 101.984 li
94.2075 102.632 li
93.9556 103.28 li
93.7388 103.928 li
93.5229 104.576 li
93.3071 105.224 li
93.0552 105.872 li
92.8394 106.52 li
92.6235 107.168 li
92.3716 107.815 li
92.1548 108.428 li
91.9028 109.076 li
91.687 109.724 li
91.4712 110.372 li
91.2192 111.02 li
91.0034 111.668 li
90.7515 112.315 li
90.5356 112.964 li
91.6509 112.964 li
cp
ef
.036 lw
82.2915 46.6519 mo
80.4907 46.6519 li
0 0 0 1 cmyk
@
72.7153 37.5439 mo
72.355 38.8037 li
75.7749 38.8037 li
75.7729 38.8008 li
76.1362 38.3706 76.6558 38.1025 77.2173 38.0552 cv
77.2153 38.0479 li
80.1675 37.7959 li
78.2593 32.936 li
72.7153 36.5 li
72.7261 36.4971 li
72.7661 36.6631 72.7876 36.833 72.7876 37.0039 cv
72.7876 37.1855 72.7642 37.3667 72.7173 37.543 cv
72.7153 37.5439 li
cp
80.4907 46.6519 mo
82.7954 40.3159 li
84.3433 42.9438 li
84.3335 42.9331 li
83.1548 43.8281 82.4077 45.1782 82.2759 46.6523 cv
80.4907 46.6519 li
cp
79.231 40.5679 mo
81.3911 40.3521 li
79.771 44.8159 li
78.5474 41.6479 li
78.5317 41.6538 li
78.4946 41.5605 78.4751 41.4604 78.4751 41.3599 cv
78.4751 40.9365 78.8081 40.5879 79.231 40.5688 cv
79.231 40.5679 li
cp
75.4155 40.9639 mo
76.7114 44.312 li
76.7114 44.312 li
71.8149 40.856 li
72.0308 40.1357 li
75.271 40.1357 li
75.271 40.1348 li
75.271 40.147 75.271 40.1597 75.271 40.1719 cv
75.271 40.4419 75.3228 40.71 75.4233 40.9604 cv
75.4155 40.9639 li
cp
68.2876 47.5879 mo
68.3208 47.6128 li
68.2856 47.6201 68.2505 47.624 68.2153 47.624 cv
67.937 47.624 67.7114 47.3979 67.7114 47.1196 cv
67.7114 46.9409 67.8062 46.7749 67.9604 46.6846 cv
67.9624 46.6836 li
68.6782 46.2051 69.1919 45.4746 69.4038 44.6343 cv
69.439 44.6357 li
69.6909 43.7358 li
69.6919 43.7422 li
69.2368 43.5479 68.7466 43.4478 68.2515 43.4478 cv
66.2241 43.4478 64.5786 45.0928 64.5786 47.1196 cv
64.5786 49.147 66.2241 50.792 68.2515 50.792 cv
70.2778 50.792 71.9233 49.147 71.9233 47.1196 cv
71.9233 46.146 71.5366 45.2119 70.8472 44.5234 cv
70.8433 44.5278 li
70.5552 45.644 li
70.4888 45.6431 li
70.2036 46.6768 69.3618 47.4561 68.3198 47.6499 cv
68.2876 47.5879 li
cp
86.2515 43.6641 mo
88.1235 46.9038 li
88.1099 46.9102 li
88.1421 46.9751 88.1587 47.0469 88.1587 47.1196 cv
88.1587 47.3779 87.9497 47.5879 87.6909 47.5879 cv
87.6909 47.624 li
83.8755 47.624 li
83.8735 47.6245 li
84.1255 49.4399 85.6782 50.792 87.5112 50.792 cv
89.5376 50.792 91.1831 49.147 91.1831 47.1196 cv
91.1831 45.0928 89.5376 43.4478 87.5112 43.4478 cv
87.0825 43.4478 86.6577 43.5229 86.2554 43.6694 cv
86.2515 43.6641 li
cp
83.8755 46.6519 mo
86.4673 46.6519 li
85.1353 44.312 li
85.1021 44.3486 li
84.4224 44.9395 83.9829 45.7598 83.8687 46.6533 cv
83.8755 46.6519 li
cp
70.0513 42.2236 mo
70.0835 42.1934 li
69.4966 41.9756 68.8765 41.8638 68.2515 41.8638 cv
65.3501 41.8638 62.9946 44.2188 62.9946 47.1196 cv
62.9946 50.021 65.3501 52.376 68.2515 52.376 cv
71.1528 52.376 73.5073 50.021 73.5073 47.1196 cv
73.5073 45.4116 72.6772 43.8096 71.2808 42.8247 cv
71.2749 42.8359 li
71.4556 42.2236 li
77.5747 46.5078 li
78.3315 48.3799 li
77.0708 48.8477 li
77.0767 48.8608 li
76.8335 48.9609 76.6753 49.1973 76.6753 49.46 cv
76.6753 49.8174 76.9653 50.1079 77.3228 50.1079 cv
77.4077 50.1079 77.4917 50.0913 77.5698 50.0591 cv
77.5747 50.1079 li
81.2827 48.6318 li
80.8872 47.624 li
82.2915 47.624 li
82.2798 47.6235 li
82.5386 50.3188 84.8032 52.376 87.5112 52.376 cv
90.4126 52.376 92.7671 50.021 92.7671 47.1196 cv
92.7671 44.2188 90.4126 41.8638 87.5112 41.8638 cv
86.8052 41.8638 86.1069 42.0059 85.4575 42.2817 cv
85.4595 42.2959 li
84.1987 40.0996 li
84.3071 40.0996 li
84.3071 40.0933 li
85.1226 40.019 85.7476 39.335 85.7476 38.5156 cv
85.7476 38.3188 85.7104 38.124 85.6392 37.9404 cv
85.6392 37.9399 li
82.5073 29.9116 li
82.5073 29.9126 li
82.27 29.3042 81.6841 28.9038 81.0308 28.9038 cv
80.7251 28.9038 80.4253 28.9927 80.1685 29.1592 cv
80.1675 29.1558 li
70.5552 35.3838 li
70.561 35.356 li
70.2446 35.5508 70.0513 35.9033 70.0513 36.2837 cv
70.0513 36.8799 70.519 37.3638 71.0952 37.3638 cv
71.2036 37.3638 71.311 37.3462 71.4146 37.312 cv
71.4194 37.292 li
70.0874 42.2236 li
70.0513 42.2236 li
cp
78.4028 24.7637 mo
78.4028 24.7637 li
79.7144 24.7637 80.7788 25.8281 80.7788 27.1396 cv
80.7788 28.4512 79.7144 29.5156 78.4028 29.5156 cv
77.0913 29.5156 76.0269 28.4512 76.0269 27.1396 cv
76.0269 25.8281 77.0913 24.7637 78.4028 24.7637 cv
78.4028 24.7637 li
cp
0 0 0 0 cmyk
ef
37.2554 63.248 mo
37.2622 63.2358 li
37.2271 63.2202 37.187 63.2119 37.147 63.2119 cv
37.0083 63.2119 36.895 63.3086 36.895 63.4277 cv
36.895 63.4761 36.9136 63.5225 36.9487 63.5605 cv
37.2554 63.248 li
cp
37.9038 65.5156 mo
37.937 65.5093 li
37.6694 64.8291 37.3364 64.1768 36.9438 63.5601 cv
37.9038 65.5156 li
cp
37.9751 65.48 mo
37.9409 65.5146 li
37.9927 65.6045 38.0884 65.6597 38.1909 65.6597 cv
38.2417 65.6597 38.2905 65.647 38.3345 65.6221 cv
37.9751 65.48 li
cp
39.6313 64.9399 mo
39.5962 64.9058 li
39.1851 65.1274 38.7876 65.375 38.4067 65.6465 cv
39.6313 64.9399 li
cp
39.5591 64.8677 mo
39.5874 64.8887 li
39.6362 64.8643 39.6675 64.8145 39.6675 64.7598 cv
39.6675 64.6938 39.6226 64.6362 39.5581 64.6201 cv
39.5591 64.8677 li
cp
39.0552 64.0757 mo
39.0249 64.1089 li
39.1274 64.335 39.3228 64.5063 39.5601 64.5786 cv
39.0552 64.0757 li
cp
38.9829 64.1118 mo
38.9985 64.106 li
38.98 64.0752 38.9526 64.0493 38.9175 64.0313 cv
38.9829 64.1118 li
cp
37.2554 63.2119 mo
38.9116 64.0039 li
37.2554 63.2119 li
37.2554 63.2119 li
cp
37.2554 63.2119 mo
38.9116 64.0039 li
38.9175 64.0313 li
38.9526 64.0493 38.98 64.0752 38.9985 64.106 cv
39.0249 64.1089 li
39.1274 64.335 39.3228 64.5063 39.5601 64.5786 cv
39.5581 64.6201 li
39.6226 64.6362 39.6675 64.6938 39.6675 64.7598 cv
39.6675 64.8145 39.6362 64.8643 39.5874 64.8887 cv
39.5962 64.9058 li
39.1851 65.1274 38.7876 65.375 38.4067 65.6465 cv
38.3345 65.6221 li
38.2905 65.647 38.2417 65.6597 38.1909 65.6597 cv
38.0884 65.6597 37.9927 65.6045 37.9409 65.5146 cv
37.937 65.5093 li
37.6694 64.8291 37.3364 64.1768 36.9438 63.5601 cv
36.9487 63.5605 li
36.9136 63.5225 36.895 63.4761 36.895 63.4277 cv
36.895 63.3086 37.0083 63.2119 37.147 63.2119 cv
37.187 63.2119 37.2271 63.2202 37.2622 63.2358 cv
37.2554 63.2119 li
cp
36.6069 51.98 mo
36.6069 53.1318 li
36.6069 53.1318 li
36.6069 53.376 36.4839 53.6035 36.2788 53.7363 cv
36.2837 53.7437 li
35.7437 54.0679 li
35.7505 54.0869 li
35.7017 54.1172 35.6714 54.1797 35.6714 54.248 cv
35.6714 54.248 li
35.6714 54.4277 li
35.6714 54.4277 li
35.6714 54.5459 35.7231 54.6563 35.8101 54.7236 cv
35.8149 54.7158 li
36.1392 54.9678 li
36.1519 54.9502 li
36.3452 55.0879 36.4888 55.2852 36.5591 55.5127 cv
36.5581 55.5371 li
37.1157 57.2729 37.3989 59.085 37.3989 60.9077 cv
37.3989 60.9487 37.3989 60.9897 37.3989 61.0303 cv
37.3989 61.0156 li
37.3989 61.1382 37.4556 61.2534 37.5522 61.3281 cv
37.5435 61.3398 li
39.7397 63.104 li
39.7134 63.1279 li
39.8618 63.252 40.0493 63.3198 40.2437 63.3198 cv
40.2788 63.3198 40.3149 63.3174 40.3501 63.313 cv
40.353 63.2915 li
40.3999 63.2866 40.4478 63.2837 40.4956 63.2837 cv
40.7681 63.2837 41.0347 63.3701 41.2554 63.5298 cv
41.2378 63.5166 li
41.2827 63.5522 41.3384 63.5718 41.395 63.5718 cv
41.4624 63.5718 41.5259 63.5454 41.5737 63.498 cv
41.5854 63.4663 li
42.7515 62.3555 43.9946 61.3276 45.3042 60.3896 cv
45.3521 60.3384 li
46.9722 59.1865 48.9116 58.5679 50.8989 58.5679 cv
51.4565 58.5679 52.0132 58.6167 52.562 58.7134 cv
52.5552 58.7119 li
54.7515 57.8838 li
54.7554 57.8589 li
54.7769 57.8516 54.8003 57.8477 54.8237 57.8477 cv
54.9429 57.8477 55.0396 57.9448 55.0396 58.064 cv
55.0396 58.0869 55.0356 58.1099 55.0278 58.1318 cv
55.0513 58.1353 li
54.9028 58.3477 54.7456 58.5537 54.5796 58.7529 cv
54.5688 58.749 li
54.855 58.8984 55.1313 59.0654 55.397 59.2485 cv
55.397 59.2085 li
55.2056 59.2134 55.0151 59.2158 54.8237 59.2158 cv
54.811 59.2158 54.7974 59.2158 54.7847 59.2158 cv
54.7866 59.2544 li
54.7749 59.2529 54.7632 59.252 54.7515 59.252 cv
54.6118 59.252 54.4995 59.3647 54.4995 59.5039 cv
54.4995 59.543 54.5083 59.5815 54.5259 59.6167 cv
54.5356 59.6118 li
55.1118 61.2319 li
55.0884 61.2256 li
55.1509 61.4009 55.1831 61.5859 55.1831 61.772 cv
55.1831 61.8311 55.1802 61.8906 55.1733 61.9497 cv
55.1851 61.9771 li
55.1362 62.4468 55.1118 62.9194 55.1118 63.3916 cv
55.1118 64.7725 55.3228 66.1455 55.7378 67.4624 cv
55.731 67.4209 li
55.7495 67.48 55.7593 67.542 55.7593 67.604 cv
55.7593 67.7046 55.7349 67.8032 55.687 67.8921 cv
55.6997 67.8965 li
55.5083 68.2524 55.3472 68.623 55.2173 69.0054 cv
55.2026 69.002 li
55.1587 69.1343 55.0347 69.2236 54.895 69.2236 cv
54.8716 69.2236 54.8481 69.2212 54.8257 69.2163 cv
54.8228 69.1973 li
54.4565 69.1294 54.1255 68.9346 53.8892 68.6475 cv
53.8882 68.647 li
53.771 68.7764 53.6743 68.9229 53.6021 69.0825 cv
53.606 69.0688 li
53.2222 68.833 52.9878 68.4146 52.9878 67.9639 cv
52.9878 67.9395 52.9878 67.9155 52.9897 67.8916 cv
52.9878 67.8848 li
52.9897 67.6011 53.0063 67.3174 53.0356 67.0352 cv
53.022 67.0273 li
53.0229 67.0156 53.0229 67.0039 53.0229 66.9917 cv
53.0229 66.833 52.9194 66.6929 52.7671 66.647 cv
52.7749 66.6162 li
52.1187 66.4316 51.5356 66.0493 51.105 65.521 cv
51.0845 65.5488 li
51.0454 65.4834 50.9751 65.4438 50.8989 65.4438 cv
50.7798 65.4438 50.6831 65.5405 50.6831 65.6597 cv
50.6802 65.667 li
50.5132 67.5005 49.8228 69.2476 48.6919 70.7002 cv
48.6978 70.6953 li
48.6313 70.7783 48.5952 70.8813 48.5952 70.9878 cv
48.5952 71 48.5962 71.0117 48.5972 71.0239 cv
48.5923 71.0156 li
48.5942 71.1025 48.5952 71.189 48.5952 71.2759 cv
48.5952 72.4175 48.3989 73.5503 48.0142 74.625 cv
48.021 74.624 li
47.9956 74.7056 47.9829 74.7905 47.9829 74.876 cv
47.9829 75.0889 48.062 75.2939 48.2026 75.4478 cv
48.1997 75.4517 li
51.6909 79.0518 li
51.6558 79.0503 li
52.0493 79.4292 52.3188 79.918 52.4282 80.4531 cv
52.4409 80.4546 li
52.5103 80.7397 52.5552 81.0303 52.5767 81.3232 cv
52.5933 81.3267 li
53.0415 82.4424 53.5747 83.5215 54.189 84.5557 cv
54.2231 84.5889 li
54.3335 84.7764 54.3911 84.9902 54.3911 85.208 cv
54.3911 85.2813 54.3843 85.3545 54.3716 85.4268 cv
54.3628 85.4219 li
54.1743 86.6016 53.7222 87.7236 53.0405 88.7041 cv
53.0278 88.7041 li
53.0073 88.7246 52.98 88.7354 52.9517 88.7354 cv
52.9224 88.7354 52.895 88.7246 52.8745 88.7041 cv
52.8667 88.748 li
52.2466 88.1787 51.8442 87.4111 51.7271 86.5781 cv
51.728 86.5752 li
51.9995 86.2969 52.314 86.0645 52.6597 85.8867 cv
52.6606 85.8867 li
52.7075 85.8467 52.7349 85.7813 52.7349 85.7119 cv
52.7349 85.6709 52.7261 85.6318 52.7075 85.5977 cv
52.7017 85.6045 li
52.5952 85.417 52.4653 85.2441 52.314 85.0898 cv
52.356 85.0469 li
52.3306 85.0215 52.314 84.9902 52.3071 84.9551 cv
52.2671 84.959 li
52.1372 83.6787 51.6606 82.458 50.8901 81.4277 cv
50.938 81.4395 li
49.4272 79.854 47.7925 78.3911 46.0493 77.0645 cv
46.0483 77.0977 li
45.9761 77.0347 45.8833 77 45.7876 77 cv
45.6909 77 45.5991 77.0347 45.5269 77.0977 cv
45.5356 77.1079 li
44.8667 77.7759 44.4917 78.6826 44.4917 79.6279 cv
44.4917 79.6631 44.4917 79.6982 44.4927 79.7334 cv
44.4595 79.7354 li
44.3853 80.1895 44.1841 80.6133 43.8794 80.9585 cv
43.9028 80.9448 li
43.6343 81.3848 43.3374 81.8066 43.0151 82.209 cv
43.0151 82.2197 li
41.6118 84.5957 li
41.6001 84.5889 li
41.4897 84.7764 41.4312 84.9902 41.4312 85.208 cv
41.4312 85.2324 41.4321 85.2559 41.4331 85.2803 cv
41.4204 85.2734 li
41.4272 85.4561 41.4312 85.6377 41.4312 85.8203 cv
41.4312 85.8594 41.4312 85.8994 41.4312 85.9385 cv
41.4673 85.9277 li
41.4673 86.4443 41.6313 86.9482 41.9351 87.3672 cv
41.9253 87.4043 li
42.2896 87.8994 42.6138 88.4229 42.896 88.9688 cv
42.9126 88.9482 li
42.9331 88.9824 42.9429 89.0205 42.9429 89.0596 cv
42.9429 89.1523 42.8833 89.2354 42.7954 89.2646 cv
42.8062 89.2559 li
42.3071 89.4824 41.7642 89.5996 41.2153 89.5996 cv
40.6938 89.5996 40.1772 89.4941 39.6978 89.2881 cv
39.7036 89.2754 li
40.2798 88.376 li
40.2437 88.3398 li
40.2905 88.251 40.3149 88.1523 40.3149 88.0518 cv
40.3149 87.7842 40.1411 87.5479 39.8862 87.4678 cv
39.8843 87.4365 li
39.645 87.3467 39.4878 87.1191 39.4878 86.8643 cv
39.4995 86.8662 li
39.7017 86.3545 39.9653 85.8701 40.2837 85.4219 cv
40.2271 85.4199 li
40.3569 85.0391 40.4233 84.6387 40.4233 84.2363 cv
40.4233 84.2002 40.4224 84.1641 40.4214 84.1279 cv
40.4624 84.0957 li
40.4604 84.0225 40.4595 83.9492 40.4595 83.876 cv
40.4595 82.1641 41.0161 80.4985 42.0474 79.1313 cv
42.0474 79.1172 li
41.9487 78.5972 41.8989 78.0688 41.8989 77.54 cv
41.8989 77.1543 41.9253 76.769 41.978 76.3867 cv
41.9937 76.3711 li
40.1021 76.9785 38.1265 77.2881 36.1392 77.2881 cv
33.4106 77.2881 30.7124 76.7046 28.228 75.5771 cv
28.2153 75.605 li
28.1938 75.5991 28.1704 75.5957 28.147 75.5957 cv
28.064 75.5957 27.9888 75.6357 27.9526 75.6982 cv
27.936 75.708 li
27.7593 76.0352 27.4966 76.3086 27.1763 76.498 cv
27.1714 76.5264 li
27.061 76.5996 26.9956 76.7236 26.9956 76.856 cv
26.9956 76.8794 26.9976 76.9033 27.0015 76.9268 cv
26.9819 76.9258 li
27.0151 77.1528 27.0317 77.3823 27.0317 77.6118 cv
27.0317 78.5728 26.7397 79.5112 26.1958 80.3032 cv
26.2104 80.3169 li
26.1353 80.4331 26.0952 80.5688 26.0952 80.708 cv
26.0952 80.7695 26.103 80.8311 26.1187 80.8906 cv
26.0649 80.9189 li
26.3462 82.1475 26.5298 83.3955 26.6157 84.6523 cv
26.6733 84.7041 li
26.6978 85.0928 26.9097 85.4443 27.2417 85.6465 cv
27.2349 85.6523 li
28.5591 86.459 29.5933 87.6689 30.186 89.1074 cv
30.2202 89.1006 li
30.23 89.1338 30.2349 89.1689 30.2349 89.2041 cv
30.2349 89.334 30.1646 89.4551 30.0503 89.5186 cv
30.0571 89.5205 li
29.7456 89.5498 29.4321 89.5635 29.1196 89.5635 cv
28.6108 89.5635 28.104 89.5254 27.6011 89.4492 cv
27.6108 89.4561 li
27.396 89.0713 27.2837 88.6367 27.2837 88.1963 cv
27.2837 88.0635 27.2935 87.9307 27.314 87.7988 cv
27.312 87.7979 li
27.3169 87.7754 27.3188 87.751 27.3188 87.7275 cv
27.3188 87.5928 27.2358 87.4717 27.1089 87.4248 cv
27.103 87.4395 li
26.3472 87.4395 li
26.3472 87.4355 li
26.3228 87.4385 26.2993 87.4395 26.2749 87.4395 cv
26.0337 87.4395 25.8218 87.2793 25.7563 87.0479 cv
25.7104 87.0752 li
25.5776 84.8301 24.9067 82.6504 23.7554 80.7188 cv
23.8071 80.6978 li
23.7026 80.5273 23.647 80.3315 23.647 80.1318 cv
23.647 79.9854 23.6772 79.8408 23.7349 79.7065 cv
23.7192 79.6997 li
24.439 78.332 li
24.397 78.3276 li
24.4243 78.2861 24.439 78.2378 24.439 78.188 cv
24.439 78.0488 24.3267 77.936 24.187 77.936 cv
24.1479 77.936 24.1099 77.9448 24.0747 77.9624 cv
24.0796 77.9717 li
20.6958 79.4839 li
20.6909 79.5107 li
20.6274 79.542 20.5806 79.5986 20.561 79.667 cv
20.5513 79.6641 li
20.1909 81.0679 li
20.1421 81.0635 li
20.0474 81.3354 19.8765 81.5742 19.6499 81.752 cv
19.647 81.7813 li
19.4585 81.8916 19.311 82.0586 19.2271 82.2598 cv
19.2554 82.2559 li
18.895 85.5322 li
18.8823 85.5313 li
18.8667 85.6387 18.8589 85.7471 18.8589 85.8555 cv
18.8589 86.0508 18.8843 86.2441 18.9331 86.4326 cv
18.9438 86.4248 li
19.0063 86.5498 19.0396 86.6875 19.0396 86.8281 cv
19.0396 86.9951 18.9927 87.1602 18.9038 87.3018 cv
18.8589 87.2969 li
18.4136 88.1582 17.5249 88.7002 16.5552 88.7002 cv
16.3979 88.7002 16.2417 88.6855 16.0874 88.6572 cv
16.0981 88.6953 li
15.9009 88.1426 15.7998 87.5596 15.7998 86.9717 cv
15.7998 86.582 15.8442 86.1934 15.9326 85.8135 cv
15.9487 85.8447 li
16.1958 85.9814 16.4614 86.082 16.7368 86.1445 cv
16.7651 86.0908 li
16.8022 86.1025 16.8403 86.1074 16.8794 86.1074 cv
17.0981 86.1074 17.2749 85.9307 17.2749 85.7119 cv
17.2749 85.6504 17.2612 85.5898 17.2339 85.5342 cv
17.2397 85.4951 li
17.5063 85.3408 17.6948 85.0801 17.7573 84.7793 cv
17.7886 84.8242 li
17.854 83.7773 17.8872 82.7285 17.8872 81.6797 cv
17.8872 80.8057 17.8647 79.9321 17.8188 79.0591 cv
17.8228 79.0864 li
17.8179 79.0513 17.8149 79.0156 17.8149 78.98 cv
17.8149 78.6875 17.9839 78.4214 18.2485 78.2964 cv
18.2427 78.2905 li
18.5659 78.1387 18.8687 77.9463 19.144 77.7183 cv
19.146 77.6851 li
19.3823 77.2676 19.5073 76.7959 19.5073 76.3159 cv
19.5073 75.9829 19.4478 75.6523 19.3306 75.3403 cv
19.3892 75.3511 li
18.7798 74.0791 18.4634 72.6865 18.4634 71.2759 cv
18.4634 69.8931 18.7671 68.5269 19.354 67.2749 cv
19.3276 67.2979 li
17.5073 67.4829 16.1235 69.0151 16.1235 70.8438 cv
16.1001 70.8052 li
16.1392 71.1167 16.1597 71.4302 16.1597 71.7437 cv
16.1597 73.9526 15.1846 76.0488 13.4946 77.4717 cv
13.4976 77.436 li
13.0566 77.7153 12.5435 77.8638 12.0195 77.8638 cv
11.1738 77.8638 10.376 77.478 9.85791 76.8188 cv
9.85693 76.8003 li
10.0112 76.8369 10.1689 76.856 10.3276 76.856 cv
11.0342 76.856 11.689 76.4858 12.0537 75.8813 cv
12.0791 75.9106 li
12.6108 74.8252 12.8975 73.6362 12.9185 72.4277 cv
12.9224 72.4297 li
12.9204 72.3691 12.9194 72.3086 12.9194 72.248 cv
12.9194 70.6963 13.4731 69.1958 14.481 68.0161 cv
14.4902 68.0308 li
15.0688 67.1465 15.9829 66.5356 17.021 66.3394 cv
17.019 66.3345 li
17.6987 66.2212 18.3862 66.1641 19.0757 66.1641 cv
19.6265 66.1641 20.1763 66.2002 20.7231 66.2734 cv
20.7427 66.2754 li
22.4487 65.4209 24.3306 64.9756 26.2397 64.9756 cv
27.8589 64.9756 29.4624 65.2964 30.9565 65.9185 cv
30.9595 65.937 li
30.981 65.9443 31.0044 65.9478 31.0269 65.9478 cv
31.147 65.9478 31.2437 65.8511 31.2437 65.7319 cv
31.2437 65.7197 31.2427 65.708 31.2407 65.6963 cv
31.2339 65.707 li
30.9058 64.4819 30.7397 63.2197 30.7397 61.9517 cv
30.7397 59.8931 31.1772 57.8579 32.0249 55.9814 cv
32.0454 55.9805 li
32.3267 55.3179 32.8491 54.7866 33.5063 54.4937 cv
33.5122 54.4658 li
33.6226 54.4106 33.6909 54.2983 33.6909 54.1758 cv
33.6909 54.1152 33.6743 54.0557 33.6421 54.0044 cv
33.6646 53.9902 li
33.4233 53.6294 33.2954 53.2056 33.2954 52.772 cv
33.2954 52.772 li
33.2954 52.4478 li
33.2944 52.4561 li
33.1968 52.437 33.1021 52.4087 33.0093 52.3706 cv
33.0073 52.3745 li
33.0112 51.9282 33.0513 51.4829 33.1255 51.043 cv
33.1187 51.0439 li
33.1753 50.1133 33.9468 49.3877 34.8794 49.3877 cv
35.6724 49.3877 36.3677 49.9165 36.5796 50.6807 cv
36.5845 50.6436 li
36.6938 50.8984 36.772 51.1655 36.8159 51.439 cv
36.7876 51.4399 li
37.3989 51.8359 li
37.3599 51.8755 li
37.3618 51.8857 37.3638 51.8965 37.3638 51.9077 cv
37.3638 51.9268 37.3599 51.9453 37.353 51.959 cv
37.3638 51.98 li
36.6069 51.98 li
36.6069 52.9517 li
36.6069 51.98 li
cp
ef
91.6147 89.2041 mo
91.5825 89.2383 li
91.439 89.0127 91.3628 88.751 91.3628 88.4834 cv
91.3628 88.4355 91.3657 88.3877 91.3706 88.3398 cv
91.3638 88.334 li
91.5786 87.0996 91.687 85.8486 91.687 84.5957 cv
91.687 83.2158 91.5562 81.8389 91.2944 80.4844 cv
91.2915 80.4917 li
90.1392 74.6958 li
90.0952 74.6973 li
90.0015 74.2476 89.7651 73.8418 89.4224 73.5425 cv
89.4224 73.5254 li
88.0591 72.3687 86.4263 71.5728 84.6753 71.21 cv
84.6694 71.2295 li
84.4165 71.1787 84.2349 70.957 84.2349 70.6997 cv
84.2349 70.583 84.2729 70.4692 84.3433 70.3755 cv
84.3384 70.3696 li
84.7729 69.7935 85.1333 69.1646 85.4106 68.498 cv
85.4136 68.4971 li
85.5864 68.1011 85.6753 67.6748 85.6753 67.2437 cv
85.6753 65.4951 84.2397 64.0757 82.4712 64.0757 cv
80.7026 64.0757 79.2671 65.4951 79.2671 67.2437 cv
79.2671 67.7568 79.3931 68.2622 79.6343 68.7163 cv
79.6235 68.7212 li
79.8745 69.293 80.1909 69.834 80.5669 70.333 cv
80.5815 70.3184 li
80.6626 70.415 80.7075 70.5376 80.7075 70.6641 cv
80.7075 70.9346 80.5063 71.1631 80.2388 71.1992 cv
80.2251 71.2319 li
79.0708 71.543 77.9644 72.0083 76.9351 72.6147 cv
76.9341 72.6182 li
76.481 72.8838 76.1577 73.3237 76.0396 73.8345 cv
76.0269 73.832 li
72.5708 88.7715 li
72.5708 88.7754 li
72.5474 88.7734 72.5229 88.7715 72.4995 88.7715 cv
72.0425 88.7715 71.6714 89.1592 71.6714 89.6357 cv
71.6714 89.8047 71.7183 89.9697 71.8071 90.1104 cv
71.7808 90.0693 li
71.3755 90.1406 70.9663 90.1758 70.5552 90.1758 cv
70.1323 90.1758 69.7095 90.1377 69.2925 90.0635 cv
69.2964 90.0986 li
69.0679 90.0635 68.8989 89.8672 68.8989 89.6357 cv
68.8989 89.4941 68.9634 89.3594 69.0747 89.2705 cv
69.0493 89.248 li
69.5483 88.8232 69.8354 88.2021 69.8354 87.5479 cv
69.8354 86.3154 68.8354 85.3154 67.603 85.3154 cv
66.3706 85.3154 65.3716 86.3154 65.3716 87.5479 cv
65.3716 88.2021 65.6587 88.8232 66.1567 89.248 cv
66.1567 89.2803 li
66.2075 89.3525 66.2349 89.4395 66.2349 89.5273 cv
66.2349 89.709 66.1216 89.8721 65.9507 89.9336 cv
65.9487 89.96 li
64.6138 90.4883 63.6519 91.6758 63.4126 93.0918 cv
63.4155 93.1191 li
63.2554 94.0674 63.1411 95.0234 63.0718 95.9824 cv
63.0767 95.9541 li
63.0464 96.415 63.0308 96.877 63.0308 97.3398 cv
63.0308 97.9727 63.0601 98.6055 63.1167 99.2354 cv
63.1118 99.2451 li
63.2339 99.6807 63.5923 100.009 64.0366 100.092 cv
64.0396 100.066 li
64.0747 100.071 64.1108 100.074 64.147 100.075 cv
64.147 100.073 li
64.1714 100.075 64.1948 100.076 64.2192 100.076 cv
64.4253 100.076 64.6284 100.019 64.8042 99.9102 cv
64.8306 99.9307 li
65.0112 99.8105 65.1196 99.6084 65.1196 99.3916 cv
65.1196 99.1748 65.0112 98.9727 64.8306 98.8525 cv
64.8228 98.8262 li
64.7007 98.7246 64.6265 98.5781 64.6167 98.4199 cv
64.6147 98.4199 li
65.1196 95.1436 li
65.6948 94.3154 li
65.645 94.3213 li
65.8931 95.0498 66.019 95.8145 66.019 96.584 cv
66.019 96.8984 65.9976 97.2129 65.9556 97.5244 cv
65.9517 97.4844 li
65.8374 98.6123 65.6665 99.7344 65.4409 100.847 cv
65.4819 100.868 li
65.48 100.88 65.479 100.892 65.479 100.904 cv
65.479 101.017 65.5542 101.115 65.6616 101.146 cv
65.6587 101.156 li
65.9106 101.264 li
65.9106 107.096 li
65.8745 107.096 li
65.8745 107.107 65.8755 107.12 65.8755 107.132 cv
65.8755 107.286 65.8198 107.437 65.7192 107.554 cv
65.731 107.6 li
65.5151 107.888 li
65.5034 107.88 li
65.4644 107.935 65.4429 108 65.4429 108.067 cv
65.4429 108.247 65.5884 108.392 65.7671 108.392 cv
65.8179 108.392 65.8667 108.38 65.9126 108.357 cv
65.9106 108.355 li
66.7749 107.78 li
66.7759 107.744 li
67.0786 107.563 67.2905 107.263 67.3618 106.917 cv
67.4233 106.916 li
68.1792 102.884 li
68.1938 102.886 li
68.2329 102.665 68.3403 102.463 68.5034 102.308 cv
68.5063 102.274 li
68.6118 102.178 68.7231 102.087 68.8384 102.002 cv
68.8696 102.026 li
68.896 101.999 68.9331 101.983 68.9712 101.983 cv
69.0503 101.983 69.1147 102.049 69.1147 102.128 cv
69.1147 102.128 li
69.1147 107.06 li
69.1147 107.06 li
69.1147 107.264 69.2222 107.453 69.4009 107.567 cv
69.4028 107.6 li
70.8433 108.644 li
70.8843 108.599 li
70.938 108.628 70.9976 108.644 71.0591 108.644 cv
71.2583 108.644 71.4194 108.482 71.4194 108.284 cv
71.4194 108.206 71.394 108.13 71.3472 108.067 cv
71.3833 108.067 li
70.8433 107.384 li
70.8442 107.384 li
70.7271 107.242 70.6636 107.063 70.6636 106.88 cv
70.6636 106.844 70.6655 106.808 70.6704 106.772 cv
70.6987 106.771 li
71.3472 102.668 li
71.3481 102.597 li
72.0601 102.338 72.5347 101.662 72.5347 100.904 cv
72.5347 100.783 72.5229 100.663 72.4985 100.545 cv
72.5347 100.544 li
70.6987 92.9482 li
70.7056 92.9463 li
70.7017 92.9229 70.6987 92.8994 70.6987 92.876 cv
70.6987 92.7275 70.7896 92.5977 70.9175 92.5615 cv
70.9146 92.5361 li
72.3647 92.0371 73.7329 91.3252 74.9741 90.4238 cv
74.9966 90.4434 li
75.1479 90.3135 75.2349 90.123 75.2349 89.9238 cv
75.2349 89.5879 74.9907 89.3008 74.6577 89.248 cv
74.6587 89.2754 li
78.9067 78.4038 li
78.5835 91.1475 li
79.9155 106.952 li
79.0874 108.032 li
79.0933 108.036 li
79.0425 108.108 79.0151 108.195 79.0151 108.284 cv
79.0151 108.522 79.2085 108.716 79.4468 108.716 cv
79.5356 108.716 79.6226 108.688 79.6948 108.638 cv
79.6987 108.644 li
82.1108 106.916 li
82.1138 106.883 li
82.2808 106.776 82.3862 106.603 82.3979 106.412 cv
82.3989 106.376 li
82.3989 102.996 82.5054 99.6172 82.7173 96.2441 cv
82.731 96.1914 li
82.938 94.3799 83.2515 92.582 83.6714 90.8066 cv
83.6587 90.8594 li
84.0913 96.6914 li
84.0337 96.6426 li
84.1675 98.1787 84.2349 99.7207 84.2349 101.264 cv
84.2349 103.022 84.1479 104.78 83.9731 106.53 cv
84.0229 106.521 li
84.02 106.544 84.019 106.568 84.019 106.592 cv
84.019 106.767 84.0854 106.934 84.2036 107.056 cv
84.1987 107.06 li
85.855 108.572 li
85.8657 108.56 li
85.9517 108.637 86.063 108.68 86.1792 108.68 cv
86.437 108.68 86.647 108.47 86.647 108.212 cv
86.647 108.096 86.604 107.984 86.5269 107.898 cv
86.5396 107.888 li
86.1792 107.275 li
87.5835 96.0078 li
87.8716 90.7881 li
87.8794 90.834 li
87.8979 90.5186 87.9067 90.2031 87.9067 89.8877 cv
87.9067 89.3682 87.8813 88.8486 87.8306 88.332 cv
87.8354 88.3398 li
86.8267 78.332 li
86.8159 78.3315 li
88.5103 80.7603 89.4194 83.6504 89.4194 86.6113 cv
89.4194 87.3105 89.3687 88.0088 89.2671 88.7012 cv
89.2798 88.6992 li
89.229 88.9111 89.1519 89.1143 89.0483 89.3057 cv
89.0591 89.3125 li
89.0112 89.4512 88.9868 89.5967 88.9868 89.7441 cv
88.9868 90.4795 89.5835 91.0762 90.3188 91.0762 cv
91.0542 91.0762 91.6509 90.4795 91.6509 89.7441 cv
91.6509 89.5693 91.6167 89.3975 91.5503 89.2363 cv
91.6147 89.2041 li
cp
ef
35.563 14.54 mo
35.563 14.54 li
34.6294 14.54 33.7593 15.0098 33.2466 15.79 cv
33.2593 15.7998 li
30.0552 20.6597 li
20.9478 21.8477 li
20.9487 21.8252 li
20.064 21.9336 19.3989 22.6846 19.3989 23.5757 cv
19.3989 23.5884 19.3999 23.6006 19.3999 23.6128 cv
19.3989 23.6118 li
19.3989 26.7798 li
19.3989 26.7798 li
19.3989 27.5854 20.0034 28.2627 20.8042 28.3535 cv
20.8257 28.3672 li
20.811 28.2344 20.8032 28.1011 20.8032 27.9678 cv
20.8032 26.0205 22.3843 24.4399 24.3315 24.4399 cv
26.2788 24.4399 27.8589 26.0205 27.8589 27.9678 cv
27.8589 28.1011 27.8521 28.2344 27.8364 28.3672 cv
27.895 28.3638 li
43.6997 28.3638 li
43.7222 28.3672 li
43.7065 28.2344 43.6997 28.1011 43.6997 27.9678 cv
43.6997 26.0205 45.2798 24.4399 47.2271 24.4399 cv
49.1743 24.4399 50.7554 26.0205 50.7554 27.9678 cv
50.7554 28.1011 50.7476 28.2344 50.7329 28.3672 cv
50.7915 28.3638 li
55.3276 27.9678 li
55.3276 22.9277 li
55.2915 22.9277 li
55.2915 22.4883 54.9858 22.1128 54.5698 22.04 cv
54.5688 22.0249 li
53.6138 21.8955 52.729 21.4507 52.0552 20.7607 cv
52.0151 20.7676 li
48.1636 16.6997 li
48.1733 16.6938 li
46.8677 15.3188 45.0552 14.54 43.1597 14.54 cv
43.1597 14.54 li
35.563 14.54 li
35.563 14.54 li
cp
41.1792 16.3037 mo
41.1792 20.6597 li
48.9556 20.6597 li
44.8149 16.3037 li
41.1792 16.3037 li
41.1792 16.3037 li
cp
47.2632 26.3477 mo
47.2632 26.3477 li
48.1772 26.3477 48.9194 27.0898 48.9194 28.0039 cv
48.9194 28.918 48.1772 29.6597 47.2632 29.6597 cv
46.3491 29.6597 45.6069 28.918 45.6069 28.0039 cv
45.6069 27.0898 46.3491 26.3477 47.2632 26.3477 cv
47.2632 26.3477 li
cp
47.2632 24.8721 mo
47.2632 24.8721 li
48.9927 24.8721 50.395 26.2749 50.395 28.0039 cv
50.395 29.7329 48.9927 31.1357 47.2632 31.1357 cv
45.5347 31.1357 44.1313 29.7329 44.1313 28.0039 cv
44.1313 26.2749 45.5347 24.8721 47.2632 24.8721 cv
47.2632 24.8721 li
cp
24.3315 26.3477 mo
24.3315 26.3477 li
25.2456 26.3477 25.9878 27.0898 25.9878 28.0039 cv
25.9878 28.918 25.2456 29.6597 24.3315 29.6597 cv
23.4175 29.6597 22.6753 28.918 22.6753 28.0039 cv
22.6753 27.0898 23.4175 26.3477 24.3315 26.3477 cv
24.3315 26.3477 li
cp
24.3315 24.8721 mo
24.3315 24.8721 li
26.0601 24.8721 27.4634 26.2749 27.4634 28.0039 cv
27.4634 29.7329 26.0601 31.1357 24.3315 31.1357 cv
22.6021 31.1357 21.1997 29.7329 21.1997 28.0039 cv
21.1997 26.2749 22.6021 24.8721 24.3315 24.8721 cv
24.3315 24.8721 li
cp
40.3872 20.6597 mo
31.4956 20.6597 li
34.3394 16.3037 li
40.3872 16.3037 li
40.3872 20.6597 li
40.3872 20.6597 li
cp
ef
75.0913 30.3076 mo
74.9829 30.272 li
74.8394 30.2358 li
74.731 30.1997 li
74.6235 30.1641 li
74.479 30.1279 li
74.3716 30.0918 li
74.2271 30.0557 li
74.1196 30.0195 li
73.9751 29.9839 li
73.8667 29.9478 li
73.7231 29.9116 li
73.6147 29.876 li
73.4712 29.8398 li
73.3628 29.8037 li
73.2192 29.7676 li
73.1108 29.7319 li
72.9673 29.6958 li
72.8589 29.6597 li
72.7153 29.6235 li
72.6069 29.5879 li
72.4634 29.5518 li
72.3188 29.5156 li
72.2114 29.4795 li
72.0669 29.4438 li
71.9595 29.4077 li
71.8149 29.3716 li
71.7075 29.3354 li
71.563 29.2998 li
71.4556 29.2637 li
71.311 29.2637 li
71.1675 29.2275 li
71.0591 29.1914 li
70.9155 29.1558 li
70.8071 29.1196 li
70.6636 29.0835 li
70.519 29.0479 li
70.4116 29.0117 li
70.2671 28.9756 li
70.1235 28.9395 li
70.0151 28.9038 li
69.8716 28.8677 li
69.7271 28.8677 li
69.6196 28.8315 li
69.4751 28.7954 li
69.3315 28.7598 li
69.2231 28.7236 li
69.0796 28.6875 li
68.9351 28.6514 li
68.8276 28.6157 li
68.6831 28.5796 li
68.5396 28.5796 li
68.4312 28.5435 li
68.2876 28.5073 li
68.1431 28.4717 li
67.9995 28.4355 li
67.8911 28.3994 li
67.7476 28.3633 li
67.603 28.3633 li
67.4956 28.3276 li
67.3511 28.2915 li
67.2075 28.2554 li
67.063 28.2197 li
66.9556 28.1836 li
66.811 28.1475 li
66.6675 28.1475 li
66.5229 28.1113 li
66.3794 28.0757 li
66.271 28.0396 li
66.1274 28.0034 li
65.9829 28.0034 li
65.8394 27.9673 li
65.6958 27.9316 li
65.5874 27.8955 li
65.4429 27.8594 li
65.2993 27.8232 li
65.1558 27.8232 li
65.0112 27.7876 li
64.9028 27.7515 li
64.7593 27.7153 li
64.6157 27.7153 li
64.4712 27.6792 li
64.3276 27.6436 li
64.1831 27.6074 li
64.0396 27.5713 li
63.9312 27.5713 li
63.7876 27.5352 li
63.6431 27.4995 li
63.4995 27.4634 li
63.355 27.4634 li
63.2114 27.4272 li
63.0669 27.3916 li
62.9233 27.3555 li
62.8149 27.3555 li
62.6714 27.3193 li
62.5278 27.2832 li
62.3833 27.2476 li
62.2397 27.2476 li
62.0952 27.2114 li
61.9517 27.1753 li
61.8071 27.1392 li
61.6636 27.1392 li
61.519 27.1035 li
61.3755 27.0674 li
61.231 27.0674 li
61.0874 27.0313 li
60.9438 26.9951 li
60.7993 26.9595 li
60.6558 26.9595 li
60.5474 26.9233 li
60.4038 26.8872 li
60.2593 26.8872 li
60.1157 26.8511 li
59.9712 26.8154 li
59.8276 26.7793 li
59.6831 26.7793 li
59.5396 26.7432 li
59.395 26.707 li
59.2515 26.707 li
59.1079 26.6714 li
58.9634 26.6353 li
58.8198 26.6353 li
58.6392 26.5991 li
58.4956 26.5635 li
58.3521 26.5635 li
58.2075 26.5273 li
58.064 26.4912 li
57.9194 26.4912 li
57.9194 26.4917 li
57.9194 25.4116 li
57.9194 25.4116 li
58.063 25.4116 li
58.2075 25.4478 li
58.3511 25.4839 li
58.4946 25.4839 li
58.6392 25.52 li
58.7827 25.5557 li
58.9272 25.5557 li
59.0347 25.5918 li
59.1792 25.6279 li
59.3228 25.6279 li
59.4673 25.6641 li
59.6108 25.6641 li
59.7554 25.6997 li
59.8989 25.7358 li
60.0435 25.772 li
60.1509 25.772 li
60.2954 25.8081 li
60.439 25.8438 li
60.5825 25.8438 li
60.7271 25.8799 li
60.8706 25.916 li
60.979 25.916 li
61.1226 25.9521 li
61.2671 25.9878 li
61.4106 25.9878 li
61.5552 26.0239 li
61.6987 26.0601 li
61.8071 26.0601 li
61.9507 26.0957 li
62.0952 26.1318 li
62.2388 26.168 li
62.3472 26.168 li
62.4907 26.2041 li
62.6353 26.2397 li
62.7788 26.2397 li
62.9233 26.2759 li
63.0308 26.312 li
63.1753 26.3481 li
63.3188 26.3481 li
63.4634 26.3838 li
63.5708 26.4199 li
63.7153 26.4199 li
63.8589 26.4561 li
64.0024 26.4922 li
64.1108 26.5278 li
64.2554 26.5278 li
64.3989 26.564 li
64.5073 26.6001 li
64.6509 26.6362 li
64.7954 26.6362 li
64.939 26.6719 li
65.0474 26.708 li
65.1909 26.7441 li
65.3345 26.7441 li
65.4429 26.7803 li
65.5864 26.8159 li
65.731 26.8521 li
65.8384 26.8882 li
65.9829 26.8882 li
66.1265 26.9238 li
66.271 26.96 li
66.3784 26.9961 li
66.5229 26.9961 li
66.6665 27.0322 li
66.7749 27.0679 li
66.9185 27.104 li
67.0269 27.1401 li
67.1704 27.1763 li
67.3149 27.1763 li
67.4224 27.2119 li
67.5669 27.248 li
67.7104 27.2842 li
67.8188 27.3203 li
67.9624 27.3203 li
68.0708 27.356 li
68.2153 27.3921 li
68.3589 27.4282 li
68.4673 27.4644 li
68.6108 27.5 li
68.7192 27.5 li
68.8628 27.5361 li
69.0063 27.5723 li
69.1147 27.6084 li
69.2593 27.644 li
69.3667 27.6802 li
69.5112 27.6802 li
69.6187 27.7163 li
69.7632 27.752 li
69.8706 27.7881 li
70.0151 27.8242 li
70.1587 27.8604 li
70.2671 27.8965 li
70.4106 27.9321 li
70.519 27.9321 li
70.6626 27.9683 li
70.771 28.0044 li
70.9146 28.04 li
71.0229 28.0762 li
71.1665 28.1123 li
71.2749 28.1484 li
71.4185 28.1841 li
71.5269 28.2202 li
71.6704 28.2563 li
71.7788 28.2563 li
71.9224 28.2925 li
72.0308 28.3281 li
72.1392 28.3643 li
72.2827 28.4004 li
72.3911 28.4365 li
72.5347 28.4722 li
72.6431 28.5083 li
72.7866 28.5444 li
72.895 28.5806 li
73.0024 28.6162 li
73.147 28.6523 li
73.2544 28.6885 li
73.3989 28.7246 li
73.5063 28.7603 li
73.6509 28.7603 li
73.7583 28.7964 li
73.8667 28.8325 li
74.0112 28.8682 li
74.1187 28.9043 li
74.2271 28.9404 li
74.3706 28.9766 li
74.479 29.0122 li
74.6226 29.0483 li
75.0913 30.3076 li
cp
ef
6.65576 116.168 mo
4.8916 116.168 3.45166 117.607 3.45166 119.372 cv
3.45166 153.716 3.45166 121.136 3.45166 155.479 cv
3.45166 157.244 4.8916 158.684 6.65576 158.684 cv
40.6753 158.684 74.6948 158.684 108.715 158.684 cv
110.479 158.684 111.883 157.244 111.883 155.479 cv
111.883 121.136 111.883 153.716 111.883 119.372 cv
111.883 117.607 110.479 116.168 108.715 116.168 cv
74.6948 116.168 40.6753 116.168 6.65576 116.168 cv
6.65576 116.168 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
65.731 151.268 mo
72.4272 151.268 li
72.4272 149.432 li
67.7827 149.432 li
67.7827 139.352 li
65.731 139.352 li
65.731 151.268 li
65.731 151.268 li
cp
0 0 0 0 cmyk
ef
85.2427 146.048 mo
85.2427 151.231 li
85.2427 151.231 li
83.3716 151.231 li
83.3716 151.231 li
83.3716 142.735 li
83.3716 142.736 li
85.2427 142.736 li
85.2427 142.736 li
85.2427 143.456 li
85.2368 143.452 li
85.8208 142.834 86.6294 142.483 87.4751 142.483 cv
88.1626 142.483 88.8296 142.715 89.3726 143.141 cv
89.3491 143.127 li
89.895 143.555 90.2485 144.177 90.3345 144.859 cv
90.3188 144.859 li
90.3188 151.231 li
90.3188 151.231 li
88.4829 151.231 li
88.4829 151.231 li
88.4829 145.832 li
88.4438 145.795 li
88.4253 145.487 88.3306 145.189 88.1665 144.928 cv
88.2212 144.902 li
87.9683 144.539 87.5386 144.32 87.0796 144.32 cv
86.9438 144.32 86.8091 144.339 86.6792 144.377 cv
86.6812 144.351 li
85.896 144.563 85.3267 145.239 85.2515 146.048 cv
85.2427 146.048 li
cp
ef
81.0669 150.116 mo
81.0669 150.146 li
80.8774 150.07 80.6978 149.974 80.5298 149.857 cv
80.561 149.831 li
80.3745 149.736 80.2534 149.559 80.2407 149.36 cv
80.2388 149.359 li
80.2388 145.111 li
80.2368 145.146 li
80.1919 144.021 79.4624 143.039 78.3979 142.671 cv
78.4009 142.675 li
77.9995 142.596 77.5894 142.556 77.1792 142.556 cv
77.0229 142.556 76.8667 142.562 76.7104 142.573 cv
76.7075 142.563 li
75.6753 142.663 74.6665 142.944 73.7241 143.393 cv
73.7231 143.384 li
74.4067 144.859 li
74.4487 144.866 li
75.2856 144.48 76.1899 144.261 77.1108 144.219 cv
77.106 144.214 li
77.1304 144.213 77.1548 144.212 77.1792 144.212 cv
77.5396 144.212 77.8862 144.34 78.1519 144.571 cv
78.1519 144.571 li
78.1938 144.612 78.228 144.663 78.2524 144.72 cv
78.2202 144.718 li
78.3042 144.863 78.353 145.021 78.3647 145.184 cv
78.4028 145.184 li
78.4028 145.832 li
78.4028 145.832 li
78.4028 145.868 li
78.4028 145.868 li
75.7749 146.191 li
75.7759 146.186 li
75.1089 146.278 74.4897 146.584 74.0142 147.056 cv
74.0073 147.053 li
73.5923 147.509 73.3628 148.1 73.3628 148.712 cv
73.3628 149.482 73.7261 150.21 74.3452 150.68 cv
74.3325 150.694 li
74.9517 151.205 75.729 151.483 76.5308 151.483 cv
77.3169 151.483 78.0786 151.216 78.6919 150.725 cv
78.6958 150.688 li
79.0698 151.123 79.5728 151.428 80.1313 151.558 cv
80.1313 151.556 li
81.0308 150.116 li
81.0669 150.116 li
cp
77.9712 149.54 mo
77.98 149.551 li
78.1753 149.407 78.313 149.199 78.3726 148.965 cv
78.3667 148.964 li
78.3667 147.38 li
78.3706 147.381 li
77.7632 147.389 77.1567 147.449 76.5601 147.561 cv
76.5308 147.56 li
76.1353 147.668 li
76.1343 147.659 li
75.7827 147.735 75.4858 147.967 75.3247 148.288 cv
75.3003 148.276 li
75.2339 148.424 75.1987 148.585 75.1987 148.748 cv
75.1987 148.883 75.2231 149.018 75.269 149.145 cv
75.2837 149.138 li
75.3579 149.316 75.478 149.469 75.6294 149.578 cv
75.6255 149.585 li
75.9517 149.813 76.3442 149.936 76.7476 149.936 cv
76.8687 149.936 76.9888 149.925 77.1079 149.902 cv
77.1089 149.936 li
77.4175 149.879 77.7124 149.757 77.9731 149.576 cv
77.9712 149.54 li
cp
ef
93.0552 149.684 mo
93.0552 149.72 li
93.063 149.715 li
93.2583 150.024 93.4985 150.306 93.7759 150.549 cv
93.7759 150.582 li
94.2007 150.928 94.687 151.19 95.2085 151.354 cv
95.2144 151.318 li
95.6011 151.428 96.0015 151.483 96.4028 151.483 cv
97.0776 151.483 97.7437 151.327 98.3491 151.025 cv
98.314 151.063 li
98.5386 150.959 98.7563 150.839 98.9634 150.703 cv
98.9897 150.716 li
99.1978 150.584 99.394 150.434 99.5747 150.267 cv
98.3823 148.854 li
97.9067 149.344 97.2622 149.628 96.5845 149.646 cv
96.5493 149.644 li
96.5005 149.646 96.4517 149.647 96.4028 149.647 cv
96.2212 149.647 96.0396 149.628 95.8599 149.588 cv
95.8628 149.578 li
94.9644 149.408 94.3149 148.637 94.3149 147.74 cv
94.3149 147.728 94.3149 147.716 94.3159 147.704 cv
100.035 147.695 li
100.038 147.603 100.04 147.509 100.04 147.416 cv
100.04 146.763 99.9702 146.11 99.8345 145.471 cv
99.8354 145.471 li
99.7661 145.119 99.6372 144.78 99.4546 144.469 cv
99.4214 144.5 li
98.9272 143.568 98.0649 142.896 97.0532 142.654 cv
97.0571 142.653 li
96.772 142.589 96.48 142.556 96.187 142.556 cv
95.5142 142.556 94.854 142.729 94.2739 143.056 cv
94.2739 143.086 li
93.9302 143.283 93.6274 143.543 93.3804 143.851 cv
93.3462 143.85 li
92.6665 144.751 92.2993 145.852 92.2993 146.983 cv
92.2993 147.946 92.5649 148.89 93.0669 149.708 cv
93.0552 149.684 li
cp
94.2788 146.264 mo
98.0952 146.264 li
98.0591 146.266 li
98.0542 145.969 97.9888 145.677 97.8657 145.406 cv
97.8813 145.397 li
97.5952 144.701 96.9272 144.248 96.187 144.248 cv
95.5884 144.248 95.0269 144.546 94.6831 145.046 cv
94.6392 145.04 li
94.4224 145.415 94.2905 145.834 94.2534 146.267 cv
94.2788 146.264 li
cp
ef
21.271 151.628 mo
22.2437 151.556 li
23.0356 153.176 li
24.6558 152.384 li
23.9712 150.979 li
23.978 150.951 li
24.6958 150.544 25.3071 149.972 25.7632 149.28 cv
25.772 149.282 li
26.1724 148.656 26.4517 147.961 26.5952 147.23 cv
26.564 147.229 li
26.7026 146.591 26.7749 145.939 26.7788 145.286 cv
26.8149 145.263 li
26.811 144.619 26.7437 143.979 26.6147 143.35 cv
26.5913 143.354 li
26.4448 142.613 26.1606 141.906 25.7554 141.272 cv
25.7681 141.259 li
25.0835 140.225 24.0542 139.469 22.8628 139.125 cv
22.856 139.155 li
22.3345 139.047 21.8032 138.992 21.271 138.992 cv
21.2759 138.992 li
21.2622 138.992 21.2485 138.992 21.2349 138.992 cv
20.728 138.992 20.2231 139.039 19.7261 139.134 cv
19.6812 139.127 li
18.5015 139.472 17.4819 140.228 16.8042 141.259 cv
16.8052 141.264 li
16.3911 141.899 16.1021 142.609 15.9526 143.354 cv
15.9399 143.35 li
15.8032 143.979 15.7324 144.619 15.728 145.263 cv
15.728 145.286 li
15.7324 145.939 15.8047 146.591 15.9434 147.229 cv
15.9473 147.23 li
16.0903 147.961 16.3706 148.656 16.771 149.282 cv
16.8042 149.289 li
17.4819 150.32 18.5015 151.075 19.6812 151.421 cv
19.7261 151.403 li
20.2231 151.505 20.728 151.556 21.2349 151.556 cv
21.2485 151.556 21.2622 151.556 21.2759 151.556 cv
21.271 151.628 li
cp
21.271 140.756 mo
21.271 140.756 li
20.4995 140.756 19.7466 141.002 19.1235 141.458 cv
19.1411 141.465 li
18.6958 141.79 18.354 142.233 18.1548 142.743 cv
18.189 142.782 li
17.9175 143.566 17.7798 144.391 17.7798 145.22 cv
17.7798 145.246 17.7798 145.272 17.7798 145.298 cv
17.7798 145.289 li
17.7798 145.302 17.7798 145.314 17.7798 145.328 cv
17.7798 146.157 17.9175 146.981 18.189 147.766 cv
18.1548 147.805 li
18.354 148.314 18.6958 148.758 19.1411 149.083 cv
19.145 149.076 li
19.7622 149.541 20.5063 149.792 21.271 149.792 cv
21.271 149.756 li
21.4155 149.756 li
21.4155 149.792 li
20.6597 148.208 li
22.2798 147.416 li
23.1792 149.252 li
23.4312 149.072 li
23.4321 149.071 li
23.8638 148.747 24.1958 148.309 24.3901 147.805 cv
24.397 147.778 li
24.6636 146.99 24.7993 146.162 24.7993 145.328 cv
24.7993 145.314 24.7993 145.302 24.7993 145.289 cv
24.7993 145.298 li
24.7993 145.272 24.7993 145.246 24.7993 145.22 cv
24.7993 144.391 24.6606 143.566 24.3892 142.782 cv
24.3765 142.732 li
24.1694 142.229 23.8179 141.794 23.3628 141.476 cv
23.3979 141.469 li
22.7827 141.014 22.0386 140.764 21.2729 140.756 cv
21.271 140.756 li
cp
ef
57.3433 149.432 mo
57.3726 149.45 li
57.0493 149.558 56.7114 149.612 56.3716 149.612 cv
56.1899 149.612 56.0093 149.597 55.8306 149.565 cv
55.8354 149.562 li
55.5386 149.499 55.3276 149.251 55.3276 148.964 cv
55.3276 148.964 li
55.3276 144.859 li
55.3276 144.859 li
55.3276 144.32 li
55.3276 144.32 li
57.5952 144.32 li
57.5952 144.32 li
57.5952 142.771 li
57.5952 142.771 li
55.3276 142.771 li
55.3276 142.771 li
55.3276 139.352 li
55.3276 139.352 li
53.4556 140 li
53.4556 140 li
53.4556 142.771 li
53.4556 142.771 li
51.979 142.771 li
51.979 142.771 li
51.979 144.32 li
51.979 144.32 li
53.4556 144.32 li
53.4556 144.32 li
53.4556 144.859 li
53.4556 144.859 li
53.4556 149.252 li
53.4575 149.253 li
53.4565 149.288 53.4556 149.324 53.4556 149.359 cv
53.4556 149.593 53.4897 149.824 53.5581 150.046 cv
53.5874 150.048 li
53.7505 150.527 54.1089 150.916 54.5737 151.118 cv
54.5347 151.124 li
54.8374 151.266 55.1694 151.34 55.5073 151.34 cv
55.5679 151.34 55.6274 151.338 55.687 151.333 cv
55.6782 151.361 li
56.3101 151.332 56.939 151.256 57.5581 151.135 cv
57.3433 149.432 li
cp
ef
39.6431 139.404 mo
40.2593 139.404 40.7593 139.904 40.7593 140.52 cv
40.7593 141.136 40.2593 141.636 39.6431 141.636 cv
39.0269 141.636 38.5269 141.136 38.5269 140.52 cv
38.5269 139.904 39.0269 139.404 39.6431 139.404 cv
ef
38.7671 142.771 mo
38.7671 151.268 li
38.7671 151.268 li
40.6392 151.268 li
40.6392 151.268 li
40.6392 142.771 li
40.6392 142.771 li
38.7671 142.771 li
38.7671 142.771 li
cp
ef
43.6274 149.684 mo
43.6274 149.72 li
43.6528 149.687 li
43.8423 149.992 44.0747 150.271 44.3433 150.513 cv
44.3481 150.582 li
44.7729 150.928 45.2593 151.19 45.7808 151.354 cv
45.7837 151.311 li
46.1821 151.426 46.5962 151.483 47.0112 151.483 cv
47.6714 151.483 48.3228 151.337 48.9175 151.053 cv
48.9224 151.063 li
49.147 150.959 49.3638 150.839 49.5718 150.703 cv
49.5308 150.724 li
49.7476 150.586 49.9507 150.429 50.1382 150.252 cv
48.9897 148.817 li
48.5112 149.329 47.8521 149.627 47.1567 149.646 cv
47.1567 149.641 li
47.0962 149.646 47.0356 149.647 46.9751 149.647 cv
46.8081 149.647 46.6411 149.631 46.4751 149.596 cv
46.4702 149.585 li
45.5562 149.43 44.8872 148.65 44.8872 147.74 cv
44.8872 147.728 44.8872 147.716 44.8872 147.704 cv
50.5708 147.695 li
50.5737 147.603 50.5757 147.509 50.5757 147.416 cv
50.5757 146.763 50.5073 146.11 50.3706 145.471 cv
50.3726 145.471 li
50.3032 145.119 50.1763 144.78 49.9956 144.469 cv
50.0396 144.461 li
49.5278 143.532 48.647 142.87 47.6196 142.643 cv
47.6294 142.653 li
47.3442 142.589 47.0522 142.556 46.7593 142.556 cv
46.0864 142.556 45.4263 142.729 44.8462 143.056 cv
44.8608 143.042 li
44.4946 143.249 44.1743 143.526 43.9185 143.857 cv
43.9546 143.85 li
43.2749 144.751 42.9077 145.852 42.9077 146.983 cv
42.9077 147.937 43.1685 148.871 43.6616 149.685 cv
43.6274 149.684 li
cp
44.8872 146.264 mo
48.6675 146.264 li
48.6313 146.266 li
48.6265 145.969 48.561 145.677 48.438 145.406 cv
48.4526 145.397 li
48.1675 144.701 47.4995 144.248 46.7593 144.248 cv
46.1606 144.248 45.5991 144.546 45.2554 145.046 cv
45.2446 145.036 li
45.0288 145.411 44.8979 145.832 44.8618 146.267 cv
44.8872 146.264 li
cp
ef
34.1235 150.512 mo
34.1577 150.513 li
33.5747 151.133 32.769 151.483 31.9272 151.483 cv
31.2515 151.483 30.5942 151.258 30.0552 150.839 cv
30.0894 150.841 li
29.5435 150.412 29.1899 149.791 29.104 149.108 cv
29.0835 149.107 li
29.0835 142.771 li
29.0835 142.771 li
30.9556 142.771 li
30.9556 142.771 li
30.9556 148.172 li
30.9565 148.17 li
30.9692 148.491 31.0649 148.804 31.2358 149.075 cv
31.2798 149.072 li
31.5366 149.434 31.9526 149.647 32.395 149.647 cv
32.5161 149.647 32.6353 149.632 32.7515 149.601 cv
32.7593 149.622 li
33.521 149.42 34.0767 148.754 34.1509 147.955 cv
34.1958 147.956 li
34.1958 142.771 li
34.1958 142.771 li
36.0669 142.771 li
36.0669 142.771 li
36.0669 151.231 li
36.0669 151.231 li
34.1958 151.231 li
34.1958 151.231 li
34.1958 150.512 li
34.1958 150.62 li
34.1958 150.656 li
34.1235 150.512 li
cp
ef
83.0112 134.563 mo
85.4946 134.563 87.2593 132.439 87.2593 129.956 cv
87.2593 127.328 85.3149 125.42 83.0112 125.42 cv
83.0112 125.42 li
80.7075 125.42 78.7632 127.328 78.7632 129.956 cv
78.7632 132.439 80.5269 134.563 83.0112 134.563 cv
83.0112 134.563 li
cp
83.0112 132.764 mo
84.5229 132.764 85.2075 131.288 85.2075 129.956 cv
85.2075 128.516 84.4155 127.22 83.0112 127.22 cv
83.0112 127.22 li
81.6069 127.22 80.8149 128.516 80.8149 129.956 cv
80.8149 131.288 81.4995 132.764 83.0112 132.764 cv
83.0112 132.764 li
cp
ef
104.215 125.6 mo
104.215 127.508 li
104.215 127.508 li
102.631 127.508 101.479 128.443 101.479 129.56 cv
101.479 129.56 li
101.479 134.24 li
99.5708 134.24 li
99.5708 125.78 li
101.479 125.78 li
101.479 126.572 li
101.479 126.572 li
101.875 126.212 102.919 125.456 104.215 125.6 cv
104.215 125.6 li
cp
ef
93.0913 134.563 mo
95.5747 134.563 97.3394 132.439 97.3394 129.956 cv
97.3394 127.328 95.395 125.42 93.0913 125.42 cv
93.0913 125.42 li
90.8228 125.42 88.8433 127.328 88.8433 129.956 cv
88.8433 132.439 90.6069 134.563 93.0913 134.563 cv
93.0913 134.563 li
cp
93.0913 132.764 mo
94.603 132.764 95.2876 131.288 95.2876 129.956 cv
95.2876 128.516 94.4946 127.22 93.0913 127.22 cv
93.0913 127.22 li
91.687 127.22 90.895 128.516 90.895 129.956 cv
90.895 131.288 91.5796 132.764 93.0913 132.764 cv
93.0913 132.764 li
cp
ef
75.8472 129.775 mo
75.8472 134.24 li
73.7954 134.24 li
73.7954 125.275 li
70.1235 130.028 li
66.4507 125.275 li
66.4507 134.24 li
64.4351 134.24 li
64.4351 122.324 li
66.7749 122.324 li
70.1235 126.752 li
73.4712 122.324 li
75.8472 122.324 li
75.8472 125.275 li
75.8472 129.775 li
cp
ef
38.0835 128.264 mo
38.0835 134.24 li
36.103 134.24 li
36.103 128.479 li
36.103 128.479 li
36.103 127.724 35.4194 127.364 34.7349 127.364 cv
34.0874 127.364 32.8638 127.868 32.8638 129.128 cv
32.8638 129.128 li
32.8638 134.24 li
30.8833 134.24 li
30.8833 125.744 li
32.8638 125.744 li
32.8638 126.248 li
32.8638 126.248 li
32.8638 126.248 33.7632 125.527 35.0952 125.527 cv
36.6431 125.527 38.0835 126.607 38.0835 128.264 cv
38.0835 128.264 li
cp
ef
53.563 135.824 mo
56.9478 125.744 li
54.7876 125.744 li
53.0591 131.54 li
51.3677 125.744 li
49.1714 125.744 li
52.0151 134.348 li
52.0151 134.348 li
52.3394 135.32 51.439 135.572 49.9634 135.212 cv
49.9634 135.212 li
49.603 136.796 li
49.603 136.796 li
52.1958 137.264 53.0952 137.012 53.563 135.824 cv
53.563 135.824 li
cp
ef
16.0874 122.324 mo
12.4517 122.324 li
12.4517 134.24 li
14.4678 134.24 li
14.4678 129.128 li
19.3989 129.128 li
19.3989 127.256 li
14.4678 127.256 li
14.4678 124.16 li
19.9038 124.16 li
19.9038 122.324 li
16.9155 122.324 li
16.0874 122.324 li
cp
ef
47.6235 128.264 mo
47.6235 134.24 li
45.6431 134.24 li
45.6431 128.479 li
45.6431 128.479 li
45.6431 127.724 44.9233 127.364 44.2749 127.364 cv
43.5913 127.364 42.3677 127.868 42.3677 129.128 cv
42.3677 129.128 li
42.3677 134.24 li
40.4233 134.24 li
40.4233 125.744 li
42.3677 125.744 li
42.3677 126.248 li
42.3677 126.248 li
42.3677 126.248 43.3032 125.527 44.5991 125.527 cv
46.1831 125.527 47.6235 126.607 47.6235 128.264 cv
47.6235 128.264 li
cp
ef
27.6792 131.936 mo
28.9038 133.268 li
28.9038 133.268 li
28.3989 133.736 27.3911 134.563 25.2671 134.563 cv
23.1792 134.563 21.271 132.979 21.271 130.027 cv
21.271 127.076 23.1792 125.42 25.2671 125.42 cv
27.3911 125.42 29.2632 127.328 29.2632 129.704 cv
29.2632 129.704 li
29.2632 130.64 li
29.2632 130.64 li
23.2515 130.64 li
23.2515 130.64 li
23.2515 131.864 24.2954 132.728 25.4116 132.728 cv
26.5269 132.728 27.2114 132.332 27.6792 131.936 cv
27.6792 131.936 li
cp
27.2114 129.2 mo
23.3237 129.2 li
23.3237 129.2 li
23.3237 128.191 24.0073 127.22 25.2671 127.22 cv
26.4917 127.22 27.2114 128.3 27.2114 129.2 cv
27.2114 129.2 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Bob Hutchinson) ()%%Title: (884V.EPS)%%CreationDate: 02/02/2009 11:35%%Canvassize: 16383%AI9_DataStream%Gb!R&pKf)VdOtIRJFC;W%jou#"5+8'EZDq)N56hL`Wk2!^"</%\b;dr8_m:V]A3t_m/;BKr<Db$[6gilW[_#V17;VKX&XXd4VulQ%?:epeP1Fb7Xd`AF<4#UOZh&Lsk_>AE3L["3Jn@ce'jeK,If+M1[!Kc`p1'lP/[_)8:3S!iCt9Zb;OPD)H!bu:2QH/iH``WXEXH3S%G$k/nD:T64hB*Z,Q*bG^!:0COl&0HH\Zq<pIj;V\H>J&\)onc"7Xb$%I,0K0m!JU'=ejRn4XH)f6@VU7h-TuLG:.`B3'9DdXJAG6%e"q=fY&nWr-^7b*.lf,^UfHtiZPCr/dTIt,72H95jAZN$oP7>2;"D@Za?Nc&?FNYD!7^>M&&f*;3*m?hQ!lpP6=1Hrp_rFqV)4m!%iHe5Z9Y^TNj2G>n)D,A(FVpG1;ad-E6;R<)p@bl`r7^O\C;&5Bldn8Eb'E%GUKQn?O@<D%B.Ae,2Dc_X]7`?D&G?gs#5X#<jA\KD%dfp\V@HqRU[LmI8SK_1mkHDm4YDn%6U^q4$YH;-Cqh!UDr;)4c<p92$?N5d7Np3!c"Kmr3$oR4XMMg;`IPi(8Mq2YS)5XS'@Kd#(%HD=%9i71_Beps/&qS2=q_uf,0c?#aN<_0ju"k6XG3stkBYk*>2mmb?9i96r`3cABRI]F7CIS2KG-5iGQ(h=rS<6)5kY+qd5eP9lq%D9L;TWogU!<SB8K!Rq<rnOCToaW-KJE7B/]IVl3k0&$'SS_(HW-lf2)@9!mle9*pj0,stc7Bb<VYlTu0><;7h<g;CU))cd>6C)Ym%p.>VT&f/q%nO_o$KPOcQ>-A,S`,rBY:?16rinln$^'a[3fAWW=_,&[:T;</j8JcLD$/ZBKj2+Ui[T\B_nL;Y5;O.KY/.5'Q(6l,+%C6dE8\kpChTo;YDK;Vuk9"?R=K"p4kPU_rk<2g!rQ:gX@W<?e4<VX"+[4HR6>(uFG<I>!tN;^`p@#Oe34NY>CWkqO["_3.V:^Y4\%7uH3?Lu9YFJJ#^o(cS>q4ptkPTC<.V"@&S,U_D;f,D)OADYOYhN!\3+C1@':$H<66ThMj$(nVo63RSbDLfAtup`tk>H]NTq^1$?S%F$<+,"TAY&@!qGWC;Lk,;<)j[A+1F0_>*d6,?=59(a&[/:G=i"J,"j`#6]KB.2X0)`*#J\6+UP&cm%WRkW.fJ5%iM4UcO`,\oG=>%aKbKdF6j^OM`(,%_@lc2-j-7)S-bsCVfC5]/W:3h67Lu6(a%0/T7rn6#"Fs%E6dT]#:YE[+EqlJk.JRA%=4&)K"SnN"eS_h48'/`%NpS%HT]^\lpt2h>:l;`B[H$lR4oU4"a-DM:N,t#d_&B?G5NH1$[Gs'B$t$.9b2RO6GosSdo=`J"n?gM/I&6_Hbc0sT"8%CJ&t\fr%_>DCPbM1!^nOZ_\k^W(@V4u-3dkq!Bs,I$r#(H8qj+"%eBd2R:`rBio5Pr4c5KCUdNl0UpfRJSVIcLIJs,'8Cm/P**;OMPC&cXfh%=/k+js#9qTGlOI"LUi&033W+FJ&:)RI%!nf9_c5-gEf@61e1@<4-^]W$1W3h1[:1V[cnLmC0<9k<C!TrPDfRWj^Y"!.umr7'^UDr%s!Bh/'E1^hhrO#6T8[P)qJ2G=R&["cIlj)g\3KaAPmKgArqklM7X@GJ@0R&R>rQWr+.4jq+&2V#T74B0!7qo)(l&PF.`82Y)h,]7%nZPf=PG^ou125K(=V3oCi-#rk<lS!NANjuR)<Nk?4kc+;[1,5oBQ$i;d6+FofGI-Rc)<O0%E#R_*(+E.E8(>9o==cpVEL'_qEN0&%P?oQ*p<[jta0;(+lXDXSIrY,\bpibJPMJKg3l>oO\Oq1N(hEP&r$-Q\k0YMQ4gaAsXV$XSTU1f>b4-pQr*QE1:W#AIH3jOf3lu+:%]5.%]!`(Vd&!cnZ^OauD%c`e:l**&*@/gJ^K\S?J.YF<klKdF"55mLB0c7+Y+9GYrF1g-)W#Cc[U[AB6G*pLY93QVFm_QpQgnkDD%6s)7tIlhHUiR=RmH>o-?o"O*sYkk;)WY&Ra9H/4Y*4KVqI8pAU6]NDkW6WFI=7@=&^KpE&S.)%1aa;HW%5^g,6*P!t?bd*n;laJp%=B't*S`.+:.A$ih:R&`p]EYs]>(eZKn_15<)"mK>H-H<)ba!/8*+FIuX8^u\aL))tX7&(-EuDKaTAp,i*iS<l8R6?1VqgC,A>MF>%Zd4XSFU9X^MdaP3O,9Bbs0/R\OPBUhO(8k=3?Oj43Tg9n)G&baI7H<GB'ZCIUF=K3k49MK7u$&%BEMj_YUmc`ckTN2<?H)\U\tMi%'fZ9W(fiJs$"^//jTTT7mf'G+(EAR[_oPeKGLj[AQ%+P^-tOE%VY9U>bdh"W$;pX*V`Ds<h$Jr)_c[jXVM_DrSu8WHdYH&LK60V?%5hiT\3f',[=A%`70WF9b')R^]`u.Jr;hMGI%].q\ZIBs(>?/8;'I_32E9*\J?S"cMLfLPeVk43*XsrSOcrZl'oUYCS'fm;BW$;g+%=a_<Y?k0>=dp_)P%A]FgeTf?6:TB(?BZ+kdJNS_f@<J<i2X9^k>j?PP)!;ddW<R,Zn^9M/;iA9m=sb7MPC'TG9!\?C(*0%bniY>A%^LMW'<8XYF4NM:Z8!cM/U)[`k4'uH$d$$ta5IoAV^SSNG(8lEdUG'Z&\Rb%LrF+UECM'g5!A22a5bol8Ws*E+0L8/fI`[&"8XO.$%FKYl8^!6M5o(Sm!KVAt,#8sX:<E[&rF!)XE]gT$.?cjYSeF7tW+%kgkN@7D0._TY#A[!6'-YZNYETjBUBo<l>g>Cki06CPA+HZnE%)^^iLYh&Y2eT:qBXU;ZEl9QOGf]mNGD&f\1E/dAbI?a.RMBp6-KMRMQ-q\U2k,<,oU&"s2/at@@2OtJO&&2u>Z2Sk[0B:+C>2[lD%'kuAM>t?X4hLH6)C8I0`5r1mo#cq"0M+Udsk0N!k,a\#\qt@7T^4'QQ^'k8BMAduBL69hcZ&spbkO?/DB1*dFGEF9k5=$C"6X-CZ%l+T`=j1^0seE]>)[IfspG&B?:U*WuPHZ$K\+3$D*dj@O.=/[+YIE;0WP[WCR<Eqh,&@Hl_QK\[Hlp33O?IfYI_oDPl[1^1mR$>42%C7u*UG>Qd&OD7r*cP3<!jn,ao+Rb4$#KJt9D_pjS*OeY6T;%).TDjQ3#2FA1>-:,'-h)C$%sW[$S`2fjBTr4`@?3`,-sZ)3)P73s%%+\r%6;Pl/Nb^3FX9RmO<4ho#46hY(Zg3!15H4r.pIer76;,1u'`J!7k<u8\nJ)0JP>QbdKaN.AI>Qb*n%M0sh[P=p5@@3A;K5YX%3'N>&$fuD23H"H^Im9A,*7t084Q)gdct"c*2QqbIfV"3]r*CTH"s9nU`eMn+AU3]:2-EjJbC],A'B!s,%A"!5mH",Vbf(,F_>JPL%^-TfuN943#rWdeR/D$k;)5+nAs5mW&LbW>LTZd)HUhaM&D#bpbrDMF;,K]S!T:;hCZ)j1/Ue.t@n5kJ;(k7H%YYK<F=^oFpCYoo'%p+e_!KYKZ&E0-g(G8:g4.f,n"]Su>:k?EA-5)p=bI[(81VQ(F*&&$ub5V?[j3!4#lBZUX(n3;]M>u>f2h\+:/Fh%/bA)3k=9&qkt%="D3];d\D1I4S9bCA_V(qH['UmoS"+RugQOW*Zl=^D;)(]Hg'2+"7"84n4KR%XPhorT5q+cbIdV+WT[4[f9K:V>e!XXB+ig!B<E2%XL,3]rI,"DVf8i6mh$#o"MgX,Vl;s2='um7KZ`\I`&f[7,R7D&O8>@RkP303%Qa?S_Ciq,P'I#&g-u\7Ne?m5f!"j:[!]/PW,^cG%id3":_:/'**oOe]^B9a37FZcs^&lt4EN1C7kdd?7GBE8BK$RDRS*9N"WPla$+?cEjn8u#i.0$&<'QMY+pX"N0>E"k9B^t',N:ZG-%Y1_H?d<A54:ZoL2]]%Wing&6,Vbu9CLf,kH]-u#(4Z,u,EF"Tq/MLs8[(5;U-.YTChgXDie+Rb<6?uT;k_QtQ_LFV'V?aN6e`KGu%r`p(mq)_s"p>\NXG<r;8B<L0;r5JHVdo,C.E-gbu:87-DbcAeW[uqQtftRp#=B<6[?AOR2nXmgM19\6FF,Dis]^G!4ha1utOGD?K%@7,N)f-1i>]q[M_[V:-'N]sebP85WpZ0)Vgj@Z[C9VtEX8'+Os0<nFX?2$@Jo34GWb'lO"LAL:ZTB9BJPAX4MM"3j%40UU=p[9f(%bKiRR<\Q!Z%KdZ.b>aUF"eAc"\A]ikDnC\N!C(RLj4Q`^(DZ:chs][Mk+MCm:P);ZKZoqQa^+PRp[`[HiA9HkUUt-"^UYPA4m+>!%#C0$6ao$+0Y>LV:]MH8^`6g<b^mE-t'.@XCrb7eHW=5%a14:NXWUO63g7gVAmA"TBE\B7V2[(S=55]I(Phrq!C#pJp#!YK>TWSPU%JNk0W3T+*"oBOA`E,+,RT=:6]?O?IfTe,_V`@u-am^$U4@kD/]A<A"a*q=%e4L7:fKATLaF"=I3\Gk;nFDl!*7#q-loZl(@Cp]j`%O"JsiK>!,)fu'A`"b4R,\Q$G6C`em(\JUZ'rJCW:m4]o)PDb^mdkR5C';YhHAb_`bC@KaWT'*>hU@dMr-LMr<Q,hR6P*tXPG)>I!%Oq5_tm0p([0WY2FMk%hO*oEt5\X)M/2HgljL(6<]Yu^^CmXL8Cd<`8pSFQhRk$4..F=6WSj\Vt1qoaRPpo(+38QQ3pOkMUgYP6t(%L-<R:3q4X``[+fSK:JBH9Q9d0?nr1QgPItLIH!("I1K;k7+<"@G8TaTdYMA)k4mWe6\Cseq)g6(Y5a]5mV<m]kJ[)818ca3TjFgd%?tDgXkgS@shZ"HWpODcS`kZK-CfF7R#Au#FfWDH4O,dgInpB"h68_PogR$bH.3n5">l9G1*SmW5o1MQ0S2Y<"O.omS;%sN2ZELkS%]_L"G[`?KC)/5?i:F5dV4W9ZT7uHR.4@Tpa\@AtY.ITZrjX/S`-Flaa.an4j']fqo[jXb1kEB$p>i*E,c"QRe*l@q.bu*>JNZ$_4%bIV;mkP@$]09Laj4QqlFP5M2>o><^o_0G=F[f%Un9)GpYqC@s/jB;1:7O3t^q$p2]T)"tRD'#1jV5Ne2po!JAamp@.&GLPls0ReK%=c",_T)\7[k[\9Vi:@5E]g_fX`ml*jRR`Xaa>(3=K:Zl2h>%tGb;:57G<kW-hZ@<k%B"L@J)%dSm_,Kq:=Pmu#sO.<\A&hDKD,B"%*d*J$kusJK)I)3-#]G\-I!rp'3VQ-t2N7Jmo9P[?qSaiCLj`EUM"4u\4e(/`@Q'I<#6NptehH\qd("?bHY$M&c$QZTQh#rS)RlVQ%S2?;'7r'->GO[J"9qY4ulpTaBnbe9l;%>^c)5DVJ"l\,=gkW^h$(IJ%d2Y7+iY%iA3O7Op7YY[W\KIIrpp5Q6-CpR_B6HIop,DGO%['%V)B^rG93>J=e0rb\rn(aCl&LHe>8+K>`.?&uC[Ktr._)FKgO.K.P5%.63X9"qbIuVF<82=C?i`=:uo.;sTD0]jf=Z_#MJAtKL%\<qQ8EK:6u`(prW1Gq:QO?`@.QXJ<lbitq`T.fd./*:fe9Q:HNTD&1V<BLZ`im3<@.F.OlO3C@P<?cqTZ:-s`N'!^i*Ed<X&SP0(%ZXhaTIC.&$Ectnlp/cmV)mFR#YFV]/oC*R!H$l'0Y416h,HZT]54Xrdnai1$*pW!eFt&%:ATk(S`c:e:#,8Jkr>s2?<;&-$jNjK5%E]R^&7;4tkIL0WO8*tV33QtV3EbbMjQuRD:"H^Ff@Im-TBKP2pM@q;>L8Z!q[iHj^_t*biCEFs'j._[rT2*s4\?$4g>9(ieee<:'%#3k:thg*8nRJQ#n^YV:Y5)[Mkj$#G6k+CbFHf(%PF#MVp_J0uA*]Zf@$-Ff)7u>]edg@t+SEPG=(k$IYX>tS'6'._VhBWlO2?o^c%1-+^cGdtqc2NMcf^E&OK86^Bu7Ql'B(6:K2U?3_I[c*a3mXj<M#\X[Yk7_s9>nOAkI+m'5\'S5f?`2p>)#"l=).caHnPVLK*bZd2%_t)1k,bFZTP?-Zj=Vq7YUN/dT.87kdc,1hVQaD4%'AJZ58<kA_%4-6E+j)BTT*f7+_A[Ai[\G2ekthr^4+3YW/@L7*)PgP=XuL0V%*9UXP/sl(`1cT!(VA1h7b3*u@;^J!4N-8m6b4]l]Z^A9MM&aQYNA)dl4cbG)k.Xt:e&Poo*1uqHs"<o!-dN--18ZP78Yr':;,;=V%?[)&'!$a["<W;-[rk8EB`;@=FllhEift/')=%ID*53I-mV/n/i^e[.I)J+ba]Z5,nEq$QYH%!-.QY/#q]7aB84SfcPn@="nhZDg!%ffP]K3Aipfj#J(%Ab%&RGm'?#Rq8]i8TpbPFIXLHDMTS0ce's.KuukS2.)6fDnJ2\RO96RYt^"gnH:^Dl?Cb93W,2012YmV?%s4+%PO,U<+A1,@HY_!6O7mS4kq9=j&UjsK5Q1Is^XeT*;g^^P@hc$m=khp(!Z@e2r-.puRB:$:!iP9KhA:\Ae*$_PgI<UoB.EmPc[S1(%"o26]P+-`>lj996r57\cfQZbMU8L.$6^Tc#hr]Z3GLDk[)u;M[A"u1I>hbnPn5H>d-<"X/iIV(-X42TRWuekMl@@ni]@hYQn%?F"%2eS-,f*C/i5X4-J[Ro`8(>MTF3i(XmpW(N3o$qo]rUmGMH>9@`KmNWiOZr6L%2."OUPD'na522)b5hRGZ`hte,?K6jR#eAJg8oE8%C&F,V9L&+*K:abTT%]`Zs)CFWXhPe!p4lJHLX]N#oT*2=@rTu=c!%1!8Q4EFH2mOjnkG+jaKO@=&l`'#]qgS27]YD=lGSa(I>A?8%n*CXhQKY-&SZhHSqRkX%HI^/FH*oGqU/:j(UQ&d[5jPA&"R9o^'aV6Ikk+l?=s9`;>9I;P2qMB924LeqS_D--lXO$!+l@VuiHN0n%f&,p,mH/3Yh<--d3NdLNYE-rJg#(Ulj#sP'TZ5GrX%jLo$6?mjmIq.$Jgl-A;Yt.S3dWM[>4Tn<d(C`X;&"H%bOI@8`Ga\7SDN/J%7Q6UiCUO2mU*%f6WU)2K9!tj7n(2qJIoq&9UmG!TZe+p^1)*bW8KXcCFuR\cq<KlVn&a6Un_8)Ko[Vj[_ft[l*s2BkD57]j\%e/L%SY0&^.Cb5sWh.A.0Nq2Io;#O[Rs'mPaRA!$0cnr8%DqkH'?:W_W!eNV9ANS)2+GWIWJFcN#km^$])W11`E_nc7>&'5dAg\oA<NQo%[kt@U+tmYn+(?$FOb[CaLC1D!\3`jIG?P/>K_J_[1D+h1"klfNdDXge'kkVGbo@P5H0<X<$rcVY)&>6CO0*)H;-&aXi)dG<Tpl"B%_5*e*(f<<Z/&0R@<M0.Ns%F1FI!U2D#-E%IVOt3(#EATGf6c5dF:-U^7I0WO>pg#d"3O<'oKu?"ohbT8c#.GD_WA;VkVda$=OZkP%;3OJP%e^FTj.S'-VR-;ODmma=bG9a8lbcf-d:LW=3h71TqPUB]5lF$Ka-YCi^!gY')(hE:-"QS\Kce"C58\CGhcek5^M9>-.\SXG%YZUP$>4[Z="hYdOY3"'#oqX*dqHljc<kHmQ5aZ0\nZ>Ya65a*M6B!qi\/nu@Q%s++Yn?+@9+709i:2Z#-T(d3;F6A>7&'4defL9>%,`Fs,<rY*1oTd0(06J]>+6I5RhBT_pninYHr]*/Il./*_KoM<JZ)$a]O08r>QiEe_r;U2jG+\d,?b@?XLR1<9q>0m$>o)H(_o)W"%T/LH/kct,XA9S"P:Q&Q(+=</DBS/eGmmOhbT,ruldQ=)g6)48-CVBJ*A43NWIs=qYQ;_XCd%F\`YKnjn`48t?5<Q#h^=[>D%-XD@%,9"CIj/Iem#:CBms"jZY]0@$WBC2nJ@tWW>rZC%saX6\Qm_X=G=0!!OB\\'HA+jE0c?p3q\4\4YLh3$dakAE7]'3CrpX$'clKLgK%YWJta+1ub2cKs'\_5g/BG2$sn3@WUR2I1.X[hc55gL%Yd1EMq1BeU8S(SD!<NUBI9[+=V%3j8QNh1pS@#+mS,6Z\t`Xc_<VNML,I%g`-N*Ra@+jYMKNKBRET4U#o[Zf'7_6aL"/19mZ;4:Np1GVie2"5+)Z$LbQ>iA\GpZdX4k5<TgPTqRl@e?Fj$amF<7aS$0N?]uaba%p,fkZCTZd'g2eKeh#?4f(mMSB`<l?;X4IF^nQtOq"o?aIB_MS)C<]g,h/#jHqT!B3;3N/6PT>gi$bPZ?=0M!c=?kEKl&XOgUI1p?%rMs)m-W,l!+Q'hR8,(/FHB`0H^M;R\Y9B%F9)?[$#C^Vq\,U2b5/9V?NITlkq>*CG#@$NOA-/Ap5J-lP8pl4AW9.lrOm_p(mC,R%%_EB[IX<WTViF:1E-0=])NQ3+!VMA?]ep?CD7l><Tm1L\i>@G#;eSK9s>W+WKdW=t2T-;&aO6o]U;=E\9FT/N#PJ1):Bkt,)ih^!d%PW8%_4i<tA$2<-\mTM2:\0K!^.o$7">Cnj`YrOcYkJ6fC)\tkkb?lHUMB\0.abHY$414o8X<oo97Sss5.?YObL\>/ji7&5XU.[E>%csRKbl,rO!;Ars%BHm)84^qZ=-F0:8.kDH'/:$#QI.4p_'&uoCBfpqAUr0`no0;\Z?[3h?RLNG_6q04JZ!=cibgisfb/4[s-F30l%_dfd\^P+%\k+hoN^2C@lGNtrp\8q4]Gu(B1&LeLnpupdFhoRL5CD&K_=ik!>m3\]Ia-Z/fWkY=-nRYRcp*=*sd75V^YP-FD\'Z-o%lm5K0O/@E\%tph9fB62:?UkA;Uf70+Pj,[rBu0MlCU9.r>cmnmg3^#O`#$BJS\VN:/,e,ej<!&-,(=mC9uh>j8pXtCTil_iM^dD[%kLpqYUpU6JPCcRu%_]52s!)I]_,>AF&F0[k6thkXYZ^kE]d,0'=*3=`T&8FG7(Xe7DmK%'+2A'@cXr>QaHZ@(Hf"\`1c(B^TdX'l%+G^3%5I0SsA:_D%T%X:(FbGtV!Ca!9oMFjq@u*bc&s>-;A2O\a+[KO46mO02#`/\\7584>(4WN1hR[a2',:.dSY3(2lNF''?AFA^%H&Q+d##W['n1eMi5IGgJHLmp'e8E5Wp5a)$ZnN[i]('Uabn5d=.V4MP'mBGfP5kO&Fb0[Omd=L0T9G'`;N==$6._)JLC/-FNLbBn%/$J`pm=uJ;C36p(h=BTQNgg97msiC"9>=lHpVQTY:kFmZ$:RVs?][$ZlXr!'%2UFs2>VpC0smlWU,su#PU@Z+lKO)=e)em@?dRP0%#tLT]<L&qG=qYOH>BE59p\fbu6I\n/,^j+)Pkl0,l[cK%BKPH@&)M=tRD/lg/A+sVZ.<a\\d"IYftO];8+Z9>(^?gJ*a@G[P*.T6%f;@d.$("%c#RMDGL.\L4]1duQe?CR#!0a9*ZqU5[JWD9S6R.2`g%_VqN"p1?Y@']8(25Xtaj0]`gpfY7&d>HR?`'fS^od;+XJMT"%IAta9SOPP-5(0)Gnn""*VGn/4.%1!1U6B8'YqiifnJJ$1ciW$jU!j)9Y?3kFAd+C=itjBVl`\lL,(W!Pf30coYjuYt^/BTZ0TkT`%QY%mkB=[Yq`WIs*CHWk(IqI#U*$,'L:]I7#0LB2`&?LL<AgV*)N-s_nhc7u5#Tf640:2sM\DMWY>PRC<?96_m'4[mrRrJS,jbS4T%"SHgEqa%LTgZo*L2HhiI-PYm.`SB]9TR37)$@2Z].kpco_4M9b*Ru0L*RqS$9:h14m0AGL%\J]dg0]gAZ>[L,1`HV/K>&:gcWH.D%Ont>0SMj)>WUi;"at"';BXOHMr/bDK+;6eoJXTCus"9QA>XX+Y$>63k?,nKT?k/j\`=90OAo&OehGELpcF2rW%<lIYO8jo?FEGR7%Z/0EMQ@Dujp((H.$]j]12bKXd7]j)S]_q@tr-`N^-nMd,Mj5B\l)X_WiF\-mEQ?ca<R3U`X0$bfX\58briYVc4t\F)^@ZMgW\f39%XIZG+Mjp%DGt"-nFVIidmZa<OIng`=m`mJcCDGk?I[a^"mrg`q[l1X=PPm\Q\G`rmQ)uRI<+]n@D"D[^fi_@QQ<sQ\:G!Bd%4/c<%Sb6/H0tPBQ.K!1F(CEA7@DeoDl;%;H.r02Fe)`iW<$mt#3nrBNbg%40[[Vqdf4D4"X51tEc_e%HjGbs3=fBp)c<TU<-eU%r9Pk(<%?U(r)3kn8p><.,hq1<nFT)*&@[I+'4Q8WKb:X<3ANS\f,h7oIK1qN\@r*9"n!f`@DBX;p6bqX&nUsYa$k!T+p][=-dg[<;Iol55O%-gPgm/#D"hWD(rH(KV]<[>7;SR@26f6SlAPj8)6E(9O>sUSJXYlu_o]1Y^>ZO2Dl9W_\[;Oc=h=N9a)8UNL-p]5p\M#p!gSo0Osu%5JTgLG2KCH]s"Y0O6>X,F/jF:o.RIJ_N59Cg*j>FB(`V(X*dJF4PrB(`\4*R]3#P]oOI'2A>@_LZ8tA)^=]O=k[Wf$;6RhU4fg3Y%Hs0k^@?#GC5)RlUUJ/O$<nc&,l:lMu`r,MhC@gF=[*e,Qc&?I<WU?;kaf5akX#6(q*HO$2dHc.Ug-._3Dfg>LrS)e]jhbpmPnBJ@%5&i3M#e]bGGq-jH[IWpk.P7+Rq<m%h;AU6Wk\G;'r]QP*CXrCiNcfjGn/#m4H8uo]WGUd<2rT`72aq<XrP\CK-"@OUh4=Ocp9,R/%cpj(bNLe-[pMulJ9+d0?/eUoCg].0Y+7#MI[pQ7T:5(TP^AGJ\g$%+?FoL-6Pjk'iCg";JmbI;$pQoO<lh:dfToEC8X`l!/9k>r`%NVed8YoY;XQ8a^6NE-gECcS%aBVRLZkBDBMA7">/s%K'R(F'jsBdpf3^DFd,4hQ#f>KIj;Kf)KbjmMR%5'!al`b+p)WmLq1G@eN/%hIuRKS\FB[m*\?0-O6GFkAY^$2>Wul#8YRY]26n[dFr\\>Ma'p3a[2)JOYt-NM\Jel(dq<k?[1aM_r'&$19W#mHZ(LkaT0qBJf=&%48hPdeV_uDXt1VhQ-/(Q2DhuR4;JWbLWb(C.J8;!>,hGA@AB=Fb*(8Qq(c#YA26`K>q,1:NM\HR$6+ohcJ^?3S*t:Fb"T!Gn*H-*%^J>"OS^NBc0<EQdP?_LkJ(j4R2qhppUMjK*n&kh\/cU*1e*W-/AqI>=H_8_e=q;5&IXR^6lgGpHDnTH#Qm[f(_eaujD9R201E=%s%HqUi)b1]\r^[9dADq7K1qcgX$^[E!.2k.thl)#'cD*cjYmo`NFQB[$$*tJ6-PmR9#U)Z>aSjkkkYFLm7H4f&k/h(G"1K/jCI>ZkC%Pk2#0Ct-q2E\[6T$ibBe9'L^tg$IIB3OM4X\\+;5a7"Wgc+*_T>WsfZ7X_nPr0VU7;;WEE5HIJ6;lp#rA*%=BrY>+u+6D,)bsK@X%5AfN6T;SO$[m%c[]#rjJWZLj*Q?$p"]+NrWGLYEbSf.'8%E@E,ed`n<J!a)khsRLAhk$fo-e$rt^3sguLMtm^,fT'?lLgd_DrFK]%GHLJe[GFXQ[p&NNC2X#4eYodlP0*.5'[sXIWSGeM#(@YYI9Ng7[:Xgd'E5*gs)W0SHTm;_p(rjWCTHp%_Y9ngKi=bIc^msi[dfK^%T.^u7h*[E5)s\R`_)/4jC_S*gZVG.3bn)[O%UO$o^1gr@DlVFPjdXCrNhB"P<6RLk9#^_b,'i\EK0AukdtHTAfUgI\N'9bV;)EGK%5+8spgrpj"XZ<',qUHB>GDL3d>2s*UR*!+G5Ko<+3*d]icH<C;X?4nbh"pOr2g12k"CWl?C;)60eu%0\^/(50N>gDMd>^n&lhSUk%Q0NYb,g[si`bDbI0g9nHW'rT?4/UEmAQNQPrpAI!he8q"ZIfocI6Bi'j6C3*PrH;1'H:>IcAIT"B=!&^SZgpc0$n8],7k^%/YZ*O%9bQ4>B6^2koke67KY6cB[-u1JV7&a%UL615UDdtP)GOd2<]W@RMJa+bP">.q5&qaqkR"Y[jB8$V=^n/'Ika,o8Q]jfX;os8;G#p3%I\Ia?q-tt2dR)]t]I1)%_?E];IM#5$m^C'D^NNeVqB$%\:0W4eDlHAGlB:o%<]'K;J*97)9tqKK30mLH(FR/RqppMiQ$deDd/8)D%PG(3K3e)qm[-Zp!]d\Ti=Cq=GDt3]O'78IMa5l9i%/Wo6'(g&'aPmSo'YZ0"Q!`?a@CSXZ2_#^A"":U"cpm;ncHjJ756A]Q-&I-r%jbrr$7QCQ8#X`JZ]4"uSp-.l.="'eA99gh$_<?aTRM47*OlTjMP'[n,Le`H(nPPc<FF;,-K?$K3S8o-3j9uYQ)])]%r7uiSnBRdH%(*"F'6C>objQIIT2Lhcc@JgH2Yt/?C<44UtZP+?+RbbHV5K;Y5T<H=<T%*#jYpiK5*m(4Wbg;SUL6i<bJ*@b5\TXV/\R,,o)Xp3\%;"R;E32(O"L9W=0+o)$?d51f^Eb.5tY*XHchXmpB.bj1u7Q]mW%A@(hkN,[-fT'.#B__3S)Ssq:r@s)9%,TCJUfJDS\SiE/o4oGA%*SK(/IZGRNM@Ski*ENBUhc5n1p[-!\!s4>lhN@O<4^>j?msPT-lI%MSo9!QTAVM>OIIo.o1jTs``]5(fUNI6qakI?^&M*0SFXm&n%SGF9qT[&2`3T@W6qcX..e?3-Z4W0CFo)<Ebk^!J,SlEj%YXP[orVA#3%@U&IpK?\,NSVqKA:1ZsPU]leAm(J=IP"%WqmEHp<6F#d%0^R1YQkgGr-,ui9#c[J(SU,?<nZk'PkTQ_4l3=[CmcRBC1]$^T*L*S?D+U1%nLUYhId>a'D0Bf0D!_Pkjis>77'-':lp-l;Dem<2%pNtCrl1HE\9)%Jn7!?\E]"n5pN>t!3DmQ^+`D#:e",2d&0*u5ESleU[G(1*,'g8`?VQrFGbMi>Pd^$VCGs`H^OABqi<th?2XB%82%`L^,92\Vrg5b\]H8ESO`I[K!3-V/^.E7KhIG<mr?P'6c9j)=NoN^]EMi>_D!SBgIH<3K(B<b:gdD0dD,EX,?9p0r<KcVU3oUlIXN%]!ib1<E"aQ1PFEtW^im@KKAk<`5Y-n=Q5$$.[-MUd#mBi91VQN)=.^OJT5?)*RQ&m,3kHrBJNuK#;*iY:Oe"[[D(Ke2fcY@[g_M`%VXNNAm),DsVHoqaCgU-;ZV.)ZXcg>J#cEFNX4mtB2$=pH9RK5[O?^@0e./HNe9;MXWSYie"McY6$P<E'&-.3',6^>s]cT8KhW!<E%&plf_Ij'1NX"3g`D1j7NR4\0_L#S^SlB^HceP#OdUan1MBD=mIjM^36rqSQ:Z03=LP7](kO@q]j=T/@D]N=e?94$U<Iu3dR]RQ7a%\1UFA+hUJEm)ntm?k:@<mNDo"rqGk9G2=o*fhHVX>;?`2@$`D^RQ;6FZrAA+\B(B.S!W:C,J#h$G>t2W5F$6e52Sp^QgM!X&W2:d%<oed_HYPm^O2POtlLur7U6"7,!OA)FI!n:X+Be=lFe\gl5uE/Q9_('^b4Oi=EA*tWl^J]Y"O9D$Q&]*&++%MpbXc[%%,WQ[qNH"G%g^A"P+WQV:\.O2VaW'2PlXfZsI6OW0MX3lQo+OlE'"_t:8j5[f^>T;BE\d-E0s1N/leCf[rFICo"?*hf!?gX4Sp&LW*Ee_gTM?\:%G)l.Gba]5562i>G/3CZ'S]lc#3hq-\al48UM8+K:Sm]%fSuVnk.]=nl^GS^POS=0$ff4m#H''Wr23CRmj].\Uq<Uot01a8O4U^;Q%**N^k?i%M,;<q@Wd$n!dHBs?XrJ0`d\F7nhEar&q]>`sr"8X@0Q<37#1PX:Q(e@XMgPp-b%V9iM^L@\$U<`NXPR&D)(4?f1Y($(;%1gsD0&_"^h%nJO/Xb80E6V0,)Q\u0?\.Z2);PNuYX+VO=W,-.((9tV>AJ:/=h)B``CEF&GP=VE6CVN+1@?fWqaPkYp11Y?BU4l+s%ZWC=+516OY^U+g/3=kfI!ce]3S$L!M-^f4$R.n!&JVR@#(L&@snLX>.`W8dh&VCU%9B;#ec2_^/Y\&'$R8h6oN8bs7H^R."Nu,+9%9SU^0NdfWprWoj,]sH=Db8Fnd%VeT['`*(`l5<I,&(V@Q)&]uVKEa;[8>>Df'H\-hP"TS_<]2[>oc2Y.[hf-n+cT7S%pCicl1[Cd%pVJ()5-V:]oO`@r<cVb]kkBY.k[#\4?q4Z_FZS`-)/0nf9cm&>(F/Su;-jM%Ac`Q4[%:,8Fb1o7lVU1-%7;IY3S'fbr,0$-?0^/P%=0f\"aJYcMmY7M^\%Mp<;lP]mL_2ZHQ#+eiN?G(4+JV`iLp8WW?T"t.>MHEG5KW3)mj-8%;b7*N:s9iu\.grkbiNDV9/T$i?\Q%n%`Fu3diH-i%>peWg"(GCYfU0&*eb*rjA*SuB)!k%YgmG8)N3jjmCQcA,HM/!9LmCT"?u_HPqP9j&Ts>qJ$eo%J:N)o3Z'\Xjf_+mG%@8r1n'V[RNrP>rtBAsM]rLk/HHn05jhkeEC"PTh=a7/T'WhL;)a]IpufpU(c^746JA\34j]._L[^FE6-G3c;W^2[DO3HXd/FEE##%5Rq(I"s(+6-]g\3T0Xjk04X+j/]MDLH.ddZk0SC5L1\g.BB%t5d)BYEM:mL@jNp=R8i,ZTZNZ-.To76i'=.k_ae=X=@hWlOa3(*6%c_*WuI/Ftqp^F`1&'5);FR^5jdMo,/!g7'AhB]j$K[D<h^di#=I7Dok8\7Bm=44'6J_LFs7-T9.MogltnSI:)T)@?KCthG.Bs=N0%G]'H^o'!'J/uI8\V5/2?D"R[GAp!G;-<Ekr=JC%&JPKZSZMd*>)oS8'a!^#oiS"g&0^8@qZKAsHa5CCO86o\mO+TPr0m$$N1,gUV%.2g%[<T6A3;G!B>V"7*=#'Z5,&4(rNN9rOsLDI+-US?6B%.36%:n]"?OcY[k((gs19Od":^[t"hoKoif@YYb%8^YXtd5lco!s_..%#R-'DL^5q-@Od;ZcQ_*<JB@rh$kHN'TL933'do9g&),X.eJi/nMDd6Se9uo[8j%W1N!j:##/m.@M[aOXK+CjQi$JauWl-k,6.9,&%h'C`?QqE`,1&Ql.I62%R99o`.jRMmIW=t-[q!Pj#`5!bH",kU@4CTn`1%<S]C.'Db%$t-7*s7"7)Npg44b&)oi03?oAVQhla?71e%#BLks\BLd=kZLkrd3n'_%".Wg#3=MI8$V:,MkU$E9p/u^GSH>^^\ECP.CB)"-XKkM,uq0n"t/g/`SSAIUYg*"^0FnXXF`E_K:.dB%FfPUGp[c]"`a7/oBQ%r77r[9E>WhX:^C>L1bJ5Sc]#oP)UNlCs;'_5Z1+6-Td0p1R7`+j8:SinAE>uDmqh`^eQ'U(;&B,c##rH[-%T<uF'C+_1_@i0,L^c*;?jj05S_5u9rh<3W+AnE;9PHAmS[mcJP\>Y?0=mACf6k*$K''j%WG"5g-rV@A);fKR581-EL8.17s8kQ"4%m[X=c7)ct5gpk:oL6sT!J+.Na@JDUb9<jDcIi"%-e5.3SaQR_+/T,5_aW?lCT'qg3GYJ'"d&'IqOa6sJk)gN:8kkp`aj(CbOU7"u%s#r/ubkq,@6kGKS);,.QLK%kN)VWgb)45D'iu9e/&(8gVLYr3Y8L4W`qED>XL3hc$5B#3HS4Mpu-0Kr#Eh`':I(uubYntJK%C>hm%.*Hr^7^:,LB'!Qr9/`33Tl48iF4#H(Tq"/j8L%kHRFj@'q+7BC*P]epbD:Fd"5b&`8sEC9D@Rq?hfpJFaN5RA`2&J#RDORY6m0#m%g'J\(HF[o2#h:.TE\;U"9!A??&@p0llkbs"2kF6d59DMrc_!1o/pTY9i:i:,+s.<S@/Db>L6#/jc\G.7TfPq4S/Bl@B>dM*+)]SE%_;XtD]XO>b=#Qb"30[phN4;IB_tEn78(R0=o&51=#nZj6alUFV^)rgH0N()>nC0BD?Yo(7"h(o<TR=#_0p/9;!Q$&r,[kdg,cN?k%6t_>>oS(.big5*^1"o(U8BAX?KYQ)IW"WK@O8L3[;+JTipouTb/n4515RdS+M!+PW!%1;bnBR00AQ\c=Yn1/pQ(Omt!Y,LMn14r&%&`YO^Vn);@VMK/\:*,idpR,^V89-7:1jNu#]pL(q"9KO^f#AkEE"['kVY(A.%)]/J>0luen1rFX*pR#i[%8PriBbFH<5Mo6]jbU#%gSWu))p%e@D?1knUe*_.5n+]&Vqpn)fT/U9V#H`l7d?%+A>K5&S4H,L3k[Y<N)W^$">WlKQ:YV_69UOR8;6uLA?UOocX)f_9!CQi%?CEo7@O\eqmlQ(h86`Xn9P,/3VS]#H)`Co5fMji1_++2)-^P1\-oS=ufC2bLjF0ai@`)ah`RpFh9SJD]pEu@9#Q+KceSskS\5Xf+%C?R$/`@-I\DhJYWOfsB<&u4R=nNjl`&(&@[#'rRHT@(\DJk%PH!uWTS-.!;=kqL`*QOJq"\:?#E[JPluDpsSj4"lE\I*@ns3?f$b%):tk']=s%,B2/2G`VD!1OhTQpUckUOd0h_9VmA;:%=U3(oVHuG.f=a1@;f/:=t60DQs.)64.BEbYFeTBS/88+#6$f@P,5/>]mE]"%?bP-/4'HR;M-]6b-TTj3)fo<?EF+bP<2I76mbDV_]X(U5G0<(nT"[W=]?UA7bHRJ=hCXXa)b>-&>"90a=u0&[<%u5X/iLUbHch:b%'X$![)@bh<Kk6e]3EEn(;SZ&9:5).>a_l(JF@;ndbJMhkKo`/@46-/u0%oVpM/6.jrn<4PYfj]@0-?o,Xi3-.XfOoKg?CeNT8C[o%S,,-T>t!`d:+aGEFSB!I:,-X6R<F,[`H1R`l@G,Wjc3pk$-M4D^JbG2G/!D%1;_TKA+!8`q8+H(/nP"KPiX.1)-);VD?CgDn[J8.%#n^I./&A0iTj0TaC<oDGgIXH4&=f*7pK2:O^T'<$9-M]8a57*Xd?6%\bh%:gA$/;88M3[k9MOXr\YNQAj14Ercme<5ij!KO_d4N'%l\-;V'"Ogu_`&UT>r.RiI*oDV#]DRr7.c')N.cARc`</crj_#pg,FK'B7,QQ>t;SY:A4<T,+C3I+(jkU3j5cL9?/J>\SSj]Tqs*-%9c)@m4;4>t2I4scP%Hm)c_cV\[%Cke>o6_CDg\;4FG&H^15ThYKKJalflU,Y=>&D0YOr1SFCBWa<.E66bbbckV$i@O)(1n+9JHso%p.QTu/hE>AlFdP"B@DQk<n-pmR8"LK-+:Q^0Uj[GQd43I-C%:AVOUO[mmOMH_P<eOSP9o$eL2fXn_&"m<Q4-&Nfm*Q9sI9%dnQ!7%dFiVu-oQ6,?.^l(BFOf@flUZ5F>U:=U=jWs\TEu&ll%mR/hE?,E.6oQflUX;YS5lL.RqOW$d5@cE9H6eflUXP:!@nELtQkN@aKbV%A8e/u,Y(0'0`2B8nplJ<VMgE$J51(tE-)2$V&M5k+ZCe\EAr1fSR__TdTqa@MGAOkRX6"4c/IBqjR0(,f.JCm?X9%,VB3\^3XrU,%EZgo4Q!X%'j]MH-ipWR8AVTI!J?.rZ]+f:t>hgX4_fX!;XGnU'e%j^N!tlrX;q;3u;mqHZ)1C(abKC[KpRjt)++KNn1Zr+d2bl2/%nn[Z@:6)mKDQ%fu(^Uk*d9Y1o7:($_hd8AlO_t5=c]5a'DQ!Si?#pf//I,i(%Y)`/T1:X&U:^1SPQ]Un%H-;8;2Bk.\I6Z196>DH%p4\p1bRj`EX1aAO=a]QJ%<aKM8n;TKaQ;)J'T3R>T3g+?b/r0&Z%kXE,]b"Fd4F":aV*i-M>[nMQ&n?L*Q4*<hS-g/ButtJJ3%l%%eJihP<8`M5CqlYPR<V)8F>;rfi0p9/@[HUFWG!][o1phSMIumLc!uF`@k9f.^G'U<,2+\;eh]"XeupATqh`fYg>/o[[?1&?JU8"C%A?r*GL7:J?,:1q3*BBKhqkoSD9<A*@(iYcTmotu2+%^%#FJ0so?[it%_,uE-HWMIAcWUWG)8,Dq2MV(6s%!s1_%G1[,p&Js&<%SH%/MlKtEZ(>_PJ"a$@]2\L\=<'/\>\-)03i%iN*T527#""*eQC/mD[F4*`kAJm0;XT<>)U*l-[@0D/s)b?).HBdM=/p/$jeh6,")-"%XSs5aj!Am=72QaOOaJ#n\`#1*^")0!E$o6]NkZ!tDR^YIVS(mZM'?i[Rm]I';Xc8NUXkY$L:]acn]BR*-f+M8El[!lJJR4t:D9*$%FZM-fAB;\mFZNAPXK:Q;^NUAA)uGqCTQXgg,+4Jo'5J8okDIhH[Q!N0g6E=BXSi_QkTneiKBl*nh]Cq.'&ppE.6E?/[#^<e"JI[i%fd3LMc)k?kDdWm8R-m&@q3>r69]6jt"-]+*GGbsDA"$VOLqF^DJD&d<0;Pn?"Q=rhP*kC_h\*'6"IF(5-*Z3hg6ME'7'V[_8PIo(%#.Gs,87P8h(m6Mnri^iR@JChoLV=F'MTL`afNXi.jgZ)0l<dCn'$P;8]H`b`UW1u@l!k7[M-]jHWfl2Y;'*\%3N`nK7'EI[Ur/F;%M;=AX_Sa,mn36Z[P9ST@Fl\i)P4^psa-C`q+\)gpd?*b3?b[QB5qB<*2@'-8:.OWpZ4t"@mPX)!S\pMjWPup5G=_$M5osD/oLD[6%GA"V2q\JB:qb'OUlZCZN7pM\W4`&U$MC\NUjEoOn7HXSl^4,7>POK@>[--Wlk>I_8g\$NkS!Y/XWdiO>7[<8fiL.VoJU?&!n+Vl?%NRm.X@4RoUNQS57WD%NuV%Lq-o*N)"3W&6(1lr5,+.\'TaLeTHP!>=gk:0?>J(Dj1l+;*TQ%TsED?sBZeZKKE<b6XBpLRm1F,d:"%&s\-:POEo-VW$pg75ila?>N;(2EJ8=C\_5(dtZ'4IJu0pM##InrB75mYh\'dHY["LCZb5kEciZ(q'/M#09#AP2@1ff577LgPC$iG%msSDQorAaIpQNAB7@I#X[Mj0)FBbVho0dIN4.`KB\<nI&,Vcdf%1]Ltm#l>%?QLu0.QZ=a)LNLMW&M&Ij"<X^F6DPq7!Xr5b<pta%78=k:(INmW`FPes6lK.EAu,sHn"A"o]c^DmrKY@@Ball4jl)p=j&4Y:7VTtgE6!'8?oWI;Qi,;8kZ"iIXhe9M#.BC:<ieOa2bhBQ%.cb0.GEmCpF5f8[.c\1%f$jGuQ[80?CuT9,b0S8(/KO\B_ZU0_AKn$7f?9"<C>pk+@t(P"r*s]@?EtgA\G'1U/AQ6GRZIUgN#`q$%0T#D?#$EOC^3@O*nWFuaI5tt/m6B?Ncoq^)Gqo\)X%pf,IaFtp?&EkGE.U4Ig@R\jQX-ElSpD&ZKtRmZ\]^!]MirR+j3@B*?7Q\2%0THk4NAg?NSE;_?,$C;i(:Z.HE@TmspDaU,A+_P"HOcckgSSK?`Y3%G;O:]66hRq,q^W>V!m:'t@4GoWVGuF_]CfdCq<J10pW'=N%n6KbM.iW_k:3]b^q8cCc+BrE5ILXTa8R>QtalSTu)gJ"#0GKF:8F&nbNmnPm*'f"')'oYEA4_L;!(OYW,ZtmjdL7otlPguT0L@Jf%jT(>":EJLb]dV\l=VbDn*5I-7QpoD5W#PE(E^c1'!@H%l*0b"J8WKK^e-hK<ag1u2jo?a:OeY\/ic>*\/u6"kker*F>fmk.,MPU>%jVu&E2o_\ApkH]&g>$q>nc`oAqhHfc)gIN*O\>Ku-cb%n2j$c/6K0WsJP5e_DTeL<V0l_G=,qDPTA684:\H8/g,&G8:hm4ZYFhG<%248YUL#;2TF=,U1p\KS?m/$qC%E7c.)_]o'l+MQ9=a-'S2\aNJ)un_j$1@IZnntDrn+GFk^"&05Vbc5W^\EmZ1#d)@Hi;q=p0\$N%W;$.F_sP4h0BB;!Om_n#O([I?>iX],(H]#"nbnc#PIU]>dCk#!"2Y_PnaH./^X[7Yr6!D>s7#a)8_iVJQKdhpl6g3QNIJ'<r2kDm%B;H(!(63eFeI_KO`TpBC(Rr4RIdsoD%<in$F>!'%p[O5hYFf&m0_oe>qtPd;qSh&!Shi/"]mfL\qB_;j$1@JE^XXtqo5TS5rSl:)%]XWkSn+DT&MM0AIbfeB-qS`\Ee+^aRi*O/(iPBF))a>ii^mO`k7^bnDlPG&t,tn6bn+DmCh05pWM"gEcb'WVnM7emfr4E9n<kkp.%j%H2d&'3m(I'6nOB\Tf\oo$T8O1-n4]mbEJ>F9.a6<;fj`98mt4t:&UfR*SVDtP&V)_WL^`H'E(pkE%.JQi!Kpr6ZqdC8r]IimPr%[WM$+%K6%t%<WCm`3"K^SuWIkp$5D^&9%6"b'Y3&?GEc+=Q4]+imf%0Z17;U'D`GQ<=euXVPnk?L<b,dl!D-/>'t8>R.p+s1p%#=%a#AH&4ObS1q&"-a4B0U)bcQ=#hjlt#?GFJ3>Q#a.n3c+!(RFY,mY)=23UFG.n`aQ"Go7ji.HXYqq7U`=Eh:/:oh4_^PUSNG]mfL\%q@-k77L6/tfR7qakeR;oqSat>WD&[o3;gI=nVX#f`]*b-INbL$DY4B!)&_OB^\C+gA_0DBfaPCB00UGe5J)*GHi68[k%+n<Sg=hc%Y@%3FSr-:"ol:\/h!5ck3J^h.j4rtP^H"-(F%3p07PEoVKC'$K?=Kos?**+>n!,)a)OiGq)gEGq>Ek-m4p!o!l;K_rq9*)bGqHHm%,1&.I0*S@6h't.*o#fTppPi(KZZ5iQQ1(i'0<!0W1Y?%mVTZ=XjAYFsSfcQF;jj89hkoO,#H-_PG$_%dl[K8"WuI]!inE\^p#>f5%>?e(+roB?eTB-fa\p%%QWpSDdAc'DO<q^_Jn!3kGVe>+ifm$B>%Wn%rja?gq;Ru#*4=QUhYGkd`Xa_caQ7oSec-jSDo'9`\8@c@E%H;a0,oq(_Y^RA)M+(S/.SPCKgl2GM&G.uJWA`rC9a`ck6DkIZ3p)p\_DY^]SF0p#P4qZWAo%2.XeAA]=ea]`Ig+6ircaLT<H[3e.%:V6G?lqI"*ZYR).NZS1)Q.Hdr.cAh.dYDi;Rna9e]bRR1k8@j>;(("94!6fjd82[7[+g:fdf$0,ijBq7!QjaA>U`,RCW.F7q"ds=%YMIHI3etn:r^]tU^9JUJ=,Ukjgm1himM2#Pe)PX`qrmO_4*,$t5j%>GCN&7>ZFK<BhCA?dr=n<<Sg]jsqjq-cVrWmW9<p-=fLFGp%UeCT6BA\,eX"ZA[pCZZ:q_g=HG%aQ$kN=H@j0h'->B]S!>s#g/"mG][`KTOR8A%*=Y;W;E$[R59l/6;hC>j5gN3r<C0V6;M1UTZ5%S$VBH8R3p]f((;Ll@*MkJ#Yj`VcqIX*:h_7#>"jWk7."VjX2qOQ2KBYN]sSk]'hdNal`0d,7)7>qs.$fJNU1nO6o*TI4iCW7J:^I%]*odJfuJLcO1*[laFR[Zna4e*o&d)QG]3%p$[Y*er$#%3kH^+cf^o(YiWqHn(POMWZ__gD7;80=Oil%S[,T?L-N@g>mls0]YNGue%i^iaV\0DZQBe&rGo`ZEN>M^taq-Ur9aF;mu]/`4HV$4/irELW@bfjk;\pqH8(T/`RlpZ&0o2I*u3*B?704hktfq$r)p#10N#M9Y8%Onq%QYH[gI6C*KRd`UV@\dF/^oS,a+EH;qnlpPF2S6XEU+o?@u#$P>dgg_V:2SX(D*1S\ZNGA'S>H?,nWkNc84"W@3cO5D8a,a$n%jh9KL1Z.'Y4P;$+57_g/'Xdb-l<9k75c)\N*O=C_rH5<tU=hW"D/B6`ELmPN?aHr$S,0Akj&6aEQWH7&0>Hb`D==pc]Nj@YSB9(d%JI(@3qiS(7+3:-Zq4n-:!'g$fnWCRWh%.9YGiXY&<-%R8?+k)9Q6/0dHZ?qQFK4"AkA+j-5H^019ARbho:OXWj)K.3FR!IF;;Hjo%Z2*fO<7`Vn/UY4gC-P`KeZ"7f48/41E4sVI3EffbO]kYNXd-e@\'Wi3pk/lZ@=B`]RI+AHenR;@ZF+9rpoEJVqYTi0^!M)(rN;I2%)pOgS\N6cR0!-]AcG+i\ZJetG:?=dpr)PrFh3$gha!.Ri]Xph.Sm':^+kbAYlXoDGg3tROl+OjcQd,JG:>i0u6I/Z0E)J]ppO.Cb%bRE9hR@:@p,+ehXc6dk$nA;Bo([MN2E,0EH8@]gD;tGc'=XFEh<p7N=4%)&GSkmVG2E.M!>:2XlZm=YY%=8llg+W9pCQr/DU+Ko,%St+Y*$F1k`:KTI**?kcKXHN$`@?KF@3$[h;>@i.#T-++MR/ho`7g/p<h9J=BF5#F#e?A09r%1&i?_[#L+oJmZRt&-:jcJM0QW=m$%p.GNeja6bSRJQ(-i>r><mg"5[6!CNTIF>E/\#>t\?/B'(L+%d1Q9E+Ep>o'6pKO=der(q)pD(YpfE2/YV[AT%]D-*&aa$&o?Q:\C%j.")JEOrht-e[A-9)%>AZM8H_>'\3@^(m,A9c_@gm39?9mTZB*>Ah[X.YK)aB$0pQ`@d[IN#tK0hBKV=rZT8FJ8O65ReSI5ft[aC%2['XkP?fk`!CfIGD>gP6=6c2S\^O]2P],7Z2/d=B%9$G4/"JmAU9BWPE-:^PYMsaQ=N/n0nL%a4k6ou=gPto4:c^$`[=8)"<O(tG%oP+]b`Ba;[(99.DeR0-gm]Bj8)-4RTR#,mEbYZ!Fe)oPG2WuhtFo1T0!I\LMbW_c/cNT';9eV[ClbW3]C0dPr-l+N!YMUk7/I>K>%f>s+YXQ%tn5eE[rb\&kQS"eM<TbdaiRlFI+:V@Q>^q1]DC&dm?kid-GRje&9!pC%t9ssR-<(&gelWYj&W>:@MGlK&#]Wk3-6[2p:%b36O.P[[uu^?RXgFDnp6X`+1G^6f5;bF6/WK3f^W7+fok,%T9%IWH\MH(P@nqo&$A4![,&HR@Q"c:C3(=oGopnq_62'4E>Q#X/Re%XcmReOeB..,a!W64EK5O4GM*UM,Q0k#S;@7A\;B?ht'CCo.)cuk9@\H\6b71Hm6@TXtV32O5:]cZnGG?K?'a>-pF#no$r5dMg&r^%J<aTE&9s=:Oe;b2(:ae%Aqm9/=91RbPh-#_9@=Qk?F;b7+2kWGMC^d90[Qp;ZE,Lo&e+r=:2\!6T]D`_Mc7W'Wd(Zl'H:.C<ohG[%eK)91ZS[-Tj3*Rb&@lg<$'Q,";QM&k7q=&MEf*:e+nd']L!Q%3e%*$[eq2Sq.MaeU.KmI*Ks@sJ=-BhI<e\kb0m)>("4r!/'cp^3%46<dRmu9mj\_OjDHqO(EGS:!f,uQ?=O2[&m5(Vbs*fI-EK#a&Fq7OdYUTO=eUls'eZ2Q3U*ZJf1,*.^CN$o_Tm/uo]YSRUhjJf]\%cP+k7Xa;EsYRlnD_N(.N&dpm)-LF0>7p\_/qr7JqE[Bn)O<$>n2AZ323F6Y.`0RVP09!Ie;s-1r9_6Km\:/8tI"KQMQbY+2N_^5Y%jCDT5EI<A;9N&(P3'KXdjCDT5EI<AV7S`.^*60E4(1/i#@$j_$QT03G76:NKRITQ6k4Kr]k5"uT3Nld^nGE0*?9^*#JCO2:H2UVY%hsWKqY9-l;gpk;q@[t[t0iN%iXZ"N(Cr^DTB=iK-o*Ka@Nl'n#qY6O->e4/]jNtQ4+Vj(5J\"?$6R;=?!%VS/c2I`8[Bnq6`)#sJ%-1K#ON^b'T(0lk(9W?cj3QOJ?a[_k%mjLA88hl2Bk$F@brmW6jop`;9h?*;OPqjG_b8XYY0P8[>:Hth[n_@k>_6(0<;,YQof@gR.%/1>_`;F(mi6k:Bsi?I)$kUK_\DA>s)<i.o`gtt+P0:Y3hGKN_)[msu?2jN[Fr)0]mQ9B)9([cM+r:5GA('S::A5?'fl]93:q,>"J%=*qP32XS2'G$OmlrBD5MgMunVA%HR3YuE;f(oEnMT7/X:SYOKro4okiPZgfC$bNEbdAj[VSOVYPnaBeprV6'BB_Be(l$VHk[(GXk%ji1fBhFK:kmgTg<XJH#"^$+[?F^r,BX=aIT[d>0J;XZi!XgPU,Q[^'6^CO'HKr&s8Z1=YHI?i\=h!C0Nm9#jSlM7;s"_Y2JlB^?1%l[QUM1-b().6=<'m@R=2UV$+*ZJ:C'o&4+rC@NYJI;3d!F(6\(=)p\r><^fSS6C*%'mprQSm/@)B1!0_MuE`spj)G-4h(!aXVmBG%`Qq3*l\4o(COeQPXCs\""?lOoolP2&8;?j8E7$Pp2llB5Bta0)q[@n(lb6E4?E=DfF^t:R2*nPMRoSlWesL,5C:"h9?G/Y[gAOcp%M0cgS-3!2D/Aopsb0g(J`AIFrH*lPS*"A(*Mi`D[QQYmD;gp[7QLX"=DIY,L&*gK:CVQ8fr,1iR><H@b"05&hU6Krm^/u#_\5;M`%$d)uMid+p\nt&^30:$6p?hbFmG^-3*mn_OtCf0hPhrVL6it14FKWdR?5e\6#\R[d$E'N3ap,2W$8sfBnQgs?)=i;Kp+"HWn-d/+$%2bR7!$dh-cOPPQd\lF?.:)*Pn#k`3#Ljimb52P(p9J=#\0'3\ihI+r"8$tXP[oVe,dIWmDnQPN8;d"/(M<;IYWa*i,/Esk0(&,SZ%W&?=.i]J;`@p"/h(F5qV&Q`OmVRs9]Z.cH@/r[]"rMuN$MS[Qj']\*:>KmhJ^Z!ICc<f6&=8gCuk*O$bIqKcYWuj@1p##,9aS+`9%,Er)V][5;<?ak5YS(9(\[<n4mk8LDikJ]CQW^WtmH69VsYVY#:HgCd*Y8#k(EgbIt8u@:as1I_@YIp/n4YR4$i8a(E_4lB_3'YaU%dABGdfo>ZsY?-EmG&Q-s3Hs3&_mdcU>FA]Deumnf3u>"p[S_MgEb)B2SDF&*m^C86\N`<YV5HJ!CMbjXnE9)cHfhG63rAb)k\mf*%L%Fk0Q]sRNKi@Qg@P`(30/i-'^!_h(4l0B<\=5tiCX!n4i32O'Y]&X5T9:&T6hZ!okTQ3'U(W1dHWYp8^;H"+4RcSOr&>#oHFS:-%GuP)+EUr!`!4#UMcsljk;.BX)G&I8;)QQO#%c\lNHD"+`9^)GRe5/mPZNg29-VKdNhOatSpRMJ"]r9D*Xh9%n80m'gP'9+"9JpsE%Q#[G#FiATTHZ,Lp#+F(iGX+6nHn^`]KLL(Un8=s@(t=m@9T!Y0Kj-#WF;S.)i9RkZbNdOT,06%_AYtVQYNMm:5mg\7^:f/C9K.mS%kuKYi%m:'uKOTt$DgQ73k4\icQHltjQKg,gg@((?=9'^QSZh<`\[[-7&R`j_VYl[&Ioa`ckB".>DQN#njelI4WkJ724"g"$q5a^B%c*2.*5K>#p`7fRi1!HK8Lie,Pci<O]8sI?&RJ2ab.$cRtb:!3)YHul2'"E4qM"-.#`U;'KS6X%V`l7mC-1W/hYaP9M5c(c0<:N^o%[-gM8'jjiR45Y5"^`oLgF'T%#m%m&YHl0YR4,`T0cGT2eURLcY@J?V):H78"i//m3pJ'Sm>WC@+hu0/1P`87`N4o'&Fi8ABIDeO7%e-@'MV)!V>7XoH+8'YdC[0<0*WQ`4r7t9GbTLYW5#k7Q]4&,qSidp",Val>#OTa1-_anb,PCWI%73Y!a_#P\/edd*@kdO::&WRbs%c;]PiA`XOE22:XPQe2%[lYE$^<kS!f;_`Mt#s=NLMR->o'a`36nSZ[8X5LH"`iKF&o,h,Scd+?C!'(X$<q4O2YcRBE0<,?tFZ`D@%?G:f$3?hBZVil(sGNp!/:RA2W<d3HT5/-_n$N8Vp=7Pll>R>J!+!IGCcGoBA-W#A<l6fVP'3@Vt4)d(nAq^RM9:p(s/]>[_@kuU)%gK.J\E9`e"MY>P-;MHfC:PUsu9_0a:hu,$hSV-5u.;8[Xa#hm>DjBUk*@\l*qYh]GO2[+DqI)@_"$@@#U(Lpu+o2'4--.5,e1^?L%^O@,Q6"D%KDLIL)N)$>$8S*Vn`n0j=IIMLJAnGZ%C=BaYr@4],/mloB5!1qq9-%G2NhaN[j)^_ScmYu^0q%=cXW,Rur]+]BCco(N%_[A)rK$UVtGN99HReAWU_()dCnZIl.Q:!N!_;;p?gfLo:pRgY'R9REa\L7BJ3j+hFBunUQI.TO+4*07c=Z!XE8\EuN`+1F;-sf59%4PIlQ>Rm=or5$&7U=V=W5Dn6`26t)uT5<Tr7sj1;oM>FoQA!/h\]t'^re5%PMFU#Qqnh$\f_kFMF_K(t/^mY5X[V2f:[k,s=8cXJ%48Q[<K'h`hVd]Hn!JeN9*bFEA0/OS]/=pDoQPQ:9&q+6u6tdY1/p"YrCOm@Ha87l#Lbs'>GkLi2!JOi+5O.b.$EM]9cW`CFn3<D3%k<?^f3g5Km3U-36cM+cN2X]_"8hX6<W7Z3(*$KRXZ_aq4i;4aHF8Ykkn(3oK9VTN775tgf=C3Kl0#"Ie0"ona+,0;QlN`Crh069d%mD9lbpcVrsHG3/158+aopL2rlQ'tVNQ6Sl<_^Y7r0>YUFoCuC(qNAFmQfrd0R@?_thWR$4KR?L(\)FM+SAKCU[X46)2dc0"lFh.C%IO:8(dp/`iGXZ\&VbZ&qr)@UP/jJ1;?La(f68A;'O1G_F!rg$$_roS%ddrCoCO9jW6uYm_+%oeHpf<u5fim,e1?If1q4@[H+$I80%AZ?KQ@rHepWn&B>#IUb`ldTsgRVa]O(QRqW.`LN"eJ1\_n0<CIp-4RdL4"=MF(#G2GS:Ur%trXmhtX""m/s'UWQ[R>C``qj-a!:[%_=iEniD_.<Yl4UT8.eDo#CH31<a@i;94]j]3G\9$5+mFO?Yhj>[e=Kd2``BFNW1NiJ,!`iBiT6&RV@oq-D:5HW@TWj<p.s/X]4FH%?g..)YE-BKG,s3i41t^Be\V7(DE5Cn`j5?7ltSRSHDB8Zdc@HS3(^b14hOQ>klU[)orlj]q/qp"deNh]q<Kl6j@fsYP1/c>p:,'d%IWS[`laDs/c''f`;@;_Bq>5+$iB-kq:Dt:\>gi4nV,\giOM:[iV!DQ5=/RLlY]?%D3b13bc;lM[rD#%0VeW[!A"#\%FEBT]\5(>s%9ija,S?=hdqD%)AVOGsS8+TC<Y*(RL`=NU/Yc0(Kpmc583S2g>3S";'I&3h]oRQV`6ca>/P-\t'pG#r2EgCJHV0'Tu6P.F'VK>b[%Bng4-V+`\C34(j"!s.rgl!o)t*o`137sqlR(o*\S"-:<*5<XZ^a%,19"!=d%1Vrm6%%5RVl<th(r0oCY^X>UJ+JlVlc6CN[rgG=1%`]MbNgU</#$"i6<Rk+mWK6\];J5S9C1?B/[+nX,4NV8EA\kC,;Okqo`N6p/(i(6t]m^P8G\(%e:#7ht7,':.rbOMhaTf8sfZqMRj%an.QQY5>U7#jVT:'>qJs2FWRaaK+,9[FYWoGmpBT1DG0K<]HXgdil*(8Y_.ECCr8L<-?-0GFB4%$o/*Gfp^&;c#p:]X#M$8<*-nV%Y$pN&;[hSQ^`:5CJE]'qLLOF^;3?M7Z<bpEbg\J(=gWAUEZB]tVP0In;`,$s6q,0pplh/IZ=9u51JDq5/>qahZ\n0SLfk5]KWI`8%K4;E$BFM3f)p=@4X>A)+>uo7Z9SStHM<,.Gj7SP"LZJr^iUpoFL-ma:_dJi=9+<R)!"`)MU.3?p##Tq;=FI'IkmXn8#Kp6g,F(lg%Qdo_OL;biFZ]OadU@A#$b&Dmq(9^N_=ad`\R1*#:(!AUpKCp[(:+\"eL7p?GZ!Ekka&*8"ft)b%\gjHi&M9Gg">N4d<mG7J;f]Ip%l>t(q@$jE]P0BP1n0Uuo!G3MN'UQ$IXc?dAP)j"(Xg+Cr,P_UW+l<pVEqlu<_<TJ`,Tji2*K-%CKNG(^X?$A\9idfs>6_tZA6_8f%VA5RCdb/cI**L`+_ebOeV`VDA#\Fr4Ka\Cs8g%'[Yo"2cM!67ec>]bI"&(LN1Pi#fL#ku;$*)W<Z:qJddkXUO3@6q).>l(e>?.qq%V->jq@(/YM`cX^(6_cb4QF5`AlA.-5K:$D[qJ=(-D($='cZX90.2ESS"ERO3;2_Y*X3WL<76t=^X;k@h$o<u8,tp7"IBI2O2H89s%1:rjhgJD-UTBf\55Eddd%J:=TVDFC(A4bu'@MZ+2JlsG&:VrK<-'D/7A2\L`@UhFK:j<qJ`TgB=dWrc1Q-(R#H(""tN1=Z^fdC2r%baF8)N6Xo<`W\^`a06Fng8mJD;]LNH=XmiRQ4hEKGT3Z6>pfH:`?5=EP160[1)#PWpnV=9%YJRrmDCJc8CAf</R?5s(9>a1)<G;k%\4Cnof(cRFC.akfX4TR.@?fBRe0LEt-kF1SeRpn"bqLJ%--U=2I71bg(oA7R524S3)]IE/&TcTNL@*2bAW5u/WeiQO1c?9q_6KA;%0uBtr5Y@F&kX[2DAa<[a!g7MTY43i<f>O?p9n>OP,c#r&!H.*tNi7noiA/WsSXj-mRgoTZ]DuQDFJC+Kc%H*0eeVh/i)YiHTcs">%b]%eG$8S6/&T*,Ahdkgg.LZ<`Onm(Ud-,QO7`:u>`0`Y4Qq=1]0HEJ5.H]n(dSs-U5`2]'aE5\C<ZNA!C`Jj\))fBKC2:nXV7TjT%:_]7)7%M5X)*4<3^i\5R!Z:/`Nf5Y)Y>;EB&>nGH9SIOf[h#f^'*i+fL<ER[P^EUT<0^mj$:ePt!$gJ:25hqI,eJ(.ZZVV"UWWW[%-EN%MK6eIW)%(KmA&=jG-IZ';^.AkE<C9AUPDTqYZP75mE;9&BQ6dc9X/^uK1.iqFAQ9VHZiU?.L9:_8_?sD7NX@FI#3pmF6cGFu%SSd"FbZ8"M:/O!73CGNqQtE%`"A;"bocV72#D2cPa)nSR8m$XQ7+H7.(t2OlAtg1KX4Ck4W>_=D^mP*G@BPU/\@<gT6dq+s$7n*R%1e&hrN<q(\Csrf%VM`U^g8NeZ,dT=4'1DBR[1Vr/"u4_/O?$U#D9JLN-$u_Il8'0^X?HYp!h!FWLCBML7uRhB@72GMFge.9->Z&U%K,E>r#c8K>\$%2.._,EK[N?)j\ihGACiXW8!t\.;MC?lZCfVKZM0*t&nk$V:<9mr"lb#F5Z<93,k52NcZMFhM1qn/I#nb*tj@(PW%\14/UlGur7%'u$16/Lk=$)6)l6-N=c:O]<;<FId-Lfo^Q0.s;#1YH#p-Zm67@a*=IR-J_Zb&j"U,T?i(_Y3[;Rm60LQ'q#&.T`'D%LK3MG_"a5;pFVA5)B($NFb]*<X,X2iQXN9W\Nu/\?J&7ph?$VMl&Mi#bZ,[In(_VKdkrgNJ8<(1g[m@oCY2</8sl;d#1kBT[%rOW%SKuGpG#fXB/;IYol7fWdG'S55`N&M`cVC,_'8&-l@)WgLG0fLT%?-F:Lhu-J!tA^O`?9XCMugB/.eE!Mj@mo0)0s?tXB8R<=[G$a%<+#T'\S7q/%[Q,a\m.iGW&Gp?F;=saJ;@@*i<1m)/)Zl4+*A;+>Lc\Xf3i^#9OB,e^gWUf:)/BF0"7$%MlCp#U3j=$Tl1k:".Rnt%ZI;&J(*P"d-&fr@0M>*c'NY_O0lH>6aU(EHY#[79/IRP!,2[3kkpdHi9U.hW+L?[5`LK1]Y$9,GZX$n,L!0ndS'GejHo'+2XofK.%<PXDqpWZ/s:2kb$fETa?D2'cbWe9B@(hRH_0;MCXl\/K`VM=E`GL>WQ_)Ic4a$Mg)VTJ.6/g#[r[aeok+U?3T%\oWY63;e1;%Ho+%$9.<OmbcI'@BU7aB:*CH=AI=NriG3A$5A`De.H:Hs+Fs1r\EPFn6+Z^UOG(Yq)_hN/&GT5aZ<,/`@tmrK!.R$687ifPC8#@fTYba%2&qnXi6[$n66?1O2?q]a%%(h7L1JL/)?hhEE(,]o%d#HqWHtcX1(\3:!G6XQ@N@EiJ>#jn@hpW7!/CI^)0==,2UG_R@O<lV!+Tan%_,QMn!DK9&6lFHZdgT]!d`<7[4o3=SY^$F,#PMfJ!='W4>anKWLKMb''+rcg[0m7d[mYo5+Fu9p29,]*H8[u!#[g&rg-Nq+(3L05%b,?b!A67:Q5)cG8XD^dN-Q"RlSKMN@IuTDTVJ-8ibL3L87]^VdLnXJo@LfOm^mK`o0Y19e(g[">N67:`7V,KuUTuM&;0bbgAq(AN%Lhn;ld2bKh>im>p0tLp"0J_cSN,H9B@l=h5%%#5.J5J0IJ5K#dJ5O94J.\J+[p^c1?S>oh_.[5O*<d;VXCR:T[K2>ecN26f)/feJ%XYJZD0_D[P7Vt#5>anG,LHnu+AcSPpRg]lJd0W)%(6fq?A^t!up&SdqPp'PDAbVI2CpU=89:\WuVLce:$"E*9"Un*u^kgEP"YkY5%$ir.AhM.(oQ4nquV'0?/U\C$p?,j5e>-FA$)^&Vt!Rph\&27DOD>9LGpS;LXQ8R&e@=j6N37`l3)^I]Z?P=D7jA/2<$e,TbA>!Oe%H*&%ijXO_o`Rn/*9Ui;dJ6<@l;ZWXCO:4-eYR.OIGSBH=cifhp2rS88l1UB0Vk8ncHmo=<$kaZb4Tb[eHn>Vkbnl"_\U68ZR)P;.%),j8=Y8f%L18a[)@%d5p0S;"`!Ais@J;dWY3=$I:j>,k7'HUjBSK'?UDu`?B]`=r"ocRXe:a]`W?Om3m/e/cj2@:Hf-@e+(4U;o$%IK?ba#$D;n(8>f[C"fLSeS7'&,MO8_N>fWD@j$[D%]#d4H7f4S1iHLG305g65%&X'ifcsP#W^9W.:E^Xj%("KCQpO88s_6=[9tYo%3!6+`JgEt.K,kP5Y&t=cSol,1R2.#5W9d%dl9mNi(H$,&R&k`;A'R4D6VU7oF?KG_0TGL+J6@mbX_\kbr^['bP/7K6bU"oN.!T82%"dFt>+LAmkDg2=Z@l+`Nk,4P",!HGRe%%\E_GC`c(j"QOWNIo'FVu?ShiJH4GSUkHjE5N31P.KZSH9).Qfo3]1"pr@`]a23LA$ag%TcGFhBQ)"[iNP3k<V(BJS$aDIRa'Ot0\'WL#af),2EVE-3eD4!D5d2oZWot*b?u8.d9cSl&MSj@&cpJW1(c4"Y7gp]d^?7fKs)-t%4bZiaj6K+K*55/Nbi\4Z^kaVA"Yl4E'*6SX3Y='*Y7k,=\B_&DFWt4Nc._(mke7gJ6bj\*[38rE1f_CDK=A\H-;QRe0qGK]!Ri#8%mK?5F.n.5f^/d@TfGJ5)%0p02'Q^gaA/i/f%q91S,%U6Jj$V[Pi^5b6/j?*$e`*5`RTa>VUTfLc.upeK!H\$N&MT]X('1bC?lM#j%-@P!sIY,2!@sM+U\"O(pb#aLOH!?/]=oP!:@,@b)@*EmF@2<3%Y(A_X>4+iko6(iLo6(iL@u%W.VXi7]@,A'G;@aRd:@Q6^6f+Eo%6^GV/n0!pu'H^e>E[!pFP9Aq'-a)jICV9&Q_[M#V&MSBe-t,#@-3E=H-j#--$E-],DLp`'17=O]?t<J=K:#-[M2\EUTu\'g/L'>f%e0L!`hE[(<D%U&qC(N23L+6ScWG3TDmfeq]K=6AY^??L=N9MUZDc"Fnl3EG+Qhj!aKr[m$?>Ak!&3EK#+gt5uT#0Yf?H1=u-t=gL%8b&$Ehu_@aK,BN7&hoBI+N2o0II;0.(fP`+N%%89jNFT63g9p'WllNMM-7-Y1tr@HkjT6?mdd\m+(EuY`RR<^@gcV[d%CKbnDoAB%M!%.6`hl(&R$6+\-dE@E7%&RN+qJib9m6*L(lNT8GQb2<jHD<^\h[e)D)Y\X&g,"upd\q*./pqH5$G02leI\YqhpE,#7iN5o*D&q%:WDT)#%3H1nDMD*HLPGRG?;RR9A5%F8>E6oOQQAdF;7J1)8kYf)5G5rJD#tAknd<<ar(!?!5hV@<*(%O6EQ!-;OJV`CHjSO;q@3g%6T9"dQ>LUp+%E<QR,p$U=b\,9Fu"dj+CL))-rSW]+Ot&1o-''4-BMrpghC@;N-#,5RZ)?ccC>n["dUlBPqCA'QmY43iIiDp<H#Z(%L7j,N,3XOZ"Aec>#Fpa@-6jMT(dJMi_IX/M#8tF-">EdG]PVc*OYMgU!=Y"sWF9<ng'JUNKb@(s1IPu$;)bk@=ZYk)&[T+Z1uVsR%9g-9+Hk]=Iboif#N-;5'EYfQ6_T3Q8_>o=gO48tcfPCp4*l7oS0GZHHfWL1,Sn#;fXK*f&fFik73'__+add0n&47h7j^?(6@ORFO%bbAO?J=4,ANCmb"6cBWke`BOkPfb2iI2`<1*6(nm7KU[C$>%$BBG;J%&2#,9kYM@TeJNrp=b>#(6QkY1D@6@b&`\<a_!k0cqNt)G%9,KhO#"W18@rhZ&@J#AF5Sh?NK(B@1>D2Kr)^%8%"jGM!Inc97M8Q'AA.3<(^b!JP%SL8o1#6C]2Xu;50[),11!<r\6&^;K@;$=s%R)A'Ol=U+-/7)Dt0SB]ceRFVpN9u-G_.=HQ&BU;JK8Kr%_0?#$!eq`6CsG+AINc^A[Y/("1Vk2SMEmKEAN$'Qd9m?t0W[gbFIdQB%Sm*=l@7;r+_:X9@BIR$jAj?MR%.4<n6]#_IZisYsoXk;\3.H('&/3e.8p&!.>7Ep_V?%+,8Am458B*@7aKk?s"u2UEC&hku]NL$0%_T<XdS,fGGjB?NT6^NjeTe^J929[4#:B8g?6k]uoBc4h`,JY#LAf-t*155g#"JZ3%Lge@V?oeX*9BWTc_D#0B!_n\L\B]f=K^#Rb%1^Y<J-Hg6g1IDS'P%9NnEZ7,A]NGY;OtdbUhT"q)0S=)lJ>oK3&PR?6+G:([_5IGE0q)>K&6g[g63CN50Nnc:"bisf0X!XUW:(-L%4>@F&PF\'@VPCbd@!K%2@iD*s4dJJA%nlu0fK>U-^.T<,mf_*UP@7/#gSeR)L'K%\`[&2+Y!$UQiY(+foEW>(`'D?3AAPQK8g&in%-8K3&A\\@O!AjO,:fJ-_"JZQ'!R/B&@,X+!@SAGa:rrjaAt_qL.;[^S0)6fP8UaRB`MV'qOeOVN,eo%b&hta//PM[%N(JJMR4`C[%UISl(]o.DT9ZT5!?^EGTG9Rl(Zk6gE3]NAV]K%NY">H*t1l!CBaV]ao!PrW>[pc&3A)RNG3N246(u#QPFM@n>ndPV9;`7,uh[h&l%WUU`B(5Ur>3\ZEV)@U*pJqRPJ%q(^KgU69s,%)=Q?S4EI#=`f8h?F1V$5hEi/o-)WXGGj23a`fr$CJ!#2?\u<pD+ZFLp:g6_Cu86%fJWa?3E9]/`p(Y`gEnJAI)OClnpaehP?lq*A6J7,c9LAdH@nPkN8RN/1D/,%%A<M$mR/FXC-H"J)YYBK5':cMGXrMu[j;n;@n#G:%N>XE3;q>Sk]D?`m(B5[:6C<q@0TRmc6jptfI)JuBLG1#a]eS[@@p->7$a"/&%'Y#t,F")iX>.m;R!4Pqemdg0.bka#SRZE'#ZH$(%)cH_X(_4<tPg>5`barF2?Y[SS3S]>1C&,d0gB:Ok;akCG'*PRF0)lhQc3=s2]c$G#i.];EMWOT`MM'^%mUu#s0228be;>G@fro><%kCjeq[(quDPRfZb4@3?o@.fO]<qXfQqs8j%6rU>n@>`20qohZBMTQ%%>"FaRX%>.U=pe2-rf)2eRE/HeB?2M49I[EcQ6/CgM'2Wh%hq5W/5,36")UgDCm%^1Yad>j>6]8Z4SLiWZ[[j*jJM;"(6ZiRL]^6-p/&LW_)Y*n8;k3iHq7qPW]]0m=k1*:a"k\OS&>VoI<0h3$%%39;=WNbfMGp=5bc5<=+*/4c+?'nO&J6d/_]gb@d*+AOZ]eR"iko@D*MGjhO[I3abe9te+[:15ZZ,d-8e92q;fUCY6;dFp5(!f\V%%p4f].-Kn7Og%Jpl`$N*<j\_JF^T0Y$fc^8_I0ZN]j8<P5h`8nb,C"C&I__#mFf0_Y8T0DKR'bI@sVh)nh3E$<S4-p`=lnr':UkN%i8"c<Jn`;qf4U8M*R-#nm"sOXZ8?"-4ab9^VoteJVP2I!s+I?/(/Q+#RXt\s_Jdc[gZ`1_Xrd=`4*tDmc8m^B%.1'Mc<Hk^KOX#W%6;U#iN"?1lMh1+d!D!m/bFfU4A'c1D#1qgNm`)oUFTqYqq/"QcSf(F,)5+^=3?O6l@Y2H4P:^dO\Q1Prk7?d:*cC6TAH-g[<c:!,%&Xk.tl=U97`Y8d_-AOXTm>%!Uh8\N,6RI)8f";<4*@$5_'7=6F"<5P,"SkU=<08h-5mq'hZfHb<";FAEjkagY0=HA_M#T`s(9t?K%-k[AplNd!:pcuu.IUdPr2=5D#`q!&20.4t6YGUoW0P0AHX*<@bXg0)e@`UVWg:3k;T>j&s/b(=")WT:to^K8rJ#Ld'OLNL_jINWV%^dXXHDtlM?Ap69L0J@NPK-!k$7l9DR'ZSL[k'UW"KIIk(\Iki'&:<Z1aqf^,%+eIS")OpY!*EARZ/$Yuf,*TJ[Je!gCO8#O%T&8i%DL3fSE+sPugEX@V(dTC8S!rSAes8$bor8,-0^lOhO]SofdVu]tr(E)1rF%C@B[5?dN)fW.FC$i;27m/6ZjhMXU&*Y0j$6`.Je4eY%lSmDn@4X8NjK861oc6itf)3@AB@r0!%VG,Dc)Drm=>/'nc]+=a,@8^nF]E^R0gDDA(<uY'=]I0abf9iqZV4j[dj%mVSZ^V_EL?6W%nk"\jB[IlZ%>ibR^99M:I[7ZIU-7u2=:.R*kDfGH@bs3'KsWURaJ[CZ3]LRA8n,'=iXt&65ATgqiq7[S`B*DC>L#S;<gB/]mAp;r%[cc-I$_XGG=dUdkU=qb=b)(_"dLip)T+J9AUV0h//lucW0")-Yb8'F?<;XLXM=t%K$!6@Si`5@@`/_:$3SOm0'o9^H_np<T)78c?%rBSgp[H$UX:s_1]fmLTtl35\O>[jHsF$:+EA%pr/]1n3@-AC-OpgAM<HTiZaUYkSoWauEY[:mlp1"Zb5ZmS3C%d@2knEg2YYrSOA%SY^nf*UUuHJ:i3XGSdo!JIQhRXn+EClM5H^df]U?V:bXYD3=nbmOAIdL_\7&g[88?hleQaPF2KRQY90,ap7g6YF@78j+,ApmI>!&%W3p;6V@22YqheI;klP[eBMLiT@!+kYUm44[@I8:QR5;WJMrp7^"0<oinLcH!6<%EnVs`Oo<FB)q"cS?Z!ZLfnHZdgCG.FE`3"#gj%]:qHRZQ_YT]6q@Qb6Z`?d@S"m^oDZ)MQNQYj13.@>Wf\")csBo$OKoed@O#W`+mkZGEM1k=PqMt9"TV=(AGsf6L<mHinNOb#1hU3%eKdP=)r7AZW4&OQ:%oB#.ku=#2>:+YgAu;mXiUU&b9jGrU-6%2JCP8!NT,/*3!)q.'?4_5R_0;iI]X5YPo0e-a(99n+E2MmGc6E.%J6a`J.a&6&]:q;Gaq9HA9=-'f%G8m"Ogt[tAuE`'J\[kNAq)k7@JYakrs,dn5&'_q,>P`_CBVX'(mt6;@"r/%j%.k_:>'rL3aPlM%<ONsQ?D9<&:7/iSj%YaO"3e2&0Y/N\[2//oa2W])$A8dETQ*J;8teb:FR==QbX>h`)I$IY!L<!aq>(\E>pZY;m0Ke+QcM+<E32nG%GI'F=m&JH/o%*kWmZal,0JHWoGIN84AG3gW@0WfZ,eD8:f]T08``/i@bY0kLQ7/DH7rreO+:PqQ]SDGE@!tO\b$5*Ni\K2fLhc[:%Bkr6+A/Jc@)TZ1R9NeU8>)c<S!\J./p(\*<j;QZ-,!-T3bmol,M]hpq\D_VU2mJJc,3'JAM%1+b#"&1<*A8U`(g-7SSD7"5#Ol:W%ALDTa&:V4u*`s4E!\g(fJE2s*LE(brlA@Z78L#fqbN43aHb"Y9pW0R]%4i*.:ET1Mom!t6\#k'I@uA8..s\13E9'Mo1L<IP<PVde%WpFce<nojl;`k<;N6>b3")?L6nuO!7@q:XNMLeT`*g&aL,`f@-2*'TFNU.5pq7t.3ejO;0Ulju'VonK6f!A/n:BBggAjq(DeueP,%)sJCrUBfAU:NSieY0+K1%rBB]ISW')J9b*iT-KHo1)-;[VB$FgVg$oGrufa%QH-CI6&>1Km?'Pb=K0]>c6,Zq\`E"(@I9*KPQl[I%Sli.ncRQ`mMKb0n&m23^T$Au&Ice1j@,m8kOfoC"c#-tTdNgd9#RL7F`(G2G@dCVcYrW?qMnO0m.Yf"@41dqLFhk/+rP2T[MiL]V%M;!1/HYMpKCM8cQU#-P\c!C]i`3;,$%^@2Onnn4D@O4)^Z+bOsM;5>N8e.0*5*fG9<[Tk7/UKpk7:_,.fdd;s/"Wf**jCsD6Dbr7%A^BlK)g?Z7R?*0SlkO$O)Xr>pdNi;>rURmaqrRB_')?F3#Q5>%4kl`m)7ae^)F(H!*oQqd8JHGnqjp$Vg#KUO_\9)OIE1KQGqVsu%^r@?YY]<6\E#ScqX'abXT"U:`a\F!H(9i84p&f*`.:h38p=XZP%rACn&S24KCY:.neNN(+XCeBo.#p\dHadA7aA+`ta\IsC+,Q97%h0rbFfC.@)c&D@<g]r#QrW?rh08ZfZf,rZ3q(>-Op54uJB:f;^Z:=sFGI0_82IN0FD*P7rI?`BoEaTujh*:>pGP27JieYi!fEZ3F%+,RCrrGaN4jZT<kIl(5.NcfBm&KA.W^rlQbI86O8#M/d]k)bJ.l4<52pNLHBqo?Bsp)d*oSJ'T/ouD3IF6/J'Y'd7*"H^.+Ei^@a%B;Z`NA>^\2YOSC$g$TsLIFcO_m>^i2?2>X,[u^F,BCqg'qq6dTFQdA`q9bn<r9T\pm2u)R/uRkGqeT1qg+/5(-4F-.hZj>u/\Va6%A/299d,*m`JW93k\oRgamPC#Uh"s*8\*o^?6tc(A&E37H@.QQFOP'Ip_3'nDlcph2G'6G"[=>e8XR-+K&l8,iKqt+6nAJN0bQmG#%#?KmCP,mmRC\'VeG(02%ArER5;$ZXCFhKJ.61"FM.Q_S1?@r$1DqbhrSf_sVP2EGp%-8>X\@uIFSL!XRQ3_;5lNc"H!tqqA2`=qa%A++?_kL:2)C/Y?qE`=*]N4;kW!btN6r;OVuJ)n:"3e1LIrP2TcXGe"GU@(0o?o*S7N$=M+luN'?7ZKeQ=hmXYXtaIU[C=Nf/GNKm%fFAtT0EQe/LMRfhW:7@Pr.,#mD&AnDJdp;c-g&k>1hKTR[&u6GC%MHGAcBJMrglS9WfjNU"u?^-<%m(Zr.2B_->[lk/O*<;5Dl.X%IdY&;Q)=_U(dNe^o5f&[!&hjpNYQWkj@KMW^[b@@'+M1/T<".dC:Do'hm"bZl9%T<RTFm)c<J(h"I8.*eGYCjIpf\G]fbJOTZlLg%God)ho$_\u6o!D\^SK/A^g%cL`5_%eSQCBM&^Sh7(.E1(5?I#T?o>\nk@>:RmJJl5Vh)C1-BHu]6!c-*$9Fa\lZTHpYu8GcT]83C%pR;&=p'RJ,cNPc^49.:Cn.`scJD.e%i`8&aJ;kRU(-*ss`EF;-%Fc;V'$lXQ"IP*-_Gro7Nu!e<7g509GCGrB0>LhAOU`9D4mr5'%3HBYpirl*o#?Zs\O^AAOP[hWVj?E]Ho#p#!D<6O%$O^(Y&,Z:#HK4(t*qnOoS"E&1^M>ab$,M0o#8?p]DnXnQ?8\Qk5m07rVq@U;%U5G6!lT%,3:e]e>6-hbZC$4-EWWtW`$5:=81k+VY#<2M@0pGq:G;dY[*:pH`B(^9"JLPJn.3$asE]t.<O*n*^P[(V:;cYe/(<47>%Xb\5=Bg6f%)j_LuJ,H.3%IR0o;3s)-Y[n"hol>X:2ek")93!r,%n8ZJ!D-HE=$/flf9CVrd@PrS[*ZH("jo8f`E&]r"YOMb?L9i*%B:Ie`>bN3@Y(DM<ZhW[(OX?5bhgW=`p6to>QBW*HHZ@'=ijfEGibUb^4BDPhT(BY,/I-ahE6*5=>;)Kg-/Z6_4u&(3[[aN*#>f=n%>SO69j!fcE<^^MP<!nC!;s3(NgZ9EY<d4YK@u*$i)HRDSL%+'F]\D2DU&Quo(8VMfl^P6%NiX`V,.+lrqo6rWV$mX>g<XAE0BEp0%9Fm3K($Yd&P.+p=orO.jdAQ'A:FA)Q3OoXRZ]5;h`^Wo1_8qnV_j%A4Q]6ed35U5[IYj/;6S6AmoQOhr#8-bE0e(/3&8BJ#RNl'n%b?f1Zj(e=V>Lg-A$q"A6$WZ^XUYl&&WtWJiFjCo&da&cscPWoCglQ()HR!FPjG#0o[Ecl]:;mt,Dl9ufQ,@;^&Y3PAaV?OMO[Cpo%jbb;cd3^Q*`qSoBXK6-B+Wj(*#;tncm/eZ4.X<Dpb<3#MRPJ<l8TAIdol)[%>2&'7MQGU!F7gdk+nNqr$;;UeDOo6F7b#X)i7C`0%eoa':n-Z6dihoeHR"`PZO/,>XKC/S.VKB6Z.=s0jm5_"eF%1Nf!M`/*@1R@O7o&*cr=56[.NTEebE8hCRFKgL@>a9)1hZ(:0NV8N%8L%mIabLl[?Lu7T*?d?48H#)&%`=68-cB64"d#c<OW(YQp%sc<Kk]h*PJB>&JN.B(1\XkEVX)i!Ib2l(poH=BU4G`1l2m;CrZ4pH%L@]JC;?YSl>e,lbEX1sq/]oVLTm$YP5Kc,@A$NJ8Jg?3a/N`GM>ZmbMn0jZ,\Sn*,SX"4+-rJT(=h0lo#UrC<Xu<![ak:CLQ"o36%Y#m=p`ECKk?b,@[1S^,C8@FG1Cu#i)@I`=.;NCEFA+A(9AR-q.>h$g>k"#'B.bSP,@[]u#@4`_s2(FX(dQV67VaMM-Ld;^4]K7Z6%9&[AQ]RUtW^"oG=s7R:XO9F@$`g7ADgD9gQ,%2PtMr\eY%W=Sq-*m%;&6PHCo0^'N]TH[q3;e#V:*`L,+(Q`j)/sh%%R&TUHV$-D%#A)/R>[r@^P-5Y-]d-lfcqU0:.nDXPH5>%7%skHhQC6[@\j_;`./BEc1Bd<bX@GQ7N;BYa!EqdB#QfqtS1'*X'e&A<9KY..8Ga:@%:U;^;/Rk4!GQ>44#fr,$o8O$T-N,2\HcTJ$bg*$%'i^70j*1Kq2ldMbiSc!V4(sL(@Sn4+\dJ"bh9hnDpM.m(5VaL67QtLcJh[S!%/Q?,e+)@!u_`e4Iq:K(dilhV_]YlrC0fcK%e)2JQ"hf--j<Ofhnk?8WF[()B54*g#"]#V&&_QDF5H?sX=S22=8Hp%!X2Q`EkR,t&%?W+FW+LsEIDUOjRoB)UY3/I$mFu-??OdZcupU9D+bb`@71_/`.oGKgDhP;t5(=_3WE<O^;)["3%"O-;dA.f!,IXCRDkqbZ$-u"aX%Xl&_2ELd4';(^JH.h^T0Ya_\"!8*1P`4>tQI\.aG"<H,i/gQ\iJ?%MXBp,+kZSOc?O[.fRH*1FJ2?QsoG6Z8idQ[i?cQJ(l.mi4o%N8RA2k1G5ukO`$J+C_6IF5c0[[_$F:>pX3LJD!ao)C6d73%C(bH$,nn-5lK,fk_;mT%XRE%Z]tGbrBO-<+n?HX!5[",l?#1=+u,Q%fpCtt2cR(9eX>j*jA-"mUKu)r](\<Rk8$;mQR.W"SS?h+V)g;7E(R$8@>6'eOsnk33Pq,Il?27/-^lBi(S8KKkURuO$&U,+VL\L?%+I_shClN[m=Ouec1-EZ-"O+mp?mNFb1]=5^jT)oUcUm8J7<\]'L.b6>9X#SmPt\!"V11GW0nJ!gSBU:6VIOskJ&!&8:6)60M-,E)%M/lA0m(.p1KZBC)V2H:d\6@G>*5T'/LD1k$murgG?8'/mE_lkE=$@MT.l-CmA8*E$%PU?H`,hs@[Z_Fo#,UJ!!KonQ0F&R/"kK2K%)6?ApG$n?j9:#8Y@opM#A8);2XH"Q_W[e0&8J23NJJ`CIWkEl;nI4s]<>6?"&L4i"JU)`:ii'FDFsQ&q]sAqWBe*35*iuTF]ULMc%8IL_*>#tp?P.A9/%$ZTA9!@T+)BbV^.d@UX?m>@Jk1h2W_GpNm4!T+A,\d,BMuY%*8(.uA;%6DN*U,)U/&-*9]*!-J<AM2<ST2ka%3X3$E9?Ojlnt>G*5.sV+,;S9kdQFVPZo1@uLg>%6YSPM6m?0P?]#Z5Y$+qGogcYh+X01U9l:FB$h(.7EG00GaG=8<lLC0+FfV5+[%X`.IfB[/[`%M-^=8S[R;B.uItYj7j2Gc!'5<o*=5)ae`dYYY#C^Ku-@mF)XPBgmKVY?u2VqnsHLo[O>B`VSu1&aLX_lA'8I8`-@?%MF[Nl\]?Uh4,u:V9Wgh"`]h)ubC]RCHFK.NPi@`hZNQY>JL'mmAhRTlJ?=L_/:V?%5/;J"KW,:Yr>(?5_ebIN@W^;3\jJXG0tQdL%O7Mg4^N4WTOq&J!pIeoJ5jja,I>i7flpeXE=>5<f]^[8X6Pet.,[`Ueq9#^I"_Qr@R>6!B*M:ed"m''K8S@W2eLO_JbLoLBg[P3N%-JTaPF_Kuh"j^>S-[3WuESVL]^MkBn[KJ:Vcd/&6.?RSR4qsZ;,p)BY_]>aR>Ud-hY6=)lOHp!<GH@`,TA6-5rE+>hqSJE>S?r/J%!6UD?U(D[%(O,YYmatIN#AfN=HEX!;#I%V4b5Gh*r]'Y?m\S/hjbL4)9AB6M7pu^/nQ_?@A#V9q(\Y?&pR<Mc3r@hNFgLhciV0)j%/51HU>b[E!d<k6jSTePf96AKU'9=@\P@U6OI*3co7R&diO;6?$r)DHbC02c?)7CBWKom<IRoDt#A,>j<YWc+0:A(]aXlMZJ^DSk4%Vi@&%Zc!A&N2J`([69Kr/]]H-OcFFh;RHd4osPs"6H:ca;ZD!pDbH"nmC[>[@[UR1\PJRLmkU6ZYn<=YYDkDD0;5h;k2eX%-u"Dg%XkCSRYRrcerIdGlo'6``5GcF4YgVR:EdZ9E>/s<SJr\epD8*E)-=NqJd%u.mR,U-A9[k>?rO1t"i[c9K<gnj;S$B`HeG]8i-s4M7%FAkD%<bRQc`3oMh-(H-p1f"K[*L/1]ZufrnMCdh*;PeH;\`?X$-G'Ur/Lt/F8##>.qXVbmd^CC%/fWCm>X>%Ae;<3@;pm[r?1KuQ%efjJT;_PI$SV,`E](+\("5kKc6^UJYJ<aXHVPG^Q+Y/SXPW'k"[\G)LjoK)6X/K2BR-BXV1%l6X\M5\:3$bVN'd&"1Ul!q\<rsZ+%cbj%IF4e(a">#fnT%DD1.,JHAAh9+^RG'0'/5!KaSdB$h.C]EJm!+<S5pXW9:A2Io-GWRCqW:_Dg.m-Q]2GbJ'+l77"DV?4Ga#,X%<d;i?&=Q,K(#Fc7;tm<40@G:6^2.`(Irb@r/,7&L7:1S5?&632SW]n=KLB7NpROHoa_i%#KBG2f%OtkL-%"=c&DXti%&pdTHg>p<%VRCVU;Gj0<@]&n!g@*C91aQS>hRJsr#Z.Y^!Jr2VRYUdD`7ru1T?2^YQ>lMCYm&.+'R+3#geF,k3U!&;nK'l/^l;:-3U%(qb\j^B%%i$f\I#)tW:JhL$U\(X<g&=&#_BJM;Qq^S*ULq"lD5s=&jpq-\%pMF!pqd^ZKZED97ng%rE.X@"4'Sm58REq7W$b9.?V18m5?gq(%l<`G1>Oa&K?ABBmKi*GgT"OhNgTIK;a_pZ0'l4a>*6Xk%EYbfrhVfV6a&r*S?$@[8"2/Y2=-"?JC9F"l8'ZUtb4.>r7IOI)bB#f$%n;NC;b_PqTI&Fce'Z7!*j%U@fP4s*qB3kK;\FF@IM'B3HgdZ?b9/10nFuo)'i$'S>DiAY%>f/(D'fL$i6EV1^^e'*[Am8c$/Sr2l%2)>G&@Nmk4j!kWH^mAoTSWlO8J(spd!=eh?8%a[QhO`5j^pH(FOcp0ZaU;JQHA>QGOFlsomoA$e*@V6Oao@hIBmP>Uq]LW7-nr9h%J8Isb@#f%(6gP>F[qJ*a<W]W-la([]0t3o]hjWaLUbSLZ2D?(9`),1tbW[C^bTR(#Bg?,u\cHED&f:__rN;8_!/q4G^mnC)N$1l&%ZJ>h\NZ6?8Gq3qaJGH-1%!5.XX@:s71=A3u_(EpdRo52qq<UT[-9a,U3J$#Hg;H;Z\T^qc!:jimd*9%8EJ=^!TbQ>OSmp3bDK]\(%QN])9*KHA0/(5)\KhQa[U20h<j6+D^.VN^qFF*CJmK+.Rm_(,*%+sch0@+QBfo"T&abt^aj!FmNG":PTXD_Jlf)Xqm'JN#CJ9;k`%Lu!Hl)2u5A&*;1=F7=r%C8c^>eb;+^f9*CakIopu!To1GZ,Kei4A]Erg]1qYE+%b<#Nd]FZ(#$fl*8#pRbX%@Af^55<>%V./J(6J%'pq>m^do@Gbh<B=aK5lp\^/2Rb]X-&!Kh@(Qn1]nTYgde]'l.uf)]K#046'\!%+b:&H3E+?.m"arq!B?,-"=Qo7_*)HN5cb!RQdt%gS-mIY5#Q0L(%n=cTO^H1eNVr.khPrQP(`s`0d]-8t=I`/LF_h&mbWKPk$FXS=.Abr*2iR5_+]/UXYOgmaH7s"f4c((Sq@-\1KT9%9YdH0?Y[`T"(QXaWSp/G-G#2b_Jr))Nkj(@J\GLNqZ>@/pV&2+?Wq">&7`FFBkN0Ur_mNDL;QF?481PK02kW4IV/@dG)aqr$kM0n%dN];5m'C]4]liMO,^]];a,5>&(iGQMkrZR3VnJ<,+_5%i*s"907>E&C/n3G'pQ>[jfNrQcH?;V9(6C;lb)Bjs@Z,.e*@_4L5%C22%N!4VigSE%!D$!Z(:77546];m=jU00KfQH_<YK4uoVSoo`.6WCkHh`KV+!@h#PUiJS`5&-(9!j"VM>mDjLHK#bMS!FgNaV>1))Pnr%\.FJ%OiiQ&1blo\J2ot.=<ljRg#4Y.`Z2In_c$S0<#>e!Zb1L4*=8*<0SD]c"NXmj@*1\a47p7DJIA7.p1XP)?;S2MPsu0]:r%ee%n\>p+EFAJ[&mP9i41pcm6ul-t3(8ZY27"(q>liaeC&tWPpN)(rfL%7LAgTtcn652#"sj&&>/GhcCjeKee/E4O?k"VJ0LZ?TJMdk_%BR+CFfrCX#I_47*epf6Sm'kGgCCS-l@eWp_8Zd:("E3#9T)j%r>mYd2X2\)'.=C\lJ1[<ag6q*-s,%k[di@5Ajt)^`k-q[Z:SnCO%eWu^6&7S=H4K0?L_"6*HZ69`/Yr-p?:c^!Y.9i<i$=_d+G\j+X!gr7l:'(R'knBBs)h<'-"mQrYj11>li8JmuF-WTH,Br"FABf1q%#<'[)G,##T^l0ZX7Qa"p)TQb_N4T>.20l6%2UWa:#UDYG58:ALfM1Ko0T%FXj)bBFF$D\4CLZ7BoGAEFKLZO`-F(Cn<!J;<EJoB`%<gcFmB_XgI^Vi\.`6bW9a6MZHj6\25D<H/nJTYilFQE=CKPb'?2EKj.K3Q_0;@qkhFQ+FYPiJ.i(IF=XRo(8:gmq2N$/!5Q$.19l%pqZ#mQmR"S;8p:oU2kohg2`p=^e"@q#XT.+4W(D:M]?1+Y+=CeP6EWUA/XDSeuCjR^m^)V5#C)'V<0grL)b7da1ss$#0bb?^dt4)%9K<rC\CIu*R;9T;^<p,[mh4ZI2T6%,WUcgl[.&Wt+:abpFbt)?Cb<-rd<'U6k3X6%2oZ'%W'IjE[XK!Gk#.JqUOJ+<\'!8hH&!4r%o75qsd)<$kb^$V7\:M(#;GP$KeH[X!IULr1gPCek@bar;8=P)_>"7_5&HOA`WtCO**21VpRf8M@KV(IR`K_:Lh)6LMQ.X>6Rc2]o%*"-&-ct;@<'"ceBBUob[/QKD,4ogNUN54_[E@\",Jb]R*\elFg=eD6%\*W6&3b-sNgND)'#F7oY4B#Hm-]Dq0`!1:$`'ZaZLIQ*=%Hs\X4!cp2\(cV==O0t[N4h'uQE3Pm'IX#F;'/]UGNR9(d4$q**=Ie,Ri5?"1I5aJCG)Z_BV?8N@%db$WQ8#V!!fKDI0U`Xa`^.=Y%@c7Lk7N8,YGt=V&MEQ?ZAYY1#Z'Ve3*%4mJDWTAS,52l*kE+,Kbqi$+]?W)R%kFlg-g63;HH(BQM6Rt%Wu^UiRPDL1/.F='ApOn4%SJPm4+(/QAKX:!uofErGJh^L@dT`Y0&R5$ai/-`?J&g!W5Y;*$h;6Fto"]9+)*1%cgTeRWYZhu*`,M^t^#o^^M-56;(hn>Jl%JRp%Hn:q;'uj@bhVL1BXc=QQV=)!Q2\[l33,l]O#>C8E(Gt07T7PXO3*>plG$Ek.H'T<2o5U;EZc"u1ZpPlOK,_ho53S<VqhD4/FqVD[%IQlGP#L<*#^H\uLcQ?98c]En`7r:8t?eBMo+4iMSJs]cSBE%aZeld5-e0KS=KQ>a+cr?ru&/Yt0OXfi>[V*:f@uR%oYcWT1Dcf)R%.C!jsdq9)3@e5PU`%91(_CQAl_!Y$sH"$B)W5SNM;2N9Vk)!6Nk_2#is+OV&l!QK&N*K3mZd@51Zf]gHZX<`d=e4o53BH]IXQ0#i%l>qYObURijXH2i-;'QeJ_CgO#cYj+WFldfm7L/;gCCq>0@<L*Bf/\le_T"^e"[a*G<U&Bak#f;?a-.$EA\$t\ULeIX943dl^T]gb%4g;KZHY),)I(/R3o,Sn):a+V8V89SpZVM2Yg$UfC=XId8)]"G1L0\HYBba($YKn;XPBkG7NC`&85;;7Gjf1Nr&GLpL7!5pL`)bXh%JZY1n>WWS8]QJ\@5c^=?Bn%)QK):9_jmMK%A8''3R+Pp1e,DuAM/5t72p!GQV\6VfBTt)6DN&C-2T&XjDY1fIWcW%gj=B<&/G"S.%#:g3LR5ooML>S]l(C?jnr$X_sUiAi;Pr6<def[&o)X1Yt`(ZmZIHV&K&6US>5f77\LVe9TS0ZDEEN]dLng`^E-!$;-Fc>$_ff!=s%IRu;ZB)#p=,R3N:agrf"dN+[r$7DNFIp;D5P#Asf)#C%TRX#na"D!SYELdRLdgBs3`/\%AP<[*LBn80N3inFg+Y7l/F3)lhhFAj>%JaLC#PTmfnQ)?;j!S>EAaHILpcZY]-3l$kOc&[j:*`<!Ws*kN8,^[/p[)mA7\`6_\8p/oW2WA!UX4>F;n+/)UnufoUmNmS*qfkeH%^E&[*(epmC.pai2-*3&FNp>[Z9Qu,LoOLA6O-MAKlkB!X1E_V9N^IkC9h=4g]b9Ci*:\32W/@4Q]q$.adZqDenV*'$F2W4`UZ`jl%PO923%'L9R13mWU'tV;XF#*qbma3Pt2feeWbB/Da81l,48G=.VdBc6\Mf`:I!Cc#!&^DmeWlTe>i`5(#6CRX@+.T9P7gMI&QPh5i%o+?#POXq_!6-=@JnE(tV^-h=8bt#kJ7u#q6f?$HP`o6QXad%Z=r)LTO-9!1VO`rcBl)b)*E_M&RF-;o9]`"NJH4EHCr2+"a0&^-5%Jd=rHe)Mq(/?4fd(#IZdpn*qWdig8GIM-A8]q'<#V!U^NZQ.2bq+fPC*75r>O3]L_1&8iL1\<.B09=/r-VcGhI"Zn1UfPeQJ17"P%Wr;_U`UZ3P/ag$Fc(655(5`,4^A/Em3;iFX1N:YR)u_o=+`dO+L2",\R/]Q:%ak:_Q5n_2'3(+R5d[G/OTG_7CidN*:3brX.@eK+%&SF'8Ua,RuN396,'QKjH7sH4f=\$NlKY`ZQ"s[e\&j2<q`%:=2kK`"TeliE0(ogb,;_-osr$4G"eflkoA4oZ_n]7@7$i(O\WgnmA%,Zu>FH#_@r&hbU^H5'j+4lm;([@+O+JQI]["D4d:,-0Yr,IAsESbN\KJ<'u^#p16dT+bh&DGZ#+'r%#V:c5\5)'oCUem50L;;=/L%h2n"%"M@IQ:h>%SIK\o3lP*I]=sKH6GcI"&O_GP\'\"R5'b;mZA#7[TA0dQ<!D-:R=MYHn6<oY&Tqhq8HGt#-^i"HA@6.ad@4^i3%"q(%Go!,LEV0!LIb.<mX>,I5e/&JE3`P"$J.I/l9ai1Q/P_=rgQ#6MffF&qm`HlZhdR0cu;Kk3$CH/r*P#jCBLF/RFpu5WGRj7$o%`4[qMV#M7_8X)^XKCO76G\aJJU`n-KP1X3=.r@L[QV<p43CG%1&[tr0#T8\),Y;.Q#hbAEiZgHV*&T#`@>Q8jD=4o8edAf;9-dsq%E^QDA(0PHc$lZ\81-KJJF4mokg9Z#LqKl`Wh"3C'alGWY.?E8;,OnO!2^P&h3$#D)>GT4e`^_)?Hl$Yl<-N2AHYDB?WPr22G',:Z%H7c5T_5U>uT=fmm23N#R>c6tX,.]A/Zd.3&Cg<@9Ad\B@EEs%4hq5emoq"eg@_W;:U.as\,6=Nl7/+oB*H#f?U.^u_0ZE$#f0&%R%m@0>iG2F,)S!8r!?/1@E#:N#Hi]8A1:tiM"FkRBUQ*%c=[sf7#pW0^-0S%1_8pTm8:8o%?o[0$oE5BuM90.ZT[*_a]>XikJXeL1,%k7c?%4(.DgiZl[`TGr0+e5L3Ghh<9C)ArgC0M4kg+;r0.P"/a.I<LLkf[NU12UeD6'X\a\4s2HmU("Wm15R]gJ(W/(a:Ddq+;%KQ%Df71o15A[bilu'aDcE)],Z3ac='Ntf!j.ROppOXI=\`Z8o_HbM>]e`/D^tsb-,CpaV]:g0q;!Z9XBdmu\*]&I@k0qtb[bA`+"GJ8%,i9=rMNh?Ubko;<1GD.Cg)d[tA]!Ln!H4+-Ck^]b7)92RMP2P&)#oQVa'OloMWgUSl77Z3p#E.4Z*(L/m3Jlm$lBDMC&r'j@<$)n%l\gri<1#Fu/u^XQ2G)57rZelH@RF3B?SrW"M[s16`bKYU#T)aHTiM4"epM[5,Y(L.2tEf#oj)21WT;f[NFZ:JgF9itE_d#;btOc?%%NI47jYjV"X.$S*_clFbo05`aFOd&O;6Hh)/0j;)ClK'ilHH*#3oNi_W0psFP%HIN&Vb$n'?\I'GL3nC&2^Lr>6-1"Ns]\b0WbOY%3"(r"VXPA/p@"njNTl]WCs#Jid3mA7ngq"s#jlW?\GdX7,Fqf85a88"G6e=[(?DTshier8pJWp3MG,5]3oZonA/u++SCgW7P;8!Q%'G+uMcFVT8Lf&_5ZM5hpnFuJ*c.R2`3gEu,je5iVgrtk2-g/XI\@i:nEQ]mQF)BKlknIh[LVHgfP9hlLM9Co@V?AcF*'&5iWeVZd%p(CNN1L!<7V/SViPS:U+%O%pD>H<Ii1d!s2Q@hO_Z7!Mg7P<edm1?qK:?ifr;GB(-%"W1dTgWU+5[>-R>immGoHK!b;a1/`.f"fH%re/)Sb_3I(I<0`.B-N,%UKqFP^E5YhFqRK[%;Egs`Z(qg5!Q;-YIp,n+NE/P5Hn7r'8%Z?N;#+^D8%1jR@q@iA_ce\PSmQmV$rQ"%DlQ<H5-*S(2Ak*&mFB*6gK]U"QXDL.Ims<F=<[FJ?P\rU%LNXF/AgL3:1-"f41rNpd_X/@>Du[pBOR4P*3i\@@9T7"X:Yh=Yf?lc%0$t[i:QBqkAkj=0BhaX>P>%.nRHN-p<QV<Z:Y<nL!d@mr:Y9:u:Ze"g9HP<Qf`"Q,ZA5`F/7bD4Z7BoEf*$FAOb\'jih2U3eoGb+%n)6'BXBGh$eY&3jH&^-L[pif^UscC;]/f3JOd_V.SB1k!?ecYq"tSMb](P,7SikSh3RG7'&5OVF,L,pC8_^]\a%o=kaU=[f^YGE`%7hTUp<p!$rZ]c.6-FZM)2:GCVWR6PZmb7Z&4.r"PTGO.Jo%H6hm/0Cg?hK[FS]UAFk!%/Z1R/RoZg_Mo5LRY,g!XF89@KZo@"jS*%%Y8Y3@dU.UR(83HHAd&@IBo_[":amr7\j[>P06Z%7:nhh3mVgS(XA\L_sAi:aXHg]J;)ULPfu+F_BDsfe/8u`>XhgT';epa[_t4s%8Cu16W^j$aen;*5/5B7I$B_W=Tdr)'XN%k_e_3.!P!s>fAh2'k7ar1$>+MaQl_dga-60);i`.IVl*%\.Wk!hH]'P\35<#V>+rRml%KfO]Q3DiYZ#RV$EG`s>k[&e3DrTe+@,:Xk[?iS=4J,#r@p##ed8bi/Js7r^]^]'!!r."Vt+1&^&`BS8'It'/B^rndkmpH+\YQ+6E%II?m&gfXC<s85k]%?4.FQ0f\CR1%>E.QdJ'&(p%sCO">2_p`.0Y"Pah%qOnFo(D="F]!0B>&)38IQYrtkIqjVpue[#G0XeNOn65<%`ESn!ilut#hq&sbq;4AAo\Y&q9*l>=1NEFH//Z!Cd4lM=*qptq02"2eHb=$:c->(#Lp8^sc]\a^D5BG"C2u3eH3*93#@[m^gm;.)%C31Ag^<UscblBr68tdT85uE7o`SJZ;cD(k]af(4gRB-^g?At3)/ook@oVnaf'Sl2_m:rR;OkaacS)YmE+^QGeS3H#5W=E)mSJ"/`%_DUKV5jVA[ZoV4rif7oQ_#fW*+BAeeWi^^n1PSXKFea6t>MqBNj3+QF0Zf@eLk_q[R3#Ft>eWgPM-kM`]'kAYdF[ujIGa54>P/a]%f`=)F8uUL)8DH;5rrktXQd@Q9k;hPc./`MSb@[#Br;LQ$&,V<JcI0Ys>a(c1(aB8FA)q#PBX=6Lf_Mbln;!X6bkA^73\otZ!]%IJ%S/HA=aS`o'o16kkRO[[1gJNm5n_+7MoKU7[7@OmtWRT2p+Gq`F,sM;'!.$7r:WtsaSO[_B\cL`.^_#[oDECt1R@5MVJq$-g`>`#+%IqU%eEU55qJ2RpOb\qZ4ol32-YJWnQG[,q6(s.n7Ih&:6'S*V`3ii-g?kJTZN5@>=dB7RQ!5%=ho'*a6@j8**q#o#9$El2J>9AYm%i4j`S0]l6=m<[O7O&nhsRTr<O][fW8i,P#E\L@%:Rm9Fm:_TS8Uk^NgI)!/gF3b$Tq]8#2K%>?tGj`DDgZd$IQpXMTf+k\AD+_NF%60fGadO@?fK*!:#LGRp&,9%_MmF^D_?24)Jf?h]H?Ml6R5B"9k%Zf+ZdJtd5<%cVI,rV3_3D^84&kO";>'qKu#!B/k@3pTYH/(`2%etl#=q%Q<4I_DsfcLRae:_-)gCRFX/.VX\$0MX3GFfD7J+,c/1080Hu^D#40bQQZ&9%smG=Q'l[d4d'$:HMbcj2]&rkj+`VP#ieV%Z'J;i@/TTIU)RmkMuNC)?]`#Q2K]=;]DqjWem%[u^ZB4kFjl@/pi^0XPgcH3jP(=JUB6#WlZ($%ZT!>1%+lAZVFY/pEIAsg/MapB%lOI,Gq8tNKOIsND_3niRGU`ZA;_].,<n?`QT]J=m$n3AF?"@sk!:.*;\Yr>7X'rD'F$Wnc2O1g[.*j)].sViu&hEN4oTQ+'p%Vrm%1+hJK]P<+D1PWt:*o3*K8)%b!j7,5`a"3P*[J%/.ee#?8.gL<$DM]OX-SoW595h>u/4.8Fg.^*el<u11-J%%S5#RA^(9C?]gcM/j%Q@5pRF"1T9h>94`BQTEJNoRO%XTF^ZlOW#Z`ul5W1ScgAP/<;fc-eg_;Z?mM#S#@73"cSEJYJ#Z":I8)WTl^''[M"jm-_pOE+H]`%\E:M3pFnr=JE'Hs5NCW^@Ir5a*;oS<c?g+AFu;^:LVIOS3kAM$*Y,(u>@HJ\!i[ID9h9rB%h]^nO+94k#=fmX.$+^eXD&k/+sM9D%(ICh)+.XV#KIQSbPa^>[b>nT8p/N(*[h$oip&,0n2[pg^#;04A[bunhOi$8hXSYi6C3T%_%N4UmUpdMY&R_^;0,[a\p+t=+g%5.j%*QQ"YJ-aU;4;s]CKi/lr5GFEd^0rUt4K?cnV#f7eST@6[9+;V\>#<.B6Q'QrmDFS-DIEH@doJie7EHXDWVT+Ejm`LQ-+_X+0Ed7G%KRmFK3d@fa.#KqQQmXTKMu<GE_D[R[eBeJ*%4j?d3oB5='t:k;(#Ah\rc^@UrYp^u.Gk+Cd1)fhM,=(+AVU1i$sO0`LIc_0@\Z1.%"kdo[Ido<s#q7MjeVQ]7&$eJoX8l0#rs,lh0X+Gt*I6Uo88os;4^SJn&\`_mJ:>8,e4ocMYQ9&q^-crb!)%$Vlro'q$mW%9d#m"T%iA^"ersY@Y'dS(?L<)Rq_FW/;#FOQ:fra7iceE7[EpHZ:Ecq+-QU5/Jf_-+A5ZN?OoE-5Y6Y2cr5(T`D`7M1O#4qbPeFGp;mCq3L%^6/g@:MaOMU6(XLD+2GE&?/XH$]i7pD-7jeUrWd?[R_:[g9<(MaL`*@pZr.FP?:k?mb3Iih5Vo6FRNmf"nEsF084Qj="1tXaQEt)%KWZFAbI8qMZW$[8#=C$r]H%P\<>,*9HQqOf$Ud^o+SB_SNB1.bZ;6ZLAC)NgFSX0G=Ej'sBtV@B!=Y"nU(eDEjm=CJEA.K0C8`QT%ERDfdeAj8B8)e7N]U<[\9i2,c7,tnK<O3P(pafPZEKb$p^G?W7.*%UH&0nM.^T8dFlE\`..1NaZEDI?rIEm4i5nd$L$EVdp1]\to%7[fGm.f0Y\qE:uJ/j::5?&?$UYgEJZD:'.'#%`r0qlWjZJdt0#<:Ns/26U4h(l*q7.E*\Umih/R6b:ghQ_\em3d7`!1#F.`r<):p%aSbo-L9OJ]R6pUQN0&7L[;#K2JaqeqCkV)TJn54t`f%"Y[QY(W&1b_oXCYDHqNQMPGL;3,-e7[X`UVqLLj976&$jKVc0TI7FR7V_%(Ne9Y].A>^V@5Q#\O9qYN:uU5,C1^a@m2PL2atTUa<!Q`;pmac$q16B?Zb)CY_iKj:l:(YGs++iW$RSb5H_9&E)X4?$Q7[^hq2T+%B'5J^N[(_?&^Eq#D)$^YSoVid/:!\Yd3T.U,nQ#(@'CJ^`-%$(+f:<8,KWi)Q\2>YHp_:SJ,O[Zp"Hl..U'l.\YVLfYt1B'0W!@9%X/>;8XbGcGX>Qd]bc[YBQg`LNIiqs)_-`7!6kVMY_PPu2HM=BiEN6-UFWBs%kWT3G4%FAaN!(S[klhbI7^-du2kUi'$R0GW)Wm=d%Qg(@$kZI+N&CG?h5pk/mSEjhU<Y1@51Sar?;Bc_b?erX#,Mk[7Pf.bES9uN6`9-WJ0SHOWNkXZW4CLcUr46S.C1M6Y[-<=R/378,%n<WF@p[GK3>W)M*iD2cGnmYCG7eQK<JKO(@Q`qJI9e`eOinT7K$;dDu;!fB/>+CRX/en"F?-s9QAI0gCN[hD,LaRtp[Ji3"Zj<:A%^/H4C-cE2qD[bL?2mPprq1F!,5->5:p?-S*MXXNdoHu@[e+[SPB#^Cn&u6^#3@/3h"DOOVep8QC9chB?3oJVn(RDb-KTdkJ4V1%%%8DMkr0j4VZ=VBbT>fCSE/*cNeeYa%'JQ,NM>g2K[Nm'[3A@c8YK@[pd-8=fJb#/=nh>-F*JUC=A=7kk*X-C]Jf'iE(Ql#L.D-uj4%J=oBL%'K*&0'<!<ES_\eCXQ><G&_XT7t(=K[R;h?Z".D?Ca\6#]$H>sSP$lf/oZ.\9_2+cJbamj3Bq&Q'&kGbEhgQ)XnsRuq/4Xs%+mC!0gdf89S)OfXE0*5T%d,@tWg"N9QT#6fl)dT!@asY2BRlOsGJp8h9c*neeL!ee(eA)u5*4K/p*Fg[@$aTO^'F>bQN/U\85>c0%Bp.]\(/jSNrlL?X6qedg9qHEc@%@Z:%RQB]Lhb6SM\-6A$ml//kH+-o0LiU4M*)^m@l77e6gi@,+e'!56l8d<QA)cDH1u3Xa-'L.%F,XuC5rIe+35p]MDHouHGgi&[W.e>&[?[bA@>;mH'1rm*`#T,GLO25tZ,*E="')Q&T<gm$NSN^l-=hg:!gMYkhdmS6\^G@RpE>L-%XbCM0+g)SaeeaN>Y`$dQ(+Q@IL02G9K#5<(Y1QKfU/BT1YJ>rqiar8.]P:Xh1Rh5^bju!AYiPIR>X/@K3#ar,>b)6BUNar"g0E%+%1]?QiXKgt@ZNc.ri*A]pBSq=HA'^$[I;2ig`!`m&HS!*792A6"[>OYKW"_aT<_.@Ya;`eoG.,>8]=mda@E!UNO8j$cAR`BW=;)mS%/NAcicbKZ89cSo_6cJ)5+6L%mNI\*Y&NXEPHAOJh4WjF[J;kc@:s`-6.O$,R/_.SZ)&PT(3tFo^Z)QY@+.7Z5*:>Ed]m3ao4NKCr%>fRL3(^q"%C+qI5X7%R)&kfKXr=ZPu'oS#HXkgqB5<q+75e5rN]D5tJm26;"rnA.cg>c51WQ,*_MtUOh,UiHh,3p/hD($G,7#;VN%_#$gO-fTg%Y?u2V^</B4i6<FnKX=Cmk8fGh`%9,m"_;A!goq)5rQb1a1MHmf"-O9cTRH#p#bOC.E14*6fHns+b4mgMg&&((g.dW$%pF-]7qn'G="'M43f8qOfWFQDGAK/sL'Rl/bdQLi+[ls.l>TP.,dME$5+!Jm%lel[^UrQpp:E$HLELWds-=P(r%,mdZl`BN'+_81[%p(#T<HR%W667'Bc"YJ!W&CNbpPfOV%MoJM_@`\\G1s6Gj<EhD'+s*0j]0QHsC(Ph%&3j9"J]aNK[T._`T(9kTDJ$W`Z_A0gFWl4n%V5E<J+YbQCN[HUKC3j9`?fM5K)s(C-98\l4kqha+'Gd')m<5X)0EqAQb<m?qe9&j\*?U*-IMWfjEtuiVS;fT<QHjX-b+q8Z%amGW%,`^A2?'sIZ/XDoucA,LWYhRnaXSUu@Uae.siIT@/ZDUWgg#)S%U["ahJ=!uO;Q!Lc=mA_jCkiU54T$Dk\'-#[]Q'`X0GKKgLpN]'%e;.E%Zhs-/!>ir6a>@&/e&sGZjY\V"4+q$OJ$1cqX<Ec`pX5@P6ck[D=s[0%M:92#jfl`4]C5-fR^Oe?<=&+a[UY"CG.1@Ec-$X%%@VjG@0;/H'o)>rP8D)5ph=3`;@T:gc<m:YXa>]s-BIk7LC-.fc@r$F!p*L=k^Q:L/Q/[@F=iupj&ZUb\C#;H.,lg.YP"BK;!+K[G%0M@pF>j52gcR$IC4(r845&fL1JRE_EQ[t^.4pN&W3&N4&2O$0ZZ&&r1KKlqOOg!/Gd,5@00I\dXFq4cYOC0s-:-iEl"/mNgb+*6d%W\JcJdjKrF+(Da6ijL/L,@mZB:^1L*W_oua1D$D!2G989@5XIO>al[q:-GoXQDD5k8U79g[D&<f<X6!Gqtl4L-K)S2L=M]JC_LBJ%Z"8kE,!H(dWa0OQ,<eR90*fL0AL#&G3B1pB>&T'(9RVo*Y,r5:.ftB;1\qiB<4e6pGO&(JRDqZ8`Nh"tbIM)L$j^<$-HhhIR%)t@%Bm4sMJ\WqSL4%@3f9<V=S1IZH:Z$=)P:g(d).fcm<=2'++L>3spO^7tA)a,Gru<dA[_0&e5mZ+[,rt,*Yht?L$eh"Gn3"Q]s4E"m%d?Z,oA[J1(Q[:b%P3_h0'Vt!7oYW5[>?_O?7kiJtHBr/:>'@]g\WI+dIh-J$d82%1kH$%S0cUIKo$HDDm!BjD4P]_blgSb&HG9oO%V!E36U,J.5!3s)bUgX;Bb*5@PD,mrhY1aX-,SS2:hRlJRp-),CgUqB,6kLa,DOjtsm.0NQ\:YXfKi%*a5>5Ioh>k<6f+qLQ('5'g%KTLma@tr'@"!hBKd,eQEq:.&?!5aZk)mJ&?QAgg_3D,05Po+AO5V627:Ij#n`SRcX&dS8Jrsgq"P>D7`Wo6`7\@e$HZHY\RPH0JE%R]`)O3?`f8,jp16<B1MbET"RP+9pt<3&3:Ue^HarL<^Z;/g9ETNW/7(nhGu+<[]slQ4GW;dJPN95-U]q9acVZPZW^&!;lsD&=3q0%P=(C0#lm_i@(:"3(m.%@@m[Z(E/>qs*G1DodBuK&;[nPKbH?Ar05<U3TnTX&NnY?EQCbnc3'52EX"FuM7[&oP!%ig!>PC\AoQ^a!%@U$c,Oekde((c75Lu$e&Mq+>['Qr/UB1dDWG4L'AApI[g/]3qbnuHpG8,Odj1n@Fe,HZF;@NH1L?=-?i(R@`d!QO2+@M3"^8f1@F%;S]IpDqCj7%=Ai"`iZ\<r:u$,#W-lu,Q6*BI1.8!@@B&'&k<[EKCr99Rp&]N^f+QdgUhSB8cb(8O4[2Y<$5`)!g-([,pht<;A$hH%qXqWN4K2%VD7fT(lTlE&%V-@#e9rd%)5=1Q-jr`X/_JMd^XB[20)7o8ZU:>:a/8A?l%d(M!@f6\R*:FD`i[@+hYkMZ,!!&7Q#@2'%?pTCqI/'D1^WjsIgd'4%N5bJW.dslQbZI,po+#<<\?DP:Js\n0PI7_\J5,fKR&,.V4iVL7JP8dsY?rqVY<KiG3E8>`VL,YiE,32j%7f/bu6RsO>+ber?G'b@l$BJ`JpFYP!L/b4fjtkfc97LPIF&UMjTZl_"5;8F&85nR>o`TlT<qK'l[:8sH]EpcaE+D-e/_NBAq_Le;%7&4&BG$K+/I6DDD18Mt'6D`cV^F0Z!\B&ZH/V<&-Y3p/ZDUd7kgDbuLAjM6n\VVO9p&b:m)S2c`Gn<Mp1khh;L*GfSO5@E=5QlU.%"=d[N6qg)i\4A.iNU'W"6Mq>DRu%3%#GGme>7/<4E*:U/FkM\J@q.B[&!W([9eT.#!4,ogb)N<CP?__&fILQ@SDpVTKR`Ra\t7jn%pD@p3BX-c!]GQh-"/7OlS7LROI3HgK<E$mkZBq^l3``R)bdQbZAdQ9oYL"/\"u^QYSY6=K!fU0en>KZ_"@l!W9&pRi4.*QVg!]!'%p-:A7T>rAD:e?dVJJ,H-CuB;d/qo7^53Ht^#q<Tu)CA@Y_5*K&l.52YW'lK!J>('Q7>*r3Pgj#GeIlSW[YTKVB6_+!=YLAf1_F?b%A_;IMIDD.'B$CCO<1A@7J`!1^oe0tZJ5@mWOY80-0:pP^WZphC54A)%kX+F[;7,&=+_I\ee"]iFS[BcZ0)cL/BSl=7Rr7P75b:Zo%CQE7Mf[N%t5uPGiluE[,KS[5YXIH5p\92Tp^0:e/R4<m4"0A!U?L#Z8Z+S8NObt#r/RgI9M-1aMK#P=m2F>0p'<r:E&B!.jOrfl\%leps!C0oqc9*&p_o=l]MikE)#6Q'YimpT#;LZul4p]W=S3(hhj$HRJZYI>[oP\(L%o]c8e'^X2YLu]WR\6oS=ZT/S$=7d6h<A<6p%AL6E/]0\Xg85n.B(frA"nu.-HOZOje%.M0^o&WIEmR`Wfo8KEN<$OF>aj<"Kh2ticBt_Fkp/[If`e'`K`,9'[O"RN'PRI^*p'WbJ%@i3$Q?Y56l">*W!Vk+\bk7tEF4;Ueh?.qqYfOh"!oqL=)SJ"a%FIuokEI6e9q;,[42f!m)T:Bn`^Ur!=+@.$C/m+5>W21-!Z:pHL%'>1#TP8;lVZ%DkAZUfmdoD)cTVEcVZqp*Lpl#^e)k+_4549"a#01Y$':!)+q4+Y#53uJm4/eOZfOBE&0oF'>H.>9Ek1OV@Lc^/<p%M"#48S35d-kQW3\]9C.ErQJc0Go;D@6Uf6`T#_qOHJbFRDog]i_M0fB1KIQu)mN&>.c2e-]*eAH?[#e^*+2Y@.STFOQtlDR"D*Cf%r3LVu6gLa6`'d^Fb,!B1'K:lN-m30hE:k@'DUQ(2+>9CA)9A-XqV-7$'rq"1R6a!O7!]n>6)IuW9Wi$Z&hn6/W.:P!(cr=N>hAWZ%ea=4c!!:de/Y>(HW[1)Y#q>/$3V(sL7UksIf&SMf.gj"Jpg/Yr,Gi^Fo$$8m%"?o3lVqL5U0jY9A9m#(Y5.jLORQV4ocI96)r&N:%F]QPVdNgTX&(?^rE[d]6;<LndFI7jM.1r[4FQ;k/.7?HL@5q)Z"bKR1\cAuO;4CR*,3Oj#[uOa4h>1!)Zl2Z<Y_"DapDr4nk',5X%%HR)LpHn?3")0s%5I%d?X1FPk\eO8co<r#4<k4^N*SFgnoU,WJm2W[_ET(@kBP`7@\1)/:l,.sT^h]F"Q#]=ZFr)YOW9\]':9p!>%`rHNLYt#kkg.itY="U&]]2M(Q%,X"P_PbSrY^gW^q>e+0gE4*GrWDQL-"JqEg<0s/<$FTc8^g6Y=^fb]ON/H.81`(S(HPBPlNPq0%H9a6Lel'q,N`h[sN-,,K9&8f]NLVi]-Nt\q'?M-P_-_\Z&-)ZAaj7U!ggXiSf+.Cf.D+055%fhPg%S)2F5";SkLUdof8&,s5u;?f%O8R<b,N$bd6P[Z"9PX+EpK[:ErA!@30J!1:\U.r`O&b,O<dal)^#En",eConnb7Oi=oQ,1(gn_n<Wh=Xo[H_65)FbaoKOu658T;$%lcOSEq>0VZq4dN;n[6Am=8gIQC4't!kOcscH-]dBZl_+%a!1#.L#VuEnmfN3G8I)\\:1StmhP?ho&;k3:]J&,^-RZWXT6TWgu"jF%Q<Z)K?><;Ee)ar)a"HW]-[0`gO^8%:[_I:)0uS?j9IHLKj<>e1?DjU;I89aOP1/1>a?p(d_':;1AUOV1,4GikWp*qJXRBU5mq:H"%cPXp^7R#:GD\<"'=2OU<6(\&%'Ercjik`E6&9KuB^6C'AmU/(E7GK%U$gWgj;=95lj'WYEBHc<\4Fp(O'%30VJp6Ir$K2[CU3TR5%_?FWkQ)Dg">ZDmRZm+[\Hik3Q;H&E\1)"&8FgmCXW=_X-[kW<#M[QSMIIm^nb6H^J1"/qc>nnodod/?(1H&'^TqO`M-_teSC!gL2%m))d<*Q`C\%aoE*aHE1\J_@rAn+0tYHNsr18b3dT=a`nYI_6"/>Ij'oV1Y<$4gE=MNE>ebbAG*O,Tt696qN;oBSac;f2L0*B`cLM%VI&I!NKD^rBG"MQ9S-Fs2Ph4^]?9[<3RMV9'l!V;"EfSt:5l$Pp3\#hDNksWOrZGe4;9_if+GeB%4RC%bXQ+iiF'%,C:uui[BQY?%AbKXB`]0m;.65532@)P42UC&&q$UUgkU>YLC:D>>=m8`1(XToMo$C[&%[#_7EJhY@G?@YAZi7M.[69"KRZi]u4,?7-Gp4f6M*$8J%1!PN3mgI)=c;iEfjOHXp080-eiYG+ehI[mm0V_`.KIHhYJ(`tnW:6g'@NdK,XsVTqi4;JuKTIP]!Z/g!+:1G(-+$[t<TTN>T*UTS%8ajMIBKhK>-"0bC#6U@gQ\q&do/[NZn\C&97#L19M10\Yb_$$B&ose*+I/4/YLq+R*UfY+m+T,L!Fg$SIYs$2$QpW/7h2>.rXs3+%UREqr`APc(&on/]`(h;&#]./kj[Cu*-0>a!n[QO.V.Q[IkDNi[?RrldO#rG;6:$$p`-l_BfIh\BSdj-q?3h2[be4Zl,NB>%#uqip%j:'!h8WEhHn[aJ4g_%M5O=_]?H*PP%L6jO[B9:)UNN$eB]ASB39AM-Nkij\@]@(QBO@BNbK&C6Pk%R,L^a4Y/,p:D4<a4Q;"?'l!%<@I'0VH-%aA?IB&FR)_1Uj_gP523fTika^I0Dur,W)c+,\\l!S"ffB#aKM;@Znse1J>eD7<3g]_]horD:oU@*L6jc*?,X)r1+5[[%$V&'dEl4]L"d*(.Z:5.Vjl?SZ2(ZYEK5hb@1%^pm(5S3r!`;mj]6djQ&nrQ2ecN]*!kt%,BY&-2Nt1N>"sh99kohTcM?HifIM6=/%Ts)7!r'FWmr5(@OJ^[MXh^b>NV3:(ei,KF_lHp-C@!!2$#O-SC8RZ;,U.8_jdPX]=rpk:U&+'&^]e4u/L,"CGZ#5rC[S17""'Uj6%/-pfN%rbW?S`BPn^dIAf?nfR2'*paaS<f,CiN"jBd5ZELOA@N70mQnY"Tg:)&``\gW$kq>bBunH3#5J99XV#i\5H=OUp^L!5Cmro%fu/Q*G7]6W?\2YS$'a2O@f[bLd<3^(6TiM5U[*W<1',e5pT0^89O%%3kpdH:(9[YT3]R^??o5Cm)9.mD+k)8Bhk%osK7#R3Am#]H%2cmbb"V5.#ms'Xn62)Pf7`_Bopi'ciP'P_)-H-tT`**X/7b<14?K:KA>3OQ[?#-B#3O"3j+#Ze:=r's3[pbdf&Uth,$=6dgR>=E3%aK3i51@f_Yoe&iJD,`&<`bW&iGqC^?&Y!+9X`)+[l.jXO]F4)dc8fbIGpgjf3clf[+t/iJW'pfcD)6GKK/6l%IsWSrY]k!-"Hd#M%N+=mC$,pQ?hZ:PndC^+(FOb,t9j;0u^aSkH-G7?*qA+")/;pX=DQf2DPQ3i`T[fedQGaK/3b8sZeV[VkQV8*mrWH]"L`*S_Wa!&U%CjXb,7U2VU'DqaH7Ok;57i:D0X[?':EXnb2<fD[mp9330?&'iHcQieU4H(6b@#,un%+qed=]N/Ub>o8a+'67jOX-jc;@LJhV^Pbs%>t"fnEgst:GTj-5(X4B`aH+d-2R!uh<i[u_TCWQFp=Bk&IGoF6^G;;E)oh_Pp?L^i''Hmp[>ahP5tpr$MuI+Ja/#G+4-@/>Cd<8!%+JdKUI5fj6k;ajM2r2<m:2"E*LL*"._]k&VGs"'KM5#OGIGI][XSkqriNRJ8>brLm1o[2anm9r:pP"&k]`-gtW51m6a=0JMWX-PC%Y9S2Ro1ml7]b0jb59Qh$ZQW&i>8=IaK(POr8omM+hTTmfP^<[N\BZY/K)2;jcLBAR/ER>.+W\9N-o9;O?=rCIhnpaVb'A_Hal,&-%[5fRG)"nO(=AJoW.;nF%R:'u9UBKb9Rr$![,cg).6>4CgbbsUj4DJDch8t<uo`bik.J4+F[oSR,El]#a2Tbcg'NS[ebaI\">:474%2Hkl$ZrnS=)iN#Ua_CXfkXD?.#4,V\aOg]Mnth3,5043qY@7cf$O6h!M;/k8?r<fW4.8NLog3g\m.A?<7&ULiS=#a"d_BSo@K%HF%)+cMfCe7P2:Q$?XfldZ[`KYpVrTZYh]'\Knr#DenXD?=7OV<lt1W??+C5SEEf]1-b;KRZ-@Bad]Dr&@3(saIWm,>m]WlPpKZA2"O%-*!Jg;A$^t2d.:un0di,$>6(m(eansc7EL>Ij$`B*r\jSA[%V`/WD']$lU+]K9k$k'C&o<Y=MQ$7X9hE+]r%FGP*7&U[JNad.VuR%B#r=VA;nLrNmfdkZ,HK%7_EopLcP?HA(IadD-K</:5U-&k;$64)Lu*GA/QXu3MrdqQcPN4rRUk?CC$=+)rR[7'>!:'7e#:n-r(E)%&VT&$Q>3Bb^b"'cLIHPrC#fmnJOGC/i#'p0q+ih9fWo9b+$,audP5M#pA2ge+YmZ1Xok,9FC$<BoGZ_R:@.7G1tR(U]8iamdRgaE%cJm$1O7jp2b4Z)mAiU'h3jV-tPU?u_8EXs)c(,@(!i.V:&CBn4("!+l?k1%V\PY?+2+7'\ZuAMk7=>D2GLd&o;F9Y)gmMa&]7-6:%&rt*tohltii'-'bH9540/CZ.f+2$hqKpi8M(F:$MA/W%A(5kjqi#=6DSD5[V=Ff\9C6V?%+5i[OZ1)!5]!'f86-f(nfRU;-J[,"7%Tg,U);2Jb$H0Tm4cPTm`^Jm8<XDP0kifrpkZf4CD(`:,FLm6hA,It],-,71g:Y<5P&(nXraG5Wo#Womjp\,c6h_%NSa!rdoPgZ0r%>16WH8.Y.A#A0-Y7nZ:pcB%-+q-rcfGe)+"eRUh@V*lBN9.\sM>KSo)rdA.'r8q)L9T^7mr<H#]@#_RHJH6@8fB4M+A'"gu]^5eG%A^G.i3=L?Xf.pH'*U5MS=#J$uZCqMb:J37r.3$G(rr.%IJ,J;U,NhrLO5XU0r4k]LV2TrkJ&jA#oC3J?E8EIGpp!UN0d+cZcEPuf%@=DH=bT1t49&r,&@.@!iV0MAL+8>HK%t8ZG))a]5FcCE?Zhqj<M@#k=d6SglqnVuBT8$f?SB%1/ZWZ6bT3"abgLW__+J4s%^/HqS%n,<4N^AdoHc77PuK"eL#rVaYU9@gPdnVI^AQTUVHn*U&kq`!YVZEeO]=lLq.!jom$&(Lr+6WHej)Hl.%1XhUW:)g%hIlTqUY%bl.%NQ$04O*A?&gC-_F^ekY97re$NbT/;e/Reb]pFr[2Q?"[JKcDK(1d$l%P"Z[>,_irb+h*Pn6L-R^mGQ`I_>eebWES]h&0'&;iQE&+%!q`PpOU%MHb-%0cAqL6;>C8>C=)fI4`4E5>7Rltja:JrlRjoIlU2,<F0l%+^"HC+W[Cd/mV8$!Vnu>6n5:n2PG[=kT<_N;6O#Mhg%GE)3>^<`k8-,E3:&]G7R^r13ckS[c!JiF9chPli$aEc<g`<YdE$SFYi7nV4)C\DW%[CcigM2\0?9*[K'4'9-1&8Er]Rff?kimBX!%QpL?-#El@_cB4X[#J61##_sY\qe(lX6dcWd'GQX*Ar4?*l<e(LiEHF"0p#s!ipK>_Bgp7tai'DS0G,`\'4B&VNtEEiB4@tceq.,2%_ML0A>[>VbJ><ri*WQb^LQ>tQP-;``jsOh:g>*KCqHH2V'D_U)L$]guZF]<00to,-o\]3I0fO01IdT-<.5S.Gq/!ik]O+YqeUj$G%!_aof_!"SrA4LSJ$G]Y?es!0;9?i0d0aO?f"p8IG8"<GDonTi4C0t7j75?PicGBb)6CimX(Gj0fY,a,s-1M!+!K;[>Q9S'BM!bNq%9SoA8.Ul$A_?ha;!j:0gSbn,IO;<hA'&+k>!6j_I4?m)^/p)nhap8r4=MqQOfjmW.$>U>[=\X[<E21"XBh])5;G8$2drN=)aoVl*%X8(\Y>ARnXQT]CiUM.&7%o;^\@%g8.RBJQ6U1L$I)t%eTRG!-Yn)i,B%rjC:X8q#>eYc1]fNm<[(*s%sU+/TY+gJ014NQLNBFD/E%V)"L>*`j.XY;"5\ct?9b69YO:On9EX7\XaIA!b2PQ[kPZM6ap)-mKEU]eaeB$O[Ue-SVTldC&?7=B;JANmaMLNL_5ajoq*@THd"^%m?&;^)#Yl?0JU*=Ro_^>&jX6M,qU>!2;I%&blVIODJsG?l(Htam2c-To%?<p.Q2t+caSif$g%o_oXg97Je>R3#"%#5#c4O$)^?E?%9J\r")J1,Ic0Z(M]$f@>J+<hBRe@\!pgB4l3b"%GQ%td_7Q_m7^hl)DVSB4>h'4iGL%U.FA`Zr/0mqAL!5!DDF.&0)L,Pga-O`Yl%IaKoFK`Z'r&]h-(m6*0!>8G)R/Q-N*R0[W=PD=#5jYGTJ:0EtM46D6=8Gc(_DWB]i7WO=),:H#b-DP6:+t(=bCqd,lQnm<F?.-5P%EmScPZY8bNha6@C86ee)-%Xp7f1aQ>ZtRa#k"p^L=L2TUY_YKP=>O<O>h?d"o&ubDh!>DNc6"U7h^:<d4@AA0DbN1/^p^.cFijlf%e=+!5Er%&n]8_)iHsp2%OcnW?*bg'_h`7?ci0c\!!L4LL0!FP2Y[DqX16mTuV85)ZbUZ?ib&9tAOhd8qIBeO^64fp21N^-QA(%4T%k3@8I\Z:_k(7B'!QnS8H8@BYbMr>'8@Q75^^5[i5_F:Hum5W&m+u)<TO"IDf7\V'1:rh3\i:r$uDfe^mZ%[JVRj+%/-;B[_k%/H\%qb@u(NJhNOqM#`FJq&[N2eFZ#IthgDX=qY5Eb-gNhj@(&Q'=@S#ar@\pAjc)N@ZR*!0IH+rZl^P'>(A=!3DQaqt>jgAXSkU\YCM8%NJWE)QoTLI-tL?20HXo0[+@%*FPOQiH6K:0]6^-@nOWuU$W>5#\-MI@;h\cqP]Ce^;/nJ4)mag0SV3OXE<K[S6kp%05ET^V>X/d[%@V/tbN9'NGPXthoPh<Ul3p[$(!Gc*ANqU-T]J(XW!fLTf>f^O@J8)jSRMD-Ga1=7s&j)1chr(!9S^:ja'Ok.#-WnpsKmD@CU=8W&%/g]?lRY2tZK'B;8O_JM;qh:lm4)ug4ZFAUok3hoHlsEjU(L/*-9s:pkM^ritX4n#Ma"j1&qSpr&1GYZQb/@4b*q.PrMGmM1hTtXN%^12B5Ke/D(9!$C6QD>78]<t>8R]ah[A%#"l8^*&Q$n]irLul%S`W2Q%A^Yms8Ur^f*nY%):[K7kAV86WU]o>9)e7OsA^J+EjX5(i%>O_^X<bN/J`^HYsrUV[HRjiSHn&RF$hrh;VOKI-=(*8jCGdP(a@l(3Ia?X)ZT;)EA[kX$?^sH2-1ahP=-am;D+X=sf-qe:3\C[ur%gX.mFH[*RtBn7BK-*!Gmo7=F4*l,L+5Xooh$*#TrEXG$$L6mk7)Mb"%L1WOZJ]Z*%eN:-HB@s<sls_+YmElu9OOTG0=[QLS7tuQ?%0lI3n&s%[oc..9`aj`sr9(1tgl1S5XnG@24I6f?XTnQi0CFBZ$pH3*GTju4ckNrn[%u)K^q]p#si8,u!2+1rnP=pm^LB_NqkZF3c%hf1VZGI2R.[!%9T$M.a'_Sd>0o@HV76HGToISZ>Ghft`^bEsR:E'1f%W/^%]4>aP=8]0Q8E^d+T'us$(aT&]GjlL":SC(Y&=;fro%:%sS_fH/a&FP6EqVD4o[B+A9LCH.`p^,hTbfSlRO9m'lN?shPQ8tZ[j>+CY+Wll"FS'ET-^j7=ie)@]W?+Jd<knr`LX8d#A>#>fp%eqZ!UfrQ:fg[;R`s2T6EI<YH`f(\bTr)N`rIt7k&YQ*U3ric=As6Y=4+91*150s#i^]#lNs5F"VeV7(#qpsp-pBMU3Shee<p;RN(%mBbUNJSRhsZc"!J8O9b*<CH9#24**$YPX(-!qQSgabQ)YH-8Ie7$N]@4u)a=;lpZ5#tfVPoC]01_@A^FOY[,c#k7s,,[^.NnM-**%r5"G0Z<JB;4"jsVh0WJVJ.q/A-1MZ0a6%=2m<AI(q,9o<=o\Dl\M*"5A4r,XY"D4equ+I%A=U;8@Aa&:6O8"61P:b`"8$iT:[$]'%V*n@X%X+dbh;uRW3N,?;5@IiHkC4Ma6\jY?f%9d:s!kJ+r$/O.dKGE/^c&%-6"5$e#tc,STV<+*j@2g2.5:F0fCLIO!cPj?T$$9]%Mq;dqo-k-(Tj2&"fi0ns;'9@V)"f(K:nOnKB/0oi4s4r.IJq:kS&Bb?Z.#t-_GJ/ZqsIh3Xsh5a^(aIh5bM7l%1Hf:^h-$5K*r-&%=$W],U(4g-$"Z,J$XAV2I3P)TZfK2/d>8=:qD5IZUR2$$@uEo[9>9(IPc&]j^%*X,>I(<G4Fgm]r3X[P"4ABWN\MVBj3HFC\$"_E%2T8A?8YF2rhC7&EcA8YgbS"P-8MPS6>Cp##82ua6^W.?4[lbCF-Juo66rI/&^kuD!)H'P+dsAB4YmJ$/n_2Vld\j@hhZU+#>M,+X%-4Gq:-0FijjN^4P/n:&09Nj]?p#U7*/n6bS40V74#;chuH,RK[X7^4@U/U@uYsKS0ZOe&r54hFt$QoYW!3t*"F.1X)^mJQT>\`D1%:6m6@JMn`m3[(BgZ5j^*J6QqJ]DdF*mgqWH?'RN`kRtL2W0qkV('=Al>(=cEmlL:!Tnl\68ILM,@7Un4B(IB*6"^l(CF;F5d#]]P%B:oYBar:E000t38f2\%i+G(79J(*Ddj?/WL3r-V`5)fcD-h/2qAdlZa*7[;Z,JTaubKoFH_u:Y2g,#b!]&$pUpP^IXoumW\b0j%7%[p,^#jNH_U[EGuEc',!84K416MpSkM2q;(2KpTb:_".3Ph=m\E.IuHf#EpoV(<.#G<9M3&N'\)fN6NEI:[\o3$VFe](S,^Fi&'Qt%L5Es8D_d"&eWX%A1rOM&X:FIp,=MeJZI][+7[/3<Lq6sXcf_=O'jf?h$lh;fdLp7dKEYDBT@[-Q6eO4?=_7-Ccqteh3=Q_c*SSCp%X.a8Y*;UrseLs9p2pWM%%*@7+n$+'a2G>^4'4cVu2tj@[>mTul]:"4GmbZZ=#[`=h=O1aFB.he4E]k@]j0$]\>aZOjNpcZ7^5Co0%g-(NiNobQ_Ve1$=5N<^S14FQt;Di'ON!TOXl,Ho&f-G@2RUVG@YSK;%"5<%B920QtZlX*h%W:[@Y)q?iapRM0)[fDprr@oYd\!c.%6GRm3%#@VfFi87i.Kb/CW?[/9\UY)hJILdB@eGe@H=1]n$!WN$^u.5^*+hl7c2cF8Oj6(O(-cYF/W.HWPk2-?/<0.[EMXmHACsgU%"*ql$8tHC'6mLbZ>*6q^PYOh=P"k#O=OL0M(3t.0[9Xi1L/aUN\PbPMLL:";N(ELSifFRpL0O%\B\a#jZ#Q.2>`iPR5f[2r:N&o:%@P#NF<A2_6s0-/uD<59HFKhPlY)$":#2g]ZE\]$9>8U$,Lrf`gN5+m/D6VkuCf1h1TT-Qg*W[MVG/Cc\q119Fq_tdZB.i;fJ#8G3%(7`&40-F!^)WRQi*i6/facmU(',O7jSYEi'_%=4*XWk$!lb2B`JE1P,be:qc5W*6m\=>sR!:;fAIML?0kW<[E&4N0hgEo_.J%r8N%?ohkd]-2#+TUoR$,^)m]L'(kD*>%B2"7^c?;XaS\ou8hRnSX%B@[1B)T$T1k(sj'\9*JB=KW8>Cd0;(3@OA8Z+#%e<c<pdKD5m+]%pA5T*adF=14^75u?FAhtA*]XoIE0/1@2BM6!3:F"g\Vf.[rb`F/0XI,i=>oe8i^5!\TV>h>Iq3l<OiLaeE9(F4/?VflF4o)-WQ!-%!D:%G+c2h;Mtig^jd7c5Df(/($,&1na]6?QT!bcXXJJ<i+:el0Do/lAPL?BlY3Q^5?:NXrp2LJNDI>YD4g$9goC<p!4R+[pFfGHX%b9tP9%2fc[l(EXFRr7A4I'r7,%YFML''U4P!mDH)$8<UOLfB-j#`&<(OhiLU_NmqQWiRFc?]PZUM+gpe*sb@A;PbOs?*o?KSHm6e%Bq(PeU+.t09O\n_lajH4OSo='e\)Tp>cg@CAD">Q.O),u[2?lUo`DR-SCY/+WT]TqUh3gZJ!K!ELMCaaX_LNQr@VD\g2s`;?k'Y*%A/j[jGRVZ2(A,X9K5(\aAO-,X.i;&c4*Tp*<Y]!D\Tfe(']r^%U!=$1%dQ4Kicbu2LYO)h`hhGTe9S@/0Kb[^m$c@=\CABLog!+i%cQCAg"[M53_-(ITpE'3:ZZt-K`V=7t-ur`22uXo1/V!eRPYTI3R)G)f]o]e]O`Z%F?A;$i!9T)JE0B5ml;h)FSc=<(N2Y8)CFlK'%Z'YBh14MWj"a+V!Hjm.([((7M_mo![g0bVH<c,Cf'=j@@AUTNUB"u)de^jYQPZE:h=%d4K,Xu@32aR_p(D<`&M*WGa8a43$1ILd[%5+-Pg+^F'!)<0[SGH1Od4>/9:j8cX^fD-.PY(&hk[*C]D`8<@Om:!0oR9MJS*b/=In#p(O,R-jUCXPGd8u1WKh1?+I.h+CJPK/:K%S$bgObs:--)e*!E?JWJ<?.s&1G$t44mKQ8h>sl1Ylmh68@Wf*ML].%66<3CG<n5\R@0(fr$LD(dBhA7$]$%li9],W1?Pn9^(W,_5%6o_3\h%s6608sE5L!9P`*FcAt/ER)MVHf1-K2:>fG&qi;)jV#S%=5j:LO/d3:3&jJ1?hjoQ_EdP6jF?`Srb)YFqJ[.&GPSB_MJe,%SP)sqKuOQ+<PQ,c)pG'ZF2%X\2#Z0=(`)N3Iqp`lN>6_&(YsrbiuY"Zo5C])c5fE%>\B*.ih_s#li.63WJhj\ApK&<))_iiW4XYD%c;s%u?'$WaQ%?&f[$F"gEAc##%S&/`gHA5A<2lXR#+qO[\jM".*$Ki5lJ%FTP"3l>>H1TAfh9H.6?Xnk;UDp+jW>-$X1PK>j^[^X%_SqN"eSR<Gl9l+*f.<UU8NqT4Z4csr_i))_[dhT^LT'aRq9;hu;Os6nCIVq[';!jsD#6j/OsJ,h+BWDo9^;t-feJ?@?^;`3`D+2'%GmPA2RR:p&NM3CEpDlVXofrDLDSTc4$QoWsbdbHq`l[Fmh8i.-$R#\hZ`V*-LrVs'mTR7:Q%(OEGbi*UB5)&l](YrJYnKr=Q^tq>%LZ9I)YgcOpnlPIo7!F)_,\n=Iq+[#]hRFkg:!oPEF6kO1o9t[>q;<NXYPUN$iAWK6Bau%&'^['l^nM'FT>@G&&uq+F3;:B_B%pfY%7QV@(qI<:qXbJtkS3"D:ITH;TK$>f4#VcYUBM[gQFYPt>=BYajAt2U.SN/n<%W<UIcejYYa#c,Cm&DKW-<]1AmAu)Z`KF^AOBBTL%-jmm;Eqg2mY0qLm7!(P?htLA9+-et0fd+1I`a8Z\V@X2olL2dp/THlI:Zc`d6srAP-oqZc37qpJAPMCoI9]5>%^q#lIFMS?L"]?C%YOWrJdsgc"Q,5TBA.0ZEqH"GVa`=n`J-/AM^OBY,T31r4s$P#p;1HS,*h@ci]7\r'cWEBk?c5]1r6La/?D:9aTD\M$q+k,k7g&kl%($P2@It4j'IiZ^>jkn&*La;%`cl/r3Fr@&cp[cB4WEa@0U$<F@]ilQL[ksq3!?iCH4^)m@&_dm:RP!B)bp#B=KNh#KZF.,;N"^>f%bD+9u;XFZ8(BPSSqWK*R7--HpN<`EHZJLIdrgYfc7$jP_-$HEfI?fl'7GM$6lp;B=1Qf)QfR/WqrB-]$?VC''S$SU&A9]>j+>LOZ%.nFK=rn!3"-T)6cpV_nFVSAOQ_t:[]J?2#Y2[&1lg'eIW<W1TKYr)<&?3q6Pa[TP0o;ZXsR;D+1kBR;j[lQ+[S,`8tY@%;MmhF_h%9VK4n=QZjc&OY94S@eeNG,FMrYTN?)B.S**=B`Jk_gDAA$WL7@p$`Y/PP77(lGVC&*u-s(5c1)LFJo:t6k0%B$-=5[J%Ed5Qea4^%VkZR]NXS"m;'E"1O:HCu1/7A/M*+.._K;`_oQf/%(,Hl](jZ2rK<a.=g!lU_V:@qd5S9A-5d&2g;ubNtU4PpS;u5!NR!n8<B"1BI%T>pS<RTM=%[i'PWi,,RY*\mIEHtA$Eo?nq_3hW=jOIb\%NE[n>^$7jR!WMSg$Oa`DQ5PF[hCZD*6b`k/g<s>gT8\Vd&$J#JQ:=$?%g8`HFHIL.0+eMAhrF`PHKfIM_c2r._"/S*RX[MmTWWQZNo>@V(/4*%5Ws%Q)#'?0c@eBg$l3fuT7_!4!FLal">W_.2HK4S;S^i1L%Mi&_5_uOglM^QEq/Ep17L.P2HrML\?L9bkCh0Tq9jllAABjg1*BC0rsomP@*StphOB`9,!m^)J<Y[UC+SXp$:)!8-<MPsK:_RlXb%&!B]\2oZNT$Xp@($^"@.S]j-PLJqJ\\"fL'^dP%23n7SnSE^X+:3@c72sjQl_9?phR%<NZg&oeSF<-)%<9Iqf<'WFn3F_DI(m%Z:%=-\U"cd(l(Nk`#emmhM;/t55Rn(MZ=(mYX&bVgbr%4j77m8aJSA/tKs3C%2'36`PgA@g?CQ$nYT<DseZl!*>S'@-&.mW/[XYo.<a%/%XqJT-i,l6V`:8``]BN/=2H6]`hEP4aif*lbJte*HJ9krAdE8V;Nk0lOP7HlOODlp/&!J0"0oLCdEu!`A+5^6gVjfr&d=i\Xu'*%Y,GQ0>XL7Y\]Xo;bi9$<mXc%-_Y.VI*>Dh(Us-h.#dMSKN'MtDB&:FP4MAMG*L!PWQhY+"UO@:=rH_-'Q7LL_:\-aT1b&o@N7[Q;%VFc:-0)8t4C$@\2Ynd7k;.B1P6/peB^pn'C0h[fFlQrh%ermlO7EUa)E9+a7+kij&7WZoi>BaIq.BfbO?J2$n"CF%A*O-N7C#PY5%4dSj(+OmI+0=nad*]m!EprhqmCZ<ahI@aa3B]5Xu5u"WN$Nl0lXn(gc6<G/I0ft+8V:*TtbhAJA4aQcsfG1*TIhg.Kg-9*CN.2T6%2#2m&g>N\YWVXpip<63I<r2`1<cT\i9h%dACaI*^<p#9*nJ+R/#L_+Y:4X/2`KDBU,K)HAECFK^G[;M"^OBY773OJ-j3D-6lY/ME%a#bQ4Dd"A>QXB@_S%nsL%n^>*FK$*ZWUF#H"%,D\O%6\@3YH_P=^j`!&1/1Y>qZZF7o*Bh<q$4gI0>&FSIj2C+$EgmaE`QZcC:+Z%I-&t-s5pLLoYZm>AdfEaF]J_`-F+U"gQp:@reNERD?B.!WWWEf)[sgnBZ`2%)#kQIq`kr-,V$01IKh^X5@GrTG,8`Xp'58C!Ss@k%.0lO$Q"blginXH;d-!VTkN`X!p7.5#6o-ajR#jk\.1_7!2t1=I;1=VuCEG*>9Fi?lB2q.`0ctmQ^Jh6$EFVl%_J))^`sW$7DcnC=%qtQ?CTDS;:0$&DhTk>u%Fb*RZNaAYE1/0,dGTtHM9.X[JTA$;c6Cgk2;t1*i!Xf@!4=9SV4oC`3M*.)V^s7iR06u_j^45_*+1gDM%\'ubZ48=r,.h)Q,9EU.f0p)#4%(aKq$uVN*NkKkk?t1':YW]-^m*Qm<8O/X67h#A:f7'Ts_ui*ISP_utZr+$MnoOha4[.nQ\&`3j%D/k\!:C`c1c:_[)Y,2.1U'4HWIfp4OImFDg%0DIsl'[.NCYT/WI3M;VF&d:[T&m5Aj%cD(!5q\"pB,cVHu[ioT.hgJW[`M*pEsdg%>l'LXO0.TNQPRQtFOUQdInP3Y5.u#;rZ]hAN'DcdY<Vr&r&&Cn[=1=)P"YUh3`nrRq>>biLsY:<Fm#iTHGN9%<Dql'X2r^ja88UF%c_2kAB(V^'?Bm,J^i!k0!oS7=;_@SR&ONo=kmpIkTtLHGf(`n)h/!=&(A-NTne\fjR(7\<f[nGEAC(7)NEog___;f'"oSsW.;YYn%G$V`Fdu"KbJMJVL-De^ckaIW&`IDfDDSB`Ca'__=DbJM(Q^aJ.'?Dn;J(15eITf0kJ^ns'nf6fb/'&[Fe2rJ3rR;*WL9VHaiCD4K%0T^i:$s,q>)]Qf012$GSK4F8X^.)Zl9>5ZZMg;]4!E@9B#;FIar/MYU+Xd(X;8`3]7B.a(T#XsW1nVQd-)Lb`O5UZ50a:bC@=J$M%qIH0/jq!S"0Pi:Ph*VI:l+E)M"gX_e;>*,,b(Um^%+cuK@gq(j%^_d(!mbo:UOj#<"%R9bA/l/>YZUW92T&6#MI`F/?7&3@!n1lb%^dV=^kb4$aFB5ga1R.\SQE(L['q%4qhUIogE?c:L@%fZn]J.MG5@?IdjFu;B"`Mkk"s$sY)Rp?sOj9J^Tn!iu#I8l;)j8u`8^C=G%e@F1uaN=<a2Wf$KE`N>n*S^A36P>mH*+5=uJUb^N=:iqOAGdO=lLW-('Qo11kc3(9fc1_=/Y`&*39d_LVK&pDf)c3E=pNbbLOStp%r%qPsES8p;AUVN^agm'o+:Sao0q$f'hY%BrQ0#<Shf]qc.PMm,'59E2boc2]a^dc>Nf9:)Juj-B`W[gE>Q9'n>II%#a9S:;J)s2L%:#!;f1euK`+3&*mU2:VsqU[Ke9F/'olO3NL$8NN`a+n>67e(LVJ%Fp;f@;81Vl*B3hc:3BnuD(*O.&H/:.a"1:i!Y/G=]X95ql'U%iK\fk+s/Q%EI;nM*IRr0\.bV~>%AI9_PrivateDataEnd