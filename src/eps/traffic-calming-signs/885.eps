%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 885.EPS
%%Creator: Adobe Illustrator(R) 14.0
%%For: Bob Hutchinson
%%CreationDate: 02/02/2009
%%BoundingBox: 0 0 115 162
%%HiResBoundingBox: 0 0 114.9996 162
%%CropBox: 0 0 114.9996 162
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 24832 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFAE8383FFCFFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF%AEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFF%AEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFCFCF%8383FFFFFFA882A8FD55FFA883FFFF83A8FFA88358837C837C837C837C83%7C837C837C837C837C837C837C837C837C837C837C837C837C837C837C83%7C837C837C837C837C837C837C837C837C837C837C837C837C837C837C83%7C837C83829A93BC93B693BDCAFFA7A7FF7CFFA8572C332C332C332C332C%332C332C332C332C332C332C332C332C332C332C332C332C332C332C332C%332C332C332C332C332C332C332C332C332C332C332C332C332C332C332C%332C332C332C6F8CB08CB08CB08C93CAFF7DFFAEFFA72C57335733573357%335733573357335733573357335733573357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%3357335733573393B0B08DB08DB08DB08CCAFFAECFA8FF7C332D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C5733938CB08DB08CB08DB08CB0A1FF83FFAEFF832C573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733573393B0B08DB08DB08DB08DB08CC3FFA8A8A7FF7D2C2C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C332C6F8CB08DB08CB08DB08CB08D8D9BFF83FFCFFFA7%2C5733573357335733573357335733573357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%335733573357335733573393B0B08DB08DB08DB08DB08DB08CC4FFAEAEA7%FF83322C572D332C572D332C572D332C572D332C572D332C572D332C572C%332C572C332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C93B0B08CB08DB08CB08DB08CB08DB0A1FF83%FFAEFFA72C572D5733572D5733572D5733572D5733572D5733572D573357%33575757335733332D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D573393B0B08DB08DB08DB08DB08DB08DB08DA8%FFAEAEA7FF7C332C332C572C332C572C332C572C332C572C332C572C3358%FD07FFA8AE58332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C938DB08CB08DB08CB08DB08CB08DB0685783FF83%FFAEFFA72C57335733573357335733573357335733573357333358FFA7A8%83AEAECF83AEFFFF83573357335733573357335733573357335733573357%335733573357335733573399B0B08DB08DB08DB08DB08DB08DB08D5733AE%FFAECFA8FF7D332D332C572D332C572D332C572D332C572D332C332DFF7C%322C330A837C2C2C57A8FF83332C332C572D332C572D332C572D332C572D%332C572D332C572D332C57336F8CB08DB08CB08DB08CB08DB08CB08D572C%57A7FF83FFAEFF832C5733572D5733572D5733572D5733572D5733572CAE%A8332C572D337C832C572C57AEFF835733572D5733572D5733572D573357%2D5733572D5733572D5733573375B0B08DB08DB08DB08DB08DB08DB08D57%33572CAEFFA8A8A7FF83332C572C332C332C2C2C332C332C332C332C572C%7CFF823357335833837C5757572D82FFFF7D332C332C572C332C572C332C%572C332C572C332C572C332C33326F8CB08DB08CB08DB08CB08DB08CB08C%512C572C3383FF83FFCFFFFFA8FFA8AEA7AEA7A883A8825733827C8383AE%AEFD13FFA7582C5733573357335733573357335733573357335733573375%B0B08DB08DB08DB08DB08DB08DB08D57335733572DAEFFAEAEA7FF835757%8258827C8383A783832CA7FD1BFF822C572D332C572D332C572D332C572D%332C572D332C6F8DB08CB08DB08CB08DB08CB08DB08C5733332C572D33A7%FF83FFAEFFA72C572C572C332C332C332C57AEFD15FFAEFD05FFA7332C33%33572D5733572D5733572D5733332D57336FB0B08DB08DB08DB08DB08DB0%8DB08D57335733572D5733AEFFAEAEA7FF7C332C332C572C332C572C332C%CFFFAEA8FFA8FD0DFFAEAEA8FFA8FD04FFA72C837C582D332C332C332C57%2C332C3358FF836F8CB08CB08DB08CB08DB08CB08DB08C5132332C572C33%2C33A7FF83FFAEFFA72C5733573357335733572D57CFFFFFAEA7FFAEFD0E%FFAE83FFAEFFFFFFA73383FFFFFFA8AE835833572C572D5757FFFFC3B0B0%8DB08DB08DB08DB08DB08DB08D57335733573357335733AEFFAECFA8FF7D%332D332C572D332C572D332CA7FFCF2C32A8FFA8FD0BFFA8FF2C2C83FFAE%FFA8832C332D57588383FFAEFFA8A758572C58FFBD8CB08DB08CB08DB08C%B08DB08CB08D5132572D332C572D332C57A7FF83FFAEFF832C5733572D57%33572D5733572CA7FF5857FF8357575857585758575857585782FF8257FF%A75733572D5733572C572C332D5758A7A8FFFFAE339AB0B08DB08DB08DB0%8DB08DB08DB08D5733572D5733572D5733572CAEFFA8A8A7FFA77C57582D%332C332C332C332C332CAEFFFFA8572C332C332C332C332C332C332CA7FF%FFA8572C332C332C572C332C572C332C332C332D82836F8CB08DB08CB08D%B08CB08DB08CB08C512C572C332C572C332C572C3383FF83FFCFFFFFA7CF%AEFFA8AEA7A77C8257572C332C8258573357335733573357335733573357%2D8258572C5733573357335733573357335733572D573275B0B08DB08DB0%8DB08DB08DB08DB08D573357335733573357335733572DAEFFAEAEA7FF7C%2C2C573358588383A8A8FFA8A8838357332C332C332C572D332C572D332C%572D332C332C332C572D332C572D332C572D332C572D3332758DB08CB08D%B08CB08DB08CB08DB08C5133332C572D332C572D332C572D33A7FF83FFAE%FFA72C572D572D332C333357338282A8A7FFAEAE838357572C3333572D57%33572D5733572D5733572D5733572D5733572D5733572D5733758DB08DB0%8DB08DB08DB08DB08DB08D51335733572D5733572D5733572D5733AEFFAE%AEA7FF7C332C332C572C332C572C332C332C332C57588383FFA8A87C582C%322C332C332C572C332C572C332C572C332C572C332C572C332C758DB08C%B08DB08CB08DB08CB08DB08D7C0A332C572C332C572C332C572C332C33A7%FF83FFAEFFA72C57335733573357335733573357335733572C57338283AE%AEFF838333332C573357335733573357335733573357335733573375B0B0%8DB08DB08DB08DB08DB08DB08CA1FF832C57335733573357335733573357%33AEFFAECFA8FF7D332D332C572D332C572D332C572D332C572D332C572C%332C5758A7A8FFA77C2C332C332C572D332C572D332C572D332C5733758C%B08DB08CB08DB08CB08DB08CB08D512C58AEA82C332D332C572D332C572D%332C57A7FF83FFAEFF832C5733572D5733572D5733572D5733572D573357%2D5733572D572C5757A8AEFF83582C332D5733572D5733572D5733573375%B0B08DB08DB08DB08DB08DB08DB08D7533572C57A8FF573333572D573357%2D5733572CAEFFA8A8A7FF7D2C2C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C3358A8A8A857332C572C332C572C332C5732%758CB08DB08CB08DB08CB08DB08CB08C510A332C332C3383FF57332C332C%572C332C572C3383FF83FFCFFFA72C573357335733573357335733573357%335733573357335733573357335733572C5883FFA8582C57335733573357%3375B0B08DB08DB08DB08DB08DB08DB08DCA5E837C582C57333383FF5733%33573357335733572DAEFFAEAEA7FF83322C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C3333A8AE832C332C572D%3332758DB08CB08DB08CB08DB08CB08DB08C51AEFFCFFFFF832C572C3283%FF2D332C572D332C572D33A7FF83FFAEFFA72C572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D572C7CAEAE3357%2D5733758DB08DB08DB08DB08DB08DB08DB0B07583FFFF8333A8FF832C57%3333A7AE2C572D5733572D5733AEFFAEAEA7FF7C332C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C33A8%AE2C332C758DB08CB08DB08CB08DB08CB08DB08DA133FF7C83A8330AA8FF%572C572C33A8832C332C572C332C33A7FF83FFAEFFA72C57335733573357%335733573357335733573357335733573357335733573357335733573357%2C57AEA73275B0B08DB08DB08DB08DB08DB08DB08DCBAFAEFFAEA8FF7C33%58FF575733572C83FF572D573357335733AEFFAECFA8FF7D332D332C572D%332C572D332C572D332C572D332C572D332C332C332C572D332C572D332C%572D332C58AE758CB08DB08CB08DB08CB08DB08CB08CA1FFFF83FF83837C%572C82FF582C572D332CAE83332C572D332C57A7FF83FFAEFF832C573357%2D5733572D5733572D5733572D5733572D5733587C5833572D5733572D57%33572D57335732A1B0B08DB08DB08DB08DB08DB08DB08CA1FFAE5857FFAE%2C322C57A8FF33572D57333358FF33572D5733572CAEFFA8A8A7FF7D2C2C%572C332C572C332C572C332C572C332C572C332C57A8FF83332C332C572C%332C572C332C5732518CB08DB08CB08DB08CB08DB08CB08D5133582C332C%82FFAE5883A8FF57332C332C572C33A8822C332C572C3383FF83FFCFFFA7%2C57335733573357335733573357335733573357335757FFFFFF57573357%335733573357335733758DB08DB08DB08DB08DB08DB08DB0B07533573357%33572C82A8FFFFFF58573357335733572CA7A733335733572DAEFFAEAEA7%FF83322C572D332C572D332C572D332C572D332C572D332C57A8FF83572C%332C572D332C572D3332758DB08CB08DB08CB08DB08CB08DB08C7533332C%572D332C572C332D572C332C572D332C572D3357FF2D332C572D33A7FF83%FFAEFFA72C572D5733572D5733572D5733572D5733572D5733572DCFFF82%2C5733572D5733572D5733758DB08DB08DB08DB08DB08DB08DB0B0753357%33572D5733572D5733572C5733572D5733572D573357A85833572D5733AE%FFAEAEA7FF7C332C332C572C332C572C332C572C332C572C332C572CA8FF%FF83332C572C332C572C332C758DB08CB08DB08CB08DB08CB08DB08C7532%332C572C332C572C332C572C332C572C332C572C332C572CA858332C332C%33A7FF83FFAEFFA72C573357335733573357335733573357335733572D82%FD04FF57573357335733573375B0B08DB08DB08DB08DB08DB08DB08D7533%57335733573357335733573357335733573357335733573333A7A72C5733%5733AEFFAECFA8FF7D332D332C572D332C572D332C572D332C572D332C33%83FD04FF582C572D332C5732758CB08DB08CB08DB08CB08DB08CB08D7532%572D332C572D332C572D332C572D332C572D332C572D332C572C8383332D%332C57A7FF83FFAEFF832C5733572D5733572D5733572D5733572D573357%2CAEFD04FF7C332D5733573376B0B08DB08DB08DB08DB08DB08DB08D7533%572D5733572D5733572D5733572D5733572D5733572D5733572D3383A82C%5733572CAEFFA8A8A7FF7D2C2C572C332C572C332C572C332C572C332C57%2C33A8FD04FF832C332C3333A08DB08DB08CB08DB08CB08DB08CB08D512C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C8383%332C572C3383FF83FFCFFFA72C5733573357335733573357335733573357%335733FD06FF822C3358CAB0B08DB08DB08DB08DB08DB08DB0B075335733%57335733573357335733573357335733573357335733573357335783AE2C%5733572DAEFFAEAEA7FF83322C572D332C572D332C572D332C572C332C33%2C57A8FFFFFFCFFFFF835ECAB0B08CB08DB08CB08DB08CB08DB08C753333%2C572D332C572D332C572D332C332C332C572D332C572D332C572D332C83%A7332C572D33A7FF83FFAEFFA72C572D5733572D5733572C5733332C5757%5857572CAEFD04FF7C82FFCB8DB08DB08DB08DB08DB08DB08DB0B0753357%33572D5733572D5733572D577CAEA88333572D5733572D5733572D573333%82AE2C572D5733AEFFAEAEA7FF7C332C332C572C332C332CFD0457A7A8FF%FFFFA8A7A8FD05FFA8CA8DB08CB08DB08CB08DB08CB08DB08C7532332C57%2C332C572C332C572C3358FD04FF582C332C572C332C572C332C572C8383%332C332C33A7FF83FFAEFFA72C5733573357335757CFFD11FFCB8DB08DB0%8DB08DB08DB08DB08DB0B07533573357335733573357335733572CAEFD04%FF833333573357335733573357333383A82C57335733AEFFAECFA8FF7D33%2D332C572D332DFFFFA758FD0EFFCA8CB08DB08CB08DB08CB08DB08CB08D%7532572D332C572D332C572D332C572D337CFD04FF832C332C572D332C57%2D332C572CA858332D332C57A7FF83FFAEFF832C5733572D572CA7FFFF2C%83FD0DFFCA8DB08DB08DB08DB08DB08DB08DB08D7533572D5733572D5733%572D5733572D573357A8FFFFFF335733572D5733572D5733572D57A8822C%5733572CAEFFA8A8A7FF7D2C2C572C332C57A8FF833283FD0CFFCA8CB08D%B08CB08DB08CB08DB08CB08D752C572C332C572C332C572C332C572C332C%332CA8FFFF83332C332C332C572C332C572C332DCF57332C572C3383FF83%FFCFFFA72C573357335757FFFFAE2CA8FD0BFFCA8DB08DB08DB08DB08DB0%8DB08DB0B075335733573357335733573357335733572C5883FD06FFAE57%3333573357335733572D58AE572D5733572DAEFFAEAEA7FF83322C572D33%2C57FFFF832C83FD0AFFCA8DB08CB08DB08CB08DB08CB08DB08C7533332C%572D332C572D332C572D332C572C57A8FD09FF58332C572D332C572D3358%AE2C332C572D33A7FF83FFAEFFA72C572D57333358FFFF822C82FD09FFCA%8DB08DB08DB08DB08DB08DB08DB0B075335733572D5733572D5733572D57%33572D5758FD0BFF57572D5733572D572CA7833333572D5733AEFFAEAEA7%FF7C332C332C572CA8FFAE2C332CFD06FFAE83CA8DB08CB08DB08CB08DB0%8CB08DB08C7532332C572C332C572C332C572C332C572C332C83FD0BFF82%2C332C572C332C3383832C572C332C33A7FF83FFAEFFA72C57335757CFFF%FF57572C57FD06FF58518DB08DB08DB08DB08DB08DB08DB0B0C45E333357%33573357335733573357335733572D57A8FD0BFF833333573357335733CF%58573357335733AEFFAECFA8FF7D332D332C5757582C332C57A7FFFFCF83%FFFF7C8CB08DB08CB08DB08CB08DB08CB08C9AFFFF57332C572D332C572D%332C572D332C572D332DFD0CFFA82C332C572D332C57A8572C572D332C57%A7FF83FFAEFF832C5733572D572D572D5757FFFF832C83FFCA8DB08DB08D%B08DB08DB08DB08DB0B07533A7FFFF57572D5733572D5733572D5733572D%572C82FFFFAEFD06FFAECFFFA85733572D57333358AE33572D5733572CAE%FFA8A8A7FF7D2C2C572C332C572C332C58FFCF2C325ECB8DB08DB08CB08D%B08CB08DB08CB08D6F2C332C83FF832C332C572C332C572C332C572C332C%337CFFFF83A8FD05FF8383FFFF2D332C332C572CA783332C332C572C3383%FF83FFCFFFA72C57335733572C58A78357FF585733578DB08DB08DB08DB0%8DB08DB08DB0B075335733572CFFA8573357335733573357335733573357%33AEFFFF58FD06FFAE57FFFF82335733573357A8832D57335733572DAEFF%AEAEA7FF83322C572C332CA7AEA82D58AE572C578DB08CB08DB08CB08DB0%8CB08DB08C6F33332C572D3357FF58332C572D332C572D332C572D332C57%A8FF8357CFFD05FFA857A8FF58332D332C5733FF2D572D332C572D33A7FF%83FFAEFFA72C572C577CFFA8822C3258FF33578DB08DB08DB08DB08DB08D%B08DB0B09A335733572D573357FFCF33572D5733572D5733573357335757%FFFF822CFD07FF2DAEFF832C5733572C83A8572D5733572D5733AEFFAEAE%A7FF7C2C2C58A8FF58332C3358FFA8518CB08CB08DB08CB08DB08CB08DB0%8CBD83332C572C332C3333FFA8332C332C572C332C58A8FF7C332C82FFFF%2C57A8FD06FF5783FF58332C572C3283A72C332C572C332C33A7FF83FFAE%FF8333AEFFA73333335733CFFFCA8DB08DB08DB08DB08DB08DB08DB0B099%AEFF3357335733572D82FFA72C57335733573357A7FFFFFF573383FF8333%57FD07FF57A8FF822C57335733FF585733573357335733AEFFAECFA8FFA8%FF83572C572D332C335EA88DB08DB08CB08DB08CB08DB08CB08D6F0AA7FF%A72C572D332C572D8333572D332C572D332C83FFFFA8332CCFFF582C57FD%07FF5883FF57332C572C58A8572C332C572D332C57A7FF83FFAEFFFF5733%33572D57335733578CB08DB08DB08DB08DB08DB08DB0B075335758A75857%2D5733572D572D572D5733572D57333358FFFFA833A8FFFF573357FD07FF%82CFFF822C572D3383AE2C5733572D5733572CAEFFA8A8A7FF7C2C2C572C%332C5732518CB08DB08CB08DB08CB08DB08CB08D6F2C332C332C332C332C%572C332C572C332C572C332C3358FD07FF83572C58FD07FF8258832D332C%332CAE58332C572C332C572C3383FF83FFCFFFA72C573357335733578DB0%8DB08DB08DB08DB08DB08DB0B07533573357335733573357335733573357%33573357335733FD06FFAE57332D5757FFFFFFAEFFFFFF58332C5733572D%58CF572D573357335733572DAEFFAEAEA7FF83322C572D332C578DB08CB0%8DB08CB08DB08CB08DB08C9333332C572D332C572D332C572D332C572D33%2C572D332C58FD05FFAE2C332D332C57FFFFFFA7A8FFFF582C332C572D33%7CAE2C332C572D332C572D33A7FF83FFAEFFA72C572D5733578DB08DB08D%B08DB08DB08DB08DB0B093335733572D5733572D5733572D5733572D5733%572D57333358FFAEFD04FF582C57335733FFFFFF7CCFFFFF575733572D57%33AE7C3333572D5733572D5733AEFFAEAEA7FF7C332C332C578CB08CB08D%B08CB08DB08CB08DB08C932C332C572C332C572C332C572C332C572C332C%572C332C572C83FF83A8FFFFFF58332C572C33A8FFFF7CA7FFFF572C572C%332C57A8572C572C332C572C332C33A7FF83FFAEFFA72C5733578DB08DB0%8DB08DB08DB08DB08DB0B093335733573357335733573357335733573357%33573357335733337CFF58FD04FFA82C5733572DAEFFFF57AEFFFF335733%57335783AE2C57335733573357335733AEFFAECFA8FF7D3333578CB08DB0%8CB08DB08CB08DB08CB0B0932C572D332C572D332C572D332C572D332C57%2D332C572D332C572C83FF83FD04FFA8332C572D3383FFFF5783FFA8332C%572D332CAE7C332C572D332C572D332C57A7FF83FFAEFF832C578DB08DB0%8DB08DB08DB08DB08DB0B09333572D5733572D5733572D5733572D573357%2D5733572D5733572D5757A783FD05FF57572D572CA7FFFF57AEFFAE3357%2D573358AE5733572D5733572D5733572CAEFFA8A8A7FF832C8CB08DB08C%B08DB08CB08DB08CB08D6F2C332C332C572C332C572C332C572C332C572C%332C572C332C572C332C332C7CFD05FF582C332C337DFFA85783FF83332C%332C3383A82C572C332C572C332C572C3383FF83FFCFFFA768B08DB08DB0%8DB08DB08DB08DB0B0933357335733573357335733573357335733573357%33573357335733573357335757FFCFCFFFAE335733572C83FFFF33AEFFA7%2C57335733CF5857335733573357335733572DAEFFAEAEA7FFBDB08CB08D%B08CB08DB08CB08DB08C9333332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572C57FFA783FF33332D332C3358FFA857A7%FF58332D332C58A8572C572D332C572D332C572D33A7FF83FFAEFFC38CB0%8DB08DB08DB08DB08DB0B093335733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5757FF7CA7FF572C5733572C82FFFF%33AEFF7C2C57333383AE2C572D5733572D5733572D5733AEFFAEAEA7FF9A%B08DB08CB08DB08CB08DB08C932C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C58FF5883FF2C332C572C3333%FFFF57A8FF33332C572CAE58332C332C572C332C572C332C33A7FF83FFAE%FFC38CB08DB08DB08DB08DB0B09333573357335733573357335733573357%335733573357335733573357335733573357335782FF2C83FF582D573357%2CA7FF822C83FF582C573382AE5733573357335733573357335733AEFFAE%CFA8FF9BB08DB08CB08DB08CB0B0932C332D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C5833332C8257332C%572D3358582C332C8357332C3383A72C572D332C572D332C572D332C57A7%FF83FFAEFFC38CB08DB08DB08DB0B09333572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572C5733572C57%33572D5733332C5733572C5733572DFF58332D5733572D5733572D573357%2CAEFFA8A8A7FFA18C8CB08CB08CB08C932C332C332C332C332C332C332C%332C332C332C332C332C332C332C332C332C332C332C332C332C332C332C%332C332C332C332C332C332C332C332C7CA8332C332C332C332C332C332C%332C57A8FF83FFCFFFFFA1B68DB58DB6B093335757573357575733575757%335757573357575733575757335757573357575733575757335757573357%575733575757335757573357575733575757A7A833573357575733575757%33575758A8FFFFAEAEA7FFFFFFCFFFCBFFCAFFFFFFA8FFFFFFAEFFFFFFAE%FFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFF%FFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFA8FFFFFFAEFFFFFFAE%FFFFFFA8FD05FF83FFAEFD59FFAEAEA7FFFFCF7C82588358825883588258%835882588358825883588258835882588358825883588258835882588358%825883588258835882588358825883588258835882588358825883588258%83588258835882588358827CFFFFFF83FFAEFFFF33332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C572C332C3358FFFFAECFA8FF7D332D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C33A7FF83FFAEFF832C5733572D57%33572D5733572C5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572CAEFFA8A8A7FF7D2C2C572C%332C572C332C332C572D572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C332C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C3383FF83FFCFFFA72C57%335733573357335733A8FFFFFFAE57573357335733573357338383573357%33573357335733837C5733573357335757FF7C3333573357335733573357%335733573357335733573357335733573357335733572DAEFFAEAEA7FF83%322C572D332C572D332CAEFFAE7CA8FFFF33332D332C572D332C337CCF2D%572D332C332D332C57FFA82C572D332C572C58FFA72C332C572D332C332C%332C572C332C332C332C572C332C572D332C572D332C572D33A7FF83FFAE%FFA72C572D5733572D572C83FFAE2C332C83FFA82C5757572D5757572C58%57572D5733825757335757FFA858335733572D5758FF833333572D575782%5757335733585782575733572C5758582C5733572D5733572D5733AEFFAE%AEA7FF7C332C332C572C332C3383FF33332C332CCFAE3357FF582C57FF58%2C83FF2D3357FFFFFF833357FD04FF822C572C332C7CFF832C572C3383FF%FFFF83572C82FD04FF83572C58A8FFFFA82C332C332C572C332C33A7FF83%FFAEFFA72C5733573357335733AEFF5733573357A7FF3382FF832C82FF83%2CAEFF5733FFFF8283FF835758FFA88257573357335758FF833333572D83%835883FF58337CFFAE83A8FF5857CFFF7C83FFA72C5733573357335733AE%FFAECFA8FF7D332D332C572D332C57A8FF2D572C332CA8FF5757FF7C2C57%FF7C2C83FF2C58FFA85758FFAE2C33FFA82C332C572D332C82FF832C572D%332C827CA8FF822C82FF820A82FF5857FF835857FFA8572C332C572D332C%57A7FF83FFAEFF832C5733572D5733572CAEFF582C585733A8FF2D82FF83%2C82FF832CA8FF577CFFCFFFFFFFA85733FF833333572D57333358FF8333%2D5733AEFFFFCFFF583382FF58337CFF5782FD05FFCF2D5733572D573357%2CAEFFA8A8A7FF7D2C2C572C332C572C3358FFA73383FF7CFF833258FF7C%2C7CFF582C83FF2C58FFA72C5757572C57FFA72C572C332C572C58FF832C%332C58FF830A82FF580A83FF580A83FF582DFF83332C582D332C572C332C%572C3383FF83FFCFFFA72C573357335733572D57A8FFA8FFFFFFAE582C58%FFFFA8FFFF832CAEFF572CAEFFAEA8FF585733FFFFFF58573357335758FF%FFAEA8AE58FFA883CFFF833382FF583382FF5833A8FFA8AEFF822C573357%335733572DAEFFAEAEA7FF83322C572D332C572D332C5783FD04FF582C57%2C82A8FF83A857337CA82D3333A7CFFF83572C3358CFA8582C332C572C58%A7AEA8AEA85758AEAEA883A72C82A8582C82A8582C5783FFAEA857332C57%2D332C572D33A7FF83FFAEFFA72C572D5733572D5733572C57335783FF57%332D572C572D5733572D5733572D572C57335733572D5733572D5733572D%5733572C5733572D5733572C5733572D5733572D5733572C5733572C5733%572D5733572D5733AEFFAEAEA7FF7C332C332C572C332C572C332C332C57%2D572C332C572C332C572C332C572C332C572C332C572C332C332C332C57%2C332C572C332C572C332C332C332C572C332C572C332C572C332C332C33%2C572C332C572C332C33A7FF83FFAEFFA72C573357335733573357335733%572D57335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733AEFFAECFA8FF7D332D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572C332C572D332C572D332C572D33%2C572D332C572D332C572D332C57A7FF83FFAEFF832C5733572D5733572D%5733572D5733572D5733572D5733572C572C332C5733572D572C572D5733%332C5733572C572C332C5733572D5733332C5733332C5733572D5733572D%5733572D5733572D5733572D5733572CAEFFA8A8A7FF7D2C2C572C332C57%2C332C572C332C572C332C572C332C332D8383A883A783572C5783A73333%2C337CA72C332C8383A883A87C332C332C3357A8A8CF83572C572C332C57%2C332C572C332C572C332C572C332C572C3383FF83FFCFFFA72C57335733%57335733573357335733573357335733573357FD06FF573357FFFFAE2C57%33CFFF583357A8FD05FFA8572D577CFFFFAEAEFFFF583357335733573357%33573357335733573357335733572DAEFFAEAEA7FF83322C572D332C572D%332C572D332C572D332C572D332C5733FFA7572D572D572C57CFFFFF822C%57A8FF2D332CA8FF572C5783FF7C332CAEFF582C337C832D572D332C572D%332C572D332C572D332C572D332C572D33A7FF83FFAEFFA72C572D573357%2D5733572D5733572D5733572D5733572C57FFAE2C572C572D5757FFA8FF%FF572CAEFF572C57A8FF33572C57FFFF3333A8FF58572C332C572D573357%2D5733572D5733572D5733572D5733572D5733AEFFAEAEA7FF7C332C332C%572C332C572C332C572C332C572C332C572C332DFFAEA8A7CF7C332C58FF%837CFF832CA7FF2D332CAEFF572C572CA8FF572C7CFFFFA8A87C572C332C%572C332C572C332C572C332C572C332C572C332C33A7FF83FFAEFFA72C57%33573357335733573357335733573357335733572D57FFFFAEFFFFA72C57%57FF8357AEFF58AEFF572D57A8FF33573357A8FF57572C82A7FFFFFFCF57%2D57335733573357335733573357335733573357335733AEFFAECFA8FF7D%332D332C572D332C572D332C572D332C572D332C572D332DFFA8332C572D%332C58FFA70A7CFFFFA8FF33332CAEFF572C332DFFA8572C332C332C5783%FF83322C572D332C572D332C572D332C572D332C572D332C57A7FF83FFAE%FF832C5733572D5733572D5733572D5733572D5733572D573357FFAE2C33%2C57335757FFA7332CA8FFFFFF573357A8FF33332C83FFA72C5783A82D33%2C83FFA72C572D5733572D5733572D5733572D5733572D5733572CAEFFA8%A8A7FF7D2C2C572C332C572C332C572C332C572C332C572C332C332DFFAE%AEA8AEA8582C57FFA82C332CFFFFFF2D332CA8FFAEA7AEFFFF2D332CCFFF%AE7CA7FFFF57332C332C572C332C572C332C572C332C572C332C572C3383%FF83FFCFFFA72C5733573357335733573357335733573357335733573357%A8FFCFFFCFFF583357FF8357335758FFA857335783FFCFFFAEAE57573357%57A8FD04FF5857335733573357335733573357335733573357335733572D%AEFFAEAEA7FF83322C572D332C572D332C572D332C572D332C572D332C57%2D572C572D572C572D332C572D332C572D572C572D332C572D332C332D33%2C332C5757582D332C572D332C572D332C572D332C572D332C572D332C57%2D33A7FF83FFAEFF832C572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733572D%5733572D5733572C5733572D5733572D5733572D5733572D5733572D5733%572D5733AEFFAEAE83FF83332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C33A8FF83FF83FFFF8357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%57335733573358A7FFA8A7FF8383FFFFCFAEA8FFA8AEA8FFA8AEA8FFA8AE%A8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FF%A8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AEA8FFA8AE%A8FFA8AEA8FFA8CFFFFFFF82A8FFFF8383A8FD53FFA883A8FD04FFA8837C%8383837C8383837C8383837C8383837C8383837C8383837C8383837C8383%837C8383837C8383837C8383837C8383837C8383837C8383837C8383837C%8383837C8383837C8383837C8383837C8383837C837C83A8FFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 186 C)
%%+ (PANTONE 370 C)
%%CMYKCustomColor: 0 1 0.8100 0.0400 (PANTONE 186 C)
%%+ 0.5600 0 1 0.2700 (PANTONE 370 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-02-02T11:37:01Z</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>184</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7nd3ekPpb+bfNDeppm0m&#xA;l6e45RpEx/ct6R2kmlFGq32a0FKE5hylHh8SfLoPx1LjkiuKXJj3/K7/ACauy6LOFGy/BANvlyyj&#xA;8/j/AJv3NX5uHc7/AJXj5P8A+rNP/wABB/zVj/KGP+av5uPc7/lePk//AKs0/wDwEH/NWP8AKGP+&#xA;av5uPc7/AJXj5P8A+rNP/wABB/zVj/KGP+av5uPc7/lePk//AKs0/wDwEH/NWP8AKGP+av5uPc7/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 186 C</rdf:li>
               <rdf:li>PANTONE 370 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName> 186</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>LAB</xmpG:mode>
                           <xmpG:L>51.764706</xmpG:L>
                           <xmpG:A>64</xmpG:A>
                           <xmpG:B>39</xmpG:B>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName> 370</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>LAB</xmpG:mode>
                           <xmpG:L>55.686275</xmpG:L>
                           <xmpG:A>-35</xmpG:A>
                           <xmpG:B>43</xmpG:B>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1375 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 370 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>56.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 469 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 349 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>42.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 116 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>16.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 300 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>44.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 186 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>81.000000</xmpG:yellow>
                           <xmpG:black>4.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -162 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 162 li
115 162 li
115 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 162 mo
115 162 li
115 0 li
0 0 li
0 162 li
cp
clp
6.43164 -.155762 mo
2.90381 -.155762 .0595703 2.68848 .0595703 6.21631 cv
.0595703 50.1362 .0595703 111.084 .0595703 155.04 cv
.0595703 158.532 2.90381 161.412 6.43164 161.412 cv
40.4517 161.412 74.4722 161.412 108.492 161.412 cv
112.019 161.412 114.863 158.532 114.863 155.04 cv
114.863 111.084 114.863 50.1362 114.863 6.21631 cv
114.863 2.68848 112.019 -.155762 108.492 -.155762 cv
74.4722 -.155762 40.4517 -.155762 6.43164 -.155762 cv
6.43164 -.155762 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
.567 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
6.43164 -.155762 mo
2.90381 -.155762 .0595703 2.68848 .0595703 6.21631 cv
.0595703 50.1362 .0595703 111.084 .0595703 155.04 cv
.0595703 158.532 2.90381 161.412 6.43164 161.412 cv
40.4517 161.412 74.4722 161.412 108.492 161.412 cv
112.019 161.412 114.863 158.532 114.863 155.04 cv
114.863 111.084 114.863 50.1362 114.863 6.21631 cv
114.863 2.68848 112.019 -.155762 108.492 -.155762 cv
74.4722 -.155762 40.4517 -.155762 6.43164 -.155762 cv
6.43164 -.155762 li
cp
/0 
<<
/Name (PANTONE 370 C)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .56 0 1 .27 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
57.4438 3.01221 mo
6.41357 3.01221 li
4.6543 3.01221 3.22754 4.43848 3.22754 6.19824 cv
3.22754 109.303 li
3.22754 111.063 4.6543 112.488 6.41357 112.488 cv
108.474 112.488 li
110.234 112.488 111.66 111.063 111.66 109.303 cv
111.66 6.19824 li
111.66 4.43848 110.234 3.01221 108.474 3.01221 cv
57.4438 3.01221 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
74.4351 29.7241 mo
68.8296 28.0342 62.9741 26.8394 57.2275 25.9443 cv
57.2275 24.8643 li
62.8198 25.7412 68.5796 26.8823 74.0405 28.5 cv
74.0405 28.5 li
74.4351 29.7241 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
3.22754 20.4004 mo
4.38525 20.4951 5.59229 20.5293 6.75586 20.5801 cv
7.95117 20.6533 9.19287 20.7212 10.3916 20.7603 cv
12.7866 20.9102 15.1948 21.0132 17.5918 21.1563 cv
17.5757 21.1504 li
17.3867 21.4771 17.2456 21.8311 17.1577 22.1992 cv
17.1958 22.2002 li
12.5479 21.936 7.88232 21.7104 3.22803 21.4805 cv
ef
3.22754 31.0562 mo
11.0137 31.8374 18.7539 32.918 26.4116 34.5122 cv
29.8926 35.2314 33.2876 36.0684 36.7075 37.0322 cv
38.2378 37.5132 39.7666 37.9595 41.2798 38.5083 cv
41.9648 38.728 42.6875 39.0103 43.3677 39.2642 cv
43.7539 39.4482 44.0259 39.4814 44.376 39.6602 cv
44.5498 39.7163 44.7065 39.8135 44.8799 39.876 cv
45.1758 40.0444 44.9697 39.8403 45.3477 40.0562 cv
45.9727 40.3423 46.5977 40.6001 47.2197 40.8843 cv
47.792 41.1704 48.3525 41.4434 48.9116 41.748 cv
49.4326 42.0273 49.9526 42.3135 50.46 42.6113 cv
50.5806 42.6821 50.6987 42.7573 50.8198 42.8271 cv
50.96 42.8843 51.0488 43.0112 51.1797 43.0791 cv
51.2158 43.1152 li
51.3599 43.187 li
51.3955 43.2231 li
51.4678 43.2593 li
51.5039 43.2954 li
51.5947 43.3481 51.7485 43.4473 51.8276 43.5112 cv
51.9189 43.5645 52.0728 43.6631 52.1519 43.7271 cv
52.4756 43.8931 52.2676 43.8901 52.4756 43.979 cv
52.668 44.124 52.8599 44.2671 53.0518 44.4111 cv
53.2109 44.5981 53.4136 44.7202 53.5918 44.8794 cv
53.6997 44.9873 li
53.772 45.0234 li
53.8076 45.0952 li
54.0239 45.311 li
54.0957 45.3472 li
54.3018 45.5283 54.335 45.6421 54.5278 45.8154 cv
54.7896 46.04 54.7236 46.0952 54.9238 46.2832 cv
55.0967 46.4424 54.8799 46.293 55.1035 46.499 cv
55.1836 46.5771 55.0898 46.5864 55.2837 46.7515 cv
55.2837 46.7871 li
55.356 46.8594 li
55.356 46.895 li
55.4639 47.0034 li
55.4639 47.0391 li
55.5356 47.1113 li
55.5356 47.1475 li
55.5718 47.2192 li
55.5718 47.2554 li
55.6436 47.3271 li
55.6436 47.3633 li
55.7158 47.4351 li
55.7158 47.4712 li
55.752 47.5073 li
55.752 47.543 li
55.7876 47.5791 li
55.7876 47.6152 li
55.8237 47.6514 li
55.8359 47.7432 55.8789 47.834 55.9316 47.9033 cv
55.9316 47.9395 li
55.9678 47.9751 li
55.9678 48.0112 li
56.0039 48.0474 li
56.0039 48.083 li
56.0396 48.1191 li
56.0396 48.1914 li
56.0757 48.2271 li
56.0757 48.2632 li
56.1118 48.2993 li
56.1118 48.4072 li
56.1479 48.4434 li
56.1479 48.5151 li
56.1836 48.5513 li
56.1836 48.623 li
56.2197 48.6592 li
56.2197 48.7671 li
56.2559 48.8032 li
56.2559 48.9111 li
56.292 48.9473 li
56.292 49.1274 li
56.3276 49.1631 li
56.3276 49.3071 li
56.3638 49.3433 li
56.3638 49.4873 li
56.3418 49.8672 56.4155 49.6514 56.3999 49.9551 cv
56.4189 50.3232 56.3447 50.0552 56.3638 50.4233 cv
56.3638 50.603 li
56.3276 50.6392 li
56.3276 50.8555 li
56.292 50.8911 li
56.292 50.999 li
56.2559 51.0352 li
56.2559 51.2153 li
56.2197 51.2515 li
56.2197 51.3594 li
56.1836 51.395 li
56.1836 51.4673 li
56.1479 51.5034 li
56.1479 51.6113 li
56.1118 51.6475 li
56.1118 51.7192 li
56.0757 51.7554 li
56.0757 51.8271 li
56.0396 51.8633 li
56.0396 51.9351 li
56.0039 51.9712 li
56.0039 52.043 li
55.9678 52.0791 li
55.9678 52.1152 li
55.9316 52.1514 li
55.9316 52.2231 li
55.8955 52.2593 li
55.8955 52.2954 li
55.8599 52.3311 li
55.8599 52.4033 li
55.8237 52.4395 li
55.8237 52.4751 li
55.7876 52.5112 li
55.7876 52.583 li
55.752 52.6191 li
55.752 52.6553 li
55.7158 52.6914 li
55.6797 52.7632 li
55.6797 52.7993 li
55.6436 52.8354 li
55.6436 52.8711 li
55.6079 52.9434 li
55.5718 52.979 li
55.5718 53.0151 li
55.5356 53.0513 li
55.5356 53.123 li
55.4639 53.1953 li
55.4277 53.2671 li
55.4277 53.3032 li
55.356 53.375 li
55.356 53.4473 li
55.2837 53.519 li
55.2476 53.5913 li
55.2476 53.6274 li
55.2119 53.6631 li
55.1758 53.7354 li
55.1396 53.7715 li
55.1396 53.8071 li
55.1035 53.8433 li
55.0679 53.915 li
54.9956 53.9873 li
54.9956 54.0591 li
54.9238 54.1313 li
54.8857 54.2383 54.7568 54.3081 54.7437 54.4194 cv
54.7246 54.4653 54.5659 54.6782 54.5278 54.707 cv
54.4067 54.9282 54.2246 55.1055 54.0957 55.3193 cv
54.0938 55.3032 li
54.2598 55.2671 54.4297 55.248 54.5996 55.248 cv
54.8589 55.248 55.1167 55.291 55.3618 55.375 cv
55.356 55.3921 li
69.0015 37.3931 11.292 30.5645 3.22754 30.0122 cv
ef
3.22754 89.3398 mo
3.69043 89.0996 4.11865 88.8008 4.5957 88.5479 cv
5.09717 88.252 5.58252 87.9678 6.07178 87.6846 cv
7.08545 87.1162 8.06885 86.5088 9.0957 85.9561 cv
9.61328 85.6338 10.1548 85.3574 10.6797 85.0566 cv
10.9209 84.8965 11.2158 84.7617 11.4717 84.624 cv
11.7017 84.4307 12.0889 84.3086 12.2637 84.1563 cv
12.8169 83.873 13.3379 83.5625 13.8838 83.2559 cv
14.2017 83.0898 14.4077 82.9756 14.7119 82.7881 cv
15.0186 82.6953 15.2368 82.4541 15.5396 82.3564 cv
15.5259 82.376 li
15.5347 81.9854 15.5396 81.5957 15.5396 81.2041 cv
15.5396 81.1758 15.5396 81.1484 15.5396 81.1201 cv
15.5396 81.1328 li
15.3208 81.2852 15.0166 81.3828 14.8198 81.5283 cv
14.6758 81.6006 14.5317 81.6719 14.3877 81.7441 cv
14.1865 81.8525 14.2988 81.8682 13.9917 81.9961 cv
13.7065 82.1377 13.4619 82.292 13.1636 82.4277 cv
13.1279 82.4639 li
12.7676 82.6445 li
12.5786 82.7412 12.6738 82.7715 12.3716 82.8965 cv
11.2788 83.4609 10.2876 84.0908 9.20361 84.6602 cv
7.18555 85.7852 5.20508 86.9346 3.22754 88.1162 cv
ef
91.4272 112.488 mo
96.7944 97.1641 103.492 79.9292 104.46 63.6724 cv
104.734 57.2173 103.914 50.6431 100.392 45.1323 cv
98.8491 42.5952 96.603 40.1372 94.3081 38.292 cv
93.0894 37.2314 91.7456 36.3164 90.3843 35.4482 cv
89.6851 34.9971 88.9878 34.5742 88.2593 34.188 cv
87.5308 33.79 86.7046 33.3281 85.9565 33 cv
85.9565 33 li
86.5308 34.4761 li
86.9995 34.6924 li
87.4312 34.9443 li
87.8628 35.1602 li
88.2964 35.4121 li
88.9722 35.8462 89.6714 36.2383 90.3472 36.6724 cv
91.6206 37.5483 92.8901 38.4272 94.0562 39.4443 cv
96.314 41.3975 98.1812 43.5215 99.7437 46.0684 cv
103.019 51.6191 103.685 57.7041 103.38 64.0322 cv
102.292 80.2104 95.6226 97.2441 90.312 112.488 cv
ef
.036 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
82.0679 46.1763 mo
80.2671 46.1763 li
.697627 .675227 .638575 .739559 cmyk
@
72.4917 37.0684 mo
72.1323 38.3281 li
75.5522 38.3281 li
75.5503 38.3252 li
75.9136 37.895 76.4331 37.6274 76.9937 37.5791 cv
76.9917 37.5723 li
79.9429 37.3203 li
78.0366 32.4604 li
72.4917 36.0244 li
72.5034 36.0215 li
72.5425 36.187 72.564 36.3574 72.564 36.5283 cv
72.564 36.7104 72.5405 36.8911 72.4937 37.0674 cv
80.2671 46.1763 mo
82.5718 39.8403 li
84.1206 42.4683 li
84.1245 42.4751 li
82.939 43.3623 82.187 44.7041 82.0542 46.1714 cv
80.2671 46.1763 li
cp
79.0073 40.0923 mo
81.1675 39.876 li
79.5483 44.3403 li
78.3237 41.1724 li
78.3081 41.1782 li
78.271 41.0854 78.2515 40.9854 78.2515 40.8843 cv
78.2515 40.4614 78.5854 40.1123 79.0073 40.0933 cv
79.0073 40.0923 li
cp
75.1909 40.4883 mo
76.5229 43.8364 li
76.5229 43.8364 li
71.5913 40.3804 li
71.8081 39.6602 li
75.0483 39.6602 li
75.0483 39.6592 li
75.0483 39.6714 75.0483 39.6841 75.0483 39.6963 cv
75.0483 39.9663 75.0991 40.2344 75.2007 40.4854 cv
75.1909 40.4883 li
cp
68.064 47.1123 mo
68.0972 47.1372 li
68.062 47.144 68.0269 47.1484 67.9917 47.1484 cv
67.7144 47.1484 67.4878 46.9224 67.4878 46.644 cv
67.4878 46.4653 67.5835 46.2993 67.7378 46.209 cv
67.7378 46.208 li
68.4546 45.729 68.9683 44.999 69.1812 44.1582 cv
69.2163 44.1602 li
69.4683 43.2603 li
69.4683 43.2661 li
69.0132 43.0723 68.5229 42.9722 68.0269 42.9722 cv
66.0015 42.9722 64.355 44.6172 64.355 46.644 cv
64.355 48.6714 66.0015 50.3164 68.0269 50.3164 cv
70.0542 50.3164 71.7007 48.6714 71.7007 46.644 cv
71.7007 45.6704 71.312 44.7363 70.6245 44.0474 cv
70.6206 44.0522 li
70.3315 45.168 li
70.2651 45.167 li
69.98 46.2012 69.1382 46.9805 68.0952 47.1743 cv
68.064 47.1123 li
cp
86.0269 43.1885 mo
87.8999 46.4282 li
87.8862 46.4341 li
87.9194 46.499 87.9351 46.5713 87.9351 46.644 cv
87.9351 46.9023 87.7261 47.1123 87.4683 47.1123 cv
87.4683 47.1484 li
83.6519 47.1484 li
83.6499 47.1494 li
83.9019 48.9644 85.4546 50.3164 87.2886 50.3164 cv
89.314 50.3164 90.9604 48.6714 90.9604 46.644 cv
90.9604 44.6172 89.314 42.9722 87.2886 42.9722 cv
86.8589 42.9722 86.4351 43.0474 86.0308 43.1934 cv
86.0269 43.1885 li
cp
83.6519 46.1763 mo
86.2437 46.1763 li
84.9116 43.8364 li
84.8784 43.873 li
84.1987 44.4644 83.7593 45.2842 83.646 46.1772 cv
83.6519 46.1763 li
cp
69.8276 41.7842 mo
69.8589 41.751 li
69.2729 41.5352 68.6519 41.4243 68.0269 41.4243 cv
65.1265 41.4243 62.771 43.7632 62.771 46.644 cv
62.771 49.5254 65.1265 51.8643 68.0269 51.8643 cv
70.9292 51.8643 73.2847 49.5254 73.2847 46.644 cv
73.2847 44.9604 72.4663 43.3804 71.0874 42.4004 cv
71.0522 42.3604 li
71.2319 41.748 li
77.3882 46.0322 li
78.1069 47.9043 li
76.8472 48.3721 li
76.853 48.3853 li
76.6089 48.4854 76.4526 48.7212 76.4526 48.9844 cv
76.4526 49.3423 76.7417 49.6323 77.0991 49.6323 cv
77.1851 49.6323 77.269 49.6152 77.3472 49.583 cv
77.3511 49.6323 li
81.0601 48.1563 li
80.6636 47.1484 li
82.0679 47.1484 li
82.0562 47.1533 li
82.3198 49.8262 84.5835 51.8643 87.2886 51.8643 cv
90.189 51.8643 92.5444 49.5254 92.5444 46.644 cv
92.5444 43.7632 90.189 41.4243 87.2886 41.4243 cv
86.5796 41.4243 85.8784 41.5664 85.2261 41.8423 cv
85.2358 41.8203 li
83.9761 39.624 li
84.0835 39.624 li
84.0835 39.6172 li
84.8979 39.543 85.5229 38.8594 85.5229 38.04 cv
85.5229 37.8433 85.4858 37.6484 85.4155 37.4653 cv
85.4155 37.4644 li
82.2847 29.436 li
82.2847 29.437 li
82.0464 28.8281 81.4604 28.4282 80.8081 28.4282 cv
80.5015 28.4282 80.2026 28.5171 79.9448 28.6841 cv
79.9429 28.6802 li
70.3315 34.9082 li
70.3335 34.9131 li
70.019 35.1021 69.8276 35.4414 69.8276 35.8081 cv
69.8276 36.3843 70.2964 36.8521 70.8726 36.8521 cv
70.98 36.8521 71.0874 36.8354 71.1909 36.8022 cv
71.1948 36.8164 li
69.8628 41.748 li
69.8276 41.7842 li
cp
78.1792 24.2881 mo
79.4917 24.2881 80.5562 25.3521 80.5562 26.6641 cv
80.5562 27.9761 79.4917 29.04 78.1792 29.04 cv
76.8687 29.04 75.8042 27.9761 75.8042 26.6641 cv
75.8042 25.3521 76.8687 24.2881 78.1792 24.2881 cv
78.1792 24.2881 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
37.0317 62.7725 mo
37.0386 62.7603 li
37.0039 62.7441 36.9639 62.7363 36.9238 62.7363 cv
36.7847 62.7363 36.6719 62.833 36.6719 62.9521 cv
36.6719 63 36.6909 63.0474 36.7246 63.0854 cv
37.6797 65.04 mo
37.7139 65.0332 li
37.4458 64.353 37.1128 63.7012 36.7207 63.084 cv
37.6797 65.04 li
cp
37.752 65.0044 mo
37.7178 65.0391 li
37.7686 65.1294 37.8647 65.1841 37.9678 65.1841 cv
38.0176 65.1841 38.0669 65.1714 38.1108 65.146 cv
37.752 65.0044 li
cp
39.4077 64.4644 mo
39.3726 64.4302 li
38.9609 64.6523 38.564 64.8994 38.1826 65.1704 cv
39.4077 64.4644 li
cp
39.3359 64.3921 mo
39.3638 64.4131 li
39.4126 64.3882 39.4438 64.3384 39.4438 64.2842 cv
39.4438 64.2183 39.3989 64.1602 39.335 64.144 cv
39.3359 64.3921 li
cp
38.8315 63.6001 mo
38.8008 63.6333 li
38.9038 63.8594 39.0986 64.0303 39.3369 64.103 cv
38.8315 63.6001 li
cp
38.7236 63.6724 mo
38.7466 63.6411 li
38.7349 63.6104 38.7139 63.584 38.6875 63.5645 cv
38.7236 63.6724 li
cp
37.0317 62.7363 mo
38.6875 63.5283 li
37.0317 62.7363 li
37.0317 62.7363 li
cp
37.0317 62.7363 mo
38.6875 63.5283 li
38.6875 63.5645 li
38.7139 63.584 38.7349 63.6104 38.7466 63.6411 cv
38.8008 63.6333 li
38.9038 63.8594 39.0986 64.0303 39.3369 64.103 cv
39.335 64.144 li
39.3989 64.1602 39.4438 64.2183 39.4438 64.2842 cv
39.4438 64.3384 39.4126 64.3882 39.3638 64.4131 cv
39.3726 64.4302 li
38.9609 64.6523 38.564 64.8994 38.1826 65.1704 cv
38.1108 65.146 li
38.0669 65.1714 38.0176 65.1841 37.9678 65.1841 cv
37.8647 65.1841 37.7686 65.1294 37.7178 65.0391 cv
37.7139 65.0332 li
37.4458 64.353 37.1128 63.7012 36.7207 63.084 cv
36.7246 63.0854 li
36.6909 63.0474 36.6719 63 36.6719 62.9521 cv
36.6719 62.833 36.7847 62.7363 36.9238 62.7363 cv
36.9639 62.7363 37.0039 62.7441 37.0386 62.7603 cv
37.0317 62.7363 li
cp
36.3838 51.5044 mo
36.3838 52.6563 li
36.3838 52.9004 36.2598 53.1284 36.0547 53.2603 cv
36.0596 53.2681 li
35.5195 53.5923 li
35.5278 53.6113 li
35.4785 53.6421 35.4478 53.7041 35.4478 53.7725 cv
35.4478 53.7725 li
35.4478 53.9521 li
35.4478 53.9521 li
35.4478 54.0703 35.4995 54.1802 35.5869 54.248 cv
35.5918 54.2764 li
35.9155 54.4922 li
35.9277 54.4751 li
36.1216 54.6123 36.2646 54.8091 36.3359 55.0371 cv
36.335 55.062 li
36.8916 56.7974 37.1758 58.6094 37.1758 60.4321 cv
37.1758 60.4731 37.1758 60.5142 37.1758 60.5552 cv
37.1758 60.54 li
37.1758 60.6621 37.2319 60.7773 37.3286 60.8521 cv
37.3198 60.8643 li
39.5156 62.6284 li
39.4897 62.6523 li
39.6387 62.7764 39.8257 62.8442 40.0195 62.8442 cv
40.0557 62.8442 40.0908 62.8423 40.127 62.8374 cv
40.1299 62.8164 li
40.1768 62.811 40.2236 62.8081 40.272 62.8081 cv
40.5449 62.8081 40.8105 62.894 41.0317 63.0542 cv
41.0137 63.041 li
41.0586 63.0762 41.1147 63.0962 41.1719 63.0962 cv
41.2388 63.0962 41.3027 63.0693 41.3496 63.0225 cv
41.3618 63.0273 li
42.543 61.9023 43.8018 60.8623 45.1299 59.915 cv
45.1289 59.8623 li
46.7485 58.7114 48.6875 58.0923 50.6758 58.0923 cv
51.2329 58.0923 51.7896 58.1411 52.3389 58.2373 cv
52.3315 58.2363 li
54.5278 57.4082 li
54.5317 57.3833 li
54.5537 57.376 54.5767 57.3721 54.5996 57.3721 cv
54.7188 57.3721 54.8159 57.4692 54.8159 57.5884 cv
54.8159 57.6274 54.8047 57.666 54.7847 57.6992 cv
54.8276 57.6592 li
54.6787 57.8721 54.522 58.0781 54.3555 58.2773 cv
54.3447 58.2734 li
54.6309 58.4233 54.9077 58.5903 55.1729 58.7734 cv
55.1738 58.7324 li
54.9829 58.7373 54.7905 58.7402 54.5996 58.7402 cv
54.5869 58.7402 54.5737 58.7402 54.5615 58.7402 cv
54.5625 58.7783 li
54.5518 58.7773 54.5396 58.7764 54.5278 58.7764 cv
54.3887 58.7764 54.2759 58.8892 54.2759 59.0283 cv
54.2759 59.0674 54.2847 59.1064 54.3027 59.1411 cv
54.3115 59.1362 li
54.8877 60.7563 li
54.8647 60.75 li
54.9277 60.9253 54.96 61.1104 54.96 61.2964 cv
54.96 61.3555 54.9565 61.415 54.9497 61.4741 cv
54.9648 61.5142 li
54.9136 61.9912 54.8877 62.4712 54.8877 62.9521 cv
54.8877 64.3174 55.0938 65.6743 55.5 66.9771 cv
55.5078 66.9453 li
55.5269 67.0044 55.5356 67.0664 55.5356 67.1284 cv
55.5356 67.2393 55.5059 67.3481 55.4487 67.4434 cv
55.4756 67.4214 li
55.2847 67.7764 55.1235 68.1475 54.9937 68.5303 cv
54.9785 68.5264 li
54.9346 68.6592 54.8115 68.748 54.6719 68.748 cv
54.6479 68.748 54.625 68.7451 54.6016 68.7402 cv
54.5986 68.7212 li
54.2329 68.6543 53.9028 68.459 53.6655 68.1724 cv
53.6768 68.1831 li
53.5566 68.3091 53.458 68.4521 53.3848 68.6084 cv
53.4097 68.6094 li
53.0098 68.3774 52.7637 67.9502 52.7637 67.4883 cv
52.7637 67.4644 52.7646 67.4404 52.7656 67.416 cv
52.7637 67.4092 li
52.7666 67.125 52.7827 66.8423 52.8115 66.5591 cv
52.7979 66.5522 li
52.7988 66.54 52.7998 66.5283 52.7998 66.5161 cv
52.7998 66.3574 52.6958 66.2173 52.543 66.1714 cv
52.5405 66.1733 li
51.8828 65.9863 51.2998 65.6001 50.8696 65.0684 cv
50.8447 65.0854 li
50.8037 65.0342 50.7417 65.0044 50.6758 65.0044 cv
50.5698 65.0044 50.4795 65.0801 50.4629 65.1841 cv
50.4609 65.1772 li
50.3027 67.0171 49.6187 68.7734 48.4888 70.2344 cv
48.4746 70.2192 li
48.4077 70.3022 48.3716 70.4063 48.3716 70.5122 cv
48.3716 70.5244 48.3716 70.5361 48.3726 70.5483 cv
48.3687 70.54 li
48.3706 70.6274 48.3716 70.7134 48.3716 70.8003 cv
48.3716 71.9424 48.1748 73.0752 47.7896 74.1494 cv
47.7988 74.1484 li
47.7729 74.2305 47.7598 74.3154 47.7598 74.4004 cv
47.7598 74.6113 47.8408 74.8145 47.9849 74.9683 cv
47.9756 74.9761 li
51.4678 78.5762 li
51.4678 78.5742 li
51.8618 78.9531 52.1309 79.4424 52.2407 79.9771 cv
52.2178 79.979 li
52.2866 80.2642 52.3315 80.5542 52.3535 80.8477 cv
52.3696 80.8516 li
52.8228 81.9795 53.3638 83.0703 53.9858 84.1152 cv
54 84.1133 li
54.1099 84.2998 54.168 84.5146 54.168 84.7324 cv
54.168 84.8057 54.1606 84.8789 54.1479 84.9512 cv
54.1396 84.9463 li
53.9507 86.126 53.4985 87.248 52.8169 88.2295 cv
52.8037 88.2646 li
52.7837 88.2852 52.7568 88.2959 52.7275 88.2959 cv
52.6987 88.2959 52.6719 88.2852 52.6519 88.2646 cv
52.6426 88.2725 li
52.0229 87.7031 51.6206 86.9365 51.5029 86.1025 cv
51.5049 86.0996 li
51.7759 85.8213 52.0898 85.5879 52.4355 85.4111 cv
52.4365 85.4111 li
52.4839 85.3711 52.5117 85.3057 52.5117 85.2363 cv
52.5117 85.2129 52.5088 85.1904 52.5029 85.168 cv
52.501 85.1709 li
52.3906 84.9668 52.2529 84.7793 52.0908 84.6143 cv
52.1328 84.5713 li
52.1079 84.5459 52.0898 84.5146 52.0825 84.4795 cv
52.0439 84.4834 li
51.9136 83.2031 51.4375 81.9824 50.667 80.9521 cv
50.7148 80.9746 li
49.2036 79.3882 47.5688 77.9243 45.8257 76.5962 cv
45.8247 76.6221 li
45.7529 76.5591 45.6597 76.5244 45.564 76.5244 cv
45.4678 76.5244 45.375 76.5591 45.3027 76.6221 cv
45.3115 76.6323 li
44.6426 77.3003 44.2676 78.207 44.2676 79.1523 cv
44.2676 79.187 44.2686 79.2222 44.2695 79.2583 cv
44.2358 79.2603 li
44.1606 79.7144 43.9609 80.1382 43.6558 80.4834 cv
43.6787 80.4692 li
43.4106 80.9092 43.1138 81.3311 42.792 81.7334 cv
42.792 81.7441 li
41.3877 84.1201 li
41.376 84.1133 li
41.2656 84.2998 41.2075 84.5146 41.2075 84.7324 cv
41.2075 84.7559 41.209 84.7803 41.21 84.8057 cv
41.1958 84.8105 li
41.2036 85 41.2075 85.1904 41.2075 85.3799 cv
41.2075 85.4043 41.2075 85.4268 41.2075 85.4512 cv
41.2437 85.4521 li
41.2437 85.9795 41.4136 86.4922 41.7285 86.915 cv
41.7017 86.9277 li
42.0615 87.418 42.3838 87.9355 42.6626 88.4756 cv
42.689 88.4736 li
42.709 88.5059 42.7197 88.5449 42.7197 88.584 cv
42.7197 88.6777 42.6597 88.7598 42.5718 88.7891 cv
42.583 88.7803 li
42.0825 89.0068 41.5405 89.124 40.9917 89.124 cv
40.4697 89.124 39.9536 89.0186 39.4746 88.8125 cv
39.4795 88.7998 li
40.0557 87.9004 li
40.0195 87.8643 li
40.0669 87.7764 40.0918 87.6768 40.0918 87.5762 cv
40.0918 87.3086 39.918 87.0723 39.6626 86.9922 cv
39.6606 86.9609 li
39.4219 86.8711 39.2637 86.6436 39.2637 86.3887 cv
39.2759 86.3906 li
39.4785 85.8789 39.7417 85.3945 40.0605 84.9463 cv
40.0039 84.9443 li
40.1338 84.5635 40.1997 84.1631 40.1997 83.7598 cv
40.1997 83.7246 40.1987 83.6885 40.1978 83.6523 cv
40.2397 83.6484 li
40.2368 83.5654 40.2358 83.4834 40.2358 83.4004 cv
40.2358 81.6885 40.793 80.0234 41.8237 78.6553 cv
41.8237 78.6411 li
41.7246 78.1211 41.6758 77.5933 41.6758 77.0645 cv
41.6758 76.6782 41.7017 76.293 41.7549 75.9111 cv
41.7705 75.895 li
39.8779 76.5034 37.9028 76.812 35.9155 76.812 cv
33.1865 76.812 30.4888 76.229 28.0039 75.1011 cv
27.9917 75.1294 li
27.9697 75.123 27.9468 75.1201 27.9238 75.1201 cv
27.8408 75.1201 27.7646 75.1602 27.7285 75.2222 cv
27.7275 75.2031 li
27.5508 75.543 27.2817 75.8271 26.9526 76.0225 cv
26.9478 76.0513 li
26.8379 76.124 26.772 76.248 26.772 76.3804 cv
26.772 76.4043 26.7739 76.4272 26.7778 76.4512 cv
26.7578 76.4502 li
26.7905 76.6772 26.8076 76.9063 26.8076 77.1362 cv
26.8076 78.0972 26.5166 79.0352 25.9717 79.8281 cv
25.9868 79.8413 li
25.9116 79.957 25.8716 80.0933 25.8716 80.2324 cv
25.8716 80.2944 25.8799 80.3555 25.8955 80.415 cv
25.8418 80.4434 li
26.1226 81.6709 26.3066 82.9189 26.3916 84.1758 cv
26.4497 84.2295 li
26.4736 84.6172 26.6855 84.9688 27.0186 85.1709 cv
27.0107 85.1768 li
28.3359 85.9834 29.3696 87.1934 29.9619 88.6309 cv
29.981 88.6182 li
30.001 88.6641 30.0117 88.7139 30.0117 88.7646 cv
30.0117 88.877 29.959 88.9844 29.8677 89.0527 cv
29.834 89.0449 li
29.5215 89.0732 29.209 89.0879 28.8955 89.0879 cv
28.3877 89.0879 27.8799 89.0498 27.3779 88.9746 cv
27.3867 88.9814 li
27.1729 88.5957 27.0596 88.1611 27.0596 87.7207 cv
27.0596 87.5869 27.0698 87.4551 27.0898 87.3232 cv
27.0527 87.3223 li
27.0576 87.2988 27.0596 87.2764 27.0596 87.252 cv
27.0596 87.1221 26.9907 87.0039 26.8838 86.9541 cv
26.8799 86.9639 li
26.1235 86.9639 li
26.1226 86.959 li
26.0996 86.9619 26.0757 86.9639 26.0518 86.9639 cv
25.8105 86.9639 25.5986 86.8047 25.5327 86.5723 cv
25.4868 86.5996 li
25.355 84.3711 24.6929 82.2061 23.5566 80.2852 cv
23.5938 80.2383 li
23.4829 80.0645 23.4238 79.8623 23.4238 79.6563 cv
23.4238 79.5103 23.4536 79.3652 23.5107 79.2314 cv
23.4956 79.2241 li
24.2158 77.8564 li
24.189 77.8252 li
24.2065 77.79 24.2158 77.751 24.2158 77.7124 cv
24.2158 77.5732 24.1025 77.4604 23.9639 77.4604 cv
23.9248 77.4604 23.8857 77.4692 23.8506 77.4873 cv
23.856 77.4961 li
20.4717 79.0444 li
20.4668 79.0352 li
20.4038 79.0664 20.3569 79.123 20.3379 79.1914 cv
20.3276 79.1885 li
19.9678 80.5918 li
19.9189 80.5879 li
19.8179 80.875 19.6328 81.126 19.3867 81.3066 cv
19.4668 81.3184 li
19.2729 81.4199 19.1167 81.5801 19.0229 81.7764 cv
19.0317 81.7803 li
18.6719 85.0566 li
18.6587 85.0557 li
18.6436 85.1631 18.6357 85.2715 18.6357 85.3799 cv
18.6357 85.5752 18.6606 85.7686 18.709 85.957 cv
18.7207 85.9492 li
18.7827 86.0742 18.8159 86.2119 18.8159 86.3525 cv
18.8159 86.5205 18.7686 86.6846 18.6807 86.8262 cv
18.6348 86.8213 li
18.1899 87.6836 17.3018 88.2246 16.3315 88.2246 cv
16.1748 88.2246 16.0176 88.21 15.8638 88.1816 cv
15.875 88.2188 li
15.6768 87.666 15.5757 87.083 15.5757 86.4961 cv
15.5757 86.1064 15.6206 85.7168 15.709 85.3369 cv
15.7246 85.3682 li
15.9829 85.5127 16.2607 85.6152 16.5488 85.6758 cv
16.5508 85.6182 li
16.5859 85.627 16.6206 85.6318 16.6558 85.6318 cv
16.875 85.6318 17.0518 85.4551 17.0518 85.2363 cv
17.0518 85.1738 17.0376 85.1143 17.0098 85.0596 cv
17.0156 85.0195 li
17.2827 84.8652 17.4707 84.6055 17.5337 84.3027 cv
17.5649 84.3486 li
17.6309 83.3008 17.6636 82.2529 17.6636 81.2041 cv
17.6636 80.3301 17.6406 79.4561 17.5947 78.583 cv
17.5996 78.6104 li
17.5947 78.5752 17.5918 78.54 17.5918 78.5044 cv
17.5918 78.2124 17.7607 77.9453 18.0249 77.8203 cv
17.9917 77.7944 li
18.3276 77.6411 18.6416 77.4443 18.9258 77.2104 cv
18.9219 77.209 li
19.1587 76.792 19.2837 76.3203 19.2837 75.8403 cv
19.2837 75.5073 19.2236 75.1763 19.1069 74.8652 cv
19.1655 74.875 li
18.5557 73.603 18.2397 72.2114 18.2397 70.8003 cv
18.2397 69.417 18.5439 68.0513 19.1309 66.7993 cv
19.1035 66.8223 li
17.2837 67.0073 15.8999 68.5391 15.8999 70.3682 cv
15.877 70.3291 li
15.9155 70.6411 15.9355 70.9541 15.9355 71.2681 cv
15.9355 73.4771 14.9609 75.5732 13.2705 76.9961 cv
13.2339 76.9854 li
12.8018 77.248 12.3037 77.3882 11.7959 77.3882 cv
10.9497 77.3882 10.1519 77.0024 9.63379 76.3433 cv
9.6333 76.3242 li
9.78711 76.3613 9.94531 76.3804 10.1035 76.3804 cv
10.8096 76.3804 11.4648 76.0103 11.8296 75.4053 cv
11.855 75.4351 li
12.3867 74.3491 12.6738 73.1602 12.6948 71.9521 cv
12.6987 71.9541 li
12.6968 71.8931 12.6958 71.833 12.6958 71.7725 cv
12.6958 70.2202 13.25 68.7202 14.2568 67.54 cv
14.2666 67.5552 li
14.8447 66.6714 15.7588 66.0601 16.7979 65.8643 cv
16.7959 65.8594 li
17.4756 65.7451 18.1626 65.6885 18.8516 65.6885 cv
19.4028 65.6885 19.9526 65.7251 20.4985 65.7974 cv
20.5186 65.7993 li
22.2256 64.9453 24.1079 64.5 26.0156 64.5 cv
27.6348 64.5 29.2388 64.8203 30.7339 65.4434 cv
30.7358 65.4614 li
30.7578 65.4683 30.7808 65.4722 30.8037 65.4722 cv
30.9229 65.4722 31.0195 65.375 31.0195 65.2563 cv
31.0195 65.2441 31.0186 65.2324 31.0166 65.2202 cv
31.0098 65.2314 li
30.6816 64.0063 30.5156 62.7441 30.5156 61.4761 cv
30.5156 59.417 30.9536 57.3823 31.8008 55.5063 cv
31.8218 55.5054 li
32.1025 54.8423 32.626 54.311 33.2827 54.0181 cv
33.2886 53.9902 li
33.3989 53.9351 33.4678 53.8232 33.4678 53.7002 cv
33.4678 53.6392 33.4507 53.5801 33.4189 53.5283 cv
33.4409 53.5142 li
33.1997 53.1543 33.0718 52.7305 33.0718 52.2964 cv
33.0718 52.2964 li
33.0718 51.9722 li
33.0708 51.9805 li
32.9736 51.9614 32.8779 51.9331 32.7856 51.895 cv
32.7837 51.8984 li
32.7876 51.4521 32.8276 51.0073 32.9019 50.5674 cv
32.8945 50.5684 li
32.9517 49.6382 33.7236 48.9121 34.6558 48.9121 cv
35.4487 48.9121 36.1436 49.4414 36.356 50.2051 cv
36.3188 50.167 li
36.4277 50.4224 36.5059 50.6904 36.5518 50.9644 cv
36.5996 50.9644 li
37.1758 51.3965 li
37.1357 51.4004 li
37.1387 51.4102 37.1396 51.4214 37.1396 51.4321 cv
37.1396 51.4512 37.1357 51.4692 37.1289 51.4834 cv
37.1396 51.5044 li
36.3838 51.5044 li
36.3838 52.4761 li
36.3838 51.5044 li
cp
ef
91.3921 88.7285 mo
91.3589 88.7627 li
91.2163 88.5371 91.1401 88.2754 91.1401 88.0078 cv
91.1401 87.96 91.1421 87.9121 91.146 87.8643 cv
91.1401 87.8584 li
91.355 86.624 91.4644 85.373 91.4644 84.1201 cv
91.4644 82.7402 91.3335 81.3633 91.0718 80.0083 cv
91.0679 80.0161 li
89.9155 74.2563 li
89.8784 74.2573 li
89.7905 73.7944 89.5522 73.374 89.1987 73.0674 cv
89.1987 73.0503 li
87.8354 71.8931 86.2026 71.0972 84.4526 70.7344 cv
84.4448 70.7534 li
84.1929 70.7031 84.0112 70.4814 84.0112 70.2241 cv
84.0112 70.1074 84.0503 69.9932 84.1206 69.9004 cv
84.1147 69.894 li
84.5503 69.3184 84.9097 68.6895 85.187 68.0225 cv
85.1909 68.0215 li
85.3628 67.625 85.4526 67.1992 85.4526 66.7681 cv
85.4526 65.019 84.0171 63.6001 82.2476 63.6001 cv
80.478 63.6001 79.0444 65.019 79.0444 66.7681 cv
79.0444 67.2813 79.1694 67.7861 79.4116 68.2412 cv
79.3999 68.2451 li
79.6538 68.8262 79.9761 69.374 80.3608 69.8794 cv
80.3765 69.8643 li
80.4448 69.957 80.4839 70.0713 80.4839 70.1885 cv
80.4839 70.459 80.2847 70.687 80.0151 70.7231 cv
80.0015 70.7563 li
78.8472 71.0674 77.7397 71.5322 76.7124 72.1392 cv
76.7104 72.1421 li
76.2573 72.4082 75.9351 72.8481 75.8159 73.3594 cv
75.8042 73.3564 li
72.3472 88.2959 li
72.3472 88.2988 li
72.3237 88.2969 72.3003 88.2959 72.2749 88.2959 cv
71.8179 88.2959 71.4468 88.6836 71.4468 89.1602 cv
71.4468 89.3379 71.5015 89.5127 71.5991 89.6582 cv
71.5562 89.665 li
71.1519 89.7363 70.7437 89.7725 70.3315 89.7725 cv
69.9097 89.7725 69.4858 89.7344 69.0698 89.6592 cv
69.0718 89.623 li
68.8452 89.5879 68.6753 89.3916 68.6753 89.1602 cv
68.6753 89.0186 68.7397 88.8838 68.8511 88.7949 cv
68.8276 88.7725 li
69.3257 88.3486 69.6108 87.7266 69.6108 87.0723 cv
69.6108 85.8398 68.6108 84.8398 67.3804 84.8398 cv
66.1479 84.8398 65.1479 85.8398 65.1479 87.0723 cv
65.1479 87.7266 65.4351 88.3486 65.9331 88.7725 cv
65.9331 88.8047 li
65.9839 88.877 66.0112 88.9629 66.0112 89.0527 cv
66.0112 89.2344 65.8979 89.3965 65.728 89.458 cv
65.7241 89.4844 li
64.3901 90.0137 63.4292 91.2002 63.189 92.6162 cv
63.1909 92.6436 li
63.0308 93.5908 62.9175 94.5469 62.8491 95.5068 cv
62.853 95.4805 li
62.8218 95.9414 62.8081 96.4023 62.8081 96.8643 cv
62.8081 97.4961 62.8374 98.127 62.894 98.7559 cv
62.8901 98.7695 li
63.0151 99.1875 63.3726 99.5 63.812 99.5801 cv
63.8159 99.5898 li
63.8511 99.5957 63.8882 99.5986 63.9233 99.5996 cv
63.9233 99.5986 li
63.9468 99.5996 63.9722 99.6006 63.9956 99.6006 cv
64.2026 99.6006 64.4038 99.543 64.5815 99.4346 cv
64.6069 99.4551 li
64.7886 99.335 64.896 99.1328 64.896 98.916 cv
64.896 98.6992 64.7886 98.4971 64.6069 98.377 cv
64.5991 98.3506 li
64.478 98.249 64.4019 98.1025 64.3921 97.9443 cv
64.3921 97.9443 li
64.896 94.668 li
65.4722 93.8398 li
65.4214 93.8467 li
65.6694 94.5742 65.7964 95.3379 65.7964 96.1084 cv
65.7964 96.4229 65.7749 96.7373 65.7319 97.0488 cv
65.728 97.0078 li
65.6128 98.1377 65.4429 99.2588 65.2163 100.37 cv
65.2593 100.393 li
65.2573 100.404 65.2554 100.416 65.2554 100.428 cv
65.2554 100.541 65.3315 100.64 65.439 100.67 cv
65.4351 100.681 li
65.687 100.788 li
65.687 106.62 li
65.6499 106.62 li
65.6519 106.632 65.6519 106.645 65.6519 106.656 cv
65.6519 106.819 65.5913 106.977 65.48 107.096 cv
65.5073 107.124 li
65.2925 107.412 li
65.2788 107.404 li
65.2397 107.459 65.2202 107.525 65.2202 107.592 cv
65.2202 107.771 65.3647 107.916 65.5444 107.916 cv
65.605 107.916 65.6636 107.899 65.7163 107.867 cv
65.7241 107.88 li
66.5522 107.305 li
66.5522 107.269 li
66.855 107.086 67.0659 106.787 67.1382 106.441 cv
67.2007 106.44 li
67.9565 102.408 li
67.9702 102.41 li
68.0093 102.189 68.1187 101.987 68.2788 101.832 cv
68.2827 101.798 li
68.3882 101.702 68.4995 101.611 68.6147 101.526 cv
68.646 101.55 li
68.6733 101.523 68.7104 101.508 68.7476 101.508 cv
68.8276 101.508 68.8921 101.572 68.8921 101.652 cv
68.8921 101.652 li
68.8921 106.584 li
68.8921 106.584 li
68.8921 106.787 68.9995 106.979 69.1772 107.091 cv
69.1792 107.124 li
70.6206 108.168 li
70.6616 108.123 li
70.7144 108.152 70.7749 108.168 70.8354 108.168 cv
71.0347 108.168 71.1948 108.007 71.1948 107.809 cv
71.1948 107.73 71.1714 107.654 71.1245 107.592 cv
71.1597 107.592 li
70.6206 106.908 li
70.6206 106.908 li
70.5034 106.767 70.439 106.588 70.439 106.404 cv
70.439 106.368 70.4409 106.332 70.4468 106.296 cv
70.4761 106.296 li
71.1245 102.192 li
71.1245 102.12 li
71.8374 101.863 72.312 101.187 72.312 100.428 cv
72.312 100.308 72.3003 100.188 72.2749 100.069 cv
72.312 100.068 li
70.4761 92.4727 li
70.4839 92.4707 li
70.478 92.4473 70.4761 92.4238 70.4761 92.4004 cv
70.4761 92.2598 70.564 92.1377 70.6968 92.0928 cv
70.6909 92.0615 li
72.1421 91.5615 73.5093 90.8496 74.7515 89.9482 cv
74.7593 89.9512 li
74.9194 89.8281 75.0112 89.6436 75.0112 89.4482 cv
75.0112 89.1289 74.7671 88.8584 74.4351 88.8086 cv
74.4351 88.7998 li
78.6831 77.9282 li
78.3589 90.6719 li
79.6909 106.477 li
78.8628 107.557 li
78.8706 107.561 li
78.8179 107.633 78.7925 107.719 78.7925 107.809 cv
78.7925 108.046 78.9858 108.24 79.2241 108.24 cv
79.312 108.24 79.3979 108.213 79.4722 108.162 cv
79.4761 108.168 li
81.8882 106.44 li
81.8901 106.407 li
82.0581 106.301 82.1636 106.127 82.1753 105.937 cv
82.1753 105.9 li
82.1753 102.521 82.2808 99.1426 82.4937 95.7695 cv
82.5073 95.7158 li
82.7144 93.9043 83.0269 92.1064 83.4468 90.3311 cv
83.4351 90.3838 li
83.8687 96.2158 li
83.8101 96.166 li
83.9448 97.7031 84.0112 99.2451 84.0112 100.788 cv
84.0112 102.547 83.9233 104.306 83.7495 106.056 cv
83.8003 106.045 li
83.7964 106.068 83.7964 106.092 83.7964 106.116 cv
83.7964 106.309 83.8765 106.491 84.0151 106.614 cv
83.9761 106.584 li
85.6323 108.097 li
85.6421 108.084 li
85.728 108.161 85.8394 108.204 85.9565 108.204 cv
86.2144 108.204 86.4233 107.994 86.4233 107.736 cv
86.4233 107.62 86.3804 107.509 86.3042 107.423 cv
86.3159 107.412 li
85.9565 106.8 li
87.3589 95.5322 li
87.6479 90.3486 li
87.6558 90.3584 li
87.6753 90.043 87.6831 89.7275 87.6831 89.4121 cv
87.6831 88.8926 87.6597 88.373 87.6069 87.8564 cv
87.6108 87.8643 li
86.603 77.8564 li
86.5933 77.8564 li
88.2886 80.2852 89.1948 83.1748 89.1948 86.1367 cv
89.1948 86.835 89.144 87.5332 89.0444 88.2256 cv
89.0562 88.2246 li
89.0054 88.4355 88.9272 88.6387 88.8257 88.8291 cv
88.8354 88.8359 li
88.7886 88.9756 88.7632 89.1211 88.7632 89.2686 cv
88.7632 90.0029 89.3608 90.6006 90.0952 90.6006 cv
90.8315 90.6006 91.4272 90.0029 91.4272 89.2686 cv
91.4272 89.0938 91.394 88.9209 91.3276 88.7598 cv
ef
35.3398 14.0645 mo
34.4058 14.0645 33.5356 14.5342 33.0229 15.3145 cv
33.0356 15.3242 li
29.8677 20.1841 li
20.7236 21.3721 li
20.7246 21.3853 li
19.8408 21.4941 19.1758 22.2451 19.1758 23.1362 cv
19.1758 23.1362 li
19.1758 26.3042 li
19.1758 26.3042 li
19.1758 27.1094 19.7798 27.7871 20.5806 27.8784 cv
20.6025 27.8911 li
20.5879 27.7593 20.5796 27.625 20.5796 27.4922 cv
20.5796 25.5454 22.1606 23.9644 24.1079 23.9644 cv
26.0547 23.9644 27.6357 25.5454 27.6357 27.4922 cv
27.6357 27.625 27.6279 27.7593 27.6128 27.8911 cv
27.6719 27.8882 li
43.4756 27.8882 li
43.4985 27.8911 li
43.4839 27.7593 43.4756 27.625 43.4756 27.4922 cv
43.4756 25.5454 45.0566 23.9644 47.0039 23.9644 cv
48.9507 23.9644 50.5317 25.5454 50.5317 27.4922 cv
50.5317 27.625 50.5239 27.7593 50.5088 27.8911 cv
50.5679 27.8882 li
55.1035 27.4922 li
55.1035 22.4521 li
55.0679 22.4521 li
55.0679 22.0303 54.7627 21.6694 54.3467 21.6001 cv
54.3447 21.5493 li
53.3896 21.4204 52.5049 20.9751 51.8315 20.2852 cv
51.8276 20.292 li
47.9399 16.2241 li
47.9497 16.2183 li
46.6445 14.8433 44.8315 14.0645 42.9355 14.0645 cv
35.3398 14.0645 li
40.9556 15.8643 mo
40.9556 20.1841 li
48.7319 20.1841 li
44.5918 15.8643 li
40.9556 15.8643 li
40.9556 15.8643 li
cp
47.0396 25.8721 mo
47.9536 25.8721 48.6958 26.6143 48.6958 27.5283 cv
48.6958 28.4424 47.9536 29.1841 47.0396 29.1841 cv
46.126 29.1841 45.3838 28.4424 45.3838 27.5283 cv
45.3838 26.6143 46.126 25.8721 47.0396 25.8721 cv
47.0396 25.8721 li
cp
47.0396 24.3965 mo
48.7686 24.3965 50.1719 25.7993 50.1719 27.5283 cv
50.1719 29.2573 48.7686 30.6602 47.0396 30.6602 cv
45.3105 30.6602 43.9077 29.2573 43.9077 27.5283 cv
43.9077 25.7993 45.3105 24.3965 47.0396 24.3965 cv
47.0396 24.3965 li
cp
24.1079 25.8721 mo
25.0215 25.8721 25.7637 26.6143 25.7637 27.5283 cv
25.7637 28.4424 25.0215 29.1841 24.1079 29.1841 cv
23.1938 29.1841 22.4517 28.4424 22.4517 27.5283 cv
22.4517 26.6143 23.1938 25.8721 24.1079 25.8721 cv
24.1079 25.8721 li
cp
24.1079 24.3965 mo
25.8369 24.3965 27.2397 25.7993 27.2397 27.5283 cv
27.2397 29.2573 25.8369 30.6602 24.1079 30.6602 cv
22.3789 30.6602 20.9756 29.2573 20.9756 27.5283 cv
20.9756 25.7993 22.3789 24.3965 24.1079 24.3965 cv
24.1079 24.3965 li
cp
40.1636 20.1841 mo
31.272 20.1841 li
34.1157 15.8643 li
40.1636 15.8643 li
40.1636 20.1841 li
40.1636 20.1841 li
cp
ef
74.8687 29.832 mo
69.2593 28.1543 63.437 26.9214 57.6958 26.0161 cv
57.6958 26.0161 li
57.6958 24.936 li
63.3413 25.8213 68.8765 26.999 74.3999 28.5723 cv
ef
6.43164 115.692 mo
4.66797 115.692 3.22754 117.132 3.22754 118.896 cv
3.22754 153.24 3.22754 120.66 3.22754 155.04 cv
3.22754 156.769 4.66797 158.208 6.43164 158.208 cv
40.4517 158.208 74.4722 158.208 108.492 158.208 cv
110.255 158.208 111.66 156.769 111.66 155.04 cv
111.66 120.66 111.66 153.24 111.66 118.896 cv
111.66 117.132 110.255 115.692 108.492 115.692 cv
74.4722 115.692 40.4517 115.692 6.43164 115.692 cv
1 /0 /CSD get_res sepcs
1 sep
ef
64.9312 140.964 mo
59.8921 140.964 li
59.8921 152.88 li
64.9312 152.88 li
64.9312 152.88 li
67.3804 152.88 69.5405 150.504 69.5405 146.977 cv
69.5757 143.412 67.3081 140.964 64.9312 140.964 cv
64.6792 142.836 mo
61.98 142.836 li
61.98 151.044 li
64.6792 151.044 li
64.6792 151.044 li
66.1206 151.044 67.4878 149.676 67.4878 147.048 cv
67.4878 144.384 66.228 142.836 64.6792 142.836 cv
64.6792 142.836 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
55.6079 147.192 mo
55.6079 141 li
53.5557 141 li
53.5557 149.568 li
47.9038 141 li
45.5278 141 li
45.5278 152.88 li
47.5439 152.88 li
47.5439 144.24 li
53.1597 152.88 li
55.6079 152.88 li
55.6079 149.353 li
ef
37.9678 140.964 mo
34.2959 140.964 li
34.2959 152.88 li
42.0356 152.88 li
42.0356 151.044 li
36.3115 151.044 li
36.3115 147.769 li
41.2798 147.769 li
41.2798 145.896 li
36.3115 145.896 li
36.3115 142.872 li
41.7837 142.872 li
41.7837 140.964 li
40.5596 140.964 li
ef
81.3472 142.692 mo
79.7632 143.916 li
79.7632 143.916 li
79.0796 143.232 78.2163 142.513 76.8843 142.513 cv
75.5522 142.513 74.6519 143.305 74.6519 144.132 cv
74.6147 145.32 75.5151 145.572 77.2788 145.896 cv
78.5034 146.112 79.439 146.221 80.3394 146.904 cv
81.1323 147.553 81.564 148.416 81.564 149.496 cv
81.564 150.54 80.8804 153.204 77.0269 153.204 cv
74.0034 153.204 72.5269 151.513 71.9878 150.864 cv
73.7886 149.568 li
73.7886 149.568 li
74.5444 150.756 75.8765 151.368 76.8472 151.368 cv
77.7847 151.368 79.439 151.008 79.439 149.532 cv
79.439 148.057 77.6401 147.948 75.9468 147.66 cv
74.2554 147.336 72.4917 146.508 72.4917 144.204 cv
72.4917 141.9 74.7964 140.784 76.8843 140.784 cv
78.9722 140.784 80.4468 141.468 81.3472 142.692 cv
ef
6.43164 109.32 mo
108.492 6.21631 li
.697627 .675227 .638575 .739559 cmyk
@
111.66 12.8042 mo
13.0195 112.488 li
6.10791 112.488 li
5.96387 112.452 li
5.81982 112.452 li
5.67578 112.416 li
5.49561 112.38 li
5.35156 112.309 li
4.94385 112.146 4.54443 111.938 4.23584 111.624 cv
3.90088 111.318 3.66846 110.916 3.47949 110.508 cv
3.44385 110.364 li
3.37158 110.221 li
3.26367 109.788 li
3.26367 109.464 li
3.22754 109.32 li
3.22754 102.732 li
101.904 3.01221 li
111.914 2.44629 112.248 2.79004 111.66 12.8042 cv
/1 
<<
/Name (PANTONE 186 C)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .81 .04 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
ef
65.5073 133.765 mo
72.2046 133.765 li
72.2046 131.964 li
67.5601 131.964 li
67.5601 121.884 li
65.5073 121.884 li
65.5073 133.765 li
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
ef
85.019 128.544 mo
85.019 133.729 li
83.1479 133.729 li
83.1479 133.729 li
83.1479 125.269 li
85.019 125.269 li
85.019 125.269 li
85.019 125.988 li
85.0132 125.984 li
85.5972 125.366 86.4058 125.017 87.2515 125.017 cv
87.939 125.017 88.6069 125.247 89.1499 125.673 cv
89.1479 125.641 li
89.6909 126.076 90.0386 126.705 90.1147 127.393 cv
90.0952 127.393 li
90.0952 133.729 li
88.2593 133.729 li
88.2593 128.328 li
88.2222 128.329 li
88.2104 128.008 88.1128 127.696 87.9429 127.424 cv
88.0073 127.428 li
87.7554 127.047 87.3218 126.816 86.855 126.816 cv
86.7358 126.816 86.6147 126.831 86.4995 126.862 cv
86.4585 126.882 li
85.6753 127.089 85.105 127.752 85.0288 128.544 cv
ef
80.8433 132.612 mo
80.8433 132.643 li
80.6538 132.567 80.4741 132.471 80.3062 132.354 cv
80.2964 132.371 li
80.1323 132.266 80.0288 132.087 80.0171 131.893 cv
80.0151 131.893 li
80.0151 127.645 li
80.0132 127.678 li
79.9683 126.553 79.2378 125.571 78.1753 125.203 cv
78.1831 125.201 li
77.7905 125.126 77.3921 125.088 76.9917 125.088 cv
76.8218 125.088 76.6499 125.096 76.4819 125.108 cv
76.4839 125.094 li
75.4526 125.195 74.4429 125.477 73.5015 125.925 cv
73.4995 125.916 li
74.1831 127.393 li
74.2261 127.396 li
75.062 127.012 75.9663 126.792 76.8882 126.751 cv
76.8823 126.746 li
76.9058 126.745 76.9312 126.744 76.9565 126.744 cv
77.2983 126.744 77.6284 126.86 77.8882 127.07 cv
77.9272 127.067 li
77.9761 127.115 78.0151 127.177 78.0405 127.246 cv
78.019 127.254 li
78.0952 127.4 78.1382 127.557 78.1421 127.716 cv
78.1792 127.716 li
78.1792 128.364 li
78.1792 128.364 li
75.5522 128.725 li
75.5522 128.718 li
74.8921 128.81 74.2788 129.109 73.8062 129.573 cv
73.8218 129.548 li
73.4058 130.013 73.1753 130.617 73.1753 131.244 cv
73.1753 132.015 73.5229 132.741 74.1167 133.219 cv
74.1089 133.191 li
74.728 133.701 75.5054 133.98 76.3081 133.98 cv
77.0933 133.98 77.855 133.712 78.4683 133.222 cv
78.4722 133.186 li
78.8472 133.619 79.3491 133.924 79.9077 134.055 cv
79.9077 134.088 li
80.8433 132.648 li
77.7476 132.036 mo
77.7788 132.067 li
77.9624 131.923 78.0933 131.724 78.1479 131.497 cv
78.144 131.496 li
78.144 129.912 li
78.1479 129.913 li
77.5425 129.921 76.939 129.981 76.3433 130.093 cv
76.3081 130.092 li
75.9116 130.164 li
75.9448 130.185 li
75.5737 130.251 75.2573 130.486 75.0933 130.816 cv
75.0776 130.809 li
75.0112 130.956 74.9761 131.117 74.9761 131.28 cv
74.9761 131.415 74.9995 131.55 75.0464 131.676 cv
75.0601 131.67 li
75.1343 131.85 75.2554 132.001 75.4058 132.11 cv
75.4038 132.148 li
75.73 132.38 76.1226 132.504 76.5229 132.504 cv
76.644 132.504 76.7651 132.493 76.8843 132.471 cv
76.8862 132.396 li
77.1948 132.34 77.4897 132.219 77.7534 132.04 cv
77.7476 132.036 li
cp
ef
92.8315 132.216 mo
92.814 132.227 li
93.0112 132.549 93.2554 132.841 93.5366 133.094 cv
93.5522 133.078 li
93.9819 133.427 94.4722 133.691 94.9995 133.856 cv
94.9917 133.852 li
95.3784 133.96 95.7769 134.017 96.1792 134.017 cv
96.8394 134.017 97.4897 133.866 98.0854 133.578 cv
98.1226 133.579 li
98.3472 133.475 98.562 133.354 98.769 133.216 cv
98.7847 133.237 li
98.9858 133.108 99.1753 132.961 99.3511 132.798 cv
98.1597 131.387 li
97.6831 131.876 97.0386 132.16 96.3608 132.18 cv
96.3608 132.173 li
96.3003 132.178 96.2397 132.181 96.1792 132.181 cv
95.9976 132.181 95.8159 132.16 95.6382 132.119 cv
95.6382 132.11 li
94.7397 131.94 94.0913 131.169 94.0913 130.272 cv
94.0913 130.26 94.0913 130.248 94.0913 130.236 cv
99.8101 130.207 li
99.814 130.109 99.8159 130.01 99.8159 129.912 cv
99.8159 129.272 99.7495 128.633 99.6187 128.007 cv
99.5776 128.003 li
99.5073 127.651 99.3804 127.313 99.2007 127.001 cv
99.1968 127.032 li
98.7046 126.101 97.8413 125.428 96.8296 125.187 cv
96.8335 125.186 li
96.5483 125.121 96.2573 125.088 95.9644 125.088 cv
95.2925 125.088 94.6304 125.262 94.0503 125.588 cv
94.0503 125.582 li
93.6909 125.789 93.3765 126.063 93.1226 126.391 cv
93.1226 126.382 li
92.4429 127.283 92.0757 128.384 92.0757 129.517 cv
92.0757 130.469 92.3374 131.403 92.8296 132.217 cv
94.0562 128.796 mo
97.8726 128.796 li
97.8354 128.796 li
97.8354 128.488 97.769 128.185 97.6421 127.903 cv
97.644 127.9 li
97.3511 127.219 96.6929 126.78 95.9644 126.78 cv
95.3647 126.78 94.8042 127.078 94.4604 127.578 cv
94.4155 127.536 li
94.1929 127.921 94.0601 128.354 94.0269 128.798 cv
94.0562 128.796 li
cp
ef
21.0479 134.124 mo
22.0195 134.053 li
22.8115 135.708 li
24.4316 134.916 li
23.7476 133.513 li
23.7549 133.483 li
24.4717 133.076 25.084 132.503 25.5396 131.813 cv
25.5317 131.805 li
25.9336 131.185 26.2158 130.493 26.3638 129.768 cv
26.3398 129.726 li
26.4756 129.104 26.5479 128.468 26.5547 127.831 cv
26.5918 127.795 li
26.5879 127.151 26.5195 126.512 26.3906 125.882 cv
26.3677 125.888 li
26.2207 125.146 25.9365 124.438 25.5317 123.805 cv
25.5449 123.791 li
24.8608 122.757 23.8306 122 22.6396 121.657 cv
22.6318 121.653 li
22.1108 121.543 21.5796 121.488 21.0479 121.488 cv
21.0518 121.488 li
21.0386 121.488 21.0249 121.488 21.0117 121.488 cv
20.5049 121.488 19.9985 121.536 19.502 121.63 cv
19.4575 121.659 li
18.2778 122.004 17.2588 122.76 16.5806 123.791 cv
16.5815 123.796 li
16.168 124.433 15.8789 125.143 15.7285 125.888 cv
15.7158 125.882 li
15.5796 126.512 15.5088 127.151 15.5039 127.795 cv
15.5049 127.831 li
15.5117 128.468 15.584 129.104 15.7197 129.726 cv
15.7319 129.768 li
15.8809 130.499 16.168 131.197 16.5747 131.821 cv
16.5806 131.821 li
17.2588 132.853 18.2778 133.608 19.4575 133.953 cv
19.502 133.971 li
19.9985 134.073 20.5049 134.124 21.0117 134.124 cv
21.0249 134.124 21.0386 134.124 21.0518 134.124 cv
21.0479 123.288 mo
21.0479 123.288 li
20.2866 123.288 19.5449 123.527 18.9258 123.972 cv
18.917 123.997 li
18.4727 124.322 18.1309 124.766 17.9307 125.275 cv
17.9565 125.303 li
17.6919 126.08 17.5557 126.896 17.5557 127.716 cv
17.5557 127.742 17.5557 127.769 17.5557 127.794 cv
17.5557 127.782 li
17.5557 127.809 17.5557 127.834 17.5557 127.86 cv
17.5557 128.69 17.6948 129.514 17.9658 130.298 cv
17.9307 130.301 li
18.1367 130.827 18.4937 131.281 18.959 131.609 cv
18.9219 131.572 li
19.5386 132.037 20.2827 132.288 21.0479 132.288 cv
21.0479 132.288 li
21.1919 132.288 li
21.1919 132.288 li
20.4355 130.704 li
22.0557 129.912 li
22.9556 131.784 li
23.2075 131.604 li
23.1846 131.585 li
23.6279 131.259 23.9688 130.814 24.167 130.301 cv
24.1738 130.311 li
24.4399 129.522 24.5757 128.694 24.5757 127.86 cv
24.5757 127.834 24.5757 127.809 24.5757 127.782 cv
24.5757 127.794 li
24.5757 127.769 24.5757 127.742 24.5757 127.716 cv
24.5757 126.896 24.4399 126.08 24.1748 125.303 cv
24.1689 125.271 li
23.9707 124.765 23.626 124.323 23.1758 123.999 cv
23.1587 123.99 li
22.5469 123.541 21.8086 123.296 21.0498 123.288 cv
21.0479 123.288 li
cp
ef
57.1196 131.928 mo
57.1489 131.946 li
56.8257 132.053 56.4878 132.108 56.1479 132.108 cv
55.9668 132.108 55.7856 132.092 55.6069 132.063 cv
55.6118 132.093 li
55.3149 132.031 55.1035 131.783 55.1035 131.496 cv
55.1035 131.496 li
55.1035 126.853 li
57.3716 126.853 li
57.3716 126.853 li
57.3716 125.269 li
57.3716 125.269 li
55.1035 125.269 li
55.1035 125.269 li
55.1035 121.884 li
53.2319 122.532 li
53.2319 122.532 li
53.2319 125.269 li
51.7559 125.269 li
51.7559 126.853 li
51.7559 126.853 li
53.2319 126.853 li
53.2319 131.748 li
53.2368 131.746 li
53.2339 131.795 53.2319 131.843 53.2319 131.893 cv
53.2319 132.113 53.2627 132.334 53.3247 132.545 cv
53.3467 132.537 li
53.4956 133.034 53.8447 133.444 54.3066 133.664 cv
54.314 133.69 li
54.6157 133.833 54.9478 133.908 55.2837 133.908 cv
55.3438 133.908 55.4038 133.906 55.4639 133.901 cv
55.4546 133.858 li
56.0869 133.828 56.7148 133.752 57.335 133.631 cv
ef
39.4795 121.884 mo
40.0957 121.884 40.5957 122.384 40.5957 123 cv
40.5957 123.616 40.0957 124.116 39.4795 124.116 cv
38.8638 124.116 38.3638 123.616 38.3638 123 cv
38.3638 122.384 38.8638 121.884 39.4795 121.884 cv
ef
38.5439 125.269 mo
38.5439 133.765 li
38.5439 133.765 li
40.4155 133.765 li
40.4155 133.765 li
40.4155 125.269 li
40.4155 125.269 li
38.5439 125.269 li
ef
43.4038 132.216 mo
43.4116 132.208 li
43.606 132.53 43.8457 132.823 44.1245 133.076 cv
44.1245 133.078 li
44.5537 133.427 45.0449 133.691 45.5718 133.856 cv
45.5596 133.842 li
45.959 133.958 46.3726 134.017 46.7876 134.017 cv
47.4478 134.017 48.0986 133.869 48.6938 133.585 cv
48.6987 133.594 li
48.9238 133.491 49.1406 133.371 49.3477 133.235 cv
49.3486 133.229 li
49.5498 133.099 49.7388 132.949 49.9136 132.784 cv
48.7656 131.351 li
48.2876 131.861 47.6279 132.159 46.9326 132.18 cv
46.9326 132.173 li
46.8726 132.178 46.8125 132.181 46.752 132.181 cv
46.585 132.181 46.417 132.163 46.252 132.128 cv
46.2466 132.117 li
45.3315 131.962 44.6636 131.184 44.6636 130.272 cv
44.6636 130.26 44.6636 130.248 44.6636 130.236 cv
50.3467 130.207 li
50.3496 130.109 50.3516 130.01 50.3516 129.912 cv
50.3516 129.272 50.2856 128.633 50.1548 128.007 cv
50.1489 128.003 li
50.0796 127.651 49.9526 127.313 49.7715 127.001 cv
49.8159 126.993 li
49.3047 126.065 48.4238 125.403 47.3955 125.174 cv
47.4058 125.186 li
47.1206 125.121 46.8286 125.088 46.5356 125.088 cv
45.8809 125.088 45.2378 125.251 44.6689 125.563 cv
44.6655 125.559 li
44.2886 125.768 43.9575 126.05 43.6948 126.391 cv
43.731 126.382 li
43.0518 127.283 42.6836 128.384 42.6836 129.517 cv
42.6836 130.469 42.9448 131.403 43.4375 132.217 cv
44.6636 128.796 mo
48.4438 128.796 li
48.4077 128.796 li
48.4077 128.488 48.3418 128.185 48.2148 127.903 cv
48.2168 127.9 li
47.9238 127.219 47.2646 126.78 46.5356 126.78 cv
45.9365 126.78 45.376 127.078 45.0317 127.578 cv
45.022 127.532 li
44.7998 127.918 44.668 128.352 44.6357 128.798 cv
44.6636 128.796 li
cp
ef
33.8999 133.008 mo
33.9346 133.009 li
33.3506 133.629 32.5459 133.98 31.7036 133.98 cv
31.0449 133.98 30.4028 133.766 29.8706 133.365 cv
29.8657 133.337 li
29.3198 132.909 28.9668 132.287 28.8799 131.605 cv
28.8599 131.604 li
28.8599 125.269 li
28.8599 125.269 li
30.7319 125.269 li
30.7319 130.668 li
30.7329 130.666 li
30.7456 130.998 30.8486 131.32 31.0298 131.6 cv
31.0469 131.611 li
31.3027 131.99 31.7227 132.216 32.1719 132.216 cv
32.292 132.216 32.4116 132.2 32.5278 132.167 cv
32.5356 132.118 li
33.2847 131.92 33.8359 131.272 33.9238 130.488 cv
33.9717 130.488 li
33.9717 125.269 li
35.8438 125.269 li
35.8438 133.765 li
35.8438 133.765 li
33.9717 133.765 li
33.9717 133.044 li
33.9717 133.152 li
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Bob Hutchinson) ()%%Title: (885.EPS)%%CreationDate: 02/02/2009 11:37%%Canvassize: 16383%AI9_DataStream%Gb!R&k?8hJdO>%LJF5]+)3L`:!DH;m9TB<nK*@'=KERH?Ha!1a\b8tPeNHKf'\:t7rTjcBC-#<q='+[il!1CHq.r:.[%GL3J$3At%:!0K9SQ0eqX%RI[QeQsLC%`anBEd/!7DWa%rq!8FmN6R5pW[$JdV3j8]p3Eqmm]CNhfs`#NU0ZOea!&_>Ac=d?Sf7@Ndb2^Bf54I%mTZHY[0dP`AEC8tq9jRKpjB\hG#tuL@3SgeAM'MJTIFOhs!I51qnDb!cocn<Rh%T!n@45abZjf8BsZ\%_uUH'Ng7ps^[idKbTE)[%c41A"=kPR9Q$Fdeke^:t,$8FVC=cC&,qB]Uh3(bOrid,)edV>kP'"[in<'N6R[ME1S(+030P+6AnY%/k\n#Gb/>q14X["o1LR/+A%Cu@Yk@^:V'5/oKshfI>th#c637?*(_%3K:&[cA=',^CG@qlH%A.A>Ei(BrXQr?u7`W<c.&@3l=X)k(3I`:Pel;Ua,AKiKgD_c#/0%P+j@\M^/C%o06!=:G9D1\']]i["$?LoUe"uhHPtgP??;B$G%MI=\Y"cW\#*@&7,asNn'5nJuhOa<eF^8?-VZ38H;C\)2-/Ebh`3_%V>7;0i9:')G/)LQ-FQ$_\L2hYFo/'irrX7@gH#nd[^)2G(G$Ml#X1KKCc/ifm?^"VA80)]#51+hbn^Ph<pHdkEim:ZbO09uE7X5:%2>aU540;;S`_+gFp`im"H]>e0?+5I(pLa<(F2@@39ble33)3P_Jo9gV<\5.H:tN.OX<j?=`F++.C0"AOhQ>#5k."i8fTt_(<bLh+%<n_!VjlrVT_GN..\%44'T%.I^.i*%1pet2C'H].3TLHWQD"@[YJ>hhH/PAuMs-1)WHNoncDS,rm@>(of`!>AG^btLoUYe>aAZ8:F%]D:o3q<pMi#mpU1.fM=7r,(3`]2B5;5XEBHp_781NPF^l]oKM"Q=4/M_n^2FJY`bW9,U440&![L/7[F:#,J,U[;?jUff#/5^[O1J%W`63%V1LQT'mroY@$u<]T@W=_J[OfdHsX!T*Q"35-%)X]HAXT!F/1;b`_ncCr/IOl9Oagi$qGucYmcWuJ)e$B-)`GV$%Lto*"i1i%QAA;c16)Wij1+UmTf=CcPGh(O@jrB6rl-_d3l8i5+Qc(%U*<G@IoB&[3FP^n'5l;]@P6e6Pb<M.$HIq:YpGi))Ds[Q)8f6$L#Wh&%9N7^s3'R8"hf*Zos7i';7gT+6;E-l<9s[Aq6?K('Yt)V4Lq2Fc0kZ.];&r:Ah#q"sjFf[*:3]XNe?YGp.O"e")'#4*9H5)(VGYf@%*$>1";T.HP5,&A6`SXc%8!h=(c5(2N-q?E3G7,H-]HXip0df^>?4cEhbULr1YTp/H^I1$!>g/!@)rZgR7.8VdeYhU&O"dJs8_d!\%::-]1lKfV_YIiMf:*q>hX1PY?SQt#!mM:3=nfQG+Gt>#YGErDth0D8E"=:=]9+?HQ^fU/$m8?Y]QInG",cN3`Iu6Qgge[dEC%U6[%UjndPfJ`)gqapf]PJ4Z$oZsi,]4Hi5/cMqQU*o@Vr@=6!]DG2"1:_.b+RUWUX4?FGqapf5k9%feS3-XCo1IoZ2u83t.9]0hlh+0#%;D$tP3rY]<#P;!<P*<"RJcD,XiJ[_.QDKhIH<&SMh[F8!!+Fc,pb=;uT1gjC)<PR0[4T?MfkS&!56h$b.j`!`/=H1B=[Chc;ZZml%s.I@LKVn^9A8S)Z<Q^L%A#kF#=lo5X\Eg#l\j'<O%iOMBZF,8;'&[$fr)=O+CR$sONJSm]i[A4FW\eVkCQqUs@jBP5lPjhVoWE5G%o?WSY4AW>n<'gCT:8uZKUO3^)7VuS<mngS/m1FCIrZgl5PmXEmKo^ZG:PW[0[4p7BLYi2U\#NKZ/edW?m)3mFdW=P8bNB1R-e`@W%2=TKk9acE-1(pJpdX4B^K]=+GHboH4\LVfWk>_A=s+sphp*[1=@d)*d8etiqeE9_B#YrpTG#^<Ng8X>fA6'#XQOl39:BRs:np6D[%kr9AsAie4(rJfj?TVelS`h!1&g[XpU18Pmtc6[nh/*Z(XYoM%$oW@%1WJ"FpAX..B9Bb=^o6uoV!K0!*^5,RR0qHu&K9AE\;_'iq%P3)Cp('r/GZrqJ7T3e,$Eo#6/kg!7$KlINfoL(F;N5bf_X+SEO(6PH_R>-SiHWmaJeP_KYbc8-A]KCE8<0[Tt@r5Au+O2?+?a#ZI%M//IV=D2bZ$=[Ztbe@T""s^:n3+&P#%At(;4d/P$B/(35*KqbRQop!YVL\=iE&$lAb^^#pTZ0Tco6sF<.`Fp^X2<sF0/%F(:Fc6R%R`[D>0^f,)(k.qG/5E&Ll"nkEBER99TFS+%1pRlZA`a*BliLKn?;#[tBLId]/Oq_g2Gj;"2kA%nO-L\[2d'/9hPmr-Kni<&*"V3u%2B#%L0%WKcp=*&)?4oH>[A,fe;E(#abd<V->!/Ff5=A3h72`Rfne0q`WPc4[LOs)@41NuN>DB\"E@D9?=leCYB`[*/c;:ED*Maj]%&s&OcM@T2u[+#NR)T*Bg'<;E=%fW->_3N<Y=>M@>3@D(OPaH@(IR-&\JfG`*H*lp]V.Rh[P0Xak2#'FZ+7;9QAJjRG;INTZNl+br%!U[g=mZWj;PRN!FUo%9,^-B_7(_>%me3TLfV#:lQc4dH/)$LbiFpd:$\/,!?"'6o>eKQWbH(ip-Dn6h5>nL+T)I!52*DCQ3c%Q9t%UK_^5T$=aNnc]dc:7,IDF'">F6"3%+=Lh;$*;9`-o<fKPFV*r&>N05&$[3j$bQj?XNkI?@%k-Z0QS"fTW`bHVE@liZ_'H-YAT5V.%gS'Yf&Mos.DFflP(%RgQ>/^719DGl;ZIcDondj>s)P1S('2<O#hbb&[5#s.A3/P@>Z]k>g/fTG"Ef+Q59??cS.lbXW1NbFm8/8FB%6MpIJI#<_*EGV/1X';YWMkng03E6(f>E?7GFd`#qIZUk<X:+ahQ2&IKT,dI<)5gItBL?:s,laW;dVIWEj-H^\J$AC7,omd48KZ^)%503kIf)XR9oL\gsq+`Y_nrYqd(%T-"-%9)]A9`A019lF1nT(W[iPU,e&j5@)GZ?%3R;?D'%C#g:YtMOQa,01lg];cp9)'h1?BT;H%$%42nR\^YV:OFeKZIIenMmqK^NU;kK<#VuS6MS6!ik$K\RLPW?M'LRbn\6Td>hXtTqfEG>A?,ssG*8@]h*b5LR$UT*7uNj;0D?r2%<l!u,QhRI(i65A\?R=XHaK]i"\76dZ2p#sRPq&TCgQK^,6XO1DnpZr3pd"ak@$Q7<,U^Nsck`s@4@a_X88'*iQ1PRT/(*p:\-P(i%TIt/;Xcd3Tj'Q<;0B@>>0B^q5k]7$Qf.ZS_M1?9,I5I"li57_jpAnR:m>S:BK_-1IpS13nEQ0QKSZsRN5*#%C\g5/P665KZpS16o%8KnE"LuL2oh3HrA$"5Jf8X`aUW'+'JRStcZh03hK4kY]\DAc3%0TF71UtVTspK/A(9Xn<`kD\#&AIQsKrRu;D"*m0GYjO"m<i1^:%?AIZ43gpSo)lg1\!Nkf==eEo`4>P"<O2CHqZg,q&;?##-];\>Fmj]4#ZM2L_^tbT]1[:CN5V+HkU(>T5oRm.LLZUtVoWC'l/M=1r%KE\O13:7(cSSA[J.>^ir3Q8kK1-SaUF2%oDOle2mBmR<120u)]L-15ejoJSM)YKW?%D(/$fuI=hpk'FCMAGcQ@_RfQfnga]\quU*%]1RZ[XBVj7MW/cFcdQ"e/G`\<AM6Kij"4Tl,ZGHH)%q6H8p6C,&`85()m*?Us&:Gmb/TFT@jt_6U[K9?1\Z?e'u/gLT6g>Lg+b>E%:(_0p!T:Pbb-6i`9db,Dj0gXu/Cpl&CBm)GISD2P\S\H&4=`$A_kXJiBsLti?6`]\b<;XH=D5;1IWtPC#:2',d^]"h/k\/u>u",R%:+f[#MbA!X#e9UMZtIalo?oTjhNChPYmf3$ah`$X)gO\`lQe9&>j3DTZcDg$Q`<_ge4E_me7:.38oa`<IS.W#>BE%f[!1nE'1)a'%,q%!I?Zr`RC<_m5#4;>Bdh+8EOd/LaT<KTu^b;s,+5-T6/h:Xk&htb."LHDC"O/44;mN.^253Hc`.V/Ha)aLhi\$GPpPZ>$fl!6\%mBe+\f,2u+Z-`oj7)!Guha/P7<K\IN.k!bXHnW[.WA1]Bs7fWWDl#Pco)\idd02PVs67O-pqF%"<2889YGT>tn$bU$:2[.MCPi!t%YbYNN,XS@HFb_()_0B1O9VlTG9,6$13$mqF?1(>V7khkfc(J<1S?[fd]$Z1ER5uH".PBiBCh28/A^Z-&>*;2.E\-?4E9`)CO81(R%)]:`(@QCa)_Qf,`%S#9dQUp.rpWW,#&]Hu]+sMAnmr!A$!K<hc]8j&dA_K@f7YK&N1I"/;EO'Od+o&]$fqkA.`H_mPDc^#gqSn!J%$m!aDZdr7>2qW_Dag=D1q(Ko/03Oc8"$,f)#GZQ%GlC9G3ue?GJE<:lk,Zr#91YY[o6?kUJ%0]9#%b5m+.1%-CNMa.aA(amGT.(T%Ct"uO?OF,AiIHnmEoMD^C*@q`W6O]Z`N;!7WUic!3\+pD?:bI"cl\,;IuV$=.e/]@IL[-BN8O4Nrr`;(e4#%c%_Tfc[bQ9a/f1#k%'HUuVOknl"-8,n@q[Cl\K[*B-"SO+AK0C+).u6&cP^Eoo8u"UOWI)s<O`)63++6%d77_<ia-,K'6;i/[iqF])5<bk%)kL/1`P)A:%@\G/Rj5U]ur`E@)2e[KH;H["*mH^@N&i_p5e>`rDYJf,5?KoZg+/#pAHDP]4V_@H\Ht]f"Gq!_kN:VqQ)SqW'IOdE=#*EGAfUc2l%go'J_E@G)_7N$oE+KMU'gG9BVG,](Sr-R`!0aLiMLO4)cK#Q\P*aT-BVRuldQ6_i#&U'OkNB($IV!RgGH;`P7<g.bjN6fUt&ePd9%k!5H[jEAf@Y([,JPpk#m*,TSsm.4C%mO)J8`8cEY6e+tXJ\1fDUcN3^K"IU"nP!$qK/Rs8RLaV^7!rHn%!UO8ckV=7LlT4'(.k9_%IKHFK'ork=I^[6H]An-!I(of6=F<Y`V$ZWgQ#&a[qq_0)&^(OIa"Q$R/'>^ML<%4,ghR3o7\QKYYl0C$C!CpI1b0_m8sj]Ra*9K+%V0R+*"7`^BcFIF"=kjL"<j'IU[t:2`P_?6=*_eJc6r-!VU74IflAf+jX^%U7aj42&G"[(<?J=/1kVHa`A9uCH5tb=5?F\-&#@c<B%nMtC]TPYcZT3'Mrq_/JoVa"[C<9E@//DpGoaWk/mX*HFo+4lr@Vb(pc/k8KU2.hnha=KuB-qj@OmOHU9+bAFT\E"/h\*-&S3Cs#m%\NW?GA]=W?XqHd)l0)EXIO"a`T+2)Vh6C]E?@EF^q5:QU@;T6=[7,K!3?9`=%A5`Lh&Ct6_TMJ!qK)@brBtNp/r:@LX!L+/[`$jJ%Oud'=YehUQgrd)'IKHWi5@g-WER#e/NTe*IkSRIU]'UM,L$]Z@PWS@0`+Y,P1<_,l7N/OcW4mNqN5sh!-*I-eIA0]Lr8;5_Y%$,2%\@tu%\OW7.Qu)KkE1b7#qe_)_]UIe)jStFfon\#\^\/K(9fq[_B.]jZJ0?J)L_r[Mp33@Ki(5/jgJsC3)6?OmQ9e_XGhAcq*eUmV%gNsGkP<ibR^/+#t\1[ei,_5>dL^:a/jXBq"-]u+)M2XJW!e^(bTQR?<m*D^Er$=,QKInCP&Y:$#'=14C;,,2b&p+oPj;_CWEd,'m%"\Wk.(peT`[ft?LkHoW(XW3m56bK6VHR'?o)`dH83atkE&j$7BL"Y@*;S]UP_6S95I*8;R$raUTWk"6WY#VU?\HkFe3,"5]hm#:A%QM\K*eL&SY&e#/%<YEfIEd0`0n"[LkE_XJ^mVKA,`_X][[-)/OI#$^IP^C^H+rsfbib,]R(I\/9SF.-Njlt&snDN/t(qH[V:hP[<%4681h,s#>VEulpYI0'=COaBi&71QSUjItB1U:J'n7YRYtb+%j\q>"5_!GUH,j]eb(EkiE6%[]JuCmmsZa[QcpQR(6L]LgmN]2+[]%7kl_?h+_N>PH5'YmW>&f^h!oN-KpD,%e+qANR.?N/H6SEThFC?h0^="A+.ebLpL'fdKIl(W@Bl.`)OEI%G_Y_-G<Q6XU;L(KQmj8%MbfH?n(l<0[6_C1GQ&8P`%C$f&8r];.TJOK>&bemc<H!8"hBl<SK>Y<<X32SP8B%WZC+Z[/eRW[RiCIM/#GITa*6K9b(J9_93-2m%gkG41LK[>Jes"Ea*'=[q0&tb.G?Pqu:fg->aDnYKq`N(l:4K_+47;'W7Qk1K<'/@hlF8XEae'^gn:C@Bo^hjlPKm7A-YoJ;;tTM>%IBh8]GnO$'NJ%Gnl2$F(p.=*\c4oA_dlT>k6i:/Yl=JDb'UBamBpg#kAiZVe`SIX;b*.dIp1ZNeS-omO)+@9Q]1TWre30^FM/MBE%UTCCUA\:6!-aDZBI$,SOdecm8B7IN;hJXR_Bp((,g-e8J'@hfm_;B!+*N&:M.A+Hf-2h32g;anID/l#tZ&;:ahmp/9`YP#qlYEBa%4%@Aj54`.CHJYamg8+[!<ESW7-f`8gLH?$:F"#p0[1=6)jjSR>3.<g'-#/?^G7[hpS?":03WJ\lM-pWLYraV`e,?(j$VJ?Me[nWA%g571T.LEZn5>9F1eFIBnEIMcGgpOqsTL_-hi`#Ummf"'V_IB&k=lRet8*h8RM!Y:b:#nXia3[E#isE)$120uBn+a\/.<<a8GYj(,%.s'o;:G.T$\$G4N.E4B,ob;W00[1-!]W6;T+i3nh*\?8MOdtM$1id%j>c)P2HaoZ0;hrMn$*d]>=W(O$$r1T]eY2UNS5F+"60fj<%f8Z's(2:5d[G'EM"mt-:p#I4h]i:d)9X;+Zmh'IB8E.+.b!$o@2XRa=;\at8V(UU52Y]io2!df&:F=[_WYsBsLpVuNBX1k.<F$p.%hKcGq761+.9%is6I$3kNC(%rO9lF[;O_&RD>5J?(7\ILGSN"4BU*hQf39kZjSL8aGr6:h'2Z'-8F<:Y_IXBFmdP#IMP9G"_SliHl%X\X2Kea7aun$F/uR=+7mF4\X-Fn+mYVsNBuTB:QO5+C^8pTN&lQ[Z9fG^5pBD5c<+FIQEZ#aO(EnX3Xog3i7/hq[K"XgS1D[Q<lK%AfXF;rK.!7ke8E'IFN#=)r3&t4"]p7quok75U3aT(RCfC7fPJQDDg/Z4f;$Nl>M_kamGYUj/![MCq9GrHd84*3\@74s!+Fa%VANg%s525E&Za8BC_M@(Hf>3\4dEVWs12O0FEA&_n@uO,8u'p_H0R<ET3q$(3XC$!oL.#[@B@6$mQ.J:hOD\a*lq3RgOHbP2,F8?op]l>%XW]PC?eQ%+LeR$BfQQ-.n^=K)l#YmuakH)Gf3-3oVa:7s"J]&j/MG/f7%9e+,shLE>KpKO\D-HLX3J@h=#0Rn+I!e:Xo>O"D"41g%f$#aXMPi+Gmk>G^7*6Q_n9-6P;V;LT;1Hsmb6Cp*aX#cG7+ViQQ87I&+o(UeI/*trquP0ZZ<DE9qr=$-I/rKm8VXYPO=?>X>Kp]:%J3&(`5lt'A+XYY%W6o@sg<!a#7sCqp%:0:YDCW6qT?P).;+LAK1fnhaEksTj'4@ib0CFEMQ0dVI1]/.Eel'^D?FjGs/47Z7X#aR[%7$i51D6PP)Y`5##]Dr('KD0\sNaqM4o%2mqE:KMDYMo%Ri`C1eV:b[[!^18+Vl0#gb5ro_S'7h#Lg.q%I7Wd>@W"(3FCU/FNlhh:%$:YtHM=(BlH.V-XK<kWSa9#M=7jPUKRK&>#TqMH?U2c3o\=AKd\_EkR%cRQ)^"hX7BQX8dht')+Rh%0EDcui*0U+KYm?d^q",N?t%RV$i\6d@a[0P`>bDrCapH.6^)Rf+d0W-JqOd)kDKh>pRdm;Y"Qs7]`u%?HjLJaU_;B><-[oh+%XK1c*k9h_4.:T=6SQe"O5fqpMs%[^ZEMEh;9ornm173;G5phX+[0DJp9R/-tSoqH'Hb.EWjI(K%@&d$nOno6pLC8tC.'h+U,%<p0Iiq2g=dU?$tEF4>3c]s'"CjV22,%k("aIb:.^ahU3(+r\5iFa&4,3pg4q`X_&Kk:Rou89acC2YLH2cMuJJl)M`O_DF"0H9!Wr,%p+&d1q$8D_@fMbNrSmc!*oM];#1./%.d]Culb?O@s+cq,YOur9^KhW8"kCSUAtp)(beMV#m,.hWWN2t@_))T]Bf,ib`MW\"dE&V"!;BGa)U6$'*r=2s7`5]6LIYo("\lDT%Ues96?_3k<LiTESIs>5O@_'sE):2Ze&(\O&o<D*#5GoCQ@%I<!c-Jf7C$2gLhdgres2S,(.&d/&$?+1<irL^)EUg9R`+.q\a!&lM%Q_uN($scqWhLB7[c8N94]2#-uOM/\-f<]MkcKRh3bg'Z>U7(@@YCkHM6bt,@k@+h6[___)I.jmB[.V>66'm705Rd@U^$"`RUXsF-%?iGh7-p<\0WhCr3@RVND5jQ[,g9P#C$=b(#K?)q`ruDZ1a$fI)h![/T^%V_)li#^k_953Sp[UPnPZYG+:7MpBi"F3oK9L`T_;\DL%^REi^k.gfHg;?RuEVIn-l2U-E*cH'QaL0W55CGG]Rb=I]]9pF-bZ,*<aS3]l6\$?:)SO`&:;-Bs5>\B-HK!;s'Jt8`Ijkq"it*&=%f4"$o::BfJml1t=aL-3b^%'tG_R-t([MnQZb)mAPg.ShQVi79=V:#:Cd5uJ3nkrT45!#saG<tQ??d8"#L*q?<(%,9Zn'F5o=oX3_%HicEWK8[lV!u=l%V;9AhqVBG41M,N/9Kbm6nk?R&BU=j%q6/q/+1UR<d;$&WL!YsiJlIgo''H[0;u^[A"F2Vgh&]r6:W3_C9AFa&%&']kqT#h`Y3domqffO'<N_@%O9:HNkdpp!e%%$I>XX@)KA:ZgO_R&*u?tCiJ#8KE--f-j;h=X6+M;O1,7&7,T83Y-bV74$qLDO2i%\62S$/g+&>@YcN$iI'V`,?A8H2HVDr"ELqoFIJL"<&g<PK4PQR=.OY?cq>l=(.0YQ\>a`D_#5OU>0/Tr?p<I+@j(8JFKM_jaG<l\%2<5u,)mZqXYMUfl:lC9fRs[rkj.")(]Y(;^e'rYmG_=&=G&!i0+&Y$mnL^YnC^KZZ$bjB"$SQFk,ml4XA(-_0GITQY9f'Lof/<LY%8WGGs`j?s&#E.GKfme,c++)7];R,CMYlU<ml.c;6HS81^`h8;&/BF^^NZ6Ge/[Bu!a-Tg_7CbnVm\Ts7G`OLMA\*G(&Q\bBeLfR#%g)tkAW2='$`KH7K^2#Uo?Xq6%*t"Pk0%*3UpJC>kjNqtGq`gT6,"aSLi,'uT'!YNRYgmtO4Jsb)=#=g`:N*E?Ycbh59t,RR"^41Z%Co406;q?H_47cfUoMD^2U9LFj&:<438CZO*J\8?33sim;T$m`I7@DPFfBDp;Ls$,,adNaERQU-a7:A\SUaYO@&h-G"`Inh+r2n@p%mJ4"^;:r]G79L/P.8"rl%MSC30n/hb@%<MPCWn8WD"e;JXnV6nV]E8!hg5O6_E`_Fin:&-!/ZOZAK-MQ2#T\]J%lf26%Qt]HW\Cf%1nkB#EQR=IF^rUW!?L!*pS$@5YP:re_hnaV]%;l.q>RK=gk5L5^Z4CO>HlS+(A:*D_*LkZLl('u.)T%LQ`5/<5XEra$5-!1U.T^K%EHs705QX)Zn,CU5].\XW[]pGTlFWocN0<mkZmZ[FoWA!V6=M,#WMbonW%3;+Kk`cX[Z]-3pF08,5afAL/m3FuhL20L'Q#.^Mc!h\%ke2-=G79,01AC0B*(chts/"fdrIdh<*ZbPY.)Vi\P*Y>>M&M+(#r(8$KU1kNhMG*`=_Jqf>0XgNX]WtopOY"cClro4#rLgPET9Mc%$3jfu^._0hJ_TB!GY:>BqqQF0G+6/^q=IG1ad#S4Qr+#rdHC'jM,(;#@V'NArBA6>?j1j26Y?QD5%FQHQk^%[itjBUld,9Q.Y5B-%2qi*\Y]>0YJPo';(hC5$V>9`"Bd*AeGm=h'UCY65BE%Q#iR-!IlsEA:'8ig+iuNe-1R(0anjPrp=.M;n7T<!S?l%SX_<@$=_`r3a%BlXJ,`_C0TiX!WJJU%TSqC.0tYZUAejW2!nG)Z.5@U3*[h-LcBlc(k3n.VM2oU8+rn6d8j%YbH3,(SdINc1IM4F8)4)5iJ/Rerbe%?f##3OrltKN%&?i-K)u)8teNi.B:nNJ.^n-#^!F7a:.LQBE)C67$\<s@e8S^VMK1E"<":_>1qT6oP,'&!*``6f;l+/`o6B/l/BhM%-MtAlDpSE&+/iaD[>\n]mJ?/>ms<%PY"B4rC>65B9"2FhBQ(:2rnNcgmiRlg9:bogm<`F@ZFF2Oh?=V&NK$R/CdYhi/G?jPT_>iR%C&@X%AT?b@YNf&Oq*XQ8nVXW^EH,'EV"n.dP,53sj`0VL<9`o7m(E>*VZ!3d`PoMs\#]->;iB9'Dc;Qu+6ul$#H<g,9eDuT>YH_R%bL4ngo:N@gjmnZ`("]VZ:+sXk:Kolr^WQ+6l";G]\84FDWF'^HASuq-)CUcj'oG.i9A,]c^&c#M$cmKkojYA`]BK61=h@R/4/JN3%c!">^96KhcT8.0%gGA?,'B?Y#X0Ss4;"q%eS<p@W03V09mB^\5Vcr9EZlR]]:&!9,o4^UjCVTP'Km+um.J1Kg]eQ[N=LTHEDU5]X%MV$gXI\$>_S%6$i$LdV3D/Ocuo&Eq$(H0j`eU-\!7&S&Kbf07+*o<l>FY2.e`aPN=k_4.@?2nEZ[aip'YYM%kj8F.3VdC/*WYX.L%K=&&:]n0QWa'/L&="7j,3)Zk70WT85/%j?+\[fMGWniTm1[>_lnuftn`Er>@roj?]?8)H,&'h3K9C!D>Qbtn5hu4DEWGs&_cEO_F%mFLOo^3aA3Qf4JVe.uX[N6hI,:4"ecja*Ru/n#SID('8s3kSC.rb?G\FaanUl#aV47s6B4GE9qO.`9;Abi!&")\JWIh+I@cfi`Qt%>I/*Pp6s=jDPrnmVq\=`lQV5%gL$8E$@Gli5@<`j75I*aS(h35@AaJ8SSm?!ATD7^Rd\(tmd2"ligjC-k5uqdog7Uu]Mn4//FC+k%Rr5,X(/MD$e">4Je\)^Ol!^X'*SK[piT#>8U=13B^r`L$+.qM%h,SCelLg.9cq_o1??RMS4l&'BI_2-PO86Ah8f,p8*T$&;o$#e)%mD<UOV\_:-]uWr)\Vkk,p-!/lqpP6#NH.Fb[DhU(<jr^ql1NKXNS>o+Mne"2dq=$hLe`F<d]^[Z`UHV5c<jmZEX,6GS\i%pgg&]*%Nj[?ka?N+9\hF#bm8_%cXe3ecQi5qbegYQY5UpmeQ=kH?GNsQ`d4EuZ23g4>9_Z$oRV&DnWE(;2F=GRN-J+_N>g%WPe1N\RgU1oq%e#[YoQ?]=2p-PG$guFI[8(OY;^63^<io*;**W4R,:7%*`JthaB=_O6r5<,^Og7JFh\rj0Jq)[&uk8kDL9N#M)._BSrR2h+$k2MhP%n,p9S%X)UJVUquZ\"V8h;h7]APk*chmr[[$&/aZ(c<BV#FdgFO)s;QpIKDm_J"A_q]lD6>@r1hqVNdA>?,Y4<02q/RgO%kXUW'Tc%=>]>i1VC.ShZ[WEIu/CWej\ul@?$igW9*>&k[e[2<S6n/!Iqd+m@A',;,9j5hSZK.os>q1:OT_)dnDCTGtg?4h`6OnI4Ljh?Mb=1%Ik40h(Gf!@V_5r;'Vr([rHqR]>rnVS."jh`3[Jo5VbI)3:ekjp0,NeMC\0a!d'OnPUl2/4NMrb%de?nV'_V)`qJOe4JmsAYO/2(Z%o2eoY5LQaYl\1.m5>CCoT?!eD;jUrXD<^21<K4#l.GYoOG/VkaY$>)]eK^YDE%L^$AO#2Mh2GV<E`8$FH7JA):Oe:IHJahq?BpjJ%MET2,=+>D.K\+dng1RHnqq'e&Q/9p<h#'*C;<>WXa`%&*VY!JZL$d--H6/<!9#!7V<VuJ;r2DUSF7H=%F<'uG(J)`QX)BAWkEY._%'<S1X*]&Y]rgnU!>:auE#:."6fA:Qif<"\P=cRUK]%mfU#B&TB8:GM,c)^,PrT^J1?2Ie*W)Tsb$hooY\[]6W'i3_4`S\3A@\ZhN%St9TE3Tc?bZZH-&qVfTAikEs76]/!OIPQ*PK^7Z"1"Q;kilg'34KQ?_)RqjZ7m:A;SQ=n(Ng>C*F1CZNf%s0pkCq^CWK('KZYk&d%g=9bVVpk<o@UuB7rN(Adk`f61XBRB;%q##L;4[]Hl#^^op2p0#ji`V;Bt(RWf^n<T2*bR:np,.RFLp#nG5?>Bn*O(9STR$]If>W@%JPJ!]%tTkt,!#mG&q#J,iLO^b59`/mo"HP:^$d$no,T#:7Gm&IWmbRQdnJ'18dED'd@I"#&kQE:7rG(_4_A#`Io^2_QM@E3?_#GD%;O1Mr.n;e/YGCl503*qar"52=Bqal2:(8MRE06@MTAZ]prMX]'Dk*&[rC=^nd+2LmS+>"<]]B"eiH=g=I-BCuRXQouBe1VA(<>A"%IH_l#'fTC[l2I0DbHYD6S_q*bZp2b<fMp7:XE/_^o_<9UMnQ7a,P_*]a+#s!4n^cEA;Q!JKn!(`g99A!B=K"9f5!D?$RrNkh]_9H%bqI#?3s+?UMN<9ob*S%4c"[`<!CL`q4(0OWJ"InG'T,.jWO>403'A]sF3O1FP5I+$Eee*fU9e3SI*<rK*T,7Do(^k@'+lCES3aBb%Bq`MihsKTY5b?c8i:sMm?n,fPULu::r2hT+nL)>s,)I&`f[<U?%Q7!;]5LugO2G*Q?bohcjlrhN.F73!aeY?[d$0lOQOI-6$jrUn%B0c)o/\V$BE(6HJH@2;Dd(>%Mf^^lXM>_chchnU!Q/T*^>3Z?s)-E.t[^0>2FtDhq6G(stMlA,0*ORB=nJP^kJB>EM@h*>nUSGr,%QC:<t0C/)u?f+3_=l28dM]YrR%I"6><s6.me>-^Fp%p]N6Abg4piV6./n)23^BA@qh_\>kO^uSpL*4]W[$I#HrUV5r*/Ba"]*[Z]%Xh3GGN=E$OR7/i*gk[.Pk>(giES^G1X^_?Ga)-@oN;2T,p2^^[^&96I.cho-U/>!@I?o)@VN^X98"RTMKBs*.o1MAV@nYoG8'-\@%@\hk!e>:2XiC=$g*Zg)>@<#5?ICOljH*<%RX4<2r[:r&?N9[\b:eN"XT?_%jkBAF)<J,&.2nRq[UqukTfTI2[F5(2/:H1#2p/D[0%f'`*c/GHBFPcsIm;7b2l-]L^lC<o;BjA&ugrm4.FS\`q2=MnSpp&(LLa7W)_)2or/e83p37lJ?[.u.j*:\/%?]LZ392We'hisbKu%mc/=s'T9BaL8EP_9)a-G'FRI=i<IEa=s=I*?iNC5mrMa!o&WSB%#nd<5Ae#I?HBBb=!Cm8Dr^90G"VB&,[sc>041V)Z7<>'#A#i[%`s*OFq+0eLZ`C]bO]"'#ME4,7IA(g`-3r&2/YmP*U;dg!'Jd35W$!;K]p93t1-%Z)jhNi45t$r.7(fs>!_j;nIF'cTq/@(5hs0O2%pEK99\7`mk1u/^%@io#eRA%R9frh1DB*Y4tUR&WHLnKLnX4Igc2*<cjR.uJ@+FeQtbRP^e/9VV^<.AL(!al8r"[p-O"MgY#8-':`%mmiDA^Gn02`1E%>0>Igt[_a0=7Tf4#q.a8C.0$91D)j4I4\%.r[Lt@uN_b=(%R/4ic]@%A`<PS_)'NGu\\r!6jY$%5>rbG,rt6up%93blrp<C@f<PO2),.aSqY"VV=7nC@M#Y@#M^O;%1o7dRnDTKFsdR?]i6aAC&GqO,NR9X-=O[E&+0$a/\$ubY!W&e^D8E7^<^-OCg%SZi+q`Bn/eE^2p]RPO<kj09'hgS\DQNtD%OZKOlb^7ZnDH1ZRN7)s(pU4D<l0@o&?VDhP9q>jMuh)N`W#UXjkl,`Pg^,pM^%'Yk8%6<?Y7P?&:`#1[)e7q>LI_Y7?N+rkI5Cn.]RVj0l:L]j!8B9suga;.J?.Aloq+-;hQOa"0P"i0PV[e&^LTa2<.FJ/cOB?N?e`?9=$%[VQ(h;VA?sN5oPm4JsUcY6r)9$/t;o0'q[KMkg)1^(Gtl>=WT\[%3"X-,cjgZ'=e00XJ[#pS"j3(*E&j//gO69TJ47S@/1j:`Sqd%Q@X2p`a(U+(#$BDA)j>mZ]kN\9T""ZLPu+dkWRAkXKfVZNVUKOoCE!0P=`s@ZbRX"kW94"</A,*^"8tU0#T8PdjJmk0>`N1!\2SZ%;;p[#TLACQauOEHo_F#*"5$5E+ZGWRUNnkl^lBq4Q&u^(NEi<=^ggkA9=,!'JrNJiU@hjC$*8R1Lef7PP1KWjl%`-?@4-h3e&[V]%CncVRlFg9M:,12!00XRqf)uTnfE2%.n9i@o@tJ7JXi$lKV0I6@+8"Pc"[/H2J_2qKdnE1##&FGaluWoBnRTi0nfk2t`A<BC@eM""%<?El)?($Y2NICY3lfpXWQZi(/;_D^Q2?0AI1dYW4a0;*H:&A<KJXqpcgI^X+;hQF-SYYjsE@/57mBaeZ(9=#/[C`g`d"Uh.qHhOL%)9onq*iTO&nG(AN)DR]Blra'&)oKB#1rXR1-O)XFUWM!$R*/$(X>.CQ&M44SUbQ2>Z'iB6,1b&<JNAi>cJ"CNe:o+[[N$5^*aTeg%jHg'miC_r_%K9Y\@C77$ntVi:kYrnl4bs\1rfqlX+cRV@]-*kmhnWB^:op*CjfIiOae*0fhf_q#\sYC,)_#BXj'6mj)<UK6]r)bl%QnQ?DfA=tQaiEZDlueGR,PJs[8>2E8o&\DB5VW_<S4JYf7k1C:3%$<&aYf^*&"#LM#,6OA9X2)W"a*_@D6^?&WeKc*ptZm*Cb-q,%;s\8qb:k84n._U@-3k(=`pAOP/G?\^gu2Hj8%9s9mNsW`"p2][T2kPRiM9r]2O'd.*72<#%\L46(QI27ben(qDU34WeBc^,C+P,m%5(em[QO2a"`FmOP+*doJFR^5j*rRip%c(T1#+^r03+`YkdqNJ"S\$75?4L7g#+[\WE1@oZaA,kB?"CD%O?%FQ)0F_O_/XMZiq(eb%\Y<Tqd)BYEOXE>A%UFGd?"en%KH.Su$p*8bW$2]sa/$EEiW9]eYO;mIF=,@)U`Y[6-0DlB;Fq,&pH,A&"8sAikELnb,H$R_s/>dB%gLrVo7s^6YL,qsK4`r<o'RNS(/Y)s#IdijF>PkSH'pB&ll9(Yn:>VlGrX1QK`13gIkKTKk[3$Asg@;"Nc,@iHi+C8*..PO%UrZOE%S^O=X-(Rt,a07M1pnJt"1dN-Ir\2dZ:3.,fA&6a9%NE#I$[B$UVpl?6p2aiEUEEtm+YhY%i\8G-M2C]hdMk3pMofk9"((1;745]9%g\`KZ*.TSb'I<6;7(=HSdo]k((0KT'N<SkjmZ^J^Le&!jVj5AJb%K/fNH9EZ4u+7'S)O]"D*Tbo*G;JZ`1Kh`%IMn[$rTY/-4-2A%M$Y/rV7Ye!PADCNC168Cn2jY]>;;Qu>o&eTO0>0d:8H1q]D5,[".qaf/B[[,Lpc/*"!<M%1GT8K\CACj1[p/I+Xrl-o9Xh/5(+JZ%DYX$cbi9(!0ZRUVMaD"Ybb?#6hD'6"^o)*%+l?lkMFHu?%#pT/8W'M-;9U-WV&)i%Nn-F3a4omIZj-5IEmh*mm"64Jig,GsEcFhC%#3#aqANmEM/LR^hVsWH6]r55ar^J)%#hq@E4S1SH,e^`7Z&/.FPjiE%B:^-$"EHtp;WUg$:gdo]9YWP69k9,cic6%b`^!R.lM*[[%K7kPtps8X/'O7HqJcjGUM$=)lj+4!'q._jU(&P'+e/uQPN9"MGSO8)_d\OoPAISC2:38s)P)5=T*rE9"ieehba+-q$"Zmp!r$R;b%O:t#rl'*%A$*Z\E)0h8_QTEP+K@8;^fG>K]01/To?-Iq)/-`)I+u5:Ye,=!#6ds.!O]h"^&K-AEjDTl=?(-SngUFDCb`JaPeCg,b%m-kUTcnk1K-5M_hq_j!=6ngGLT-EcdaX*aVN?+.t)94nS1!f>t)Hq(n4MWtF'ShIXN?+-i&U;OG)`Bi,Oud$n3?ao_lM+\*crbbS%%HO4;H$j=bjkUMEZ25ikb&Ll]2P$V:DOd2;d;bPIJi^MX:X3QmZ"[nCP=QcWHLpHh&bG9#h]%kQPufn^%O?DYGV7O/P9e#`Ul]gV%Kp*%'?ufOp&2\"l$JR=T<"EO#>];&*?jY$gWTXE_$dXVJ0.];S%i5lA:OT)mI6Lp,qo:%G%u9=U#;b@o5G9!f&"!9Kl8\TYhK+*_%7bjg2iC;'-*%i>YH)l48@h["?,<6O`LmrKMggCP6A.(%;+"m>S!3bgZ>Ws.mrR`*?On.I_]=p#q@Uj0g<,]aOI'M16,,)7EiK4G0%0`"Hg1`!d"1W8PML!j]#Q[V=Wg3MtIONHmC^Xckm*F@<Ws$a_uNf"eG@qB\Oa84&31[p5KT&\]/S0FN>fgg4O@I<7S6?!gnITGG7%QuMi;nLS&l`a=I]F5cR]n\0!(rR']:O&RXM-c[El-I4"6MeQ'`n6j/dei9N8:?$-+XIUN$@@6f3g)5AX?:=Y<6bVf?[?Dq!4D<B&%8skNf=3Mr'D(=sq",nno('&kS]%"VWe<kf/dMlPRI@k%>lM!k^Ujeq(7dA<\M.EF)e&rEH8;246OHGF&9Hk\rgR1H!.d!q2HOY(A%p6mY3KF9'fV5_QaQ@d<L[Mr>%XI%]0A<pY7.NHR8@C(*29nd'mCd`YiEiF#J@M;CV%8V[N+1Ll@Cq)$j(r(*CWGp72J!-dMW:ps"%_m*/!1:\*rTptfk@i35!&O'/=?Ngs2N0[Nm#5L<N@#q-Ik_5"E6uW*M,)RfNaOjTZKq4URL:IZ*A9c&;"\N3=gn#n.9e5Z!]I:p\%0e,t<7,V$W*)_?3I1LCh2<3O.kF1aKp25qQrj_450$)8/baNc8purLF97(n`q!HSJm]&CW<'C%@[<-D03jj),E&P+C<\cEjr;-am%<i21,Dfr%(q.aqm[+9NqU+@K`ra`Kcb]Rnq7EL$GeX(L2S"&eimqhYE]B/Kn:L59/h<'4,A_9`/DjJ(8)b>-&)i##r)Df+7W*kA9%9l,R?es%63.:0(BF;iBB$HkL%jB2A<8HCp04RmM389VnOVB\.PT,0E#0>'edfP+DgEQN)o;Il\'rRZ3tL0a5TG]=PMBd9M(/SQN:%dr+X=gIt:qh:0agj#eNPE,$h>UcVobF%YW8QPfkk09M1eq%+ql?LDd0RA(\Wp,eP6AG>]h2<Ri-39C6/<%M:Q]9INi.F1MEF/kCa%g]f=^UG$P:*?qpA=+[?mL'm$%WBK^4@40s(KdV*_I?2ojr2Z8R;$o<HGk<<PNg=dd@]oACH0/l&S)hEp_ouY/P"QaJ4.;Y1%%Y8l%+s)*6DqI_D@\[n;?Qth[I.X;2\8);sO"^A'"j^Dt;\;1_Srlj6#,2GRmZ1#%d[p0]^W2]+\Eg(0d.np"PK9Uo'o*YgS'EJLae]Xb%Rp7jWf[)Aec__(;K_E>3R8"JUTX:,Jl*KWK:YJT"RkBXN/2f]>CqA[dKM3SZ/u;#Y1Rl[F'$mCILg#k$9c"RXaUDW:Ai<ps/m\8*%SoM(#_@4>tfq&L\dtQo37D2c2oPD)md7Q=s,dZaP:u_=_K%Y6S\TG!N1oY<&0]SBdH7,.U(Od9;db/_N9oZHr)kTh@el7$GjXAf(%d1i'\2VfW-(7e0dMIL(.dtMY6KV!`:/"8.BQ]@X'RV4Tb=>!n?41du-V@1SD9?s^\2Oc>#!PZGjdDRHdFCD_%$$SRnOA-O'd_tKR%NgNNW+9pR[:%oEl891MJ!5m]5kTA/jflW@S3tNk"!fl[KY4R;U+Q`k3:>Ci#8EY$o6g=##Ett8@PW&7o,+9aXMojdV(N3SQlFsh`%_9=*\&TgXT[5*k>JkFA.oPuL3B^tiDAobd3Q#K`/,YB5hbJdaR3t+_bZ8J5::5QI+"sckN;T8tde*dfYEpBb)>4d/0hguosi;'-)%OZE0)]5^S5V8)0<jlDeemY3c`(aEJK0=je<[)d%Nr:a8>-.5NGmFfl'h$l67Y\W[DUh*GYiUGIS%7CoJ0"Qs*L6CPb]*(l(FUBl!%R_-r%[oAheTGM4g1.1\\Y')1YBCW\D(@5Rl.)F7WONXu"l7>C-Il^`Y/&tT+T03VR-d6l"M.WquR4aV>PdA+*?&:R`d>'^0hqOKf%Q'UhL),eLK]6Zh_QjVWQPok+40b\I272N9`L8"F",^*lDP<'/lD#R"sL18j9A+LPaH]5r,jqe4[6G3<@OR4=Ue@MbMAj8RCUYY;u%cjHkh$/C`3,*P0Ro!fPq2H""dd)a&Ag-<j[5[s,QB#7kPHu.&oq$;tVZA$`&IJmk4"OAPCl`NcVT!hRZ13h\lll#)H_(ArG-(gk(%H/asc%)J,PULg<m:G-/KI$-E*Se%+-&9h(0(`-16q1Xa>Qa,::OiWWk>>=LDs-<Y"BAD7Aku,*kX0pS!Fjd0CciP(GOWen'(Mp:k%AI,N6',eZ*@Wh.L)_\Hh/Ae>!&a>WjRN(\ChHN/"%<p[Qa75L)e.$VsglsaF5#K6mH'?>4>RJ4,Ct*XVhJeeq)kY=`GJ<r\6ghH'%nXr<qp<s-k6Cs4\)&Y37<h<'O$gT`m_V[G4NK&?Z3`<RM4-@b-`5L@Dn$uopN#g0SA:EVC&o58&+*@)K@`e#5b&7duBmJ!`4&`R0%*G?N<M$]6od)dnY)UmKqH+X2ORDa4%NQnYc94J=T#YRj#o"7%I.?/%Zm4RsMYQVF`?s]M2k7kr?;^F0CXhCT8Ppn?E\kM(pVtDQY%];a(27O0^Fp__kZQm.M=SRDdPq;Yh5W5A$aY'0t0XpjGO%)^rUPV1"aI/37L`?i>/f49kG.?&Su0$GBKlV6`W7qg$e5)tLKVTEhk%l_Snb<@Srb;Fhh"N"d?$h1E-#hjkId5-H/1?:`XgEfMZCP`d7RdErNui3(s[ID6fV+.n2!?FR!-B6fBk2u<r'qp+]_k1&C=i>\Ze%<A9K;HLebBmb+qljF%?-a8b_,VKI6+Y3TAcrd3:pPni$m]C=^qp*DKgYP\.-&=nK`pf2Ts^2YchMn*+h]=O$5EN]:2NpK`F59??k%GV!eES,D[I5-!(e\9llNVk-Z^WG.c*Ds"SJb_U<H]`'Y_k);-Y%lYT$KEpRD;ga`mR"f6H;7V1rbj<H@EYF^k(S,H"=_[Q#(-,E0%C[(R^A>aLn]_NP4KNI[#q\DlCgRF,f[+dZLT8MuWC@g'JR;Yii2YZsbhg?X1/(Y;M@3pQfDEct3M<0\aO.4kbTf:7=;,Vo+I)jb_%VTAZd"cQ1gOib?IW6Y6P2s0NU=4KaN:O[(:A2i^BQ0IFfggYF`=-!VA779[UDT,74=qumWB7IZWjO(!kCo_mOD*4TMbYjG4"D&^G%9Cic28bu:)l=a2Ye=h">eBt:`XL*[PkA&YN["S;d#/]4)*m\<"Z++jY_i/MZ\C6(M.;k!?[/>,e`upXl*'FcXG;fPb8p=#\)5Z9-%<pu%`a(On=$,<tWGo>a=/O%1EqTb>Z33T*"D#UK3I_5iR3ZG'lo-3BkLVD_$K`bSLa=bfhEp=l,E>Q[c\CNY00t^@:h3N3=H`^Ed%i4&e^bQ/-D*?C7rWUn)l]U%9e]AeQiaUcY1s3QQa\@6OWHmJ6-3XO96:Wc2A;l9^G7D''h736hdH9_)GXtkjGhE\0HQf4hQfn$El%MiY!T>49:CAV's&OcFaOO1Z3?\IFrt(1t#ZmS$3C$CL=SK;!=emY6#56$.#!FNh;c'\9c)V<>ppqO?@=.oW8GqW3.J<6d0jl!Z+/%esk(LY8c9S+0Vs1]@,+dQ?\<_GZ,d]aOjUXY;-5eagjOu)iNUa*0OcfpZW)RZ'^3OJTTjAld1gtkj"L3Z2d7X<+lbLe9aa7AHA[Q%0_8Cp,@ggE#j-[X^bOij6enUVAQu%T!_f'cR!=Nl'MX=n;(jD#1gLl)g)Ro(/=T1N%!A=OR,h&8"dh1Q0XZr][JL`3"*f(Y44b:>%GVFtIq''`fS*6\r6U]nQ\<N'2E0tIdNHZgYi't/)kYf.5S]$@ib/ZJ%mKU=\>fmk'mc#=uPV;%)X9i7V(Nt;i=I8US;/5h';$ETb%9_]m0#(,h3F#1$Io5:MrHi8]Ej;R8h^CZ9NS)CoPpq;.:S[M7>Y?u\.h'Chd`NnpOIlC>aHi;C*)f#:trRPIsojaoK-ZH7rr/jG:%M7[cqontc]K-uIE^":Rlgqd4n6LK.@l!D."o1U?lCYX:8@YZj+Ib\sf1,j`Z]%8Ta5dY#Yrk3dN\,$Pr?THj%+-*Lo`4^V.RI9LF%If>;"dI6ad^X[8`XL+\<_Qe$P)WG)<GWUdsYmK4O(OrLCE;/lkk5l0<+5a$kqY=>%-@_&%+(+MD^\CjHF%1o!f.[,(^JrW:`P$`j%\,+'U4q;S9?[R0WF7*M]Hi9\J,'!5eo.osOIdmZGg&#2)E3EW%nDLePNLuK%0]o+>O_ka*qSdApq'H()p\O]a4`IIZM"gG9b'S)3%M7emfr4E9\XaXd;a-Xr):WVZhIBR"Xe$`cDlPG&OTBKkAHi;aT[P60JKWMP6`98mr4t:&UfR*SVDtP(,)R#r]`H']0pkE%.JQCS'%pr6ZqdC8r]IimPr^3&l3%>4EO%<WCm`3"K^OfK)^oc$T5nD<FHQ2*E+]maJ5Z./OE`LAm+A)lJ4kJ8[eWugu:9i:Z]%A!5Sd_1*<%Xglc[1%4-qkuoIja#AH&4LX7[o.ae%Gc7.1Qs9Me^,nLJ?GFJ3>Q#`in3c+!(RFY,*ej1uF4bj<imYr"o.ie\;p;@mrqF:+aa"6.%f.VR-dSI.,me)LQeSb`.1.#qc`p25#:Cef-lPFIVAo_=WiUHU<`>aR24hf>4oa;q>k>o@%SWQe;onspQ5^%"oSk[)8IduTP#IA29%]@S^#@SWdclsA*Op\MjEo1X6uXHSj8k$GfIjl"DC*9UYC606Jclnc5d2#B#^*aC?D]Ymcq4C9NAh^\ja3At@qp>C?AD:,g5nK*Kp%Z'`s:`Ei2OOOmsr9*CP-i1rUqVV;h\:XL#_G2'*?]B^gtS&PBYD^F*5IZ!u5ICdQ.@6W68in72(4-f]Rpgn1M&=f3$fm]MBXSjS"%Y-*9,MdKO]Xqo>i?9;&ep89=hr[b6Dp"eZ.<:@Kd8R'7/ZF%)^E%C=h4[)GmXlcs3]!'gAQF!-K$gG=ur$YiArK_PFZh>hr?bXTS%f1Y;ud]^:I6g<aqnklt];>\d[ol<h(]q7OWG.Y.k\+d58gAR8j(Z!DA/)QgP^S!l3d`9SW\`K05mDJ;nq[mYfMdP(3;[ZrQQUeC5%C9*jd3o0Z+jnUbm4`(uGnh[EFgl>ur3P>61=oGoS;?<[ZQeo-&heYn5mB'>P43L4%bm/b>FTN1$E#OVqQhG`m:qATn>e\WK=$Z>'%"BW_X`*1Q=(nVnun#n\Ah<r,MU-$dsDIBR"r8lp>F`(-XQZpVNrUKlVZupW_esj3)mP&^)MYFUZ;-R;3%XpsfqX#!Z,T]Ud$hKZi%o-Y7`RnJ3;%+rR<?26,?qji4Xj/noH\_>(sL]3X>q6(%We8fQs!]+_p;mTK)LtT3-S!s]^2RRclI=R0`#P_tBC:U-(9J,X=DGMj3%beQag*u=$R\is%q7(G<.03%#_b"JKXj/?iS=8/T'Ci\euA`&*S:>\q>5<Z-dh\RBYXd=pKdficVS[IAOP*@U6fiJlFH2cEfjoX&b%Su;Q/k<9[OlQZA?P$c54bP^[t<[;$g(?IfrG5qDI91=8!._TuuHDTHdhg^1kkh@*)F`ZDfi#TZ1g7marA%&Zi*`SHYK1q:g;TdVS%)rf7?dB*MZf2G7'30]s=2_\[NQ;lXC>B"$-T!p1BmK:*Dg$O-%VZ??q=o_RrEtR,oR9+k1rd;S8',`+iU:e0ZU&m?8(Da&E\^,SN%HY5j_HWhsCCl+9F^7R8aq##])A`<uA\R/[,Yu$S=E%'U^m,4*KbIl-j3GTD::VY1_c\n0;9S?I/QSk:cZXpUEAU\-1'mj(`2pV7I%j]:>S!@W,5s0u.dh3g<Hr=)>'fi[e1o7026<p$mW?NVm7[E&![;RUh_\)t&"f)%tDc)k@)el1i*F7uGRrGX%@W8tqO`T9#'`c!QV%D`69RTGG/N;$Ca-BqD#"2p?WbrSNGbQ0N>m2u^Q.aj5UST^B?u\1-uSk(^DFSZUQTrhZp8d,m8Zh0T(JqV;"K*nB68;Qk9@o]N&o%J(0nlUosG;g"pY5>As4@rG0[UJR<=S486-dI;33PL4B.a==\Nc%i9Ild)tLn_3SAAD_HKKE`hi8B=515g\N47Y'(/uRpV-YGAV`Y%IpZH_Q.gGAht=!uXV`iEQ`%7gV6A(=ZYuIoI(72(<P+GQ^6B0*2m=_0(rbdc%b.%Qb0OX>`5M67<NG\8A\OK1o\X!!Mq6aN+RnJT%cu[_e*S:!,#+f-n1Qd!NZnQ64(:i.'na?8N6VQkGi.YP2:XfT8GZShnAD?k%WVM244;WL>/*sk*D%MOCB2eCTXnA[Tp@1omM)K_\%JB&S+2\;)&;I$gXR0A%U.?F*8oEO!hM_mV:WEaR3r+UGUf[&U+]^6(rg7H3GX</k_(0MU]`?&>Gl4JAESH?5_Vp'!QrMnc#s'V>X%9C+5m^nG+ZMD(=p!lah=Q<"chbmWO0p+?3f7s3kO@$eg:o*ZY26SE%q5Xq'`2A;,Qj]sK?^`::tliN*7(Yb54YGDJ*39#6ehif>a%DASZ(Y3_9H>NH@t-KjV)*ZQ^jj-ur/EMh6Mj*Z>tV0DoD>C=.IWSJ:.?coLqQAXc^?.K-R7cq'b9=5klk$5Y*/@dH5/N.?Ul)^V-%0C/36nBTb"mrT%c"Kno'Vqb*9_gbGmn<!DC@f]%Eo5*g$p)lNZg=:(bmG<?-/fJq@GKCk:KpBg6S`Uit%#3@[n"Ukt-@Y-09mke<%I/kKqT>]#^Y*EoH;j5%peumk_!S0@,]hedT!:B'-2#q-[-M1%rfS$j-_enCtRc*<ed"KY(0gkn_:76S^RqT@njfP""$*B;7%VpHB%jQFnAks`s$GIf"s++0;CErsD[q0N:1OlmqO"tZam3k]S:D$ouE5/6W_jc,:`jJV`jXM15bYF30b51n?PS^E8WoYC>O`4H'&**c6]%MD[.R]B-(8_Xc3K1HE+Wq^5M8g(rTK4RY/HfPR+:@\6T%_)J4`IXDa9hY\Z`QjL=>>$N!P,XC,TpSR4!6LO0hDa=N.kRo%XM`>!`%7jP&,:4;kn4!aV!EQCZN]l8?]6s*&I"Ej;qTB@J5C`N:B_![[8A!hC"`HdD<8MUl9jDR3,qrRWZLBQAH$IaLM,Pf-eB7]nai_4/0%^2bDGT<adhpP8WCHn`V%X8=(WQ]X&6e4k14dFUdD#09<+UJ:a8Rdb,i7]cnM06&Lo^L2$i*8!i0LF#H*Jq@^Ab8SA53t.?7KlM'>%Q_at%3>thmj[u'A#l3QCbJ_pOZF9?W=2J'/CVn8[UIgicQS6$HUn*LXQRea1Uf^_4hI-PVE4I`M2E"TBgS07Q**`<S-9QZ9$<-'(%\<88+\d>sd-\7M7/&Pl7jB]Ka[]?<Mc?k`.riYBhk*,(Cjl>k).:Kc/4;K`Qq4T&U;/Dn^#TcX^kOU<e0a;WB/H(Hu+("LAH#2?\%@j;H#jY<+JO^^Zd,DsMSE:EALHj\Oc2-9a%baVFT2gu_^+sijg,KEVi_<&l!E?L7R0U1o3_njN]K,ii`jI"V&#k2C4_%gWkFH+L2%lJS*HH)P`M8rJW2$@b8i(-%^Q+Sj++Z,"IL!].C^=Q!^6JJ:t?NWi0)'$)I:'+:=(,S59YN<P&+!ne2&EP!kQidVOP`IrDhNV]o,%XE`OhT8WQNH/WbXIkL#QaglE+IkL#QaglE+nY:QsFUI:Ef8Ff5a1.,"K!q&M2D9l3eDYDUb?'iqCt"r.bKKP*(Iu"-KKLZEHbg1i%^fQM3&!580piQbk^:ZW+#:7poP/@qtU!<i4a``6+2o+4X!]q_TDqu*]mqfTQYt)JZq-!<IS,K^`B>HfX8S\8@XL,UTUMH.M4%FRE%Es]mG(@9-JP;Q*;Xl*@K9CEUpqX&&gEhs840XOeMKS/b+j#^@R3eFJsQ)Ag$\8:6ke)e:1j0R1Uj&<G`\GY@uVL(\10?c'ab-1W)%2FcYSQd.5/o-NYenZF-1=7;P^D<^Dl=M&:[?BnaWmQBAPII@'+oo*V<C;J>84)5_>;U@7+bna)=>KuSEpZ:Y9SR'C>Ar<E*=[$ag%FR%[oo;qcVI^O7sq:9BVZRa^<l*Rb&A*MP+IHR;l?1PZ\^p?c&gK%=tQ>.;h`nU1<jko`kq-B7,"ufg,mB+sYT=a[_rSpdiWDd0*%IBQ=O(:Qrg]0NoDA"updgX%QmB=>jt&n57$0=@)-B.YAu\+7'%F/j>,F*8&::&Eu.P&*fD?K]'t/T-!<:ZWZDONg_IV]-FNbLWse%n%bdUb-e9taS'r5h%gLX7G]`]<k`YiXnKI+E<0/p<#9B\D4,E=g"lkqrjU.mo<SN9g@'Y_>@6-`gTr7<Q!`E\fP=^cPk*@6bp-0=%\%XX72"+kZg<IcA/fG7iD9elBYBX7<G5G^)7D*=\rouX"A*j?XBQ`?_Rc;uZN8_u#3uZ'R+oCOW66>T-r2srje(7s?k#-p`Wj?'I%roTpDS'<<nnTYWTX=DPK9('uMYiL4O/jHQFZoWVnlY5b6W?Z[0/C3`HM['JtW5r1idgZPjk`'uI'HEZ`i7"+bf)#fsQ\2#oC^1U;%j)&:%_67Bka`f[(VsWM5.WY89UD?%"G&4lq@$NjGnMt4XTBUKnK'aONm,\fLrUqE3b+$)ZrZQ?pm&Id%gcp3UXa`fPK/.AH4GZbY%$6G4/>,SV"mJ.^J1TSsCXHt6(GIs"j*&u.(S@U[1L:%lL*bD:GBMn?'b2Q+`lf._Tf2t8h%SGleLHIL(Y"trTs'GY#*$tA!Dorg]%V9FEQ]K0eVafGHNf5UWIH\&6slQ)DG^3Y:-o=nJl$NKG``soAPQ.gWGQKRkmg?REqq,P.FZR1Y1qi=b,bU1-nqoIqNjk'GtDRI$<%CX^m"YBrbi09o-OSUu"^HEsikW;\39S`P#t=3sQgII64@AZ;9Yh6KJHS[*\<V0:IQk#S+=X4Qq9H2E4ElM"0WFT'5Gk'M$E?%":%%q-L6em`M#+2tA$h>^_"C^"+^3T-#BPFnVVQ<k[oe\UE5-B0OJ?gt>'*p$gY<4<+*kc'A$mGp9K@l@T(dl.gtUoq1rWG`VTLrcaDa%A9+9J#X]STpkjQL_d=@iiOAILIMdO`iUYM5B1]Uk;uAr`OKZh*2RbUTRgV'\F).\t=^Am'(UodY6]4:j6LT9'6#m=f)W[7P4Bmhf%CDMZ][hlRK,#9#?lLL!)OEbP6cMl`WZd]"V.H"()9@!E=]CYqgTO':+*s2boLX(r&oCLbs:cI#3)N/0X99IQ(#Z##c%3lAbro")L%=^Kfd7(KV8bY=7u[A#?/l35esTpql_jjnOc*gDG?JUp.m^rNpl\VTjhNuL`)RpVL'Snj>Cmk_HRN]4SBosng_n)?IFRUBVh(@@ae%lI+?*Xd<h`l"B\Zf</qmhD^Ip4+BG/!Nd5_LrR[j#ru,T]\s^jd`[G?^TJ=O\9fN"F':4$2Y(nB61n>rj)l.CG60]u([2VW26lao%WSh^SH2[YaTbatsVt=T\G64Vpf0a;'7=BL&K2$aiRb7VFm6+2If!_f*d*,fW:b[WTCq.07Ih`r*Ohnh>L;/;qQVKbaJ%J?(*_c"f%^o"YT?d!lX]<fHj\')c;5A`1Snf4b%D)#>8m'GZ:HL_hM-5X5GkQZ&sgC78(8W_%Gr91/)Jd?2YP7muSfmY0%i4j0f\+\dBi5SCk%(=;"c\9:Go4!]?;QO%i_+FsfXY6QZde/p9qnn^1D*PF)$fP1iT""0T0pZCX`qlP+jWIMD*AL-?A1ejLK,F_6O!6_U]k`!uD\;N%Q%4h*6;a<l@bN/7XK6B'U9>qa1&VMK.i'C;gj3&j$M]$bUeVJ8i%j\"t_XA;#c["hi@")Ietb%7OkU=dger-TSf_AqB$#cY2;EHKeA%1_=u%i&\#tAhS-^(1o]=CfESZrc\kp4cd]a8$AOn%H.4fl6\PjaeT>Ni/S7fe=@@L>eR[B8DF#CpV*Ef598UknmEuuIr5).oj?Oh%Vr=nj;-hue-[#2J^TWK+O@=obo;h$sK8=sTe1:O`FT_p=o@R(?F3J'76`!O)2oIC6Van\AiN_^:RAAB1oR=AG9[-j*T6bLe]8Mt9%*fV.0M7_oj3&n/>XIdICWk6m@0rRp.*.&I&h&fsBq&9&'**"5uF4[e6Z%u_S&NoO9lu-(O@e@[*4lNH]m+Y;CR*;[<kopaib6$;=%@Q3@\&&1.;/j0$Rs2pPC"YT=slOq*;^aWTa83H^hPsU%Rn=jC>%FM3q([kqob\DFLY+OUpoka#(/CW:]>i/fWD!oPbm&c0N?>%m%%271*\fj")l^U:o[Re(FC3%s4`H8bL[ER_,%]<-=qhJs.2]crLoC`Q+b:fsNqN8iF!_G2"rpG.dZMcaMHm?$64c(gh@iHK`'E6%B[%YJ:K2#FE6,7jeofoJ6>j^os*SXL`E&0(@-!fttCX$1>$c>kILW?6'g:B_uQ9B)](+Ct'!=/SiAs*5QfGBkf2D-J<O^Y>0smH^WY7%>!/-6qZ5kq/!\QYQdsuYB63g\FB3.+Vt8rW;Z<q?_ZPA^QS2+8;g!9f^%6T[kH[]IHMCA<VrI,t7CSWQ\r:q2X"f%=6J"kH#G-^-%Pk)5nNJEV!f\(->X,X`1h3)Iojs\I*qD%YD3ibH\A6u`Gfg]:NTAP**@6S\"J).1irg:A5?`QFHs#(r,(S1ijK.@1&X"Ta9BD^<3%k5)>13,Q>^.D>:fFmaPHl\:_+f"]H/%#"H/k$9<8YK:'koA`oc&[=R!HraRNQ65DfcGF\fn7K.1?=$oC@H>Beib)ikrU=I@dqbH]%drYNJ+$=Acc5#j$pciuTSfP5bjSn,Up.Q)b0E:BIHaY/hae_.:s*rTU+=V8>n$^ern8@N&E]JZ?2Z'-8=?sVQ2kOF1H]>e0h2Il#%rt>7Mhkls0'e??K3df<e\p'L_Za*_Z5.fFljDKmPDSQ$ghgamt)r898.gW`Ah`K_pAll9;p(kfRB(LP4F:4r(d6-hBh?&G@)(AdA%T?D^q4u4;Ma'hFe8FTE/rhKLds-F1nDupbrK+KX`Ai>-<3]K2`W+At-b#[Z`_.?*q@tMJqL+hHBO$?dKAnM(.Q)3hrp;\g8qZ,Zk%4NT"?;:&:qJ-!gs=kBeB)o.\i/ZG$D;`$a/[uIJ$>6S#mFY?-5R$MK!mkZRiQO9%PHKqJq?*L"=(SL!rq!_6\Ti]JmYnHM3<UGBU%_6c0m3Y86&8HhhT9c'\L>!XqZ`<4MhJnBAQgh0Sl.7gc3.AUa0/53^/J-WrRF<Q#O%_rs^$ZQL4JT7uPhAsa"-oqp<-3iJX?OYLA%,JeZ;&"1UAjpn9a?WetmO)0U#/`FcZOqBY-[WV;OjaMopn.j-WIo2?kbkFdmF.BMAq>'C=GL!qmh"Yg5A[Yag1_g=*(2V/>/d#p$%eSnsLR8u"`9m'm%VA9lbe,a#D?]=Rr#Z+TcC#g82g2b$69pN+4?oVf!M)BSEWauoe)9D(#i';hh3$Y:I].g#jN";oG^f2=8dV[HM%h1Z+SO9%>b_6rBYnI[d`4/6t<E$4lu1i-ag_oWG/=O;Ou1M)q,Sah8A'eBM)XU31r5aIYm&(\:j'kB[`<=:r&a\<ckX);s"36Wel%Wm8Zg2(dLi=?/gZYUuN7a]aJ.ACG(i<73%_oqukKpAeA?=Q2U%Bns*hgX,"#@i*\D<J!d\8dZR[.Kn-mM5JqTTb.KkD'h>$TV*nf%%&Un1LJi:][M:9gQkl\&G_A_\5ua>5)-3qT)$H-SRje`DVr<G_%4hT)-=@r0`5;>eH2oaP6j*VI>7:^Z,/J@)\jct`D_Qu`=9Ob/%'?e0:8Wma[[WRME9\X1&#4U'7(98l%=r%?V=\&_s.$e`><C9mQ:`im3daS9`&QbVSYbrb!pd1?a-r<p!Nc\f-_h(`9=iJ0VK;?=J%3-R]'b>o1O(JM_uC*kcTR0Wi@Jmq:P:4Xk1mSmROWX#:q<;7,8)C$A4BGsEPJ2"u>/E?nD.mkIgM;hls-8^<'-6QkK"iFf/_\3F?%9<luuC*<0L@]C[t!QN/((N`qPd0f6<kStckiW)gnhJrWt,urEE^^L<1"bf$)9Z`sqTU*kGTMML0=j^>/i!pF`b)h/4FDBPgCr/cp%)4!=f+N%*O3M:],W=[9=##Hk4'fI_AJtN;RE/SNG"B5a@`<;J,[ao;!dgCm]:cURh5lUtlg"ZT2pkI>)@D1XL_*kVI&Rt&G@^*]%%Y^#@nLd5/DYiI?l_dq9F!&6_m0aK1IP<h_\!(8^[S(G!G(;j;VBdma3Q9hd1.h<cLSk0J^U09g+=f5/`V(o+XR#7fT(eds6#RJ[?%VJ4[&`md&%Bp-SH\ti5(;pl'TZSh%!J2P1T0f=kmdrgA+[1q[2J7s`iTa'hRg&eg=_u_6'.b(5n)E*5hfH`ct5mUk1;l@'7M3h*K%;a>/N3+X@(k1'kBgGTDK](!=#<.NMqU)^FHh&pJX"GAIO#)a(^A2$`@W>)==J?[RX&<^8uOVQ!roaI>7K`PXK+l^<V16KbA9+?N+%/;[dF0SrR9/hBJ%]n"OiK5?d)#gsGb9U/_`3fFf=1."s2!C3j@$ineT,-n$W@VB=-7`#nZb*\(/^EWpg!DQrVL^EX:eH5\\UX0/]%kV9)-Wtn@%^47E5`4C^JP0@^`(2mDeU)MdkChfG:&Ksh%+@JMmTmA=b<epl<-u)B*,U3SXF:J?9LIcuhZjgLFAk8XNSZ2biEErcW%\Fqr,A2K%?ZQs;dVJ2b86W9te@6+\+0T`1PB$tDsQ8(4C!!Zn%^iY9]1g;\e+PhT&4b4`p)41M)`H'R=m4i>W$rhq2WB(V[d8>65%`3]do)`09Cq]LF64\^kC1E;k<,UNMg3+Lr%Kk(k6?m1Wq:e4+]@Bq=I.cX<,T,&N6(FE9[<G!/BD';I<KrKgj<gI;``KVW(#Qq-J%.E>*_K^"4'KP?`!qVXJq-Y4kc#ZFFu+t\Ei9sT@)7<MF-R$@h/flg28@$5(]jd:c(OKOs7&BIo$Tr1Ll(1=.N#@WASoVrgGM5*d^%QpI)l4'eeR9JBU<-f7B,L+*ItR#.*5R34bKUlj0F;N.#/[@%6L;`1Et:g7]T6N)I%1c^&2?t_Utcj,Zk&CQ-OR\ot\!?`gV1UQ@W%+(`9)AQDV-Am1XQp(2sF.0)/W";2B/0M)e,FO_NZnI`Pn42>&#;_?2=QO"6Ka9,?lBDf^2#SSE'"-Yn6JZTlEWJ2:D8VY.3Zj[PD%"I:RJ<44#jBN6:u'fZ]IEWlqE$&#hja+65T#)F72F<F6o(g`Tj86=6h!&K9toY>S'Offtn&EZS4(Zn=;&sDH1>->ed@'WSfC1t5i%i`1LcbqIKW-96]9Qm&?#O`"8'0Zb1`W<e$r7R34]9Q:8P81"dHdN,_bC'\7*lj'4QW;/:k_R+ij6Z:!Z+B"@.P+7Yc0krJ2WB*Yr%JJkmP1=;QLW(d<?F[pkB9%VDi'^1.`7E%MYRR*;jKGqX:R;c))LNU[(!1;bD:+"7U&)5Nb0\LWh5_]W_FGFua_k]IA?53Q(Hk_SE%kJ.M!VBft617%tFI[DNr=_ogED/!tDbX=UP&AsgU3&<FWatSU$)eY$tmH`]dO9oPRl%Cff[QI$ML>kqheNb6S;j,61.F\p3-V_pu%-DZAsV.B.CP0HhTh:[IM\kOkr(8LD3;bc>%L4O1\%Y.`gF;4LF)'H5$n4F<rI]=R_^(b#<&Y!b5`^#?>U7+2MKA#sk<L==V-13$<%^,J<%Lr\hDbFm5k8RYI+[)"&J_/)]k=<Iu^.:=Hs[Y8<*U,0)_iepR'Jqh8t)X7;Y;,q%D`'SB="qsL,'G_ZsKLUbIlP^:o!:+;,%Am$[B$VSr6(C_TF[]H]P$-e&1I:t)6<BtcLWle_L@43[[!c;*L@V@<W+E?WH&9)eqJ#Gq9$>Zq5%*`J)A._(W,uk.X^&^RI2ns!F%$<,q,h6=-q2_u!H]W!WA@]38GM8`k]b.poZCs](IF&Fk%TWpJMc3K@@0T?r)d=eFc5QJn=NXiT7AVc;.9@F`rA1JWBCoLo-+:q!W%&>l0i63n7%#gpHtB+UW9DLaF78bI0@Q9^h3YpbZ.Mb0+`qQa^X.tU*BH140p>8J\I0FJkAIjn$W""c6W-s.#8!KMf48/ATdCD6f5%d*P5fL^515H2WPa8`:S<),/BX%*U7HQEJ@e)DK9D##Qt9+O$(DH7ZXZ0X*?T<_BVKC.VH'82)EJ\&<AOel-j=#0:EpMTSP*#+ll6%U2%!-'%M-o*I0O##qDag3p4=:PBl7LK=\4DJ=FYnPm'2\@[JXi.[/Qn1SSG1_t][fQ:2UPMh&5k>7hPq!uA9jS(<lLW<<h'-PZ(d%RM.G+&\aPG$%o#j4uIH,,>_p)fG=^KWlh:)'K:(2"u)/$@(^)/8L=+&ePlmWBaP]l80'AlJ6XLE<0N8?N/RjgZT,@IDBu;(XCkHC%5scHF/YU,kncsSc$_qW::IY0&Q<DR)6f/k<0I2q&Y%V02`@(^?!J^2>(?e^t'n'nXa\WaM`3G[\5\^9XTlI*4'"WiJM`S._*n4,=%%kXT9JYjM[Ic)iAYUj+[@#/%'BsUeDZ"/Pg_\kbc2DD?>71:s,n@N,gNfaAu94oD4lGrK27)!,dqXB8,RjnDJRjn\B0g=#prFd\#%Se4,VioU69I3Jdl=e"+I'Z%5UTin0l'Gd??(eiM#f*MZil]@6^BkTsK%Ac6R`5D]8$k2@(+=h;t!KYkGd9AR*%"M'LnAqP''*i2\%j#XaT$LSW0.jM`0XNS!'mL`P#3fihUT;ZRiMd-=?fScU0H.:sb#EOt[$kWidrARQ85V5F!fT)u+Nl<uRUf%brND<Neq_`N1/S`q8%!A''77T\da'l4[,r\-&RBYtoIfODA($]A7ZDT+h^0JG.Q\<-h$72r&0<sB"p)cJ03d.i?l"/mY6E#7*JS7WO#LYp8igN%+[9LTQ0%,.AC58'M'?U%Dl2;S]MXSP>6'qUG.'=Nl_@E4R`g!cX`s0PI'NoHs2.9psa`:'hrcB3uSf`9k[#$%1NO"O7)o]+5cr/+X%"W%tuA%a&d+5!T"+%CbgZX_Rs>T<!6q!s5H5+5lk#U[TX4d.>A'/*D<VQ'LVV\_PiAdEEQ8`/jNo9h0m:sTFCr(_/4n:UV=GF":'cq%1^f8%-0'^cM]IV>>_pju$fVZ!MADakW"bSa)$GW"ASOo11(+l`aV[iO-tKNe/LH-".OPSCq@SCm:6rc7VJHp.9o!934@2LMM&Au6"_nI"%U^t=]ZOK4+-Ai\(`M6-_)j5dG-cM17Wq/Nl-5QO!@5;\=+N-['Pm(\,"p$g8[Ug7qcd8#H+Rtbl=dCL5a@8^fbKL'c=t3&N[haj!%)'aVd`T#6$CpB78(odk4as=,1+lJ-\'o"Ee0KDh'XUa."@%nMI*)#t1$&ElGZ4%hEJ3[TV-Dur_H[2Q[*A2=T%[X[J_7--ZLU3Ps%4T(7$MXAEpV-(6l7(fCk8d,KV>a[n1js-id7:i`0S$lpJ^a_hRA_JKkWXVo5)fZ#%;Ci<aCm-d"1l_^n!C^S<K&Ss"n[Am'akK7?%B'H[DW8c#T#RfnuKNZGscNDY8r6ZDbBr;p(+@m6RXJ#\R!@oo*A8W(>:,TUWa>"Gd>6KW&?fq629.?#j>O7fTO@3^.6\Kt,-)l\S%*21JWWPsMr-uUj`,[5G#.Yh/]c!a<+UA]V<FTj3MN6lh?6=cPgYmUYd8nKhN&lscWEBSuZYcIrcZH_s+&HW7^L.3@Z[aD'ALe[`:%_),I/br:gHr#C\@U'>]>C'S9.0&Sn8(u.JeHZ3PTbf0<89eu/t_\&)rb=<\Cp*pM\$gbZ>-DA^0@B<,Hi2nLd[m;PN2aaM^gk^XJ%H6\X!k5.c0$b2U;)'jT41k]6j)4Inf_uT/r"5@Xt9L"36IkO@0I:7erZu"-8jUa+?<>S!p>aUUbcC"M`bn`!)^hh#$.*%0TYdSY5%XFIOr?(o.ZA<2od.Chp[c'Arf8;cM]\.['f)'h2sG#6lO+W7aF%Nu/!N<Q5E_,$9QDDLJs2I4O)a6A`qK@f]j+e)T`laRc7"mNN*%"]Z+GO?d<p3!ed.RN@un@/G!]<BtNnRHQqPr_i)B"e/N@$p]J+iW1bWLCd??C^X/cLoKr#VCd__>`chMk0jRp*@r05fYed7gM+I"%aN],i#=uM$m3N]N8GFZt/_CDW+oU>SWD6Ph<loco1&f>@#;NLOba1sbG?-#BLXY$V8.XOo*=fk2P^j#lF'B6Hkk=,D.uI51;`pme%RE4[%j?d+`blM7+KNi.?V]?.3@ESlMm0pikOa87u$t5Uh(]*>^WsT)_`Q>f.<TUTp`H8DL<bOa;b>,nf5/aIKYLQO\"WZH6A9/&/%DcmkX>B8^+(g3WUEFii4$r9X>jN]OhQ!gC*`@75klN=eL2&\q'N.)TUg^?Drl%_fOgsQRo<(:o!gQ6rRC$=%ZgU<bpC'Lm)+$3^)%/=L+tW,.;k5?Iok_%.F*/1QFoFH%plG-6lWC6c6-\Lunr7M#cfL#oG("L?-q`jc0#pC`2THk:bN`s:'nMb<4bAr?[)-N3nq)^`$J%r$*EQ'm+0IR-d7F0]JH4=.'C[nA?Go!iFA^jP*R7fB,S=%$`7cYb/G*-0LoRc^M^tZj^h0"W_CH'?^7"(HXL/&V`4K"$*)2qiCto%Lhh+p!<lnp.&RC>U6l[!P*5foC\t\L>B8c8?Z?%_I1[S*Z-@3mP:%gQ!!\D7E,6e<`o).g$TM3tN5eHen$CV9Z+9Tho#Q@Q0Yj3$%ftH(pA<Ers[7U[ga+Vo2&mHA!f2_L-9ai:U3A;Htp6H/*rjfdlWhcgM\PM,.7sOAqAe47UZY"%H^`#<XUQNql^q2<^cqhH[eIs.W%:NoCA$Y.9Sr>Ml$QKO`5s69"6\G5Yk+QcZb]G]AhjAt+SJqQ6/4^eX%:EU.R+9lJAhrE`d\4sV-@Lcbib"krJ(D0MQ1PP:J.4-lq%0R7heRY[(9"JiRC#LkO2+6]%en$0?7/@Bd%1cB</TDA_;ndlhZk+$j*6P1n?NrY;-"fTd+!kW^V5U\1?jU=i1a0C9-@*t:AO;Yai%I'pjX1n#f+I^38#9,EL[R%XD?(5])ol.GP$WJE;n(9f;P+\W<kSPBToiY02(eh_m[bfb-d@%IWk.mW0PGT[1H3?U0G5^]XU`\TG*%;2PbWWpoi8-$Qr)#)4M12P]*,93B$B#JsIOaC`h@A_`*i#j?tjDKTB78;-'I`+&n#_:^%=)e=7_or3Ln,U2U7FmKG9##!&j/iTFb%FjNjS)D)dQ,5>=Lb8JMo7I](1%[o"(*[M*NW(.,e>TaoU)BpUAfZ&p7<fbht\Q)ACf2]'7J:P.'A86i"@jmS/,0LA&k@&;pV/lqK%[j8]RRnaQ%p$,^mN7pDIZ34_pO4H#\&oQ[96sUPFQO+j7r6c/ZRu!K,M"_smZDiGXk\pOIA?ALAkVX-Z;S+Pj2<*N%8#A`oj2Z[K%4-/4#=(@;.!J*64#S*V]bsi["cYG\Q>.H0#_J$e"6IN9:e:DVU,*JCDY?#dr,Tm/#Nh[0sf"cm\Kt,o9]=^4_<>;X?35EkE(LKib%&TJTrMO9eOO'C/1Qcb(2V19.UACdR"jN?_J;p#rnY%6UpRJpqV_MWN3R!<Qr%u5V9o8OYc^MK.\<jU'fAE<aX3^iSiYC(iLm!]]D%5ljh,Fds]],CVRec0&-O@fV[u^T*FoQo[7al&A\m<B6lsaLZaH9hZ[X`@,25&[>3nZZ7!UHe\7%?DACme<&ZjBptp88cCE7bH+nI%4k"j@,GUZfTdUcLW=1U%k=ZER\-S[uH>+PmO)l6E;j!B$3]gW6(o0quC4"AGHgJ4C&]7Q>O,B]6f.]RQ5X76Z\ngg^ei,7<bM6Ur%-T91C-j!<4$c;;UQVUE0*2X/=e9*,pa1Fm-5fgglFlIEDS"!i_03i:O'pq<=k_RT:4"%<D/Nj.9=,[m^)2ZVLk=ijDTphu14-A'n%R.2qBrC`7P!Kk-@[OH2je,1::%jUgr\X'M22WKOHQbUkm!07_^HZW>%!b6=:S77]#Ztc%snOAIU%G9Ui#Aj&SGFATsn)pl[3Gq8A%,:j!S4f(g=(e]OUVgZTI:Q6.K5TEdO`bLS#R_N4E!f8SAg:PN\gXtM=((MPM#;COcdAS&i8Gr<^O*uFLOWQ:A-7:_GX[mm@jrRco%rt]nZ6rq"iA5#**,S;_eW&Ac%L_fE,,SQERYn;g+CDG)OmQ\5<lK6oj.EM?&1_Mr<_Sirl!6Z_#_0K@H+nH+uJj;RX-"DW>`0i"5%>0j;lK;/82mR%p5N*U4qY%o0*'.]qQVqC65XZ4CM)*G'&02^AGOC$V?SI!lQ/-T[BREc.ub?\[9H7AfI'Te3B[JGJClI6J*qflfY%5,43KUcSbFJMGe\A)kg78Zf?S3:BhtGX:nCc)2VILFm+A`'T7qdgMc0!l>7aMn"\>McDl(jr<:(&C]b](mfIY-m""7=7V;P@'MG&%:W*:X-]I@=O9I]MK^9Kt,_S(eE-()&nOQAJ]Sel5V``15WTu^u"'aQs.b<WJ*H#=YNWbKb0EA)=e<mO?G936,ALr1?o)4`a;#C*:%D^Z"=8qHUa,^1u'J8qjpCTI8;*1nK5'kG+rg'ojdF<H9S?094jYY;+a5PM=F=[^&;9![i0kaD^"d0XdX-.<o3^-F-ZS-;N\j=Gt"%`WKZ;Q7inS$toMWM*b:aX31da1g0?aM1@"#jX0"2aI^!#Ls,q)g>e/HVj\Iu:I%H="d6C*?n6!k'+lTb>p`23<a#RN4":.@^ZXoj%.#HW&J?1AL4qXO(L@W7C]HmdjbXLZZYmk35h$4STV?.uj;ZgrYY6WZ(p><ME1Q!phQ:3q_;\[;JirV+K9`:]Z-d/gjGf+*OLq_i!%E.,$;hq2F[UK2*.%kDpZoCL$<mE6&"#P**LpOLF=^O<6\Y)gh\7S"uMcc8sA=Db*/&"&?mnQ8IFIUL9-X*&nH^R76"JWRnZs2c<>%,bbpp,;T,&`<;5X^)/;jU/4T<0K?!oVVg6=-B/FC70@K4.IT"O8'\DqSYXn9Q*Gj<X;h]Rbg;p&\OmP/38!Md:2]TuG$+*^-m]jh%<e)g#?3%R%%G9'a%s-StX',@h0%9=jf^RSJqZ-8Zl$Yg]H<@CQW$d\C"HfZHYoJahJ2udJJs@0DbPO'##CnfTAqa)28>tXf33<X.%SOOL<k[!(sT2bWu3j/Uc??^BE:,8L_@mG(;18)juJ7!ne,>_$gDfn<nHVhpO*Fci'1I!Z(.i]nkpMIeTKUL)3N1NS-egCm=@Nh<i%q3%?RjN0*i\k)YR^t.&2"/^mG^D+$J6llO^5Q>mC;u@N$[CdWjlbF?I-T:"MCeX0Db"a;.9a<6mZd@42mH*#[D1ji@[D+-[0V5P'%<Z8GPbi#E1S1p)X4`$$<Gh2_7@pOgYo:9J+e1SI>)#,U0nbj3EHOp<Z$[BOuFZ8knpsgYo6\&]ac@I/&6g+m/Q`X0*JPGT3)e]Al%\>r6<<#-VN*tNM+%>4jF?R>9q_.&23PC(Qu5`35/QZp++!/BFdiQB*>]<:Wpb2rH7_PITU$nl-RFOK7gB`Nim57m7Ulm`H<r-J"c%!$)C<_Wk>_KUS4=3_$36<@\9b?aA6NHN&G^Wm?cAHU]&'\,'G%OT8$UMgOtFN4"oI'.=-n=T9!mN_+MfH["Ji8R=,F`2*jN<j+B'%kXt9+3WGMjI3VYm`9uQC:!WcLJdKM2<6QL@[>1ek;6;Ft6rAk<k5535Kpt8e$n,6<9PSuB@KX<Kli'?*EnEf-C1BLYM[XF0ej;pd%`qkQ!Y5Fgq`b\g$3es!#*1\J<_ELE_1=huWZfc^UH8U5u/UUX.L(+5CJ&%QT%Hfki0Wo7`2+2CKc32'*QNAjuX;JbBW6Q12D3Brt%pj$[q+CW*I%cZ6>T-$AE+;mpl"(7Xb`#ej]!2d4**&35^ll4?SHt56@a_O^Hm3Y0Cpcu?&l8n<<JR*;J$tPq)??E)qR(h?OH;Pj(%+e8hAT'V^a-5$l2VAr_+eSgX@joI/i+0VN-VnX+bf6m_KH9n4h-DZS.nP@,M!N^35ng)$7]B-9dQ-p$g:>Ism.PI[eAZY+M"5sBu%[XfL=a#YaV.M,'-E*\eG$aK,$d*2s9OUYN(:uuf]Fb'ArR9m1kY_7GIn<X;&([-Z[:[CZ[e,a$qZ,kS8D]t=gc@d"pIP<9[-po8^%CkT&T=<"($kUj/R$cHbRHdV5Yh6c(`:kf7:`g+H\R7H,5CRh5kVD3*a0I7E5bg,:#QAa%aa8ek&Y2M1bj.CEH&5][*V:`jgL,,IF%^ateDm)AV%X*[-[g,cKt2&NgjqDC$_W@gOe(G(H'g.K;`Zf84%^Cf`WHO2=Gf,g8;=?$X%)$#)d5ecFkXLPlG9n-^1*1MI5[A.?+%MY]J&_MA(p@5nt[^`GiFD*%HO]Gs>1%\uF;UW/W,m.$_EOQbiDed)jS,0L7?VK#n0`jEE,2Kc3Yoe"M)aN4!0dai1MBRFMeY,%OO%<Z)?CVoD$18Ue'%ialPL=4.cfHgU:,fGq8K\5Q82V&rP5G?d[lEL9!R^DJ0.>BP:gZ(lP[TS1gh4-?b@lR4MVb\-In`=i??SQc\f%/Z8i,9JK@Hap<K=n^.oWWcI@G=t!oL%AP-%^bq71((!JhT9/?.`"QWkRn/V3Au22RDq]XgVF1/?k4'5a'@;NsjN30#btXl4&oK?g%@_o8d'BBLb@6Qn]<nd3JGdD^*:%J`VVP;g!2HHdD<3I6<5NtR`C8K/6&qS>:VC@Y/0]N_<P#.<WD^8tIQ7PTRA&J"(j:Hhf^J`$k%L/ZTHHKCJI4+TZf)blW/i"7mug$c4)!$$7q^bVcgRcLU`[dk,u&\13]<4*g/ri^d)_0Gn$jn.0JSHlU1"mhB/!clsdR9(jK)7_m%%E;(m<;:c:@!fNSk30k[/6k1lJg`#Ko)J_2a-LB43_j"_COuUR-.])Z#ia@%@NLjT%g@->(J9eZJB/=--ql3f3&>cON4L!oRHbi&W%7"Ocb0ElMc%qINaGYX3Q,2R%d(bi([I9Le_1>3^2Dp-dj\+TNt3ZHV.@gFo]P#$Rk>C1<al.?FJpDWalT<7<c,,-@?,o81]Sr+9a%$]h,!XItNjE*.9/+'H,&V`O0B&"mW;kXHLiUq$0g9iA5]8\ad-`i.RWBqGp;C(5rMe$@0cZ$i^$Otus;(ioerr>lPh;h/l"b#Z4m%,QYQcW4pgMe`2TeK[@gSLi0WeL2`n*90i5LGTu+n4L%n@YESRTbM3Y#G-bM9of90"`<b,E"q,]6)N.ENCsr!OTHL^KPTkW-=ESet%"WrS\VF0J/\bTPU7V%<L>jBpseDo5$0"I)hD`]Z8-!bh39"$E7!H4mc#+JA+G.2T9$$i1J>AWeH<n]!$#\:UGm6KE_;,m`)6f)p2%G%S'6W?l7q\Y9<m:fSbi%o4_qeuE5W$r46Rmp5\I]Ec;UP9q_m.)`9mZeX*kn5,LoI9Dd:`u"C,5e?`k16*<K)ANkTZ\m:5G\a1n%'n:C4QPm.7-K50\Y4T)c8UVZ\3l`&hYVcpO#d`>hVY>o@U!pRgS^mLF*%SFRVsFmikQBdQDt,eN*G<+Y0\m$_U^<j_7$;/+=<*)E%Vh@9\S>-ZQe<fFR]`:Wt:`uQ=,&lgJ`b#KY[W(2KD\!u621>$W;Y-`.$I#2O$=[RrGoT@@[:^$V*btQ+U%c>i5p0M[*PnMuh'uQ@%%pk)#6PcsAFQm1PFQkRfWu`sP"]@5b"CtnJ&d#U?6[#)ZH$=^oj.$MYi,jsb<E<!I:Z1$Q6,nd#X2nb^jECXUFlEo<2*<_)#7-Q;%I_nnr5jAoo#=+YEKi"lR(-SBs`-U3s;CK>V0%_E2%g;(O'+!1U`Xpb!.Nk#,9_@9#9hK1<H'7.h')Vrs6JmSZhVZ9CjBC#,?$L1c%0:I>'*."DJ$L>^5:.<@\`?u3CV4394c2h3VfE:bn+Pp6IEu!I[F=hL1a^&e)6kW$?Ym7'9W%^d_6"RF-&#M:$kKD^H(-.p`Z5[nX%VR3u)^L':4*3tbfoh%rPp<=2<%NZ:a3`,sR7tk(=Pq*^Qr=$cE;Y4G5.h[q<JT.Y0r)[Ua49<[ca(6XLH&0di,QJ_S;.jZn!1BPa%!D@$9E:]p/F%a\-IrLd*CcZM!FqGS%Umn$[$YqYbGSV?U8@kUp3D0r#`+O,FeHKPc#W!:-pj`D]27YUY7%b\,,C5r^Q[4b,QY[Tq%ZBMt/GU$6BP")>`a+,Q^#C-g%_jq'90tPuVW;K,<EH+h4\X<\cIIE7k!S3DgPNLf]Un8NHHTD=mTHF#5N4_:s_:j6k]q*fPUoM4n%Z)h=HFJ5Uti)6DWDm=ALg1t5V@tW.Y-7^3#,@jRua2bDFfju)R/AXok]T1t6P\-:.9<3D:rCPYUf@>)^Gh-Z<"=PHK]R08416=0O%p+m_#[i.:U;_bL0jY04l'+XZCH1p=a_VR'N$]mcpW;JSsSVVfX6V5Ra&;_+\I7b5!G$-.V.4+e_bX6-?p;!])n@IX?`0N,-:_U)F%*bg>Sa?f7O=BfcNgmog3+N:nT&T9h9j0nIEK5?YtCk_`-8*tcM4.=C-']8^Y&SNo2X,$`0$W\Rc"3Kk6`Em3D'0pC9\CW%TBUYfA%1LGBpC^%$tiqDHE"62_#O@'YYEQIkbKL0N@Q8;YrV-<raOc1Eh:n8-=J/!^kTsM)rHpMe6Yh6t8aQgS$,cD2d2hQGf[iqs.4d^+U%)Oqm=bdO4l&eOU=YhGnKpQCl0541l3?:[R5-D&+[NX`;IdY0a&#*Y(0R,J2t\92k]>^X!.)8&#166uFhG$!;kMZT)agRR7rnNA_j%MWA%7Xf21d-#pL,OF!!u<p;/.W5Y\\I8icN7J"n8f_+mWhFjCVG=f<J.(UJ'5SWu"7$l$]Fgmg"1u0\<Pl2j?R8L/oiSQRahI$6O%*Ab%7QL/0Q3pEfne&AZ[rM4b1GL)KEb6PN.UHIZ[SL$O@)Ys4O4!.gJY91Ftd\+n8e;q>h-&7N<c+"9rjhEZspC)Oi"\q_\jb$l.%?d0Ls'#E3"fK&qWq\W]T!"B/"f2(jJVoI0^3W+>t^UFF9D8o(hjiR:FH/G[dW[%]"YMI\-(n:&Cn+Ul6VkUAehToHQZ^:Ldh?J@D%.GigCG:)M1Z:gfS[VO4?cP`=umB5-2Cl#Vrku.TJVU1RMMCH?*g/#g6k`e2ka(3\b]`/Z9fW\46mDcr?GFRU,=_!5C,"l/8k-ufu%a\K'=MX%uo8+F.kM$3[Ek6[*'\KBI%IKFH*\HeH^oR_X-Y?T5dd</@\!OaQ3Fp4dOkWgCel64)<@#enrH+8AQqm]<@0*$e.6EQ7\%;A_@DY-%YW39WQ);q?VB1$D=]OqNp_;GCVlI:;Cu&)5%V#b_o30r[_Y<U0$`W";oMC7c'WN-)7_Z&/bu-;NSQV4g($r>UP]Vgp52%0JcX)?0H8Oc[Ji(fi]1d\;!r-%"#;r#\c\nSIJl_r[m[tYegm,&4MT`/g(DIP[J7FT/bmV5cpr:B.)79Wr5bc2\7:.P;]ZbJKd^G%V7=h\gcosl<OmKBo!j@;*:dmu#rHaTkdh\h3q?^D9g1V?7BqL[o#n#;6ik%g,p=<Qq8-.+J_4K;<o/OT8rCG.[K?PnKV>Fj<LEql%nsDOJi8-4>?cEGaHb*"q&>HrGRj6d[F>`>Y2FA7moYWA;.l5eJ%Ltm<[_QO+L]X*DCIn)[=>JI:mTA_8/LX9kBVt8te"nV+q^=nR%(f7Jqr04*(<[6p:l<lm`Iu!+u=:)i)K_pS$<:;=fX_GCb6o#mB!T'q"k,FcIcA9o"AF1+Rh8[G_\kY"Ypa=!g,dRM+$Rgp8N<L/q%aFI9I#\:P4+o`=p,LU6._NJ#*@O)Kk]4df(<ls$@\l4rOPW9%Nld0e*&C.Es^m\0'X&k7?;P.mEQ\ss!%r;#p`*52UEZ]jGe:8I#%*tQM@;p:6Fa.@^M]El;@f13<;$j_fS(a+Gm%alup$Z_(JE*s\#Ac8?c&]h>*AK]F"fgucneH>()OQ6'Fbe<:B/@p1gnQthcI(F3*%,Wr^G;_!<R1mGYH@0]/r;WDC7Rn<4)8L5Zc7nfPUFs8JOK)sS]47Ll8BK4FEpEn-*b)0(?CnM#@$@l`Z/g[1lTrT[q\Hd)SC?lDS%MJT7qV$V`D&B89eZA_.@6>?M_,jL@d=>nP5W,<?L'IN-=\1ANrJuL7fSd<;;;H$kt-R?,K2eN$iOU@d<r"%q#U1]@5(F_c\_E.`u%;ic^-fhAU\:f:"_h$0T<.C>=['Ia[uP=@)<ha`;@(_(h$jVM9l3*7lC&DSDF&EaFeirt@g)"!,U?8cAO1_V%K,S92iBmXm0EkVYE%6p45>@Dfb9iC8mOW.[pI=i[it=pAf%c3p%ML=ZRIko5/Z0('AY'AJS;3*GA<.Ca])YEJ8Ue?7q@kDBe$c^t(P=dLjg8&MlN!4_IQ%HgL.`':8g>1U61E:<e2s"U\kWHAre(\6DKI9q99)D&fW\$#ZP1fu'",YWeshEAbW-iFWr575s]NHbLlp&qo)Q]>0UC*dc7K^dVH!%WFj=/>WN`JkZ)nUG&&K.9=+G#>,kL6CK(SJ[m3u@!N*WWJK]IG5jMA.L*qr>-(q.%X(3T/j_MV,Cb6`*Og8dg'm]Amko^+S]2sqq%$".-]4<mZfGXe-=f7E%KoZ397WiCU2c9FKEo:]ANEJG5AYU+iK]EH:t!t)kW?kcILD(Z@-XtqK2VCu9`Q5?@KKgP0dU_R6c@h^?S%9?(*P8Fi[PWb;B]]%!@@OHTZp:'Ze-$k4DgXE/(u<`l[4M[U+ePpOD^?6.\"2G8[B;80-Ua$[A5lNOVP((a*/<D#*LOMt_2:7,RY%TXkAFK#d:'j?&/l^4mp=](PsK<Jci=#_W?s*qi;s1P#6nYW/D%*=Nng.S9fF>h%E6#::bB-066lb\PaXU?O_EGeN^bQNP`9aRbBo%X.'R?eT#Y("LFF#%Pet`2FC9B(/,L+OPSZIEtR8=D^X-8e7\EGJGb+eMp$,JAF1[!puIkH=7K=L3mbnm#X,hX/C:MI7o(*JlY\"?%-PC1C>?k:F\;mkk3*$8lM.?r?mPYh+"i-(f"2U!C\'KhG.45TLCd]DW%YRFZ7%f0U::P-)[#I43?9@gb5JefY`]"5C(_G=a]lfnW%DLe$=@Y+WCmm-ps6m<iUr"%jfilH_(n&RHM1PD?4M1Ybbfk>Ep4uFNeR>Jt[XRX%\2N@u:F+6I8.d]3"V<%$k5$Oj/"et2'/d29"%h]$\`ji,A^La@4]N(a+I-(j?.k9quSLh\$a7&gb^%$t7dQ/L7=cN6Htc/Qo9ChKr_V;:2G_k@DSPeK5\%ee&U@p4NHfR55BY%Brc%dZK?reo/L&)4R2g5b5gF_/f_WKLBC)'3d8*r?>89fKDp6?$r!Z$I=5)F0ZYnpg`:X;&i'6`1_R98L6Ode@7UDH`8Te"0D?LRF,ng%-7pd06/2R[@@HeHgHdU#]g`bdj;l>0n&>n`jro+$>J;k0r/tilBSeKRV[UW6dAYKL1]MjF#G`9uZlq5Q5b:6qAq<+Xp'RYH#T1hj%R^&0qL(`JY7VX'b'",M5SM1'%9O(`TWQJ"X@b2?hf#F"XYgTmRg6Sq&=^",sOF)ctpYnr$fP8D"Ou+cA?>efmPpr"d>@44nCl_"_%NihB)4]!7(3cqRjOoX:8[uKLF_q*91#@EB1X&NG3QcU[d#EkgqcGoY34;8R'Fm:iKrD%(ik1,90B6A@5j:G8d#hrcd9oSc-T+KZE%-cB"cShMK\o'US_(R\1)IWg-RkJ(pAoj]F&+QC8@@-Ar.&IPQdBma3u)2iZC:+<0b0%4i"-*l36o2C6<9$_OZRr3pi8(I#ZV,tSi%M^OJ\j[tYqUa;*KTnpM=`bd/",e?`cXiHb$mT8/_UcA.jF1eOdctPFM9[':Y-F.S'GLW"-7d3]%$fB,__.to:##:tP#'+)c*,'(%%M8)/;!D(M"c)l`ip@]>?B<-sDg^+c2g:un\[`g1X,SGe58/e*s%O`\+Z*%8Scld#eG]<_Pl>n\$TU'O`PC1XaBju)kRZO\N`T%o<%>t8ci$d'0q53nkoG?Miamq#,f'Nk$NH"_sE6s&J;@8$\>2--&d4X8b=lX%RBM1J6PXuCd_3SC#)g*q`6"-FY7!kie.=#RYYF<gPK%S_03H:15tQ&!OdW-Et1=9'H3Xd\tCB,lsKmN*TlQ/-X(E&.*/Nk&%/k3S(q:,OE/<"74X3DJnDQEkd$&aqKEbJMA72^<pYdidoTR%,J14^nC;NV,T5b)pX1ZS2,M#%4gdm_g:?[ZOlQ0o[X5FN[!VfKHs]'^k*J$SV,+$K_)''Mb&@snMpmdNIj7J02HHpHF5JE.:4<.K%hU-0'">eNmDH.t!FPLRTa7!k]pM/T"p\a^[^3oFoHkU;,i9;sC<oggX2gZk:Hg\@m,BqIO/AC1nVtf!?n(hK*=s=6!hQ<e(*q)1-%jSlh3MdG4`MOqS0^+UQjo?3W5`roA78.aTq(2BOR1@M]%,=g'<(16XH;ge!0p[0c@O:1R-W13-she47TcY[KB.W2WjrVCVC5'Z)3%l%,Q3ZJ`0^q0HM*SQYXiSlg&[a0UbO^>Hu`YK<R#&87+P?lm*b>/J;mIUM)E8hBL`1hs\.U(j,U&A;5D%TO)aM4'F>;gscK6cGT1%,A9^54U>iC<0i?.GYH#1H>r/lQ4q"G/1#;W2_oToq)ds1`0uG':LY(9r4u__3>r1Z,%R"76n/bJ4j.0;[Mgl%HtL!i3D8ls,-9QU%'aoKm\s50kb_8&bJg@Zi"q*5d[rIh*O?,_6qee9^e9Bea,KK6nQo[+t=cRr,4.#!lHs'PseqCJd:TPfh7W/4qAq9Dj^OP4TP+=R`%kin)Go;o)-`:l'k+S6XlAh>O#m8ac?,X#huksk*u4#(mc5^DWR&;k<FDs">Dp\>SJRGYOQ'=P=tcS#1n#;B$=i8_Z9[ZQN7/1HJq%<^al[\E//%-)UOn-OFZsRV*UO;?CX>.EhgfSfTh)lct[u`n_@`$T:^jJ@*jMg@@!DL=jWl!DS7O(_>2FK$!QoKRm:F=\+*kq7ni#%*FpSdXBk*$Na,SO;^;H-Es8deOO_LEaJlo9]p`1LX8.XdS_.>D%E7"86Zn?%XZ-)Lak4DrPM@j$K:kJoikjT#_H?T'5,3A\j+I=.%DgqN>s6d)jqd4`R1O]7@^Nf[os8@WA]qiPI$@do[g$Iu3B\*EiM^S%8,%Xh&h,punj3]=lqn#R(<NZF<:A'U=Dc52u]4g,\,`c&\%dLc@MFK,IoioSe>ij"P7SQ(8uFrOJBK6oJ)qEWiL)i7'EgA!C`2Z%&*Qs\PFoC6#Q4pGId)'<D(r;E_kkBQr;5&F[fs*%J)A=-<!%@d.!LTa]r!NP'*2q%\<g7k8`<:LQU1UQ+Zp6[1o@q`PM/(e^)31,e1s_OVhHZFfeDlX)i#*0jp+/*;DC,c-::&;P1lnV4j9%ZL)C%;`p;Ir@,s4NfCk!:q6tk]j9Y)EDTI$$WYSAU+CSM\.]\]]4^U0Ih4DET1K1*gKU8a)]Qn2Q`6jcIj3"=DT,URVqklDh<Xa[qgk_P%a@O-;(fKk7361NfC:;pbG5jbC0QGg2_;3>no@(tH)DK40gXt2KW%muh[`>>pEY)US#\0a2Ej-]i2m;lZ0JB>"f7&CTfR6]($JA,q%@`PgK\c_lF#PJU4_.9(pC>3TMOm*_!?qMqA$[i"$/A@C;f[C"U(k4toAb!^;#^[\$mc$2rX6-p7T8LZ1aH4r978p:N\ce?l.Wmd-%HZq0+RV1r2O)i&eJCWC[O@[7sC]5V0@AV/12=0ZAc)U)^cdWlhh^[#U;.((=kl#]8nUhdT$o2TRC,SjL3DiATYW2=2Y##JTeYcG:%HLMbDRrESnOJTRjCR*fCR"-8gc*;Al*/u\/DP&VhO0]+R,Y;n7$Yu#j*e(KeMc5@83SpPHN?*Tn<2B&8gC1<enKJiC,%m(45M!H]%,.OFKX[AK3S49VqW'7.egW6m3hSq1e*uIPC$[a3k`8%+A&<.#0N:'^m!g9KQ>4GDWk/RGA'$p;]$n5Nln&IhTKtXaGL.aY8^,,Lm%Med=E2e6;rHUIL3e2_[a%:\$-M]!b/>/f0hJFsjC_'@VHes/lnbe*]%<I3j4j+3Vce>&H0$8W"GL.u=H/s/bULWj*m0Vn!^"^,R_%)RJam.VEI]D?WpND#(5eJDRS<%?SVr%j([;1Bg#U-n)6VPsC;C#/OS,(0J;(Da2>j#SUne](0>"4CR'#FmhHQb<98a.Z%+=di^U:%R[VH=r%QP&"p^sQM?b:E=6@it5Fj^ns/t0\0RW)7I7uD]/M!bK^Tk6]]4-J%77S%>rXbQcR':MLDg[5o^[Vc./tfXQ*&'F?iXMU;%bhW:R'm0CaZ.V'SBE,gj$`32.Ea;*WL%U7?F]@#s7eHt?T\ruTEZo&9nt1`(DrciBU0_K-V&0^>!7>@H:G*fu3)4VPch"A/&M-f;%)Q,YBnLuN1C4"a?1f^;`r^2+(bt3IbTRt"<NP-@bq$r`$SKD>4/n#!d^b?Bo)^>r.3XH#se"-!/'[GX;!/V3l)%I"f,`S-?15=e$%PA@tP%_eqE/]BgAS69E/c,g;XTfjk?4>kPf@8]DJTgZ2:JCM+sM%E6(QGn_1>p2=R+bQ+h+j`i"M=NbA.`1QBHQ8KaA<I'QQAjs-%@GI%H6iOn@Ym]*M331,gK^L&$F?go%]V]`B)XWm4Uft/C1aSq[Tn$`UJl=oS6hr@X4B9^g(h6:=,$<ZWkr;KQC?WN.2h,B5'LBse%+mW22>I?tD6cR?,AXemdH:PbALruT*<f/BnU6tr%pmf-%E>FoWLeSZd7W!8\:Dg<jF-^B=:P;'Wg/VsJT,I^M_(`JqPra]WW<K)R%L!_-a;dIJPkl[=uA#^qAm%rm/@=YZD]&IFm:./la1knh+-,N*UAucLFd1J$(Rr1Wd@^PjaBVH+iONteCH_Y)bOY1.?BDu.V?H+g_%Ceu4UE0Ec!59Nm@(/2a5V]2l_HlCd;ZZC-9KQQ>-(TbgL5WPkA78QZDBhg8;^#_F?7:4f*7%g:Agla([m\RVm@"*&n1/Ng!Q>:Yi%d*t"u2MdJN['@(BK=U9\Dlh*#;Mn]!*EFG?[Es1!]H,KVL8e4!CeQro%r:?Sas+DMbcIeCS3:7Vir_On2cgB,l<N@j,Q<q5L.A9V%.gYs`X<>*eX9Ct\=KFq_-0;I3e(>0'g?:8SQ0tA:M&,5b/ZGs"0H8HS%tZC)n6T_2SOX-.@BIQq*dXfHpJ>uB(dkJ@l<,%+n8SJB%f,hZFD0h0mX=Mu^F%7fdQ@3317`as&6j'r(X.HF)-,<Z$\n23ZGG2%LM68'\J_4DIV]V!h:M@RS+ApLO8FtOiH]@!W>mH0Ng.paP%0@O2sQt9=g1b29I^$+US7X8Ol9,6+6M3Z`JIZ25hHkr]7^LBipI#@^hGJV*O1JgU.R2&u,P3+>aW3rI1ih;5l$k\XWFS+7JOi&&9%A%j5?cJAhcG^QrZOZMZV)<S3r-0%cu8o.pL^L[7BEu#D"BuO5BCo-)iCd)s8&YD5sm3OCsN<$0-]@GCpKM'li$TO''ZNlQ/R_OrS%YinAjRn:[g,pdo%OtnOcLNmkP5VE;?.i#F<ossq=,kLh@B=YN?1#:"CEl26?aX(/b--Sr!lqJ>MaaX<N0bDDGg9bpH#;BUPVFs@K%M)@Yp!`I2bX-qNRAAqnERop)N<bB"RFsFLs,Quo)RSkOk0enAaGV&+R.,k2[:Yg'CP\XHtJE=u/:Xa-Kf6>FEX><8%+-6X%0-@hm%Y'6fRLU`CGb"%6$$HlVIjqNX`(#?B0_/b<i(Ee(:OS^?"UHUIt4RM\U?Dg@c9m?!:=V/g?,F6C.A&c<a(tq6fZ'h()7P%>F1=g]T%80R/(COGrA?P^P:k7jnIPoIQ1L,j[+X1_r/W`)`f&?n9\p?,P_Z^Ih"rC3m."R(PL$0i*(r&'d0)^htN?!VVC;8lk@mkq&NQsNn\%C;"L`_#b-41]Ur6ikmDGOpC"=@Q%8Nn@1>(H9`LUY]40g#&4r^LCku7qSaH,eEe'IO:*QWo?*6tK(P_r,ob7!VbZ0tb,N<L+)hKk%^2Ac@pPaCS2'o<oJ3gAW-)Ft7p$n^N5d3Is.d%I7Re[WF?NIJg;5H&r*>@Ks&_(nFi%dRu%g2EQn^\Z$To&GqYu<nUR@V=Hlfu'+%3ccdG!g7C]2&&pWe:erVbhABZT^W;s--LL6Z4>+$'j\o=d1\8='Z6!7Obj83deHorCTkb\/11b"::R.CE^"R(<:BIl!`VeC<q$$l%5h-GOUY+5T2Y#Z'e]>nE>HuJU>0Vq/<f88C:RVeU[]sD%@ZNiW*LTN."7MSZb"5\uGGbh=a?&.EO3A12N77_n(`Na7dqN,+Fh85r%OP?XKN!tE_<g>*R33?I#b:%h91q'f>^8o4;G*c)PW>&d_io@^]@^*'VhT!?c@G3)j2Tm9<$KQ2e#[M+\^d5sg;R0PB?R^O]FWj1O%JJ=VBW&S"F2XY)X=bTnGd4T]N9CZ?A:7Z2m>m8`^),2:?.qJ,FShZ$U4sL]N5*7+]qBmhP]Q%CCC-NqQ]E$MZ^Th6b3Bg..Fq;^G%I,s82hNZhZ?;4=TJQ8k@Xb5(d.uE11?Zl2b^SJQF5i&9rDMJu\cgbQNeZ+DDAkdT"qVkF*5Q)WGJUI:c*d]-O$Ks^2-&GBjqo-P#%7o;24iK=42iYpW7fsJ&b)HV5;ai]1#\a4ob3?U)Fpc]Th.)7Ge]j"L3"I3^A0@nWI.X+_b;Yl4Pfe\tRCR\6=p:3D!T-nZ/n0`%2%QUVrS-c4j8EZ'YkgC%'>?-*-GKQu/,=A4bP@:B<.Ok[IFR9p%ZJCD[2HDB(cdutOSl$UOho6R><!%E#YrAhBsI>'t+3>p>C*O[5!%j,6D:)B2_&jQO2+D193HBVp6,Nl/[Q`31(O4Dq*^:A&O',irI1Yo`9#MZ"(LEsfU>)U=eN&>Cm#QcIm8$&>SSeu0`[-LqL.dr[_\%SrL!4=sL&iOB"bD.C?0lKCT6%@8Q6<%*-q,imU_@(eUE/"?t,Pc(%!Q@Rt0NlM_>f:8c;Z<SO[#<YV,MdT_[Q'a6jubJGFSUU#Y'%&NH.f)kbnJp'*Ic,#mqVC$hcNf_km=;j`H\%2Y/fg>-%T8*_J.1`<:HmfpX9=0M/.@`d"](iQ!D1QUo_Zt_G$=(NaIllLQ?+N(T"%7!JlEM2dT!VKc5i6#L_YOVA%NLUUd'?+['-E*hGAADeG-33On#H9ld"4R\QR^:RT8h>!^[rGpHH:+*Jr5$b=B*U\BF?$N'eWL'>7%09@"5&YH6U8Z/31eTdE]r*T(qbrD`.%K^iopb#M,$aeaL[kg@?YeRCM&S+CU*#2:EK52Ie"UL<kp6[%%YC#?p?@FUMTtZk"@#SS<%WuXQu?+B#[+l'2gYC#9m<]gItHKEKMOYHkMpGJ"ET?Yh!KYMb5C##(6!d_t@T`_8rlU0T`M6kb2\Ti.Z!bcs]5g"#Y5<V]+$F@\?%Y[+l]O9#m4o%HQkq#PHMmY_SG&et%UTifV1X0B#bT7C/MGUT>C3s:pL+<lWH(_[t^)A.-qiBRRGM!BFZX"KZGh?e06&W_[L];k2a%G%it:e`9iDOD`G#%]fB%ct[JQ?BD+dnI@Y%[p0W:CBI@&ZN"TSLI=AHp2Bl6fF@n6ZrJqr=!Z8n"ErQRb5qAmG!*f8fY65J(uB;J%]BB!!hm0KOAsgS6(Zrb0mfcR%iP:b:ZP"/4HpX$g[,o`5>sbh.9\UZ/7YraR2)/\WUT]ibkJGL?'VIlB]8iiNBrZ8mp'F<c)-NWC%gIj>E*D>sC`aYX[G:TDF):;Q]VT;[dLU!_Wj8gDUKZK$r66`u\:8.kt6SV,@#UBLLdNO"9/:5WS:rcS`m@1_hkT3N,?1tVN)^D=V%aO3rW7*P/nT2YP<a%]f(m.dOlM6p6'eOF,Z>-W4,45EG4&q@JGpJ%Bsn"*.tlJ`b0XFEC;Rlp3a#$PpT:\5`]*V8M?ls3uTmeA]@%2)?QVFt+^k6$/RM9hLAil9Bf5Q`udoj0i#,8E%q*]un2]@+XP/OpDY;AKYR:60%g\<gc,+b$^lgZaO(\l$J.dRFrG2]ksr.Z/T_]%9bqaOW$-n%Z!+Bbk&`&)H3Bo7GR$81^O(IQ,-,pHfIg`8P0WcKBU=d3e&bHrAl+!jhRo@MoH1KB.?"kNH2ZlVjdg>?4m?6k).@KV%%HpY9>Bf4PHBa8C6OMWtD3"*\]Bqj6I.*:5gV.,>eCm,Lb4o:;L1n&"Z6SogVoY@6d:k)+6"m7X9qb6m`Y:AlV@4d!.GRUX1(3=u%$d$mHK)4Sm0`PN[ZWrhhKut^&j68mu)/kL:*Xi<7>BD;uL7(Vk52TSoMZ[%AI7Yk0&+-.i;H?n.>)5QGp*maa;j1iREYCWJ,1ItH%D_YU?IrZuZ%]l!T/_^l>'#K:%+bAlD3i(c8V5u4tjJo0!jm%YK..af)g4A&YjC_.4XA>Y,!`gY^P*a/T:DS&?Fi'q4+Pf-o3g:.c%4-Z?kp'M)k]PiQ\P>HVTjL%@C)#'*#6Q)7>cf%^_=ATjj%V:ZeR2(9n%b',qm3W!@%CDQDi4;lkH)^?Y*Qm!\E1pWp#F7,;baT`I%fqAgJfb*1>k27X\LrtP1eo3^8nPO^`fWG!EBjadV=Z&'Np%YEP<bl#5RM5qh:r`$YM7,J$2:jF6rK<@`4-Y:j;?sWp)3@Xkp*ZoZ%\uhhGq2K3?nq#Jdb_.O1P/<hbX%N?I(On29&^6QRAB@ARqaufS7i2D4=ad.$]%"hOhf&[O%Et0]fs&!.&O^56RP;!aPuJMilSQ8p%QqT:eQ`GQirR@;rQHOV"<_:)\<Ou;>EntAmW>&-d,K[^QjL5-tBk-is#'T>75/LD6./tGA=`7,5$#$e_?(V<^)_;UIdsJW!)I?1L%oW9YZW>@JJfqjnt"08C\Ya$i+&t1,:]N@="BP3'pf)A#f\;n&c7`PSR)jSKF=feZuX#+U*$?HoY.EcAh`/9p!37SLRR2G?=m!K6q%#r$\Z!dd#6j-??HZgGOim+`"uKZ3oh!4MJs%W"^Em@-n$s641rn7TN6iQ"1_m?\oEqu,utrS_*Js-Eu_F"rPNqShV^q]A'%nCuk!%k4?oKorDGKq=61Gs7Z=3^I?UYI/_HQL)p(qm;]<)ZbQJ,gUGKns5dToTE"KJ5C`^NO.UpprP/9u++O=dn%Sg72._4@S@=!Pl/2L6%2uiNF)OHb=U@DT=pM76,nF#3%_lpfSn]1+5WqCjir:fIPr:=9Cra5]sdpN(=e'EL=Qi/$*ickFt=5X#CG<c#IT7$Lgci3(]hgG0B%5CE@_\*ne@oUF`fqnKoCr9`s%LSt.>T-++(q):Ncp\Q&Is5CT9^]15#rst43-.2X'5PpARroV]0"2>8S56~>%AI9_PrivateDataEnd