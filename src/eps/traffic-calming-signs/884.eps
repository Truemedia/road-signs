%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 884.EPS
%%Creator: Adobe Illustrator(R) 14.0
%%For: Bob Hutchinson
%%CreationDate: 02/02/2009
%%BoundingBox: 0 0 116 146
%%HiResBoundingBox: 0 0 115.3707 145.1065
%%CropBox: 0 0 115.3707 145.1065
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 104 128 8%%BeginData: 27186 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFFF7C8382837C8382837C8382837C8382837C8382837C838283%7C8382837C8382837C8382837C8382837C8382837C8382837C8382837C83%82837C8382837C8382837C8382837C8382837C8382837C8382837C838283%7C8382837C8382837C8382837CA7FD04FFAE58A8FD60FF8282AEFFCF58FF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFAEFFFFFFA782FF7CA8FFFF58572C572D572C572D572C572D572C%572D572C572D572C572D572C572D572C572D572C572D572C572D572C572D%572C572D572C572D572C572D572C572D572C572D572C572D572C572D572C%572D572C572D572C572D572C572D572C572D572D83FFFF7CA783FFFF5833%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D572DA7FFFF827CFFAE572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C3358FFFF8383FFFF33573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D82FFFF7C58FFAE572C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C3357FFCF8283FFFF335733573357%335733573357335733573357335733573357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%2D82FFFF7C58FFCF572C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D3357FFFF8383FFFF57572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D572D82%FFFF827CFFA8572C332C572C332C572C332C572C332C572C332C572C332C%572C332C332C332C332C332C332C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C3357FFA88383FFFF57573357335733573357%335733573357335733573357335733572D5757825782587C578257572D57%335733573357335733573357335733573357335733573357335733573357%33573357335733573357335733573357335733573357335733573382FFFF%827CFFAE572D332C572D332C572D332C572D332C572D332C572D332C572D%57A7FD0AFFA733332D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C3358FFAE8383FFFF335733572D5733572D5733572D5733572D5733%572D5733572D5783FF7C8382837CCF83837CAEFFFF575733572D5733572D%5733572D5733572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D82FFFF7C58FFAE572C572C33%2C572C332C572C332C572C332C572C332C572C3357FF572D2C332C337C57%2C332CA8FFFF57332C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C572C332C57%2C3357FFCF8283FFFF335733573357335733573357335733573357335733%57335733FF83332D5733572DA75757335733A8FFFF573333573357335733%573357335733573357335733573357335733573357335733573357335733%5733573357335733573357335733572D82FFFF7C58FFCF572C332D332C33%2D332C572D332C572D332C332D332C332DA7A8572D572C572D3383582D57%2C572DA7FFFF57332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%57FFFF8383FFFFA7A883A783837C82587C575857572D57335757827C8383%AEFFFFA8CFA8AEA8CFA8FFA8CFA8AEA8AEA8FFFFFF58572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733572D%5733572D5733572D5733572D572D82FFFF827CFFA8837C8383A783A883AE%A8AEA8A82C5783FFAEFD1BFFA7582C572C332C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C572C332C57%2C332C3357FFA88383FFFF33332D5733572D5733573357573383FD1FFFA8%573357335733573357335733573357335733572D57335733573357335733%573357335733573357335733573357335733573382FFFF827CFFAE572D33%2C572D332C572D332C572DA7FFFFA8A8A7FD12FFAEA7AEFD05FFA82C572D%332C332D332C572D332C572D332C572D5757572D332C572D332C572D332C%572D332C572D332C572D332C572D332C3358FFAE8383FFFF335733572D57%33572D5733572D57A7FFA8CFFFFFA8FD10FFAEFFFFCFAEFD04FFA83357CF%8382575733332D5733572D5733572D58FFFFFF5833572D5733572D573357%2D5733572D5733572D5733572D5733572D82FFFF7C58FFAE572C572C332C%572C332C572C332CA8FFAEA87C7CFFA7FD0EFFA8A8A857A8A8CFFFFFFFAE%2C577CAEAEFFA8FF838257572C332C332C3383FFFFFF83332C332C572C33%2C572C332C572C332C572C332C572C332C572C3357FFCF8283FFFF335733%573357335733573357335758CFFF832D33A7FFAEFFCFFFFFFFCFFFFFFFCF%FFFFFFA7FF573357FFA8FFA8CF83572D573357578282A8FFFFFFCF828257%572DA7FFFFFFA72D57335733573357335733573357335733573357335733%5733572D82FFFF7C58FFCF572C572D332C572D332C572D332C332DFFA757%57FF83572D572D572D572D572D572D572D58FF822D82FF7C2D572C572D33%2C572D332C332D572D8282AEFFFFA8572DAEAEFF83822D332C572D332C57%2D332C572D332C572D332C572D332C572D3357FFFF8383FFFF5857335733%572D572D572D5733572D5758FD04FF572D5733572D5733572D5733572D57%33A7FFFFFFA72D5733572D5733572D5733572D5733572D33335758A85833%2D83FFFFFF822D572D5733572D5733572D5733572D5733572D5733572D57%2D82FFFF827CFFA8CFA8FFA8A88383587C57572C332C332C33578358572C%332C572C332C572C332C572C332C332C587C7C2C332C572C332C572C332C%572C332C572C332C572C332C3357A8FD04FF83332C332C572C332C572C33%2C572C332C572C332C572C332C3357FFA88383FFFF575757827C8383AEA8%FFAECFA7A77C8257572D332D572D5733573357335733573357335733572D%57335733573357335733573357335733573357335733572D5782FD07FF57%572D5733573357335733573357335733573357335733573382FFFF827CFF%AE572D332C332D332C572D57578383A8A8FFA8A87C8257572C332D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D57A8FFFF837CFD04FF832D5857332D332C572D332C572D332C572D%332C572D332C3358FFAE8383FFFF335733572D5733572D5733332D573357%578282A8A8FFAEA87C7C33572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572DA7FFFFA8822D57FD04FFA85757FF83%572D572D5733572D5733572D5733572D5733572D82FFFF7C58FFAE572C57%2C332C572C332C572C332C572C332C332C332D587CA8A8FFA78357572C33%2C572C332C572C332C572C332C572C332C572C332C572C332C332DA8FFFF%7C572C332CA7FD04FF573357A8FF832C332C572C332C572C332C572C332C%572C3357FFCF8283FFFF3357335733573357335733573357335733573357%335733332D575783A7FFAEA8585733572D57335733573357335733573357%33573357335733573357A7FF83332D572D3357FD04FFAE33572D82FFCF57%5733573357335733573357335733572D82FFFF7C58FFCF572C572D332C57%2D332C572D332C572D332C572D332C572D332C332D332D5883AEA8A85857%2C332D332C572D332C572D332C572D332C572D332C572D57FF822D333383%82A7FD05FF572D332C5783FF58332D332C572D332C572D332C572D3357FF%FF8383FFFF57572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D57335882FFCFA757572D572D5733572D5733572D5733572D%5733572D5757FFAEFFAEFD09FF575733572D5758FF835733572D5733572D%5733572D572D82FFFF827CFFA8572C332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C572C332C5883FFA77C2C332C572C33%2C572C332C572C332C572C332C83A85857A7FFFFFFAE83FFFFFF57332C33%2C332C3333FF83332C332C572C332C572C332C3357FFA88383FFFF575733%573357335733573357335733573357335733573357335733573357335733%573357335757A7FFCF575733573357335733573357335733575757A8FF58%3333FFFFCF3358FF82CF83335857572D57335733FFA7572D573357335733%5733573382FFFF827CFFAE572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C577CFF83572D332C57%2D332C572D3357AEFD04FF83FFA75782FFA85783CF2C83FD04FFA8582C57%2D332DFF83332C572D332C572D332C3358FFAE8383FFFF335733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733572D%5733572D3357AEFF822D572D5733572D5758FFFF8358AEFFCF58CFFFAEFF%FF7CFF7C57A8FFCF827CFFFF822D57333357FF7C332D5733572D5733572D%82FFFF7C58FFAE572C572C332C572C332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C572C332C332C82FF822C332C572C33%2CFFA8572C3383FFFFA72C83FD04FFA85783FF7CFF572D2DCFFF572C572C%3357FF57332C572C332C572C3357FFCF8283FFFF33573357335733573357%335733573357335733573357335733573357335733573357335733573357%335733572D82FF822D5733572D82FF822D577CFF58A7FF572D82AEFFFFAE%57FF8357A8FF333358FF58573357335783CF2D573357335733572D82FFFF%7C58FFCF572C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C82FF572C572D3358FF33%332DFF833357FF57332C57AEFFA8FFFFCFA8FFFF582C57FF832C572D332C%57AE822C572D332C572D3357FFFF8383FFFF57572D5733572D5733572D57%33572D5733572D5733572D5733572D572D572D5733572D5733572D573357%2D5733572DAE83332D572D82FF822D5733572D83FF57335733FFFFFF57FF%A7573357333357FF7C332D5733572D83AE572D5733572D572D82FFFF827C%FFA8572C332C572C332C572C332C572C332C572C332C572C332C572C3357%8333332C572C332C572C332C572C332C572C3357AE2C332C332DFFA8572C%332C57FFA82C332DAEA883573383FF57332C332CA8FF572C332C572C332C%FF57332C572C332C3357FFA88383FFFF5757335733573357335733573357%33573357335733573357335757FFFFCF3357335733573357335733573357%33572D58A8572D57335758FFFF825783FFFF57573357575733572D57CFFF%82827CFFFF82335733573357335783AE2D57335733573382FFFF827CFFAE%572D332C572D332C572D332C572D332C572D332C572D332C572D7CFFFFFF%582C572D332C572D332C572D332C572D3357AE2D332C572D3357CFFFFFFF%AE57332C572D332C572D332C5783FFFFFFA8582C572D332C572D332C58AE%572C572D332C3358FFAE8383FFFF335733572D5733572D5733572D573357%2D5733572D5733572D5757FFFFFF57572D5733572D5733572D5733572D57%2DA8835733572D5733332D5857572D5733572D5733572D5733572D575758%57572D572D5733572D5733572DFF58332D5733572D82FFFF7C58FFAE572C%572C332C572C332C572C332C572C332C572C332C572C332C33A8FF58332C%332C572C332C572C332C572C332C57FF572C572C332C572C332C332C332C%572C332C572C332C572C332C332C332C572C332C572C332C572C3383832C%332C572C3357FFCF8283FFFF335733573357335733573357335733573357%335733573357335783FFFFA733573357335733573357335733572D57AEA7%2D5733573357335733573357335733573357335733573357335733573357%335733573357335733572D83A857335733572D82FFFF7C58FFCF572C572D%332C572D332C572D332C572D332C572D332C572D3357FD04FF572D332C57%2D332C572D332C572D332D7C2D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D3357CF2D332C57%2D3357FFFF8383FFFF57572D5733572D5733572D5733572D5733572D5733%572D5733A8FD04FF585733572D5733572D5733332D572D572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D573358A85833572D572D82FFFF827CFFA8572C332C572C332C%572C332C572C332C572C332C572C332C57AEFD04FF832C572C332C572C33%2C57577C5782A8822C572C332C572C332C572C332C572C332C572C332C57%2C332C572C332C572C332C572C332C572C332C3333AE57332C332C3357FF%A88383FFFF57573357335733573357335733573357335733573357335758%FD05FF835733573357335758AEFD06FF5857335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%A882335733573382FFFF827CFFAE572D332C572D332C572D332C572D332C%572D332C572D332C82FD05FFA72C572D332C5783FD08FF822C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572DA857332D332C3358FFAE8383FFFF335733572D5733572D%5733572D5733572D5733572D5733337CFD06FF832D572D58A8FD09FF8357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D57A87C2D5733572D82FFFF7C58FFAE572C572C%332C572C332C572C332C572C332C572C332C572C7CFD07FFA72D58FD0BFF%A72C332C572C332C572C332C572C332C572C332C572C332C332C332C572C%332C572C332C572C332C572C332CAE57332C572C3357FFCF8283FFFF3357%33573357335733573357335733572D5733572D57333357FD05FF8358AEFD%0DFF835733573357335733573357335733573357335733572D5882A75757%33573357335733573357335733572D57A8822D5733572D82FFFF7C58FFCF%572C572D332C572D332C572D332C572D57588383A783A75858A8FD05FF57%A8FD0DFFA82D332C572D332C572D332C572D332C572D332C572D57A8FFFF%FF58332D332C572D332C572D332C572D332DCF57332C572D3357FFFF8383%FFFF57572D5733572D5733572D8283AE83A7CFFD19FF8282AEFFA8573357%2D5733572D5733572D5733572D5733572D5783FD05FF335733572D573357%2D5733572D573357A85833572D572D82FFFF827CFFA8572C332C572C332C%332C83FFFF83FD1CFF7C0A82FFFF57332C332C572C332C572C332C572C33%2C572C332CA7FD05FF572C572C332C572C332C572C332C3357AE2D332C33%2C3357FFA88383FFFF57573357335733573383FFFF5857FD1CFF335757CF%A857335733573357335733573357335733573357335782FD04FFAE335733%57335733573357335733573382A857335733573382FFFF827CFFAE572D33%2C572D332C57CFFF833358FD1BFF7C332C572D572C572D332C572D332C57%2D332C572D332C572D332C57A8FFFFFF57332C572D332C572D332C572D33%2C337CAE2C572D332C3358FFAE8383FFFF335733572D57333358FFFF832D%83FD1AFFA85733572D5733572D5733572D5733572D5733572D5733572D57%2D3333AEFFFFAE8233332D5733572D5733572D5733572DA783572D573357%2D82FFFF7C58FFAE572C572C332C572C7CFFFF7C3358FD1AFFA72C572C33%2C572C332C572C332C572C332C572C332C572C332C5883FD06FFCF7C572C%572C332C572C332C572C3383832C332C572C3357FFCF8283FFFF33573357%335733577CFFFF832D82FD1AFF8357335733573357335733573357335733%573357335733572D82FD0AFFAE58335733573357335733572DFF58573357%33572D82FFFF7C58FFCF572C572D332C572DA7FFFF57332DFD1AFF582C57%2D332C572D332C572D332C572D332C572D332C572D33A7FD0BFFA8572D33%2C572D332C572D57A8582D332C572D3357FFFF8383FFFF57572D5733572D%57FFFFA757333383FD07FFA8FD11FF7C332D5733572D5733572D5733572D%5733572D5733572D5757FD0DFF575733572D5733572D5757CF2D5733572D%572D82FFFF827CFFA8572C332C332D7CA8FFA8572C572C83FD06FF7C3333%8383CFA8FFFFFFA8FF83A7FD06FF58332C572C332C572C332C572C332C57%2C332C572C332C58FD0DFF822C572C332C572C332C8383332C572C332C33%57FFA88383FFFF5757335733577CCF83572D573358AEFFFFFFAEFFFF822D%573357335857825758333358FFFFA757CFFFFF7C57335733573357335733%573357335733573357335782FD0DFF83573357335733573357A7832D5733%5733573382FFFF827CFFAE572D332C572D332C332D332C57A8FFFFAE577C%FFFF57332C572D332C332D332C572D58FFFF57332CA8FFFF58332D332C57%2D332C572D332C572D332C572D332CA8FD0AFFA8FFFFAE2C572D332C572D%332CFF57332C572D332C3358FFAE8383FFFF335733572D5733572D573357%57FFFF832D33A7FFA75733572D5733572D5733572D57A7FFA85733572DA7%FFFF335733572D5733572D5733572D5733572D573357A8FFFFA7AEFD06FF%83AEFFFF572D5733572D573358A85733572D5733572D82FFFF7C58FFAE57%2C572C332C572C332C572C57A8FF57332C83FF832C572C332C572C332C57%2C3357FFFF822C572C332C83FF582C572C332C572C332C572C332C572C33%2C3357FFFFFF57FD07FF5783FFFF57332C572C332C3358A82C572C332C57%2C3357FFCF8283FFFF33573357335733572D82CF5833FF8257335757FFA7%57335733573357335733572DA7FFAE2D573357335733FFA7573357335733%57335733573357335733573383FFFF8357FD07FF8257FFFF822D57335733%5733AE83573357335733572D82FFFF7C58FFCF572C572D332C3357A8FF83%2D57AE582D332C3383FF2C572D332C572D332C572D3383FF57332C572D33%2C3358FF57332D332C572D332C572D332C572D332C3383FFFF5857FD07FF%8257A8FF58332C572D332C57A8582C572D332C572D3357FFFF8383FFFF57%572D572D5783FF83572D3357FF575733572D82FF572D5733572D5733572D%5733AE835733572D5733572D57FFAE2D5733572D5733572D5733572D5733%5733FFFFCF2D82FD07FFA733AEFF832D572D57333357FF57572D5733572D%572D82FFFF827CFFA8572C332C83FFA733332C3333A7FF572C572C332DFF%83332C572C332C572C332C57FF582C572C332C572C332CCFA8332C572C33%2C572C332C7CA8A72D332C57FFFF7C3357FD07FF833383FF58332C332C57%2C8383332C332C572C332C3357FFA88383FFFF33577CFFAE822D57335733%FFFFFF575733572D57AEFFA75733573357335733577CFF83573357335733%572D83FFA72D573357335733572D58FFFFFFAE335758FFFF582D82FD08FF%33A7FF83335733573357A88333573357335733573382FFFF827CFFA882A8%FF58572D332C572D33A7FF83332C572D332C5783FF83332D332C572D332C%57FFFF57332D332C572D3357FF57332C572D332C572D3357FFFFFFA7572D%83FFA72D3357FD07FFA85783FF57332D332C3357FF33332D332C572D332C%3358FFAE8383FFFFFF8333332D5733572D573358575733572D5733572D82%FFFF575733572D57335757FFFF822D5733572D573357575733572D573357%2D573357A7FFFF820B58FFFF58572D82FD08FF57CFFF822D5733572D83A8%572D5733572D5733572D82FFFF7C58FFFF572C332C332C572C332C572C33%2C572C332C572C332C572D572C572C332C572C332D572C332C572C332C57%2C332C572C332C572C332C3357CFFFFF837CA8FFFF822C3358FD07FFAE57%A8FF58332C572C3383832C332C572C332C572C3357FFCF8283FFFF335733%573357335733573357335733573357335733573357335733573357335733%57335733573357335733573357335733573357335758FD07FFCF82335733%82FD08FF335858573357335757FF575733573357335733572D82FFFF7C58%FFCF572C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332CCFFD05FF%CF58572D332C3357FFFFFFA8A8FFFFAE572C332D332C572D7CA8572D332C%572D332C572D3357FFFF8383FFFF57572D5733572D5733572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D573358FD06FFA7332D5733572D58FFFFFFAE83FFFFFF33572D%5733572D57A7A72D5733572D5733572D572D82FFFF827CFFA8572C332C57%2C332C572C332C572C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C572C332C572C332C3357FFA8FD05FF2D332C572C33%2DFFFFFF5883FFFFA8572C332C572C332CFF57332C572C332C572C332C33%57FFA88383FFFF5757335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%82FF8383FD04FF7C2D5733572D57FFFFFF827CFFFFCF3357335733572D82%AE572D5733573357335733573382FFFF827CFFAE572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C3358FF57A7FD04FF7C332C572D332DCFFFFF%5782FFFF83572D332C572D3383832D332C572D332C572D332C3358FFAE83%83FFFF335733572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D83FF58A7%FD04FFAE33572D573357A8FFFF5858FFFF832D5733572D5757FF57573357%2D5733572D5733572D82FFFF7C58FFAE572C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C3357FF7CA8FD04FFA8572C332C572CA7FFFF5758FFFF%58332C572C332C82A8332C572C332C572C332C572C3357FFCF8283FFFF33%573357335733573357335733573357335733573357335733573357335733%57335733573357335733573357335733573357335733575782FD06FF5757%3357335783FFFF5857FFFF822D5733573357A8A72D573357335733573357%33572D82FFFF7C58FFCF572C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C332DAEFD05FF582D332C572D83FFFF5758FFFF57332C572D332D%FF57332C572D332C572D332C572D3357FFFF8383FFFF57572D5733572D57%33572D5733572D5733572D5733572D5733572D5733572D5733572D573357%2D5733572D5733572D5733572D5733572D57A7FF83CFFF822D5733572D57%82FFFF5757FFFF5733572D572D82A85733572D5733572D5733572D572D82%FFFF827CFFA8572C332C572C332C572C332C572C332C572C332C572C332C%572C332C572C332C572C332C572C332C572C332C572C332C572C332C572C%332CA8FF58A7FF2D332C572C332C82FFFF2D7CFFCF2C332C332C33A7822C%572C332C572C332C572C332C3357FFA88383FFFF57573357335733573357%335733573357335733573357335733573357335733573357335733573357%33573357335733573357335733573357A8FF57FFCF572D573357335758FF%FF587CFFA8573357335757FF57573357335733573357335733573382FFFF%827CFFAE572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%AEA857A8AE2D332C572D332C58FFFF2D83FFA72C572D332C83A8332C572D%332C572D332C572D332C3358FFAE8383FFFF335733572D5733572D573357%2D5733572D5733572D5733572D5733572D5733572D5733572D5733572D57%33572D5733572D5733572D573357FF832DCFA85733572D5733337CFF8333%57FFA7572D573357A8832D572D5733572D5733572D5733572D82FFFF7C58%FFAE572C572C332C572C332C572C332C572C332C572C332C572C332C572C%332C572C332C572C332C572C332C572C332C572C332C572C332C3333822C%3333A833332C332C332DA758332C3357A72D332C3357FF2D332C332C572C%332C572C332C572C3357FFCF8283FFFF3357335733573357335733573357%335733573357335733573357335733573357335733573357335733573357%3357335733573357335733572D5733572D57335733573357335733573357%3357335733A7A75733573357335733573357335733572D82FFFF7C58FFFF%572C572D332C572D332C572D332C572D332C572D332C572D332C572D332C%572D332C572D332C572D332C572D332C572D332C572D332C572D332C572D%332C572D332C572D332C572D332C572D332C57A8582C572D332C572D332C%572D332C572D3358FFFF8383FFFF83332D572D332D572D332D572D332D57%2D332D572D332D572D332D572D332D572D332D572D332D572D332D572D33%2D572D332D572D332D572D332D572D332D572D332D572D332D572D332D57%2D3357FF33332D572D332D572D332D572D332D3333AEFFFF827CFFFFFF83%7C5782587C5782587C5782587C5782587C5782587C5782587C5782587C57%82587C5782587C5782587C5782587C5782587C5782587C5782587C578258%7C5782587C5782587C5782587C578257A7837C587C5782587C5782587C57%82587C58AEFFFFA88383FD66FF827CFD65FFAE8383FFFFFFAE5882588258%825882588258825882588258825882588258825882588258825882588258%825882588258825882588258825882588258825882588258825882588258%8258825882588258825882588258825882588258825882588258825883A8%FFFFFF7C58FFFFA72C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C57A8FFAE8283FFFF575733573357335733%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%5733573357335733573357335733573357335733573357335733572D83FF%FF7C58FFCF572C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D3357FFFF8383FFFF57572D5733572D5733572D%5733572D332D332D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733332D5733572D5733572D5733572D%5733572D5733572D5733572D5733572D5733572D5733572D572D82FFFF82%7CFFA8572C332C572C332C572C332C332C58588358572C572C332C572C33%2C572C332C582D332C572C332C572C332C572C572C572C332C572C332C58%57572C572C332C572C332C572C332C572C332C572C332C572C332C572C33%2C572C332C572C332C3357FFA88383FFFF57573357335733573357335757%CFFD05FF82335733573357335733572D82FFA82D57335733573357335733%AEA8573357335733572D57FFFF5757335733573357335733573357335733%5733573357335733573357335733573357335733573382FFFF827CFFAE57%2D332C572D332C572D332DFFFFA7575882FFFF582D332C572D332C332D33%57AE58332C572D332C572D332C57FFAE2C332D332C572D332DFFFF572C57%2D332C572D332C572D332C332D332C332D332C572D332C332D332C572D33%2C572D332C3358FFAE8383FFFF335733572D5733572D572D83FFAE33332D%337CFF835733575757335757573357575733572D5758825757335757FFA8%58575733572D573357CFFF57572D573357578258582D5733575758578257%5733572D575782575733572D5733572D5733572D82FFFF7C58FFAE572C57%2C332C572C332C33A7FF57332C332C57A8FF2C57A8AE2C3357FF583357FF%7C332C57A8FFFFFF573358FD04FFAE2C332C332C332DFFA8572C332C337C%FD04FF832C3333FFA8FFFFFF83572C5783FFFFFF83572C332C572C332C57%2C3357FFCF8283FFFF3357335733573357335733FFFF583357335733AEFF%5833FFAE572D82FF832D7CFFA72D57FFFF5882FFFF57577CFFAE82585733%5733573357CFFF575733573382838257CFFF582D57FFFF8383FFFF583382%FF835883FF835733573357335733572D82FFFF7C58FFCF572C572D332C57%2D332C57A8FF2D572D332C57A7FF3357A8AE2C3357FF7C3357FF7C3358FF%83572D83FF822D33A8AE2D332C572D332C5733FFAE572D332C572D333358%A7FF573333FFA7332D83FF7C2DFFFF582D58FFFF2D332C572D332C572D33%57FFFF8383FFFF57572D5733572D5733572DCFFF582D5733572DFFFF572D%FFAE572D82FF832D7CFF832D83FD06FF7C3333FFA85733572D5733572D57%FFFF335733572D82FD05FF582D57FFA82D3382FF5757FD06FFAE5733572D%5733572D572D82FFFF827CFFA8572C332C572C332C572C337CFF7C2D33FF%5758FFAE2C33A8FF2C2D57FF7C2D57FF7C3358FF8358577C57572C57AEA8%2C332C332C572C332DFFCF572C332C57A8FF57577CFF57332DFF83332C83%FF582CFFFF7C577C57572C572C332C572C332C3357FFA88383FFFF575733%573357335733572D58FFFF7C82FFFFCFFF583333FFFF8357FFFF832D82FF%A72D58FFFF57577C822D5757FFAE825757335733572D57FFFF5882585857%FFA8572DAEFF822D58FFAE2D5782FF5857A7FF7C57578333573357335733%5733573382FFFF827CFFAE572D332C572D332C572D332C7CFD06FF7C332D%3358FD05FF7C3357FF83332C82FD04FFA8572C5783FFFFAE2D332C572D33%2DFD06FF577CFD05FFA7332DFFA7332C83FF582C57A8FD04FF7C2C572D33%2C572D332C3358FFAE8383FFFF335733572D5733572D5733572D5883A8A7%FFAE572D57335758A7825858582D577C8233572D5883A77C5733572D5782%83585733572D5733577C8382837C83575758A78358588233575882335757%8357572D577CA7838233572D5733572D5733572D82FFFF7C58FFAE572C57%2C332C572C332C572C332C332C3383AE2D332C572C332C332C332C572C33%2C572C332C332C332C572C332C332C332C572C332C572C332C332C332C33%2C332C332C332C572C332C572C332C332C332C332C332C572C332C572C33%2C572C3357FFCF8283FFFF335733573357335733573357335733572D5733%573357335733573357335733573357335733573357335733573357335733%573357335733573357335733573357335733573357335733573357335733%57335733573357335733573357335733572D82FFFF7C7CFFCF572C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D332C572D332C572D332C572D332C572D332C572D332C572D332C572D33%2C572D332C572D332C572D332C572D332C572D332C572D332C572D332C57%2D3357FFFF8383FFFF57572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D5733572D5733572D5733572D5733572D%5733572D5733572D5733572D5733572D5733572D5733572D5733572D5733%572D5733572D5733572D5733572D572D82FFFF8258FFFF822C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%2C332C332C332C332C332C332C332C332C332C332C332C332C332C332C33%83FFA88283A7FFFF82335757573357575733575757335757573357575733%575757335757573357575733575757335757573357575733575757335757%573357575733575757335757573357575733575757335757573357575733%5757573357575733575757335783FFFFA783A87CA8FFFFFFA8FFAEFFA8FF%AEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFF%A8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FF%AEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFAEFFFFA8%58FFFFA882A7FD60FFA77CFD04FFA88258827C8258837C8258837C825883%7C8258837C8258837C8258837C8258837C8258837C8258837C8258837C82%58837C8258837C8258837C8258837C8258837C8258837C8258837C825883%7C8258837C8258837C8258837C8258837C82588358827CFFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 370 C)
%%CMYKCustomColor: 0.5600 0 1 0.2700 (PANTONE 370 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2009-02-02T11:33:30Z</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>204</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Bs1x5huLlmuXs/Ltm7w&#xA;s0LmJ7t4jSVmlFGSFGBX4SCxB3pmNvkJ3qA+39jV9X9VjsnmP8jraRoJEsJXjPFpDZPcEkf8W+lJ&#xA;z+fI5R4umG23y/Y1GeEd3yW/4s/Ir/fGn/8AcMf/AKoY+NpvL/S/sR4mHy+Tv8WfkV/vjT/+4Y//&#xA;AFQx8bTeX+l/YviYfL5O/wAWfkV/vjT/APuGP/1Qx8bTeX+l/YviYfL5O/xZ+RX++NP/AO4Y/wD1&#xA;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&#xA;s8D01fqu782Xh7ef6X//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 370 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName> 370</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>60.000004</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.058825</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 1375 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>40.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 370 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>56.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 469 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 349 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>91.000000</xmpG:yellow>
                           <xmpG:black>42.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 116 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>16.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 300 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>44.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 186 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>81.000000</xmpG:yellow>
                           <xmpG:black>4.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -145.106 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 145.106 li
115.371 145.106 li
115.371 0 li
cp
clp
[1 0 0 1 0 0 ]ct
6.65576 144.823 mo
3.12744 144.823 .283691 141.979 .283691 138.451 cv
.283691 138.451 li
.283691 6.65576 li
.283691 6.65576 li
.283691 3.12744 3.12744 .283691 6.65576 .283691 cv
6.65576 .283691 li
108.715 .283691 li
108.715 .283691 li
112.208 .283691 115.087 3.12744 115.087 6.65576 cv
115.087 6.65576 li
115.087 138.451 li
115.087 138.451 li
115.087 141.979 112.208 144.823 108.715 144.823 cv
108.715 144.823 li
6.65576 144.823 li
6.65576 144.823 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.566928 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
6.65576 144.823 mo
3.12744 144.823 .283691 141.979 .283691 138.451 cv
.283691 138.451 li
.283691 6.65576 li
.283691 6.65576 li
.283691 3.12744 3.12744 .283691 6.65576 .283691 cv
6.65576 .283691 li
108.715 .283691 li
108.715 .283691 li
112.208 .283691 115.087 3.12744 115.087 6.65576 cv
115.087 6.65576 li
115.087 138.451 li
115.087 138.451 li
115.087 141.979 112.208 144.823 108.715 144.823 cv
108.715 144.823 li
6.65576 144.823 li
6.65576 144.823 li
cp
/0 
<<
/Name (PANTONE 370 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ .56 0 1 .27 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
57.6675 3.45166 mo
6.6377 3.45166 li
4.87793 3.45166 3.45166 4.87793 3.45166 6.6377 cv
3.45166 109.741 li
3.45166 111.501 4.87793 112.927 6.6377 112.927 cv
108.697 112.927 li
110.457 112.927 111.883 111.501 111.883 109.741 cv
111.883 6.6377 li
111.883 4.87793 110.457 3.45166 108.697 3.45166 cv
57.6675 3.45166 li
57.6675 3.45166 li
cp
ef
74.6587 30.1636 mo
74.5513 30.1274 li
74.4429 30.0918 li
74.2993 30.0557 li
74.1909 30.0195 li
74.0474 29.9834 li
73.939 29.9478 li
73.7954 29.9116 li
73.687 29.8755 li
73.5435 29.8394 li
73.4351 29.8037 li
73.2915 29.7676 li
73.1831 29.7314 li
73.0386 29.6958 li
72.9312 29.6597 li
72.7866 29.6235 li
72.6792 29.5874 li
72.5347 29.5518 li
72.4272 29.5156 li
72.2827 29.4795 li
72.1753 29.4434 li
72.0308 29.4077 li
71.8872 29.3716 li
71.7788 29.3354 li
71.6353 29.2993 li
71.5269 29.2637 li
71.3833 29.2275 li
71.2749 29.1914 li
71.1313 29.1553 li
70.9868 29.1196 li
70.8794 29.1196 li
70.7349 29.0835 li
70.6274 29.0474 li
70.4829 29.0112 li
70.3394 28.9756 li
70.231 28.9395 li
70.0874 28.9033 li
69.9429 28.8677 li
69.8354 28.8315 li
69.6909 28.7954 li
69.5835 28.7593 li
69.439 28.7593 li
69.2954 28.7236 li
69.187 28.6875 li
69.0425 28.6514 li
68.8989 28.6152 li
68.7554 28.5796 li
68.647 28.5435 li
68.5034 28.5073 li
68.3589 28.5073 li
68.2515 28.4712 li
68.1069 28.4355 li
67.9634 28.3994 li
67.855 28.3633 li
67.7114 28.3271 li
67.5669 28.2915 li
67.4233 28.2915 li
67.3149 28.2554 li
67.1714 28.2192 li
67.0269 28.1831 li
66.8833 28.1475 li
66.7749 28.1113 li
66.6313 28.0752 li
66.4868 28.0752 li
66.3433 28.0396 li
66.2349 28.0034 li
66.0913 27.9673 li
65.9468 27.9312 li
65.8032 27.9312 li
65.6587 27.895 li
65.5513 27.8594 li
65.4067 27.8232 li
65.2632 27.7871 li
65.1187 27.7871 li
64.9751 27.7515 li
64.8667 27.7153 li
64.7231 27.6792 li
64.5786 27.6431 li
64.4351 27.6431 li
64.2905 27.6074 li
64.147 27.5713 li
64.0386 27.5352 li
63.895 27.5352 li
63.7505 27.499 li
63.6069 27.4634 li
63.4624 27.4272 li
63.3188 27.4272 li
63.1753 27.3911 li
63.0308 27.355 li
62.8872 27.3193 li
62.7788 27.3193 li
62.6353 27.2832 li
62.4907 27.2471 li
62.3472 27.2109 li
62.2026 27.2109 li
62.0591 27.1753 li
61.9146 27.1392 li
61.771 27.103 li
61.6265 27.103 li
61.4829 27.0669 li
61.3394 27.0313 li
61.1948 26.9951 li
61.0864 26.9951 li
60.9429 26.959 li
60.7993 26.9233 li
60.6548 26.9233 li
60.5112 26.8872 li
60.3667 26.8511 li
60.2231 26.8511 li
60.0786 26.8149 li
59.9351 26.7793 li
59.7905 26.7432 li
59.647 26.7432 li
59.5024 26.707 li
59.3589 26.6709 li
59.2144 26.6709 li
59.0708 26.6353 li
58.9272 26.5991 li
58.7827 26.5991 li
58.6392 26.563 li
58.4946 26.5269 li
58.3511 26.5269 li
58.2075 26.4912 li
58.063 26.4551 li
57.9194 26.4551 li
57.7749 26.4189 li
57.6313 26.3828 li
57.4507 26.3828 li
57.4517 26.3838 li
57.4517 25.3037 li
57.4517 25.3037 li
57.5952 25.3037 li
57.7397 25.3398 li
57.8833 25.3755 li
58.0269 25.3755 li
58.1714 25.4116 li
58.3149 25.4478 li
58.4595 25.4478 li
58.603 25.4839 li
58.7476 25.5195 li
58.8911 25.5195 li
59.0347 25.5557 li
59.1431 25.5918 li
59.2866 25.5918 li
59.4312 25.6274 li
59.5747 25.6636 li
59.7192 25.6636 li
59.8628 25.6997 li
60.0073 25.7358 li
60.1509 25.7358 li
60.2593 25.772 li
60.4028 25.8076 li
60.5474 25.8076 li
60.6909 25.8438 li
60.8354 25.8799 li
60.979 25.8799 li
61.1235 25.9155 li
61.231 25.9517 li
61.3755 25.9517 li
61.519 25.9878 li
61.6636 26.0239 li
61.8071 26.0239 li
61.9507 26.0596 li
62.0591 26.0957 li
62.2026 26.1318 li
62.3472 26.1318 li
62.4907 26.168 li
62.6353 26.2036 li
62.7437 26.2036 li
62.8872 26.2397 li
63.0308 26.2759 li
63.1753 26.312 li
63.3188 26.312 li
63.4272 26.3477 li
63.5708 26.3838 li
63.7153 26.4199 li
63.8589 26.4199 li
63.9673 26.4561 li
64.1108 26.4917 li
64.2554 26.4917 li
64.3989 26.5278 li
64.5073 26.564 li
64.6509 26.6001 li
64.7954 26.6357 li
64.9028 26.6357 li
65.0474 26.6719 li
65.1909 26.708 li
65.3354 26.7437 li
65.4429 26.7437 li
65.5874 26.7798 li
65.731 26.8159 li
65.8394 26.8521 li
65.9829 26.8521 li
66.1274 26.8877 li
66.2349 26.9238 li
66.3794 26.96 li
66.5229 26.9961 li
66.6675 26.9961 li
66.7749 27.0317 li
66.9194 27.0679 li
67.063 27.104 li
67.1714 27.1401 li
67.3149 27.1401 li
67.4233 27.1758 li
67.5669 27.2119 li
67.7114 27.248 li
67.8188 27.2842 li
67.9634 27.3198 li
68.1069 27.3198 li
68.2153 27.356 li
68.3589 27.3921 li
68.4673 27.4282 li
68.6108 27.4639 li
68.7554 27.5 li
68.8628 27.5 li
69.0073 27.5361 li
69.1147 27.5718 li
69.2593 27.6079 li
69.4028 27.644 li
69.5112 27.6802 li
69.6548 27.7158 li
69.7632 27.7158 li
69.9077 27.752 li
70.0151 27.7881 li
70.1597 27.8242 li
70.2671 27.8599 li
70.4116 27.896 li
70.5552 27.9321 li
70.6636 27.9683 li
70.8071 27.9683 li
70.9155 28.0039 li
71.0591 28.04 li
71.1675 28.0762 li
71.311 28.1123 li
71.4194 28.1479 li
71.563 28.1841 li
71.6714 28.2202 li
71.8149 28.2563 li
71.9233 28.292 li
72.0669 28.3281 li
72.1753 28.3281 li
72.3188 28.3643 li
72.4272 28.3999 li
72.5356 28.436 li
72.6792 28.4722 li
72.7876 28.5083 li
72.9312 28.5439 li
73.0396 28.5801 li
73.1831 28.6162 li
73.2915 28.6523 li
73.4351 28.688 li
73.5435 28.7241 li
73.6509 28.7603 li
73.7954 28.7964 li
73.9038 28.832 li
74.0474 28.8682 li
74.1558 28.9043 li
74.2632 28.9404 li
74.2632 28.9395 li
74.6587 30.1636 li
74.6587 30.1636 li
cp
0 0 0 0 cmyk
ef
3.45166 20.8755 mo
3.5957 20.8755 li
3.70361 20.8755 li
3.81152 20.8755 li
3.91943 20.8755 li
4.02734 20.8755 li
4.13574 20.8755 li
4.27979 20.9116 li
4.3877 20.9116 li
4.49561 20.9116 li
4.60352 20.9116 li
4.71143 20.9116 li
4.81934 20.9116 li
4.96338 20.9478 li
5.07178 20.9478 li
5.17969 20.9478 li
5.2876 20.9478 li
5.39551 20.9478 li
5.50342 20.9478 li
5.64746 20.9478 li
5.75537 20.9839 li
5.86377 20.9839 li
5.97168 20.9839 li
6.07959 20.9839 li
6.1875 20.9839 li
6.29541 20.9839 li
6.43945 21.0195 li
6.54736 21.0195 li
6.65576 21.0195 li
6.76367 21.0195 li
6.87158 21.0195 li
6.97949 21.0195 li
7.12354 21.0557 li
7.23145 21.0557 li
7.33936 21.0557 li
7.44775 21.0557 li
7.55566 21.0557 li
7.66357 21.0557 li
7.77148 21.0557 li
7.91553 21.0918 li
8.02344 21.0918 li
8.13135 21.0918 li
8.23975 21.0918 li
8.34766 21.0918 li
8.45557 21.0918 li
8.59961 21.1274 li
8.70752 21.1274 li
8.81543 21.1274 li
8.92334 21.1274 li
9.03174 21.1274 li
9.13965 21.1274 li
9.24756 21.1274 li
9.3916 21.1636 li
9.49951 21.1636 li
9.60742 21.1636 li
9.71533 21.1636 li
9.82373 21.1636 li
9.93164 21.1636 li
10.0396 21.1997 li
10.1836 21.1997 li
10.2915 21.1997 li
10.3994 21.1997 li
10.5073 21.1997 li
10.6157 21.1997 li
10.7236 21.2358 li
10.8315 21.2358 li
10.9756 21.2358 li
11.0835 21.2358 li
11.1914 21.2358 li
11.2993 21.2358 li
11.4077 21.272 li
11.5156 21.272 li
11.6235 21.272 li
11.7676 21.272 li
11.8755 21.272 li
11.9834 21.272 li
12.0918 21.3076 li
12.1997 21.3076 li
12.3076 21.3076 li
12.4155 21.3076 li
12.5596 21.3076 li
12.6675 21.3076 li
12.7754 21.3076 li
12.8838 21.3438 li
12.9917 21.3438 li
13.0996 21.3438 li
13.2075 21.3438 li
13.3154 21.3438 li
13.4595 21.3438 li
13.5674 21.3799 li
13.6758 21.3799 li
13.7837 21.3799 li
13.8916 21.3799 li
13.9995 21.3799 li
14.1074 21.3799 li
14.2153 21.4155 li
14.3594 21.4155 li
14.4678 21.4155 li
14.5757 21.4155 li
14.6836 21.4155 li
14.7915 21.4155 li
14.8994 21.4517 li
15.0073 21.4517 li
15.1157 21.4517 li
15.2598 21.4517 li
15.3677 21.4517 li
15.4756 21.4517 li
15.5835 21.4878 li
15.6914 21.4878 li
15.7993 21.4878 li
15.9077 21.4878 li
16.0156 21.4878 li
16.1597 21.4878 li
16.2676 21.5239 li
16.3755 21.5239 li
16.4834 21.5239 li
16.5913 21.5239 li
16.6997 21.5239 li
16.8076 21.5239 li
16.9155 21.5596 li
17.0591 21.5596 li
17.1675 21.5596 li
17.2749 21.5596 li
17.3833 21.5596 li
17.4917 21.5596 li
17.5991 21.5957 li
17.7075 21.5957 li
17.8149 21.5957 li
17.8169 21.5967 li
17.6245 21.9224 17.48 22.2744 17.3892 22.6416 cv
17.4194 22.6396 li
17.2749 22.6396 li
17.1675 22.6396 li
17.0591 22.6035 li
16.9517 22.6035 li
16.8438 22.6035 li
16.7354 22.6035 li
16.6274 22.6035 li
16.5195 22.6035 li
16.4116 22.5679 li
16.3037 22.5679 li
16.1953 22.5679 li
16.0874 22.5679 li
15.9795 22.5679 li
15.8716 22.5679 li
15.7637 22.5317 li
15.6558 22.5317 li
15.5474 22.5317 li
15.4395 22.5317 li
15.3315 22.5317 li
15.2236 22.5317 li
15.1157 22.4956 li
15.0078 22.4956 li
14.8994 22.4956 li
14.7915 22.4956 li
14.6836 22.4956 li
14.5757 22.4956 li
14.4678 22.4956 li
14.3594 22.4595 li
14.2515 22.4595 li
14.1074 22.4595 li
13.9995 22.4595 li
13.8916 22.4595 li
13.7837 22.4595 li
13.6758 22.4238 li
13.5674 22.4238 li
13.4595 22.4238 li
13.3516 22.4238 li
13.2437 22.4238 li
13.1357 22.4238 li
13.0273 22.3877 li
12.9194 22.3877 li
12.8115 22.3877 li
12.7036 22.3877 li
12.5957 22.3877 li
12.4878 22.3877 li
12.3794 22.3516 li
12.2715 22.3516 li
12.1636 22.3516 li
12.0557 22.3516 li
11.9478 22.3516 li
11.8398 22.3516 li
11.6958 22.3516 li
11.5874 22.3154 li
11.4795 22.3154 li
11.3716 22.3154 li
11.2637 22.3154 li
11.1558 22.3154 li
11.0479 22.3154 li
10.9395 22.2798 li
10.8315 22.2798 li
10.7236 22.2798 li
10.6157 22.2798 li
10.5078 22.2798 li
10.3994 22.2798 li
10.2915 22.2798 li
10.1836 22.2437 li
10.0757 22.2437 li
9.96777 22.2437 li
9.85938 22.2437 li
9.75146 22.2437 li
9.64355 22.2437 li
9.49951 22.2075 li
9.3916 22.2075 li
9.28369 22.2075 li
9.17578 22.2075 li
9.06738 22.2075 li
8.95947 22.2075 li
8.85156 22.2075 li
8.74365 22.1714 li
8.63574 22.1714 li
8.52783 22.1714 li
8.41943 22.1714 li
8.31152 22.1714 li
8.20361 22.1714 li
8.0957 22.1357 li
7.98779 22.1357 li
7.87939 22.1357 li
7.77148 22.1357 li
7.66357 22.1357 li
7.55566 22.1357 li
7.41162 22.1357 li
7.30371 22.0996 li
7.1958 22.0996 li
7.0874 22.0996 li
6.97949 22.0996 li
6.87158 22.0996 li
6.76367 22.0996 li
6.65576 22.0635 li
6.54785 22.0635 li
6.43945 22.0635 li
6.33154 22.0635 li
6.22363 22.0635 li
6.11572 22.0635 li
6.00781 22.0635 li
5.89941 22.0273 li
5.7915 22.0273 li
5.68359 22.0273 li
5.57568 22.0273 li
5.46777 22.0273 li
5.32373 22.0273 li
5.21582 22.0273 li
5.10742 21.9917 li
4.99951 21.9917 li
4.8916 21.9917 li
4.78369 21.9917 li
4.67578 21.9917 li
4.56738 21.9917 li
4.45947 21.9556 li
4.35156 21.9556 li
4.24365 21.9556 li
4.13574 21.9556 li
4.02783 21.9556 li
3.91943 21.9556 li
3.81152 21.9556 li
3.70361 21.9194 li
3.5957 21.9194 li
3.45166 21.9194 li
3.45166 20.8755 li
cp
ef
3.45166 31.4956 mo
3.5957 31.5317 li
3.70361 31.5317 li
3.84766 31.5317 li
3.95557 31.5679 li
4.09961 31.5679 li
4.20752 31.5679 li
4.35156 31.6035 li
4.45947 31.6035 li
4.60352 31.6035 li
4.71143 31.6396 li
4.85547 31.6396 li
4.96338 31.6758 li
5.10742 31.6758 li
5.21582 31.6758 li
5.35938 31.7119 li
5.46777 31.7119 li
5.57568 31.7119 li
5.71973 31.7476 li
5.82764 31.7476 li
5.97168 31.7476 li
6.07959 31.7837 li
6.22363 31.7837 li
6.33154 31.8198 li
6.47559 31.8198 li
6.5835 31.8198 li
6.72754 31.856 li
6.83545 31.856 li
6.97949 31.856 li
7.0874 31.8916 li
7.23145 31.8916 li
7.33936 31.9277 li
7.44775 31.9277 li
7.5918 31.9277 li
7.69971 31.9639 li
7.84375 31.9639 li
7.95166 31.9995 li
8.0957 31.9995 li
8.20361 31.9995 li
8.34766 32.0356 li
8.45557 32.0356 li
8.59961 32.0718 li
8.70752 32.0718 li
8.85156 32.1079 li
8.95947 32.1079 li
9.06738 32.1079 li
9.21143 32.1436 li
9.31934 32.1436 li
9.46338 32.1797 li
9.57178 32.1797 li
9.71582 32.1797 li
9.82373 32.2158 li
9.96777 32.2158 li
10.0757 32.252 li
10.1836 32.252 li
10.3276 32.2876 li
10.4355 32.2876 li
10.5796 32.2876 li
10.6875 32.3237 li
10.8315 32.3237 li
10.9395 32.3599 li
11.0835 32.3599 li
11.1914 32.396 li
11.2998 32.396 li
11.4434 32.4316 li
11.5518 32.4316 li
11.6953 32.4316 li
11.8037 32.4678 li
11.9478 32.4678 li
12.0557 32.5039 li
12.1636 32.5039 li
12.3076 32.54 li
12.4155 32.54 li
12.5596 32.5757 li
12.6675 32.5757 li
12.8115 32.6118 li
12.9194 32.6118 li
13.0273 32.6118 li
13.1714 32.6479 li
13.2798 32.6479 li
13.4233 32.6841 li
13.5317 32.6841 li
13.6396 32.7197 li
13.7837 32.7197 li
13.8916 32.7559 li
14.0356 32.7559 li
14.1436 32.792 li
14.2876 32.792 li
14.3955 32.8276 li
14.5034 32.8276 li
14.6475 32.8638 li
14.7554 32.8638 li
14.8994 32.8999 li
15.0078 32.8999 li
15.1157 32.936 li
15.2598 32.936 li
15.3677 32.9717 li
15.4756 32.9717 li
15.6196 33.0078 li
15.7275 33.0078 li
15.8716 33.0439 li
15.9795 33.0439 li
16.0874 33.0801 li
16.2314 33.0801 li
16.3394 33.1157 li
16.4834 33.1157 li
16.5918 33.1519 li
16.6997 33.1519 li
16.8438 33.188 li
16.9517 33.188 li
17.0591 33.2241 li
17.2036 33.2241 li
17.311 33.2598 li
17.4556 33.2959 li
17.563 33.2959 li
17.6714 33.332 li
17.8149 33.332 li
17.9233 33.3682 li
18.0317 33.3682 li
18.1753 33.4038 li
18.2837 33.4038 li
18.3911 33.4399 li
18.5356 33.4399 li
18.6431 33.4761 li
18.7515 33.4761 li
18.895 33.5122 li
19.0034 33.5479 li
19.1108 33.5479 li
19.2554 33.584 li
19.3638 33.584 li
19.4712 33.6201 li
19.6157 33.6201 li
19.7231 33.6558 li
19.8315 33.6919 li
19.9751 33.6919 li
20.0835 33.728 li
20.1909 33.728 li
20.3354 33.7642 li
20.4429 33.7642 li
20.5513 33.7998 li
20.6948 33.7998 li
20.8032 33.8359 li
20.9116 33.8721 li
21.019 33.8721 li
21.1636 33.9082 li
21.271 33.9082 li
21.3794 33.9438 li
21.5229 33.98 li
21.6313 33.98 li
21.7397 34.0161 li
21.8472 34.0161 li
21.9917 34.0522 li
22.0991 34.0879 li
22.2075 34.0879 li
22.3511 34.124 li
22.4595 34.124 li
22.5669 34.1602 li
22.6753 34.1963 li
22.8188 34.1963 li
22.9272 34.2319 li
23.0356 34.2319 li
23.1431 34.2681 li
23.2876 34.3042 li
23.395 34.3042 li
23.5034 34.3403 li
23.6108 34.3403 li
23.7554 34.376 li
23.8638 34.4121 li
23.9712 34.4121 li
24.0796 34.4482 li
24.2231 34.4482 li
24.3315 34.4839 li
24.439 34.52 li
24.5474 34.52 li
24.6558 34.5562 li
24.7993 34.5923 li
24.9077 34.5923 li
25.0151 34.6284 li
25.1235 34.6641 li
25.231 34.6641 li
25.3755 34.7002 li
25.4829 34.7363 li
25.5913 34.7363 li
25.6997 34.772 li
25.8071 34.772 li
25.9517 34.8081 li
26.0591 34.8442 li
26.1675 34.8442 li
26.2749 34.8804 li
26.3833 34.916 li
26.4917 34.916 li
26.6353 34.9521 li
26.7437 34.9883 li
26.8511 34.9883 li
26.9595 35.0244 li
27.0669 35.0601 li
27.1753 35.0601 li
27.2837 35.0962 li
27.4272 35.1323 li
27.5356 35.1323 li
27.6431 35.1685 li
27.7515 35.2041 li
27.8589 35.2041 li
27.9673 35.2402 li
28.0757 35.2764 li
28.1831 35.2764 li
28.3276 35.3125 li
28.4351 35.3481 li
28.5435 35.3481 li
28.6509 35.3843 li
28.7593 35.4204 li
28.8677 35.4204 li
28.9751 35.4565 li
29.0835 35.4922 li
29.1909 35.5283 li
29.2993 35.5283 li
29.4077 35.5645 li
29.5513 35.6001 li
29.6597 35.6001 li
29.7671 35.6362 li
29.8755 35.6724 li
29.9829 35.6724 li
30.0913 35.7085 li
30.1997 35.7441 li
30.3071 35.7803 li
30.4155 35.7803 li
30.5229 35.8164 li
30.6313 35.8525 li
30.7397 35.8525 li
30.8472 35.8882 li
30.9556 35.9243 li
31.063 35.9604 li
31.1714 35.9604 li
31.2788 35.9966 li
31.3872 36.0322 li
31.4956 36.0322 li
31.603 36.0684 li
31.7114 36.1045 li
31.8188 36.1406 li
31.9272 36.1406 li
32.0356 36.1763 li
32.1431 36.2124 li
32.2515 36.2485 li
32.3589 36.2485 li
32.4673 36.2847 li
32.5757 36.3203 li
32.6831 36.3564 li
32.7915 36.3564 li
32.8989 36.3926 li
33.0073 36.4282 li
33.1157 36.4644 li
33.2231 36.4644 li
33.3315 36.5005 li
33.439 36.5366 li
33.5474 36.5723 li
33.6196 36.5723 li
33.7271 36.6084 li
33.8354 36.6445 li
33.9429 36.6807 li
34.0513 36.6807 li
34.1597 36.7163 li
34.2671 36.7524 li
34.3755 36.7886 li
34.4829 36.7886 li
34.5913 36.8247 li
34.6636 36.8604 li
34.771 36.8965 li
34.8794 36.9326 li
34.9868 36.9326 li
35.0952 36.9688 li
35.2036 37.0044 li
35.311 37.0405 li
35.3833 37.0405 li
35.4917 37.0767 li
35.5991 37.1128 li
35.7075 37.1484 li
35.8149 37.1846 li
35.9233 37.1846 li
35.9956 37.2207 li
36.103 37.2563 li
36.2114 37.2925 li
36.3188 37.3286 li
36.4272 37.3286 li
36.4995 37.3647 li
36.6069 37.4004 li
36.7153 37.4365 li
36.8237 37.4727 li
36.9312 37.4727 li
37.0034 37.5088 li
37.1108 37.5444 li
37.2192 37.5806 li
37.3276 37.6167 li
37.3989 37.6167 li
37.5073 37.6528 li
37.6157 37.6885 li
37.687 37.7246 li
37.7954 37.7607 li
37.9028 37.7607 li
38.0112 37.7969 li
38.0835 37.8325 li
38.1909 37.8687 li
38.2993 37.9048 li
38.4077 37.9409 li
38.479 37.9409 li
38.5874 37.9766 li
38.6948 38.0127 li
38.7671 38.0488 li
38.8755 38.0845 li
38.9829 38.1206 li
39.0552 38.1206 li
39.1636 38.1567 li
39.271 38.1929 li
39.3433 38.229 li
39.4517 38.2646 li
39.5229 38.3008 li
39.6313 38.3369 li
39.7388 38.3369 li
39.811 38.3726 li
39.9194 38.4087 li
40.0269 38.4448 li
40.0991 38.481 li
40.2075 38.5166 li
40.2788 38.5166 li
40.3872 38.5527 li
40.4595 38.5889 li
40.5669 38.625 li
40.6753 38.6606 li
40.7476 38.6968 li
40.855 38.7329 li
40.9272 38.7329 li
41.0356 38.769 li
41.1069 38.8047 li
41.2153 38.8408 li
41.2876 38.877 li
41.395 38.9131 li
41.5034 38.9487 li
41.5757 38.9849 li
41.6831 38.9849 li
41.7554 39.021 li
41.8628 39.0571 li
41.9351 39.0928 li
42.0073 39.1289 li
42.1157 39.165 li
42.187 39.2007 li
42.2954 39.2368 li
42.3677 39.2729 li
42.4751 39.2729 li
42.5474 39.3091 li
42.6548 39.3447 li
42.7271 39.3809 li
42.8354 39.417 li
42.9077 39.4531 li
42.979 39.4888 li
43.0874 39.5249 li
43.1597 39.561 li
43.2671 39.5972 li
43.3394 39.5972 li
43.4116 39.6328 li
43.519 39.6689 li
43.5913 39.7051 li
43.6997 39.7412 li
43.771 39.7769 li
43.8433 39.813 li
43.9517 39.8491 li
44.0229 39.8853 li
44.0952 39.9209 li
44.2036 39.957 li
44.2749 39.957 li
44.3472 39.9932 li
44.4556 40.0288 li
44.5269 40.0649 li
44.5991 40.1011 li
44.7075 40.1372 li
44.7788 40.1729 li
44.8511 40.209 li
44.9233 40.2451 li
45.0308 40.2813 li
45.103 40.3169 li
45.1753 40.353 li
45.2476 40.3892 li
45.355 40.4253 li
45.4272 40.4253 li
45.4995 40.4609 li
45.5708 40.4971 li
45.6792 40.5332 li
45.7515 40.5693 li
45.8228 40.605 li
45.895 40.6411 li
45.9673 40.6772 li
46.0757 40.7134 li
46.147 40.749 li
46.2192 40.7852 li
46.2915 40.8213 li
46.3628 40.8569 li
46.4351 40.8931 li
46.5435 40.9292 li
46.6147 40.9653 li
46.687 41.001 li
46.7593 41.0371 li
46.8315 41.0732 li
46.9028 41.1094 li
46.9751 41.1094 li
47.0474 41.145 li
47.1196 41.1812 li
47.2271 41.2173 li
47.2993 41.2534 li
47.3716 41.2891 li
47.4429 41.3252 li
47.5151 41.3613 li
47.5874 41.3975 li
47.6587 41.4331 li
47.731 41.4692 li
47.8032 41.5054 li
47.8755 41.5415 li
47.9468 41.5771 li
48.019 41.6133 li
48.0913 41.6494 li
48.1636 41.6851 li
48.2349 41.7212 li
48.3071 41.7573 li
48.3794 41.7935 li
48.4507 41.8296 li
48.5229 41.8652 li
48.5952 41.9014 li
48.6675 41.9375 li
48.7388 41.9731 li
48.811 42.0093 li
48.8472 42.0454 li
48.9194 42.0815 li
48.9907 42.1172 li
49.063 42.1533 li
49.1353 42.1895 li
49.2075 42.2256 li
49.2788 42.2612 li
49.3511 42.2974 li
49.3872 42.3335 li
49.4595 42.3696 li
49.5308 42.4053 li
49.603 42.4414 li
49.6753 42.4775 li
49.7466 42.5137 li
49.7827 42.5493 li
49.855 42.5854 li
49.9272 42.6216 li
49.9995 42.6577 li
50.0708 42.6934 li
50.1069 42.7295 li
50.1792 42.7656 li
50.2515 42.8013 li
50.3228 42.8374 li
50.3589 42.8735 li
50.4312 42.9097 li
50.5034 42.9453 li
50.5747 42.9814 li
50.6108 43.0176 li
50.6831 43.0537 li
50.7554 43.0894 li
50.7915 43.1255 li
50.8628 43.1616 li
50.9351 43.1978 li
50.9712 43.2334 li
51.0435 43.2695 li
51.1147 43.3057 li
51.1509 43.3774 li
51.2231 43.4136 li
51.2593 43.4497 li
51.3306 43.4858 li
51.4028 43.5215 li
51.439 43.5576 li
51.5112 43.5938 li
51.5825 43.6294 li
51.6187 43.6655 li
51.6909 43.7017 li
51.7271 43.7378 li
51.7993 43.7734 li
51.8354 43.8096 li
51.9067 43.8457 li
51.9429 43.8818 li
52.0151 43.9175 li
52.0513 43.9536 li
52.1226 43.9897 li
52.1587 44.0259 li
52.231 44.0615 li
52.2671 44.0977 li
52.3394 44.1338 li
52.3745 44.1699 li
52.4468 44.2056 li
52.4829 44.2778 li
52.5552 44.314 li
52.5913 44.3496 li
52.6265 44.3857 li
52.6987 44.4219 li
52.7349 44.4575 li
52.8071 44.4937 li
52.8433 44.5298 li
52.8794 44.5659 li
52.9507 44.6016 li
52.9868 44.6377 li
53.0229 44.6738 li
53.0952 44.71 li
53.1313 44.7456 li
53.1665 44.7817 li
53.2388 44.8179 li
53.2749 44.854 li
53.311 44.8896 li
53.3833 44.9619 li
53.4185 44.998 li
53.4546 45.0337 li
53.4907 45.0698 li
53.563 45.106 li
53.5991 45.1421 li
53.6353 45.1777 li
53.6714 45.2139 li
53.7427 45.25 li
53.7788 45.2856 li
53.8149 45.3218 li
53.8511 45.3579 li
53.8872 45.394 li
53.9233 45.4302 li
53.9946 45.4658 li
54.0308 45.5381 li
54.0669 45.5737 li
54.103 45.6099 li
54.1392 45.646 li
54.1753 45.6821 li
54.2104 45.7178 li
54.2466 45.7539 li
54.3188 45.79 li
54.355 45.8262 li
54.3911 45.8618 li
54.4272 45.8979 li
54.4624 45.9341 li
54.4985 45.9702 li
54.5347 46.042 li
54.5708 46.0781 li
54.6069 46.1143 li
54.6431 46.1499 li
54.6792 46.186 li
54.7153 46.2222 li
54.7505 46.2583 li
54.7866 46.2939 li
54.8228 46.3301 li
54.8589 46.3662 li
54.895 46.4019 li
54.9312 46.438 li
54.9673 46.4741 li
54.9673 46.5459 li
55.0024 46.582 li
55.0386 46.6182 li
55.0747 46.6543 li
55.1108 46.6899 li
55.147 46.7261 li
55.1831 46.7622 li
55.2192 46.7983 li
55.2192 46.834 li
55.2544 46.8701 li
55.2905 46.9063 li
55.3267 46.9424 li
55.3628 46.978 li
55.3628 47.0142 li
55.3989 47.0864 li
55.4351 47.1221 li
55.4712 47.1582 li
55.5063 47.1943 li
55.5063 47.23 li
55.5425 47.2661 li
55.5786 47.3022 li
55.5786 47.3384 li
55.6147 47.374 li
55.6509 47.4102 li
55.687 47.4463 li
55.687 47.4824 li
55.7231 47.5181 li
55.7593 47.5903 li
55.7593 47.6265 li
55.7944 47.6621 li
55.7944 47.6982 li
55.8306 47.7344 li
55.8667 47.7705 li
55.8667 47.8062 li
55.9028 47.8423 li
55.939 47.8784 li
55.939 47.9146 li
55.9751 47.9502 li
55.9751 47.9863 li
56.0112 48.0225 li
56.0112 48.0581 li
56.0464 48.0942 li
56.0464 48.1304 li
56.0825 48.2021 li
56.0825 48.2383 li
56.1187 48.2744 li
56.1187 48.3105 li
56.1548 48.3462 li
56.1548 48.3823 li
56.1909 48.4185 li
56.1909 48.4546 li
56.2271 48.4902 li
56.2271 48.5264 li
56.2632 48.5625 li
56.2632 48.5986 li
56.2632 48.6343 li
56.2983 48.6704 li
56.2983 48.7065 li
56.3345 48.7783 li
56.3345 48.8145 li
56.3345 48.8506 li
56.3706 48.8862 li
56.3706 48.9224 li
56.3706 48.9585 li
56.4067 48.9946 li
56.4067 49.0308 li
56.4067 49.0664 li
56.4429 49.1025 li
56.4429 49.1387 li
56.4429 49.1743 li
56.4429 49.2104 li
56.479 49.2466 li
56.479 49.2827 li
56.479 49.3184 li
56.479 49.3545 li
56.5151 49.4268 li
56.5151 49.4624 li
56.5151 49.4985 li
56.5151 49.5347 li
56.5151 49.5708 li
56.5513 49.6064 li
56.5513 49.6426 li
56.5513 49.6787 li
56.5513 49.7148 li
56.5513 49.7505 li
56.5864 49.7866 li
56.5864 49.8228 li
56.5864 49.8589 li
56.5864 49.8945 li
56.5864 49.9307 li
56.5864 50.0024 li
56.5864 50.0386 li
56.5864 50.0747 li
56.5864 50.1108 li
56.5864 50.1465 li
56.5864 50.1826 li
56.6226 50.2188 li
56.6226 50.2549 li
56.6226 50.2905 li
56.6226 50.3267 li
56.6226 50.3628 li
56.6226 50.3989 li
56.6226 50.4346 li
56.6226 50.5068 li
56.6226 50.543 li
56.6226 50.5786 li
56.6226 50.6147 li
56.5864 50.6509 li
56.5864 50.687 li
56.5864 50.7227 li
56.5864 50.7588 li
56.5864 50.7949 li
56.5864 50.8306 li
56.5864 50.9028 li
56.5864 50.939 li
56.5864 50.9746 li
56.5864 51.0107 li
56.5864 51.0469 li
56.5513 51.083 li
56.5513 51.1187 li
56.5513 51.1548 li
56.5513 51.2271 li
56.5513 51.2627 li
56.5513 51.2988 li
56.5151 51.335 li
56.5151 51.3711 li
56.5151 51.4067 li
56.5151 51.4429 li
56.479 51.479 li
56.479 51.5508 li
56.479 51.5869 li
56.479 51.623 li
56.479 51.6587 li
56.4429 51.6948 li
56.4429 51.731 li
56.4429 51.8027 li
56.4067 51.8389 li
56.4067 51.875 li
56.4067 51.9111 li
56.3706 51.9468 li
56.3706 52.019 li
56.3706 52.0552 li
56.3345 52.0908 li
56.3345 52.127 li
56.3345 52.1631 li
56.2983 52.2349 li
56.2983 52.271 li
56.2632 52.3071 li
56.2632 52.3433 li
56.2632 52.3789 li
56.2271 52.4512 li
56.2271 52.4868 li
56.1909 52.5229 li
56.1909 52.5591 li
56.1548 52.5952 li
56.1548 52.667 li
56.1187 52.7031 li
56.1187 52.7393 li
56.0825 52.7749 li
56.0825 52.8472 li
56.0464 52.8833 li
56.0464 52.9189 li
56.0112 52.9551 li
56.0112 53.0273 li
55.9751 53.063 li
55.9751 53.0991 li
55.939 53.1353 li
55.9028 53.207 li
55.9028 53.2432 li
55.8667 53.2793 li
55.8667 53.3154 li
55.8306 53.3872 li
55.7944 53.4233 li
55.7944 53.4595 li
55.7593 53.4951 li
55.7593 53.5674 li
55.7231 53.603 li
55.687 53.6392 li
55.6509 53.7114 li
55.6509 53.7471 li
55.6147 53.7832 li
55.5786 53.8193 li
55.5786 53.8911 li
55.5425 53.9272 li
55.5063 53.9634 li
55.4712 54.0352 li
55.4712 54.0713 li
55.4351 54.1074 li
55.3989 54.1792 li
55.3628 54.2153 li
55.3628 54.2515 li
55.3267 54.3232 li
55.2905 54.3594 li
55.2544 54.3955 li
55.2192 54.4312 li
55.2192 54.5034 li
55.1831 54.5396 li
55.147 54.5752 li
55.1108 54.6475 li
55.0747 54.6836 li
55.0386 54.7192 li
55.0024 54.7915 li
54.9673 54.8276 li
54.9673 54.8994 li
54.9312 54.9355 li
54.895 54.9717 li
54.8589 55.0435 li
54.8228 55.0796 li
54.7866 55.1157 li
54.7505 55.1875 li
54.7153 55.2236 li
54.6792 55.2593 li
54.6431 55.3315 li
54.6069 55.3677 li
54.5708 55.4033 li
54.5347 55.4756 li
54.4985 55.5117 li
54.4624 55.5474 li
54.4272 55.6196 li
54.3911 55.6558 li
54.355 55.6914 li
54.3188 55.7637 li
54.3169 55.7432 li
54.4829 55.7061 54.6528 55.6875 54.8237 55.6875 cv
55.0825 55.6875 55.3403 55.731 55.5854 55.8149 cv
55.5796 55.8315 li
55.7593 55.5796 li
55.939 55.3276 li
56.0835 55.0757 li
56.2271 54.8594 li
56.3716 54.6074 li
56.5151 54.3555 li
56.6597 54.1035 li
56.7671 53.8877 li
56.8755 53.6357 li
56.9829 53.3833 li
57.0913 53.1675 li
57.1997 52.9155 li
57.271 52.6997 li
57.3433 52.4473 li
57.4155 52.2314 li
57.4878 51.9795 li
57.5229 51.7637 li
57.5591 51.5112 li
57.5952 51.2954 li
57.6313 51.0435 li
57.6675 50.8276 li
57.6675 50.6113 li
57.6675 50.3594 li
57.6675 50.1436 li
57.6675 49.9272 li
57.6313 49.7114 li
57.5952 49.4956 li
57.5591 49.2432 li
57.5229 49.0273 li
57.4517 48.8115 li
57.3794 48.5952 li
57.3071 48.3794 li
57.2349 48.1636 li
57.1274 47.9473 li
57.0552 47.7314 li
56.9478 47.5151 li
56.8394 47.2993 li
56.6958 47.0835 li
56.5874 46.9033 li
56.4429 46.6875 li
56.2993 46.4712 li
56.1558 46.2554 li
55.9751 46.0752 li
55.7954 45.8594 li
55.6509 45.6431 li
55.4351 45.4634 li
55.2554 45.2471 li
55.0757 45.0674 li
54.8589 44.8511 li
54.6431 44.6714 li
54.4272 44.4551 li
54.2114 44.2754 li
53.9956 44.0591 li
53.7437 43.8794 li
53.4917 43.6992 li
53.2397 43.4834 li
52.9878 43.3032 li
52.6997 43.123 li
52.4478 42.9434 li
52.1597 42.7271 li
51.8716 42.5474 li
51.5835 42.3672 li
51.2954 42.187 li
51.0073 42.0073 li
50.6831 41.8271 li
50.3589 41.6475 li
50.0356 41.4673 li
49.7114 41.2871 li
49.3872 41.1074 li
49.0269 40.9272 li
48.7036 40.7832 li
48.3433 40.603 li
47.9829 40.4233 li
47.6235 40.2432 li
47.2632 40.0991 li
46.9028 39.9194 li
46.5073 39.7393 li
46.147 39.5952 li
45.7515 39.4155 li
45.355 39.2715 li
44.9595 39.0913 li
44.5269 38.9473 li
44.1313 38.7671 li
43.7349 38.6235 li
43.3032 38.4795 li
42.8716 38.2993 li
42.439 38.1553 li
42.0073 38.0112 li
41.5757 37.8315 li
41.1431 37.6875 li
40.7114 37.5435 li
40.2437 37.3994 li
39.7749 37.2554 li
39.3433 37.1113 li
38.8755 36.9673 li
38.4077 36.8232 li
37.939 36.6792 li
37.4712 36.5352 li
36.9673 36.3911 li
36.4995 36.2476 li
35.9956 36.1035 li
35.5269 35.9956 li
35.0229 35.8516 li
34.519 35.7075 li
34.0151 35.5996 li
33.5112 35.4556 li
33.0073 35.3115 li
32.5034 35.2036 li
31.9995 35.0596 li
31.4595 34.9517 li
30.9556 34.8076 li
30.4155 34.6997 li
29.8755 34.5913 li
29.3716 34.4473 li
28.8315 34.3394 li
28.2915 34.2314 li
27.7515 34.0874 li
27.2114 33.9795 li
26.6714 33.8716 li
26.1313 33.7637 li
25.5552 33.6558 li
25.0151 33.5474 li
24.4751 33.4395 li
23.8989 33.3315 li
23.3589 33.2236 li
22.7837 33.1157 li
22.2075 33.0078 li
21.6675 32.8999 li
21.0913 32.8276 li
20.5151 32.7197 li
19.939 32.6118 li
19.3638 32.5034 li
18.8237 32.4316 li
18.2114 32.3237 li
17.6353 32.2515 li
17.0591 32.1436 li
16.4834 32.0718 li
15.9077 31.9639 li
15.3315 31.8916 li
14.7554 31.7837 li
14.1436 31.7114 li
13.5674 31.6396 li
12.9917 31.5317 li
12.3794 31.4595 li
11.8037 31.3877 li
11.1914 31.3154 li
10.6157 31.2437 li
10.0396 31.1714 li
9.42773 31.0996 li
8.85156 31.0278 li
8.23975 30.9556 li
7.62744 30.8833 li
7.05176 30.8115 li
6.43945 30.7397 li
5.86377 30.6675 li
5.25146 30.6313 li
4.67578 30.5596 li
4.06348 30.4873 li
3.45166 30.4517 li
3.45166 31.4956 li
cp
ef
3.45166 89.7793 mo
3.55957 89.7432 li
3.63135 89.6709 li
3.73975 89.6348 li
3.81152 89.5635 li
3.91943 89.5273 li
3.9917 89.4551 li
4.09961 89.4189 li
4.17139 89.3467 li
4.27979 89.3115 li
4.35156 89.2754 li
4.45947 89.2031 li
4.53174 89.167 li
4.63965 89.0947 li
4.71143 89.0586 li
4.81934 88.9873 li
4.8916 88.9512 li
4.99951 88.8789 li
5.07178 88.8428 li
5.17969 88.7715 li
5.25146 88.7354 li
5.35938 88.6631 li
5.43164 88.627 li
5.53955 88.5547 li
5.64746 88.5186 li
5.71973 88.4473 li
5.82764 88.4111 li
5.89941 88.3389 li
6.00781 88.3027 li
6.07959 88.2305 li
6.1875 88.1953 li
6.29541 88.123 li
6.36768 88.0869 li
6.47559 88.0146 li
6.54736 87.9785 li
6.65576 87.9072 li
6.76367 87.8711 li
6.83545 87.7988 li
6.94336 87.7627 li
7.01563 87.6904 li
7.12354 87.6553 li
7.23145 87.583 li
7.30371 87.5469 li
7.41162 87.4746 li
7.51953 87.4385 li
7.5918 87.3672 li
7.69971 87.3311 li
7.77148 87.2588 li
7.87939 87.2227 li
7.98779 87.1504 li
8.05957 87.1143 li
8.16748 87.043 li
8.27539 87.0068 li
8.34766 86.9346 li
8.45557 86.8623 li
8.56348 86.8271 li
8.63574 86.7549 li
8.74365 86.7188 li
8.85156 86.6465 li
8.92383 86.6104 li
9.03174 86.5391 li
9.13965 86.5029 li
9.24756 86.4307 li
9.31934 86.3945 li
9.42773 86.3223 li
9.53564 86.2861 li
9.60742 86.2148 li
9.71582 86.1787 li
9.82373 86.1064 li
9.93164 86.0342 li
10.0034 85.998 li
10.1113 85.9268 li
10.2197 85.8906 li
10.2915 85.8184 li
10.3994 85.7822 li
10.5078 85.7109 li
10.6157 85.6748 li
10.6875 85.6025 li
10.7954 85.5664 li
10.9033 85.4941 li
11.0117 85.4229 li
11.0835 85.3867 li
11.1914 85.3145 li
11.2998 85.2783 li
11.4077 85.2061 li
11.5156 85.1699 li
11.5874 85.0986 li
11.6953 85.0625 li
11.8037 84.9902 li
11.9116 84.918 li
11.9834 84.8828 li
12.0918 84.8105 li
12.1997 84.7744 li
12.3076 84.7021 li
12.4155 84.666 li
12.4873 84.5947 li
12.5957 84.5586 li
12.7036 84.4863 li
12.8115 84.4141 li
12.9194 84.3779 li
12.9917 84.3066 li
13.0996 84.2705 li
13.2075 84.1982 li
13.3154 84.1621 li
13.4233 84.0898 li
13.4956 84.0186 li
13.6035 83.9824 li
13.7114 83.9102 li
13.8193 83.874 li
13.9277 83.8018 li
14.0356 83.7666 li
14.1074 83.6943 li
14.2153 83.6221 li
14.3237 83.5859 li
14.4316 83.5137 li
14.5396 83.4785 li
14.6475 83.4063 li
14.7197 83.334 li
14.8276 83.2979 li
14.9355 83.2266 li
15.0435 83.1904 li
15.1514 83.1182 li
15.2598 83.082 li
15.3677 83.0098 li
15.4395 82.9385 li
15.5474 82.9023 li
15.6558 82.8301 li
15.7637 82.7939 li
15.749 82.8145 li
15.7588 82.4238 15.7637 82.0342 15.7637 81.6436 cv
15.7637 81.6152 15.7637 81.5869 15.7637 81.5596 cv
15.7637 81.5713 li
15.6914 81.6074 li
15.6558 81.6436 li
15.5835 81.6787 li
15.5117 81.7148 li
15.4395 81.751 li
15.3677 81.7871 li
15.2954 81.8232 li
15.2236 81.8594 li
15.1514 81.8955 li
15.0796 81.9316 li
15.0435 81.9668 li
14.9717 82.0029 li
14.8994 82.0391 li
14.8276 82.0752 li
14.7554 82.1113 li
14.6836 82.1475 li
14.6113 82.1836 li
14.5396 82.2549 li
14.4678 82.291 li
14.4316 82.3271 li
14.3594 82.3633 li
14.2876 82.3994 li
14.2153 82.4355 li
14.1436 82.4717 li
14.0713 82.5068 li
13.9995 82.543 li
13.9277 82.5791 li
13.8916 82.6152 li
13.8193 82.6514 li
13.7476 82.6875 li
13.6758 82.7236 li
13.6035 82.7598 li
13.5317 82.7949 li
13.4595 82.8311 li
13.3877 82.8672 li
13.3516 82.9033 li
13.2793 82.9395 li
13.2075 82.9756 li
13.1357 83.0117 li
13.0635 83.0479 li
12.9917 83.1191 li
12.9194 83.1553 li
12.8838 83.1914 li
12.8115 83.2275 li
12.7397 83.2637 li
12.6675 83.2998 li
12.5957 83.335 li
12.5234 83.3711 li
12.4517 83.4072 li
12.4155 83.4434 li
12.3438 83.4795 li
12.2715 83.5156 li
12.1997 83.5518 li
12.1274 83.5879 li
12.0557 83.623 li
11.9834 83.6592 li
11.9478 83.6953 li
11.8755 83.7314 li
11.8037 83.7676 li
11.7314 83.8037 li
11.6597 83.8398 li
11.5874 83.876 li
11.5518 83.9111 li
11.4795 83.9473 li
11.4077 83.9834 li
11.3354 84.0195 li
11.2637 84.0557 li
11.1914 84.0918 li
11.1553 84.1279 li
11.0835 84.1992 li
11.0117 84.2354 li
10.9395 84.2715 li
10.8677 84.3076 li
10.7954 84.3438 li
10.7598 84.3799 li
10.6875 84.416 li
10.6157 84.4512 li
10.5435 84.4873 li
10.4717 84.5234 li
10.3994 84.5596 li
10.3633 84.5957 li
10.2915 84.6318 li
10.2197 84.668 li
10.1475 84.7041 li
10.0757 84.7393 li
10.0396 84.7754 li
9.96777 84.8115 li
9.89551 84.8477 li
9.82373 84.8838 li
9.75146 84.9199 li
9.67969 84.9561 li
9.64355 84.9922 li
9.57129 85.0273 li
9.49951 85.0635 li
9.42773 85.0996 li
9.35547 85.1357 li
9.31934 85.1719 li
9.24756 85.208 li
9.17529 85.2441 li
9.10352 85.2793 li
9.03174 85.3154 li
8.99561 85.3516 li
8.92334 85.3877 li
8.85156 85.4238 li
8.7793 85.46 li
8.74365 85.4961 li
8.67139 85.5322 li
8.59961 85.5674 li
8.52734 85.6035 li
8.45557 85.6396 li
8.41943 85.6758 li
8.34766 85.7119 li
8.27539 85.748 li
8.20361 85.7842 li
8.13135 85.8203 li
8.0957 85.8555 li
8.02344 85.8916 li
7.95166 85.9277 li
7.87939 85.9639 li
7.84375 86 li
7.77148 86.0361 li
7.69971 86.0723 li
7.62744 86.1074 li
7.59131 86.1436 li
7.51953 86.2158 li
7.44727 86.2158 li
7.37549 86.252 li
7.33936 86.2881 li
7.26758 86.3604 li
7.19531 86.3955 li
7.12354 86.3955 li
7.0874 86.4678 li
7.01563 86.5039 li
6.94336 86.5039 li
6.87158 86.5762 li
6.83545 86.6123 li
6.76367 86.6484 li
6.69141 86.6484 li
6.61963 86.7197 li
6.5835 86.7559 li
6.51172 86.7559 li
6.43945 86.8281 li
6.36768 86.8643 li
6.33154 86.8643 li
6.25928 86.9355 li
6.1875 86.9717 li
6.15137 86.9717 li
6.07959 87.0078 li
6.00732 87.0801 li
5.93555 87.0801 li
5.89941 87.1162 li
5.82764 87.1885 li
5.75537 87.1885 li
5.71973 87.2236 li
5.64746 87.2598 li
5.57568 87.2959 li
5.50342 87.332 li
5.46729 87.3682 li
5.39551 87.4043 li
5.32324 87.4404 li
5.2876 87.4766 li
5.21533 87.5117 li
5.14355 87.5479 li
5.10742 87.584 li
5.03564 87.6201 li
4.96338 87.6563 li
4.8916 87.6924 li
4.85547 87.7285 li
4.78369 87.7637 li
4.71143 87.7998 li
4.67529 87.8359 li
4.60352 87.8721 li
4.53125 87.9082 li
4.49561 87.9443 li
4.42334 87.9805 li
4.35156 88.0166 li
4.31543 88.0518 li
4.24365 88.0879 li
4.17139 88.124 li
4.13525 88.1602 li
4.06348 88.1963 li
3.99121 88.2324 li
3.95557 88.2686 li
3.8833 88.3047 li
3.81152 88.3398 li
3.77539 88.376 li
3.70361 88.4121 li
3.63135 88.4482 li
3.5957 88.4844 li
3.52344 88.5205 li
3.45166 88.5566 li
3.45166 89.7793 li
cp
ef
91.6509 112.927 mo
91.7231 112.747 li
91.7954 112.567 li
91.8667 112.387 li
91.939 112.207 li
91.9751 112.027 li
92.0474 111.848 li
92.1187 111.667 li
92.1909 111.487 li
92.2271 111.308 li
92.2993 111.127 li
92.3706 110.947 li
92.4429 110.768 li
92.5151 110.587 li
92.5513 110.407 li
92.6226 110.228 li
92.6948 110.047 li
92.7671 109.867 li
92.8394 109.688 li
92.8755 109.507 li
92.9468 109.327 li
93.019 109.147 li
93.0913 108.967 li
93.1626 108.787 li
93.1987 108.607 li
93.271 108.427 li
93.3433 108.247 li
93.4146 108.067 li
93.4507 107.887 li
93.5229 107.707 li
93.5952 107.527 li
93.6675 107.348 li
93.7388 107.167 li
93.7749 106.987 li
93.8472 106.808 li
93.9194 106.627 li
93.9907 106.411 li
94.0269 106.268 li
94.0991 106.051 li
94.1714 105.871 li
94.2427 105.691 li
94.3149 105.511 li
94.3511 105.331 li
94.4233 105.151 li
94.4946 104.971 li
94.5669 104.791 li
94.603 104.611 li
94.6753 104.432 li
94.7466 104.251 li
94.8188 104.071 li
94.855 103.892 li
94.9272 103.711 li
94.9985 103.531 li
95.0708 103.352 li
95.1069 103.171 li
95.1792 102.991 li
95.2505 102.812 li
95.2866 102.631 li
95.3589 102.451 li
95.4312 102.271 li
95.5034 102.091 li
95.5386 101.911 li
95.6108 101.731 li
95.6831 101.551 li
95.7554 101.371 li
95.7905 101.191 li
95.8628 101.011 li
95.9351 100.831 li
95.9712 100.651 li
96.0425 100.471 li
96.1147 100.291 li
96.187 100.147 li
96.2231 99.9668 li
96.2944 99.7871 li
96.3667 99.6074 li
96.4028 99.4268 li
96.4751 99.2471 li
96.5464 99.0674 li
96.5825 98.8867 li
96.6548 98.707 li
96.7271 98.5273 li
96.7632 98.3477 li
96.8345 98.167 li
96.9067 97.9873 li
96.9429 97.8076 li
97.0151 97.627 li
97.0864 97.4473 li
97.1226 97.2676 li
97.1948 97.0869 li
97.2671 96.9072 li
97.3032 96.7275 li
97.3745 96.5469 li
97.4106 96.3672 li
97.4829 96.1875 li
97.5552 96.0068 li
97.5913 95.8633 li
97.6626 95.6836 li
97.7349 95.5029 li
97.771 95.3232 li
97.8433 95.1436 li
97.8784 94.9629 li
97.9507 94.7832 li
98.0229 94.6035 li
98.0591 94.4229 li
98.1304 94.2432 li
98.1665 94.0635 li
98.2388 93.8828 li
98.2749 93.7393 li
98.3472 93.5596 li
98.4185 93.3789 li
98.4546 93.1992 li
98.5269 93.0195 li
98.563 92.8389 li
98.6353 92.6592 li
98.6704 92.4795 li
98.7427 92.2988 li
98.7788 92.1191 li
98.8511 91.9756 li
98.8872 91.7949 li
98.9585 91.6152 li
99.0308 91.4355 li
99.0669 91.2549 li
99.1392 91.0752 li
99.1743 90.8955 li
99.2466 90.7148 li
99.2827 90.5713 li
99.355 90.3916 li
99.3911 90.2109 li
99.4624 90.0313 li
99.4985 89.8516 li
99.5347 89.6709 li
99.6069 89.5273 li
99.6431 89.3477 li
99.7144 89.167 li
99.7505 88.9873 li
99.8228 88.8076 li
99.8589 88.627 li
99.9312 88.4834 li
99.9663 88.3027 li
100.002 88.123 li
100.075 87.9434 li
100.111 87.7637 li
100.183 87.583 li
100.218 87.4395 li
100.254 87.2588 li
100.327 87.0791 li
100.363 86.8994 li
100.435 86.7188 li
100.471 86.5752 li
100.506 86.3955 li
100.579 86.2148 li
100.615 86.0352 li
100.651 85.8916 li
100.723 85.7109 li
100.758 85.5313 li
100.794 85.3516 li
100.867 85.1709 li
100.903 85.0273 li
100.939 84.8477 li
101.011 84.667 li
101.046 84.4873 li
101.083 84.3428 li
101.155 84.1631 li
101.191 83.9834 li
101.227 83.8389 li
101.263 83.6592 li
101.334 83.4795 li
101.371 83.2988 li
101.407 83.1553 li
101.443 82.9756 li
101.515 82.7949 li
101.551 82.6514 li
101.586 82.4717 li
101.623 82.291 li
101.659 82.1113 li
101.731 81.9668 li
101.767 81.7871 li
101.803 81.6074 li
101.839 81.4629 li
101.875 81.2832 li
101.947 81.1035 li
101.983 80.959 li
102.019 80.7793 li
102.055 80.5996 li
102.091 80.4551 li
102.126 80.2754 li
102.163 80.0957 li
102.235 79.9512 li
102.271 79.7715 li
102.307 79.5908 li
102.343 79.4473 li
102.378 79.2676 li
102.415 79.123 li
102.451 78.9434 li
102.487 78.7637 li
102.523 78.6191 li
102.559 78.4395 li
102.595 78.2949 li
102.631 78.1152 li
102.667 77.9355 li
102.703 77.791 li
102.739 77.6113 li
102.775 77.4678 li
102.811 77.2871 li
102.847 77.1074 li
102.883 76.9629 li
102.919 76.7832 li
102.955 76.6396 li
102.991 76.459 li
103.027 76.3154 li
103.063 76.1357 li
103.099 75.9912 li
103.135 75.8115 li
103.171 75.667 li
103.208 75.4873 li
103.243 75.3076 li
103.279 75.1631 li
103.315 74.9834 li
103.315 74.8398 li
103.351 74.6953 li
103.387 74.5156 li
103.423 74.335 li
103.459 74.1914 li
103.495 74.0479 li
103.495 73.8672 li
103.531 73.7236 li
103.567 73.543 li
103.603 73.3994 li
103.639 73.2197 li
103.639 73.0752 li
103.675 72.8955 li
103.711 72.752 li
103.748 72.5713 li
103.748 72.4277 li
103.783 72.2837 li
103.819 72.104 li
103.855 71.96 li
103.855 71.7798 li
103.891 71.6357 li
103.927 71.4917 li
103.927 71.312 li
103.963 71.168 li
104 70.9878 li
104 70.8438 li
104.036 70.6997 li
104.071 70.52 li
104.071 70.376 li
104.107 70.2319 li
104.107 70.0518 li
104.143 69.9077 li
104.179 69.7642 li
104.179 69.584 li
104.215 69.4399 li
104.215 69.2959 li
104.251 69.1157 li
104.251 68.9722 li
104.288 68.8281 li
104.288 68.6479 li
104.324 68.5039 li
104.324 68.3599 li
104.359 68.2158 li
104.359 68.0361 li
104.395 67.8921 li
104.395 67.748 li
104.431 67.5679 li
104.431 67.4238 li
104.467 67.2798 li
104.467 67.1362 li
104.467 66.9561 li
104.503 66.812 li
104.503 66.668 li
104.503 66.5239 li
104.54 66.3799 li
104.54 66.2002 li
104.54 66.0562 li
104.576 65.9121 li
104.576 65.7681 li
104.576 65.624 li
104.611 65.4438 li
104.611 65.3003 li
104.611 65.1563 li
104.647 65.0122 li
104.647 64.8682 li
104.647 64.7241 li
104.647 64.5801 li
104.647 64.3999 li
104.683 64.2563 li
104.683 64.1123 li
104.683 63.9683 li
104.683 63.8242 li
104.683 63.6802 li
104.719 63.5361 li
104.719 63.3921 li
104.719 63.248 li
104.719 63.0684 li
104.719 62.9243 li
104.719 62.7803 li
104.719 62.6362 li
104.719 62.4922 li
104.719 62.3481 li
104.719 62.2041 li
104.719 62.0601 li
104.719 61.916 li
104.719 61.772 li
104.719 61.6284 li
104.719 61.4844 li
104.719 61.3403 li
104.719 61.1963 li
104.719 61.0522 li
104.719 60.9082 li
104.719 60.7642 li
104.719 60.6201 li
104.719 60.4761 li
104.719 60.3325 li
104.719 60.1885 li
104.683 60.0444 li
104.683 59.9365 li
104.683 59.7925 li
104.683 59.6484 li
104.683 59.5044 li
104.647 59.3604 li
104.647 59.2163 li
104.647 59.0723 li
104.647 58.9282 li
104.611 58.7842 li
104.611 58.6763 li
104.611 58.5322 li
104.611 58.3882 li
104.576 58.2446 li
104.576 58.1006 li
104.576 57.9565 li
104.54 57.8125 li
104.54 57.7046 li
104.54 57.5605 li
104.503 57.4165 li
104.503 57.2725 li
104.467 57.1284 li
104.467 57.0205 li
104.431 56.8765 li
104.431 56.7324 li
104.395 56.5884 li
104.395 56.4805 li
104.395 56.3364 li
104.359 56.1924 li
104.359 56.0483 li
104.324 55.9404 li
104.288 55.7964 li
104.288 55.6523 li
104.251 55.5444 li
104.251 55.4004 li
104.215 55.2563 li
104.179 55.1484 li
104.179 55.0044 li
104.143 54.8604 li
104.107 54.7524 li
104.107 54.6084 li
104.071 54.4644 li
104.036 54.3564 li
104.036 54.2124 li
104 54.1045 li
103.963 53.9604 li
103.927 53.8164 li
103.927 53.7085 li
103.891 53.5645 li
103.855 53.4565 li
103.819 53.3125 li
103.783 53.1685 li
103.748 53.0605 li
103.711 52.9165 li
103.711 52.8086 li
103.675 52.6646 li
103.639 52.5566 li
103.603 52.4126 li
103.567 52.3047 li
103.531 52.1606 li
103.495 52.0527 li
103.459 51.9087 li
103.423 51.8008 li
103.387 51.6929 li
103.351 51.5488 li
103.315 51.4409 li
103.279 51.2969 li
103.243 51.189 li
103.171 51.0449 li
103.135 50.937 li
103.099 50.8286 li
103.063 50.6851 li
103.027 50.5767 li
102.991 50.4688 li
102.919 50.3247 li
102.883 50.2168 li
102.847 50.0728 li
102.811 49.9648 li
102.739 49.8569 li
102.703 49.749 li
102.667 49.605 li
102.631 49.4971 li
102.559 49.3892 li
102.523 49.2451 li
102.487 49.1372 li
102.415 49.0288 li
102.379 48.9209 li
102.307 48.7769 li
102.271 48.6689 li
102.235 48.561 li
102.163 48.4531 li
102.127 48.3452 li
102.055 48.2012 li
102.019 48.0933 li
101.947 47.9849 li
101.911 47.877 li
101.839 47.769 li
101.767 47.6611 li
101.731 47.5171 li
101.659 47.4092 li
101.623 47.3013 li
101.551 47.1934 li
101.479 47.085 li
101.443 46.9771 li
101.371 46.8691 li
101.299 46.7612 li
101.263 46.6533 li
101.191 46.5454 li
101.119 46.437 li
101.083 46.3291 li
101.011 46.2212 li
100.939 46.1133 li
100.867 46.0054 li
100.795 45.8975 li
100.759 45.7896 li
100.687 45.6812 li
100.615 45.5732 li
100.542 45.4653 li
100.471 45.3574 li
100.399 45.2495 li
100.327 45.1416 li
100.291 45.0332 li
100.219 44.9253 li
100.147 44.8174 li
100.075 44.7095 li
100.003 44.6016 li
99.9312 44.4937 li
99.8589 44.4214 li
99.7866 44.3135 li
99.7153 44.2056 li
99.6431 44.0977 li
99.5708 43.9893 li
99.4995 43.8813 li
99.4272 43.8096 li
99.3188 43.7017 li
99.2466 43.5933 li
99.1753 43.4854 li
99.103 43.4136 li
99.0308 43.3057 li
98.9595 43.1978 li
98.8511 43.0894 li
98.7788 43.0176 li
98.7065 42.9097 li
98.6353 42.8018 li
98.563 42.6934 li
98.4546 42.6216 li
98.3833 42.5137 li
98.311 42.4058 li
98.2388 42.3335 li
98.1313 42.2256 li
98.0591 42.1177 li
97.9868 42.0454 li
97.8794 41.9375 li
97.8071 41.8296 li
97.7349 41.7578 li
97.6274 41.6494 li
97.5552 41.5776 li
97.4468 41.4697 li
97.3755 41.3618 li
97.3032 41.2896 li
97.1948 41.1816 li
97.1226 41.1094 li
97.0151 41.0015 li
96.9429 40.9297 li
96.8354 40.8218 li
96.7632 40.7495 li
96.6548 40.6416 li
96.5835 40.5337 li
96.4751 40.4614 li
96.3667 40.3896 li
96.2954 40.2817 li
96.187 40.2095 li
96.1147 40.1016 li
96.0073 40.0298 li
95.8989 39.9214 li
95.8267 39.8496 li
95.7192 39.7417 li
95.6108 39.6694 li
95.5386 39.5615 li
95.4312 39.4897 li
95.3228 39.4175 li
95.2515 39.3096 li
95.1431 39.2378 li
95.0347 39.1655 li
94.9272 39.0576 li
94.855 38.9854 li
94.7466 38.8774 li
94.6392 38.8057 li
94.5308 38.7334 li
94.4233 38.6255 li
94.3511 38.5537 li
94.2427 38.4814 li
94.1353 38.4097 li
94.0269 38.3018 li
93.9194 38.2295 li
93.811 38.1577 li
93.7026 38.0493 li
93.5952 37.9775 li
93.5229 37.9058 li
93.4146 37.8335 li
93.3071 37.7617 li
93.1987 37.6533 li
93.0913 37.5815 li
92.9829 37.5093 li
92.8745 37.4375 li
92.7671 37.3296 li
92.6587 37.2573 li
92.5513 37.1855 li
92.4429 37.1133 li
92.3354 37.0415 li
92.2271 36.9692 li
92.1187 36.8975 li
91.9751 36.7896 li
91.8667 36.7173 li
91.7593 36.6455 li
91.6509 36.5732 li
91.5425 36.5015 li
91.4351 36.4292 li
91.3267 36.3574 li
91.1831 36.2852 li
91.0747 36.2134 li
90.9673 36.1055 li
90.8589 36.0332 li
90.7505 35.9614 li
90.6069 35.8892 li
90.4985 35.8174 li
90.3911 35.7451 li
90.2827 35.6733 li
90.1392 35.6011 li
90.0308 35.5293 li
89.9233 35.457 li
89.8149 35.3853 li
89.6714 35.313 li
89.563 35.2412 li
89.4546 35.1694 li
89.311 35.0972 li
89.2026 35.0254 li
89.0952 34.9531 li
88.9507 34.8813 li
88.8433 34.8091 li
88.6987 34.7729 li
88.5913 34.7012 li
88.4829 34.6289 li
88.3394 34.5571 li
88.231 34.4849 li
88.0874 34.4131 li
87.979 34.3413 li
87.8345 34.269 li
87.7271 34.1968 li
87.5825 34.1611 li
87.4751 34.0889 li
87.3306 34.0171 li
87.2231 33.9448 li
87.0786 33.873 li
86.9712 33.8008 li
86.8267 33.7651 li
86.7192 33.6929 li
86.5747 33.6211 li
86.4312 33.5488 li
86.3228 33.4771 li
86.1792 33.4409 li
86.1792 33.4395 li
86.7554 34.9155 li
86.7554 34.9155 li
87.2231 35.1318 li
87.6548 35.3838 li
88.0874 35.6357 li
88.519 35.8516 li
88.9155 36.1035 li
89.3472 36.356 li
89.7427 36.6079 li
90.1753 36.8599 li
90.5708 37.1118 li
90.9673 37.3999 li
91.3628 37.6519 li
91.7231 37.9038 li
92.1187 38.1919 li
92.479 38.48 li
92.8755 38.7319 li
93.2349 39.0195 li
93.5952 39.3076 li
93.9194 39.5957 li
94.2788 39.8838 li
94.603 40.1719 li
94.9634 40.4956 li
95.2866 40.7837 li
95.6108 41.1079 li
95.9351 41.3955 li
96.2231 41.7197 li
96.5474 42.0435 li
96.8354 42.3677 li
97.1235 42.6914 li
97.4106 43.0156 li
97.6987 43.3398 li
97.9868 43.6997 li
98.2388 44.0234 li
98.5269 44.3838 li
98.7788 44.7075 li
99.0308 45.0674 li
99.2476 45.4277 li
99.4995 45.7876 li
99.7153 46.1475 li
99.9673 46.5078 li
100.183 46.8677 li
100.399 47.2637 li
100.579 47.6235 li
100.795 48.0195 li
100.975 48.4155 li
101.155 48.8115 li
101.335 49.2075 li
101.515 49.6035 li
101.659 49.9995 li
101.839 50.3955 li
101.983 50.8276 li
102.127 51.2236 li
102.271 51.6558 li
102.379 52.0879 li
102.523 52.5195 li
102.631 52.9517 li
102.739 53.3838 li
102.847 53.8159 li
102.955 54.2837 li
103.027 54.7158 li
103.135 55.1836 li
103.208 55.6519 li
103.279 56.0835 li
103.351 56.5518 li
103.387 57.0195 li
103.459 57.4878 li
103.495 57.9917 li
103.531 58.4595 li
103.567 58.9277 li
103.603 59.4316 li
103.639 59.9355 li
103.639 60.4038 li
103.675 60.9077 li
103.675 61.4116 li
103.675 61.9155 li
103.675 62.4194 li
103.639 62.9238 li
103.639 63.4634 li
103.603 63.9678 li
103.603 64.4717 li
103.567 65.0117 li
103.531 65.5518 li
103.495 66.0557 li
103.459 66.5957 li
103.387 67.1357 li
103.351 67.6758 li
103.279 68.2158 li
103.208 68.7554 li
103.135 69.2954 li
103.063 69.8716 li
102.991 70.4116 li
102.919 70.9517 li
102.847 71.5278 li
102.739 72.1035 li
102.667 72.6436 li
102.559 73.2188 li
102.451 73.7949 li
102.343 74.3711 li
102.235 74.9473 li
102.127 75.4873 li
101.983 76.0996 li
101.875 76.6748 li
101.731 77.251 li
101.624 77.8271 li
101.479 78.4033 li
101.335 79.0156 li
101.227 79.5908 li
101.047 80.2031 li
100.903 80.7793 li
100.759 81.3916 li
100.615 81.9668 li
100.471 82.5791 li
100.292 83.1914 li
100.147 83.8037 li
99.9673 84.415 li
99.7866 85.0273 li
99.6431 85.6035 li
99.4634 86.2148 li
99.2827 86.8633 li
99.103 87.4756 li
98.9233 88.0869 li
98.7427 88.6992 li
98.563 89.3115 li
98.3472 89.9238 li
98.1675 90.5713 li
97.9868 91.1836 li
97.771 91.7949 li
97.5913 92.4434 li
97.3755 93.0557 li
97.1948 93.7031 li
96.979 94.3154 li
96.7632 94.9629 li
96.5835 95.5752 li
96.3667 96.2236 li
96.1509 96.8711 li
95.9351 97.4834 li
95.7192 98.1309 li
95.5034 98.7793 li
95.2866 99.3916 li
95.0708 100.039 li
94.855 100.688 li
94.6392 101.335 li
94.4233 101.983 li
94.2075 102.596 li
93.9556 103.243 li
93.7388 103.892 li
93.5229 104.539 li
93.3071 105.188 li
93.0552 105.835 li
92.8394 106.483 li
92.6235 107.131 li
92.3716 107.779 li
92.1548 108.427 li
91.9028 109.075 li
91.687 109.688 li
91.4712 110.371 li
91.2192 110.983 li
91.0034 111.631 li
90.7515 112.279 li
90.5347 112.927 li
91.6509 112.927 li
cp
ef
.036 lw
82.2915 46.6157 mo
80.4907 46.6157 li
0 0 0 1 cmyk
@
72.7153 37.5078 mo
72.355 38.7676 li
75.7749 38.7676 li
75.7729 38.7646 li
76.1362 38.3345 76.6558 38.0664 77.2173 38.019 cv
77.2153 38.0479 li
80.1675 37.7598 li
78.2593 32.8999 li
72.7153 36.4639 li
72.7261 36.4609 li
72.7661 36.627 72.7866 36.7969 72.7866 36.9678 cv
72.7866 37.1494 72.7642 37.3306 72.7173 37.5068 cv
72.7153 37.5078 li
cp
80.4907 46.6157 mo
82.7954 40.2798 li
84.3433 42.9077 li
84.3481 42.9146 li
83.1636 43.8013 82.4116 45.1436 82.2769 46.6104 cv
80.4907 46.6157 li
cp
79.231 40.5317 mo
81.3911 40.3154 li
79.771 44.7798 li
78.5474 41.6118 li
78.5317 41.6177 li
78.4946 41.5244 78.4751 41.4243 78.4751 41.3237 cv
78.4751 40.9004 78.8081 40.5518 79.231 40.5322 cv
79.231 40.5317 li
cp
75.4155 40.9277 mo
76.7476 44.2759 li
76.7476 44.2759 li
71.8149 40.8198 li
72.0308 40.0996 li
75.271 40.0996 li
75.271 40.0986 li
75.271 40.1108 75.271 40.1235 75.271 40.1357 cv
75.271 40.4058 75.3228 40.6733 75.4233 40.9243 cv
75.4155 40.9277 li
cp
68.2866 47.5518 mo
68.3208 47.5767 li
68.2856 47.584 68.2505 47.5874 68.2153 47.5874 cv
67.937 47.5874 67.7114 47.3618 67.7114 47.0835 cv
67.7114 46.9043 67.8062 46.7388 67.9604 46.6484 cv
67.9624 46.6475 li
68.6675 46.1758 69.1772 45.4595 69.395 44.6338 cv
69.439 44.6357 li
69.6909 43.7358 li
69.7212 43.7188 li
69.2573 43.5161 68.7573 43.4116 68.2515 43.4116 cv
66.2241 43.4116 64.5796 45.0566 64.5796 47.0835 cv
64.5796 49.1104 66.2241 50.7559 68.2515 50.7559 cv
70.2778 50.7559 71.9233 49.1104 71.9233 47.0835 cv
71.9233 46.1099 71.5366 45.1758 70.8472 44.4873 cv
70.8433 44.4917 li
70.5552 45.6074 li
70.4888 45.6069 li
70.2036 46.6406 69.3618 47.4199 68.3198 47.6133 cv
68.2866 47.5518 li
cp
86.2515 43.6274 mo
88.1235 46.8677 li
88.1099 46.874 li
88.1421 46.939 88.1587 47.0107 88.1587 47.0835 cv
88.1587 47.3418 87.9497 47.5518 87.6909 47.5518 cv
87.6909 47.5879 li
83.8755 47.5879 li
83.8735 47.5884 li
84.1255 49.4038 85.6782 50.7559 87.5112 50.7559 cv
89.5376 50.7559 91.1831 49.1104 91.1831 47.0835 cv
91.1831 45.0566 89.5376 43.4116 87.5112 43.4116 cv
87.0825 43.4116 86.6577 43.4868 86.2554 43.6333 cv
86.2515 43.6274 li
cp
83.8755 46.6157 mo
86.4673 46.6157 li
85.1353 44.3115 li
85.1021 44.3125 li
84.4224 44.9033 83.9829 45.7236 83.8687 46.6172 cv
83.8755 46.6157 li
cp
70.0513 42.2236 mo
70.0835 42.1909 li
69.4966 41.9746 68.8765 41.8638 68.2515 41.8638 cv
65.3501 41.8638 62.9946 44.2021 62.9946 47.0835 cv
62.9946 49.9653 65.3501 52.3037 68.2515 52.3037 cv
71.1528 52.3037 73.5073 49.9653 73.5073 47.0835 cv
73.5073 45.3999 72.689 43.8193 71.311 42.8394 cv
71.2749 42.8354 li
71.4546 42.1875 li
77.6108 46.4717 li
78.3315 48.3438 li
77.0708 48.8477 li
77.064 48.8301 li
76.8276 48.9331 76.6753 49.166 76.6753 49.4238 cv
76.6753 49.7813 76.9653 50.0718 77.3228 50.0718 cv
77.4077 50.0718 77.4917 50.0552 77.5698 50.0229 cv
77.5747 50.0718 li
81.2827 48.6318 li
80.8872 47.5874 li
82.2915 47.5874 li
82.2798 47.5933 li
82.5444 50.2656 84.8071 52.3037 87.5112 52.3037 cv
90.4126 52.3037 92.7671 49.9653 92.7671 47.0835 cv
92.7671 44.2021 90.4126 41.8638 87.5112 41.8638 cv
86.8022 41.8638 86.1011 42.0059 85.4487 42.2822 cv
85.4595 42.2598 li
84.1987 40.0996 li
84.3071 40.0635 li
84.3062 40.0571 li
85.1226 39.9829 85.7476 39.2988 85.7476 38.4795 cv
85.7476 38.2827 85.7104 38.0874 85.6392 37.9043 cv
85.6392 37.9038 li
82.5073 29.8755 li
82.5073 29.8765 li
82.27 29.2681 81.6841 28.8677 81.0308 28.8677 cv
80.7251 28.8677 80.4253 28.9565 80.1685 29.123 cv
80.1675 29.1196 li
70.5552 35.3477 li
70.5571 35.353 li
70.2437 35.5415 70.0513 35.8813 70.0513 36.2476 cv
70.0513 36.8237 70.519 37.2915 71.0952 37.2915 cv
71.2036 37.2915 71.311 37.2749 71.4146 37.2417 cv
71.4194 37.2915 li
70.0874 42.1875 li
70.0513 42.2236 li
cp
78.4028 24.7275 mo
78.4028 24.7275 li
79.7144 24.7275 80.7788 25.792 80.7788 27.1035 cv
80.7788 28.415 79.7144 29.4795 78.4028 29.4795 cv
77.0913 29.4795 76.0269 28.415 76.0269 27.1035 cv
76.0269 25.792 77.0913 24.7275 78.4028 24.7275 cv
78.4028 24.7275 li
cp
0 0 0 0 cmyk
ef
37.2554 63.2114 mo
37.2622 63.1997 li
37.2271 63.1841 37.187 63.1758 37.147 63.1758 cv
37.0083 63.1758 36.895 63.2725 36.895 63.3916 cv
36.895 63.4399 36.9136 63.4863 36.9487 63.5244 cv
37.2554 63.2114 li
cp
37.9028 65.4795 mo
37.937 65.4731 li
37.6694 64.793 37.3364 64.1406 36.9438 63.5239 cv
37.9028 65.4795 li
cp
37.9751 65.4438 mo
37.9409 65.4785 li
37.9927 65.5684 38.0874 65.6235 38.1909 65.6235 cv
38.2417 65.6235 38.2905 65.6108 38.3345 65.5859 cv
37.9751 65.4438 li
cp
39.6313 64.9038 mo
39.5962 64.8696 li
39.1851 65.0913 38.7876 65.3384 38.4067 65.6104 cv
39.6313 64.9038 li
cp
39.5591 64.8315 mo
39.5874 64.8525 li
39.6362 64.8281 39.6675 64.7783 39.6675 64.7236 cv
39.6675 64.6577 39.6226 64.6001 39.5581 64.584 cv
39.5591 64.8315 li
cp
39.019 64.0757 mo
39.0073 64.0801 li
39.103 64.3364 39.3071 64.5327 39.5601 64.6128 cv
39.019 64.0757 li
cp
38.9478 64.1118 mo
38.9702 64.0806 li
38.9585 64.0503 38.938 64.0234 38.9116 64.0039 cv
38.9478 64.1118 li
cp
37.2554 63.1758 mo
38.9116 63.9678 li
37.2554 63.1758 li
37.2554 63.1758 li
cp
37.2554 63.1758 mo
38.9116 63.9678 li
38.9116 64.0039 li
38.938 64.0234 38.9585 64.0503 38.9702 64.0806 cv
39.0073 64.0801 li
39.103 64.3364 39.3071 64.5327 39.5601 64.6128 cv
39.5581 64.584 li
39.6226 64.6001 39.6675 64.6577 39.6675 64.7236 cv
39.6675 64.7783 39.6362 64.8281 39.5874 64.8525 cv
39.5962 64.8696 li
39.1851 65.0913 38.7876 65.3384 38.4067 65.6104 cv
38.3345 65.5859 li
38.2905 65.6108 38.2417 65.6235 38.1909 65.6235 cv
38.0874 65.6235 37.9927 65.5684 37.9409 65.4785 cv
37.937 65.4731 li
37.6694 64.793 37.3364 64.1406 36.9438 63.5239 cv
36.9487 63.5244 li
36.9136 63.4863 36.895 63.4399 36.895 63.3916 cv
36.895 63.2725 37.0083 63.1758 37.147 63.1758 cv
37.187 63.1758 37.2271 63.1841 37.2622 63.1997 cv
37.2554 63.1758 li
cp
36.6069 51.9438 mo
36.6069 53.0957 li
36.6069 53.0957 li
36.6069 53.3398 36.4839 53.5674 36.2788 53.7002 cv
36.2837 53.7075 li
35.7437 54.0679 li
35.7388 54.0591 li
35.6968 54.0918 35.6714 54.1494 35.6714 54.2114 cv
35.6714 54.2114 li
35.6714 54.3916 li
35.6714 54.3916 li
35.6714 54.5166 35.729 54.6323 35.8247 54.6978 cv
35.8149 54.7158 li
36.1392 54.9316 li
36.1372 54.9341 li
36.3354 55.0649 36.4819 55.2559 36.5552 55.4766 cv
36.5581 55.501 li
37.1157 57.2368 37.3989 59.0488 37.3989 60.8716 cv
37.3989 60.9126 37.3989 60.9536 37.3989 60.9941 cv
37.3989 60.9795 li
37.3989 61.1016 37.4556 61.2173 37.5522 61.292 cv
37.5435 61.3037 li
39.7397 63.1035 li
39.7349 63.1089 li
39.8804 63.2222 40.0591 63.2837 40.2437 63.2837 cv
40.2788 63.2837 40.3149 63.2813 40.3501 63.2769 cv
40.353 63.2554 li
40.3999 63.2505 40.4478 63.2476 40.4956 63.2476 cv
40.7681 63.2476 41.0337 63.334 41.2554 63.4937 cv
41.2554 63.4932 li
41.2974 63.521 41.3452 63.5356 41.395 63.5356 cv
41.4624 63.5356 41.5259 63.5093 41.5737 63.4619 cv
41.5854 63.4663 li
42.7661 62.3413 44.0259 61.3018 45.353 60.3545 cv
45.3521 60.3379 li
46.9722 59.1865 48.9116 58.5679 50.8989 58.5679 cv
51.4565 58.5679 52.0132 58.6162 52.562 58.7134 cv
52.5552 58.6758 li
54.7515 57.8477 li
54.7554 57.8228 li
54.7769 57.8154 54.8003 57.8115 54.8237 57.8115 cv
54.9429 57.8115 55.0396 57.9082 55.0396 58.0278 cv
55.0396 58.0669 55.0288 58.1055 55.0083 58.1392 cv
55.0513 58.0991 li
54.9028 58.3115 54.7456 58.5176 54.5796 58.7168 cv
54.5688 58.7129 li
54.855 58.8623 55.1313 59.0293 55.397 59.2124 cv
55.397 59.2441 li
55.2056 59.249 55.0142 59.2515 54.8237 59.2515 cv
54.8101 59.2515 54.7974 59.2515 54.7847 59.2515 cv
54.7866 59.2544 li
54.7749 59.2524 54.7632 59.2515 54.7515 59.2515 cv
54.6118 59.2515 54.4995 59.3647 54.4995 59.5034 cv
54.4995 59.5269 54.5024 59.5503 54.5093 59.5728 cv
54.5356 59.5757 li
55.1108 61.1958 li
55.0884 61.1895 li
55.1509 61.3647 55.1831 61.5493 55.1831 61.7358 cv
55.1831 61.7949 55.1802 61.8545 55.1733 61.9136 cv
55.188 61.9531 li
55.1372 62.4312 55.1108 62.9111 55.1108 63.3916 cv
55.1108 64.7563 55.3179 66.1138 55.7241 67.417 cv
55.731 67.3848 li
55.7495 67.4438 55.7593 67.5054 55.7593 67.5679 cv
55.7593 67.6787 55.729 67.7876 55.6724 67.8828 cv
55.6812 67.8945 li
55.4985 68.2397 55.3433 68.5991 55.2173 68.9692 cv
55.2026 68.9658 li
55.1587 69.0981 55.0347 69.1875 54.895 69.1875 cv
54.8716 69.1875 54.8481 69.1851 54.8247 69.1802 cv
54.8228 69.1611 li
54.4565 69.0933 54.1255 68.8984 53.8892 68.6113 cv
53.8999 68.623 li
53.7808 68.7485 53.6821 68.8921 53.6079 69.0483 cv
53.606 69.0688 li
53.2212 68.833 52.9868 68.4146 52.9868 67.9639 cv
52.9868 67.9272 52.9888 67.8911 52.9917 67.855 cv
52.9878 67.853 li
52.9917 67.5679 53.0083 67.2832 53.0386 66.9995 cv
53.022 66.9912 li
53.0229 66.9795 53.0229 66.9678 53.0229 66.9556 cv
53.0229 66.7969 52.9194 66.6567 52.7671 66.6108 cv
52.7642 66.6128 li
52.1069 66.4258 51.5229 66.0396 51.0942 65.5073 cv
51.0679 65.5244 li
51.0269 65.4736 50.9653 65.4438 50.8989 65.4438 cv
50.7935 65.4438 50.7036 65.52 50.686 65.624 cv
50.6841 65.6167 li
50.5269 67.4565 49.8423 69.2124 48.7124 70.6738 cv
48.7046 70.6646 li
48.6343 70.7549 48.5952 70.8696 48.5952 70.9878 cv
48.5923 70.9795 li
48.5942 71.0664 48.5952 71.1528 48.5952 71.2397 cv
48.5952 72.3813 48.3989 73.5137 48.0142 74.5889 cv
48.0259 74.5889 li
47.9976 74.6699 47.9829 74.7539 47.9829 74.8389 cv
47.9829 75.0381 48.062 75.2305 48.2026 75.376 cv
48.1997 75.415 li
51.6909 79.0156 li
51.6919 79.0137 li
52.0845 79.3926 52.354 79.8809 52.4644 80.416 cv
52.4409 80.418 li
52.5103 80.7031 52.5552 80.9932 52.5767 81.2861 cv
52.5933 81.29 li
53.0464 82.418 53.5874 83.5098 54.2095 84.5537 cv
54.2231 84.5518 li
54.3335 84.7393 54.3911 84.9531 54.3911 85.1709 cv
54.3911 85.2441 54.3843 85.3174 54.3716 85.3896 cv
54.3628 85.3857 li
54.1743 86.5654 53.7222 87.6865 53.0405 88.668 cv
53.0278 88.7031 li
53.0073 88.7236 52.98 88.7354 52.9517 88.7354 cv
52.9224 88.7354 52.895 88.7236 52.8745 88.7031 cv
52.8853 88.7285 li
52.2544 88.1572 51.8452 87.3838 51.7271 86.541 cv
51.728 86.5381 li
51.9995 86.2598 52.314 86.0273 52.6597 85.8506 cv
52.6606 85.8506 li
52.7075 85.8096 52.7349 85.7441 52.7349 85.6748 cv
52.7349 85.6523 52.7319 85.6289 52.7261 85.6074 cv
52.7241 85.6094 li
52.6187 85.4141 52.4868 85.2324 52.3325 85.0723 cv
52.3755 85.0273 li
52.3394 85.001 52.3159 84.9619 52.3071 84.918 cv
52.2671 84.9229 li
52.1372 83.6426 51.6606 82.4209 50.8901 81.3906 cv
50.938 81.4141 li
49.4272 79.8271 47.7925 78.3633 46.0493 77.0352 cv
46.0483 77.0615 li
45.9761 76.998 45.8833 76.9629 45.7876 76.9629 cv
45.6909 76.9629 45.5991 76.998 45.5269 77.0615 cv
45.5356 77.0713 li
44.8667 77.7393 44.4917 78.6455 44.4917 79.5908 cv
44.4917 79.626 44.4917 79.6621 44.4927 79.6973 cv
44.4595 79.6992 li
44.3843 80.1533 44.1841 80.5771 43.8794 80.9219 cv
43.9028 80.9082 li
43.6343 81.3477 43.3374 81.7705 43.0151 82.1729 cv
43.0151 82.1836 li
41.6108 84.5596 li
41.5991 84.5518 li
41.4897 84.7393 41.4312 84.9531 41.4312 85.1709 cv
41.4312 85.1953 41.4321 85.2197 41.4331 85.2441 cv
41.4194 85.249 li
41.4272 85.4395 41.4312 85.6289 41.4312 85.8193 cv
41.4312 85.8428 41.4312 85.8662 41.4312 85.8906 cv
41.4673 85.8916 li
41.4673 86.418 41.6372 86.9316 41.9526 87.3545 cv
41.9253 87.3672 li
42.2856 87.8574 42.6069 88.374 42.8862 88.9141 cv
42.9126 88.9121 li
42.9331 88.9453 42.9429 88.9844 42.9429 89.0234 cv
42.9429 89.1162 42.8833 89.1992 42.7954 89.2285 cv
42.8062 89.2188 li
42.3071 89.4463 41.7642 89.5635 41.2153 89.5635 cv
40.6938 89.5635 40.1772 89.457 39.6978 89.252 cv
39.7036 89.2393 li
40.2788 88.3389 li
40.2505 88.3418 li
40.2925 88.252 40.3149 88.1523 40.3149 88.0508 cv
40.3149 87.7676 40.1411 87.5166 39.8853 87.4326 cv
39.8843 87.4004 li
39.645 87.3105 39.4868 87.082 39.4868 86.8271 cv
39.4995 86.8291 li
39.7017 86.3184 39.9653 85.833 40.2837 85.3848 cv
40.2271 85.3828 li
40.3569 85.002 40.4233 84.6016 40.4233 84.1992 cv
40.4233 84.1631 40.4224 84.127 40.4214 84.0908 cv
40.4634 84.0869 li
40.4604 84.0039 40.4595 83.9219 40.4595 83.8389 cv
40.4595 82.127 41.0161 80.4619 42.0464 79.0947 cv
42.0474 79.0811 li
41.9487 78.5605 41.8989 78.0322 41.8989 77.5029 cv
41.8989 77.1172 41.9253 76.7324 41.978 76.3506 cv
41.9937 76.334 li
40.1021 76.9414 38.1265 77.251 36.1392 77.251 cv
33.4106 77.251 30.7124 76.668 28.2271 75.541 cv
28.2153 75.5684 li
28.1938 75.5625 28.1704 75.5596 28.147 75.5596 cv
28.064 75.5596 27.9888 75.5986 27.9526 75.6611 cv
27.9517 75.6426 li
27.7749 75.9824 27.5054 76.2666 27.1763 76.4609 cv
27.1714 76.4893 li
27.061 76.5635 26.9956 76.6865 26.9956 76.8193 cv
26.9956 76.8428 26.9976 76.8662 27.0015 76.8896 cv
26.9771 76.8926 li
27.0132 77.1299 27.0317 77.3701 27.0317 77.6113 cv
27.0317 78.5635 26.7446 79.4941 26.2095 80.2822 cv
26.2104 80.2803 li
26.1353 80.3965 26.0952 80.5322 26.0952 80.6709 cv
26.0952 80.7441 26.1069 80.8174 26.1284 80.8877 cv
26.0649 80.8828 li
26.3491 82.124 26.5347 83.3867 26.6187 84.6572 cv
26.6733 84.668 li
26.6978 85.0557 26.9097 85.4082 27.2417 85.6104 cv
27.2349 85.6162 li
28.5591 86.4229 29.5933 87.6328 30.186 89.0703 cv
30.2046 89.0566 li
30.2251 89.1025 30.2349 89.1523 30.2349 89.2031 cv
30.2349 89.3164 30.1821 89.4229 30.0913 89.4912 cv
30.0571 89.4834 li
29.7456 89.5127 29.4321 89.5273 29.1196 89.5273 cv
28.6108 89.5273 28.104 89.4893 27.6011 89.4131 cv
27.6108 89.4199 li
27.396 89.0342 27.2837 88.6006 27.2837 88.1592 cv
27.2837 88.0264 27.2935 87.8936 27.314 87.7627 cv
27.2769 87.7617 li
27.2808 87.7383 27.2837 87.7148 27.2837 87.6914 cv
27.2837 87.5605 27.2144 87.4434 27.1069 87.3926 cv
27.103 87.4033 li
26.3472 87.4033 li
26.3472 87.3984 li
26.3228 87.4014 26.2993 87.4033 26.2749 87.4033 cv
26.0337 87.4033 25.8218 87.2432 25.7563 87.0107 cv
25.7104 87.0381 li
25.5786 84.8105 24.9165 82.6455 23.7798 80.7246 cv
23.8179 80.6768 li
23.7065 80.5029 23.647 80.3018 23.647 80.0947 cv
23.647 79.9492 23.6772 79.8037 23.7349 79.6699 cv
23.7192 79.6631 li
24.439 78.2949 li
24.4126 78.2637 li
24.4302 78.2285 24.439 78.1904 24.439 78.1514 cv
24.439 78.0117 24.3267 77.8994 24.187 77.8994 cv
24.1479 77.8994 24.1099 77.9082 24.0747 77.9258 cv
24.0796 77.9355 li
20.6948 79.4834 li
20.6909 79.4736 li
20.6274 79.5059 20.5806 79.5625 20.561 79.6299 cv
20.5513 79.627 li
20.1909 81.0313 li
20.1421 81.0273 li
20.0415 81.3145 19.856 81.5654 19.6108 81.7461 cv
19.647 81.7813 li
19.4731 81.8828 19.3335 82.0342 19.2466 82.2158 cv
19.2554 82.2188 li
18.895 85.4951 li
18.8823 85.4941 li
18.8667 85.6025 18.8589 85.7109 18.8589 85.8193 cv
18.8589 86.0137 18.8843 86.208 18.9331 86.3965 cv
18.9438 86.3877 li
19.0063 86.5137 19.0396 86.6514 19.0396 86.791 cv
19.0396 86.9688 18.9868 87.1426 18.8882 87.29 cv
18.8589 87.2598 li
18.4136 88.1221 17.5249 88.6631 16.5557 88.6631 cv
16.3984 88.6631 16.2422 88.6484 16.0879 88.6201 cv
16.0986 88.6582 li
15.9009 88.1055 15.7998 87.5225 15.7998 86.9355 cv
15.7998 86.5449 15.8442 86.1563 15.9326 85.7764 cv
15.9487 85.7764 li
16.2051 85.917 16.481 86.0186 16.7676 86.0791 cv
16.7749 86.1279 li
16.8091 86.1377 16.8442 86.1436 16.8794 86.1436 cv
17.0981 86.1436 17.2749 85.9492 17.2749 85.7109 cv
17.2749 85.6387 17.2583 85.5664 17.2261 85.5029 cv
17.2397 85.458 li
17.5063 85.3047 17.6948 85.0439 17.7573 84.7422 cv
17.7886 84.7871 li
17.854 83.7402 17.8872 82.6924 17.8872 81.6436 cv
17.8872 80.7695 17.8647 79.8955 17.8188 79.0225 cv
17.8228 79.0498 li
17.8179 79.0146 17.8149 78.9785 17.8149 78.9434 cv
17.8149 78.6504 17.9839 78.3848 18.2485 78.2598 cv
18.2153 78.2334 li
18.5513 78.0801 18.8647 77.8838 19.1489 77.6494 cv
19.146 77.6484 li
19.3823 77.2314 19.5073 76.7588 19.5073 76.2793 cv
19.5073 75.9463 19.4478 75.6152 19.3296 75.3037 cv
19.3892 75.3145 li
18.7798 74.042 18.4634 72.6504 18.4634 71.2397 cv
18.4634 69.8569 18.7671 68.4907 19.354 67.2388 cv
19.3267 67.2617 li
17.5073 67.4468 16.1235 68.979 16.1235 70.8076 cv
16.1006 70.769 li
16.1396 71.0806 16.1597 71.394 16.1597 71.7075 cv
16.1597 73.9346 15.168 76.0459 13.4546 77.4688 cv
13.4937 77.4678 li
13.0537 77.75 12.542 77.8994 12.0195 77.8994 cv
11.1689 77.8994 10.3667 77.5039 9.84912 76.8291 cv
9.86377 76.7646 li
10.0156 76.8008 10.1714 76.8193 10.3276 76.8193 cv
11.0342 76.8193 11.689 76.4492 12.0537 75.8447 cv
12.0791 75.874 li
12.6108 74.7891 12.8975 73.5996 12.9185 72.3916 cv
12.9219 72.3936 li
12.9204 72.333 12.9194 72.2725 12.9194 72.2114 cv
12.9194 70.6602 13.4731 69.1597 14.481 67.98 cv
14.4902 67.9946 li
15.0688 67.1104 15.9829 66.4995 17.021 66.3032 cv
17.019 66.2983 li
17.6987 66.1846 18.3862 66.1274 19.0757 66.1274 cv
19.6265 66.1274 20.1763 66.1641 20.7231 66.2368 cv
20.7427 66.2388 li
22.4487 65.3848 24.3306 64.9395 26.2397 64.9395 cv
27.8589 64.9395 29.4624 65.2603 30.9565 65.8823 cv
30.9595 65.9004 li
30.981 65.9077 31.0044 65.9116 31.0269 65.9116 cv
31.147 65.9116 31.2437 65.8149 31.2437 65.6958 cv
31.2437 65.6836 31.2427 65.6719 31.2407 65.6602 cv
31.2339 65.6704 li
30.9058 64.4458 30.7397 63.1836 30.7397 61.9155 cv
30.7397 59.8569 31.1772 57.8218 32.0249 55.9453 cv
32.0454 55.9443 li
32.3267 55.2817 32.8491 54.7505 33.5063 54.4575 cv
33.481 54.4429 li
33.6079 54.3955 33.6909 54.2744 33.6909 54.1396 cv
33.6909 54.0791 33.6743 54.0195 33.6421 53.9678 cv
33.6646 53.9541 li
33.4233 53.5933 33.2954 53.1694 33.2954 52.7358 cv
33.2954 52.7358 li
33.2954 52.4116 li
33.2944 52.4199 li
33.1968 52.4009 33.1021 52.3726 33.0093 52.3345 cv
33.0073 52.3384 li
33.0112 51.8921 33.0513 51.4468 33.1255 51.0068 cv
33.1216 51.0073 li
33.1968 50.0918 33.9614 49.3877 34.8794 49.3877 cv
35.6597 49.3877 36.3472 49.8999 36.5698 50.6475 cv
36.561 50.6514 li
36.6606 50.8931 36.7319 51.1455 36.7759 51.4033 cv
36.8237 51.4038 li
37.3989 51.8354 li
37.3599 51.8394 li
37.3618 51.8496 37.3638 51.8604 37.3638 51.8716 cv
37.3638 51.8906 37.3599 51.9092 37.353 51.9224 cv
37.3638 51.9438 li
36.6069 51.9438 li
36.6069 52.9155 li
36.6069 51.9438 li
cp
ef
91.6147 89.167 mo
91.5825 89.2012 li
91.439 88.9766 91.3628 88.7148 91.3628 88.4473 cv
91.3628 88.3994 91.3657 88.3506 91.3706 88.3027 cv
91.3628 88.2979 li
91.5786 87.0635 91.687 85.8125 91.687 84.5596 cv
91.687 83.1797 91.5562 81.8027 91.2944 80.4473 cv
91.2915 80.4551 li
90.1392 74.6953 li
90.1011 74.6963 li
90.0122 74.2441 89.7739 73.8359 89.4253 73.5352 cv
89.4224 73.4883 li
88.0591 72.3325 86.4263 71.5366 84.6753 71.1738 cv
84.6694 71.1934 li
84.4165 71.1426 84.2349 70.9209 84.2349 70.6636 cv
84.2349 70.5469 84.2729 70.4331 84.3433 70.3394 cv
84.3384 70.3335 li
84.7729 69.7573 85.1333 69.1284 85.4106 68.4619 cv
85.4136 68.4609 li
85.5864 68.0649 85.6753 67.6387 85.6753 67.2075 cv
85.6753 65.459 84.2397 64.0396 82.4712 64.0396 cv
80.7026 64.0396 79.2671 65.459 79.2671 67.2075 cv
79.2671 67.7207 79.3931 68.2261 79.6343 68.6802 cv
79.6235 68.6851 li
79.8784 69.2656 80.2007 69.814 80.5835 70.3193 cv
80.5991 70.3032 li
80.6694 70.397 80.7075 70.5107 80.7075 70.6274 cv
80.7075 70.8984 80.5063 71.127 80.2388 71.1631 cv
80.2251 71.1958 li
79.0708 71.5068 77.9644 71.9722 76.9351 72.5781 cv
76.9331 72.582 li
76.481 72.8467 76.1577 73.2871 76.0396 73.7979 cv
76.0269 73.7949 li
72.5708 88.7354 li
72.5708 88.7383 li
72.5474 88.7363 72.5229 88.7354 72.4995 88.7354 cv
72.0425 88.7354 71.6714 89.1221 71.6714 89.5996 cv
71.6714 89.7773 71.7241 89.9512 71.8228 90.0977 cv
71.7808 90.1045 li
71.3755 90.1758 70.9663 90.2109 70.5552 90.2109 cv
70.1323 90.2109 69.7095 90.1729 69.2925 90.0977 cv
69.2964 90.0615 li
69.0679 90.0264 68.8989 89.8301 68.8989 89.5996 cv
68.8989 89.457 68.9634 89.3223 69.0747 89.2344 cv
69.0493 89.2109 li
69.5483 88.7871 69.8354 88.165 69.8354 87.5107 cv
69.8354 86.2793 68.8354 85.2793 67.603 85.2793 cv
66.3706 85.2793 65.3706 86.2793 65.3706 87.5107 cv
65.3706 88.1738 65.6655 88.8018 66.1743 89.2256 cv
66.1567 89.2432 li
66.2075 89.3164 66.2349 89.4023 66.2349 89.4912 cv
66.2349 89.6729 66.1216 89.835 65.9507 89.8975 cv
65.9487 89.9238 li
64.6021 90.457 63.6362 91.6602 63.4067 93.0898 cv
63.4155 93.082 li
63.2554 94.0303 63.1401 94.9863 63.0718 95.9463 cv
63.0767 95.9189 li
63.0464 96.3799 63.0308 96.8418 63.0308 97.3027 cv
63.0308 97.9346 63.0601 98.5664 63.1167 99.1953 cv
63.1147 99.209 li
63.2397 99.626 63.5962 99.9395 64.0366 100.02 cv
64.0396 100.029 li
64.0747 100.034 64.1108 100.037 64.147 100.038 cv
64.147 100.037 li
64.1714 100.038 64.1948 100.039 64.2192 100.039 cv
64.4253 100.039 64.6284 99.9814 64.8042 99.874 cv
64.8306 99.8945 li
65.0112 99.7744 65.1187 99.5723 65.1187 99.3555 cv
65.1187 99.1387 65.0112 98.9365 64.8306 98.8164 cv
64.8364 98.7725 li
64.7075 98.6777 64.6274 98.5361 64.6167 98.3828 cv
64.6147 98.3828 li
65.1187 95.1074 li
65.6948 94.2793 li
65.645 94.2852 li
65.8921 95.0137 66.019 95.7773 66.019 96.5469 cv
66.019 96.8613 65.9976 97.1758 65.9556 97.4873 cv
65.9517 97.4473 li
65.8374 98.5762 65.6665 99.6982 65.4409 100.81 cv
65.4819 100.832 li
65.48 100.844 65.479 100.855 65.479 100.867 cv
65.479 100.979 65.5542 101.079 65.6616 101.109 cv
65.6587 101.155 li
65.9106 101.228 li
65.9106 107.06 li
65.8745 107.059 li
65.8745 107.071 65.8755 107.083 65.8755 107.095 cv
65.8755 107.258 65.814 107.415 65.7036 107.534 cv
65.731 107.563 li
65.5151 107.852 li
65.5034 107.843 li
65.4644 107.897 65.4429 107.964 65.4429 108.031 cv
65.4429 108.21 65.5884 108.355 65.7671 108.355 cv
65.8276 108.355 65.8872 108.338 65.939 108.306 cv
65.9468 108.319 li
66.7749 107.743 li
66.7759 107.707 li
67.0786 107.525 67.2905 107.226 67.3608 106.881 cv
67.4233 106.879 li
68.1792 102.847 li
68.1938 102.85 li
68.2329 102.629 68.3403 102.426 68.5034 102.271 cv
68.5063 102.237 li
68.6118 102.142 68.7231 102.051 68.8384 101.966 cv
68.8696 101.989 li
68.896 101.962 68.9331 101.947 68.9712 101.947 cv
69.0503 101.947 69.1147 102.012 69.1147 102.091 cv
69.1147 102.091 li
69.1147 107.023 li
69.1147 107.023 li
69.1147 107.227 69.2222 107.417 69.4009 107.53 cv
69.4028 107.563 li
70.8433 108.607 li
70.8462 108.603 li
70.9077 108.652 70.9819 108.679 71.0591 108.679 cv
71.2573 108.679 71.4194 108.502 71.4194 108.283 cv
71.4194 108.193 71.3911 108.106 71.3413 108.037 cv
71.3833 108.031 li
70.8433 107.347 li
70.8442 107.383 li
70.7271 107.241 70.6636 107.063 70.6636 106.879 cv
70.6636 106.832 70.6675 106.784 70.6763 106.737 cv
70.6987 106.735 li
71.3472 102.631 li
71.3149 102.571 li
72.0444 102.323 72.5347 101.638 72.5347 100.867 cv
72.5347 100.747 72.5229 100.626 72.4985 100.509 cv
72.5347 100.507 li
70.6987 92.9111 li
70.7065 92.9092 li
70.7017 92.8867 70.6987 92.8623 70.6987 92.8389 cv
70.6987 92.7041 70.7827 92.583 70.9087 92.5361 cv
70.9146 92.5 li
72.3647 92 73.7329 91.2881 74.9741 90.3867 cv
74.9829 90.3896 li
75.1421 90.2666 75.2349 90.082 75.2349 89.8867 cv
75.2349 89.5684 74.9907 89.2969 74.6577 89.2471 cv
74.6587 89.2393 li
78.9067 78.3672 li
78.5835 91.1113 li
79.9155 106.915 li
79.0874 107.995 li
79.0933 107.999 li
79.0425 108.072 79.0151 108.158 79.0151 108.247 cv
79.0151 108.485 79.2085 108.68 79.4468 108.68 cv
79.5356 108.68 79.6226 108.652 79.6948 108.601 cv
79.6987 108.607 li
82.1108 106.879 li
82.1108 106.914 li
82.2905 106.794 82.3989 106.592 82.3989 106.375 cv
82.3989 106.339 li
82.3989 102.96 82.5054 99.5811 82.7173 96.208 cv
82.731 96.1592 li
82.938 94.3486 83.2515 92.5518 83.6714 90.7783 cv
83.6587 90.8232 li
84.0913 96.6553 li
84.0337 96.6055 li
84.1675 98.1426 84.2349 99.6846 84.2349 101.228 cv
84.2349 102.986 84.1479 104.744 83.9731 106.494 cv
84.0229 106.484 li
84.02 106.508 84.019 106.531 84.019 106.555 cv
84.019 106.747 84.1001 106.93 84.2397 107.053 cv
84.1987 107.023 li
85.855 108.535 li
85.8657 108.523 li
85.9517 108.601 86.063 108.644 86.1792 108.644 cv
86.437 108.644 86.647 108.434 86.647 108.175 cv
86.647 108.06 86.604 107.948 86.5269 107.862 cv
86.5386 107.852 li
86.1792 107.239 li
87.5835 95.9707 li
87.8706 90.7871 li
87.8794 90.7969 li
87.8979 90.4824 87.9067 90.167 87.9067 89.8516 cv
87.9067 89.3311 87.8813 88.8125 87.8306 88.2949 cv
87.8354 88.3027 li
86.8267 78.2949 li
86.8306 78.3154 li
88.5161 80.7402 89.4194 83.6221 89.4194 86.5752 cv
89.4194 87.2744 89.3687 87.9727 89.2671 88.6641 cv
89.2798 88.6631 li
89.229 88.874 89.1519 89.0781 89.0483 89.2686 cv
89.0591 89.2754 li
89.0112 89.415 88.9868 89.5605 88.9868 89.707 cv
88.9868 90.4424 89.5835 91.0391 90.3188 91.0391 cv
91.0542 91.0391 91.6509 90.4424 91.6509 89.707 cv
91.6509 89.5332 91.6167 89.3604 91.5503 89.1992 cv
91.6147 89.167 li
cp
ef
35.563 14.5034 mo
35.563 14.5034 li
34.6294 14.5034 33.7593 14.9736 33.2466 15.7539 cv
33.2593 15.7637 li
30.0913 20.6235 li
20.9478 21.8115 li
20.9487 21.8247 li
20.064 21.9336 19.3989 22.6846 19.3989 23.5757 cv
19.3989 23.5757 li
19.3989 26.7437 li
19.3989 26.7437 li
19.3989 27.5493 20.0034 28.2261 20.8042 28.3174 cv
20.8218 28.3276 li
20.8091 28.208 20.8032 28.0879 20.8032 27.9678 cv
20.8032 26.0005 22.3843 24.4038 24.3315 24.4038 cv
26.2788 24.4038 27.8589 26.0005 27.8589 27.9678 cv
27.8589 28.0879 27.853 28.208 27.8413 28.3276 cv
27.895 28.3276 li
43.6997 28.3276 li
43.7173 28.3276 li
43.7056 28.208 43.6997 28.0879 43.6997 27.9678 cv
43.6997 26.0005 45.2798 24.4038 47.2271 24.4038 cv
49.1743 24.4038 50.7554 26.0005 50.7554 27.9678 cv
50.7554 28.0879 50.7495 28.208 50.7368 28.3276 cv
50.7915 28.3276 li
55.3276 27.9316 li
55.3276 22.8916 li
55.2915 22.8916 li
55.2915 22.4692 54.9858 22.1089 54.5698 22.0396 cv
54.5688 21.9888 li
53.6128 21.8594 52.729 21.4146 52.0552 20.7246 cv
52.0513 20.7314 li
48.1636 16.6636 li
48.1733 16.6577 li
46.8677 15.2827 45.0552 14.5034 43.1597 14.5034 cv
43.1597 14.5034 li
35.563 14.5034 li
35.563 14.5034 li
cp
41.1792 16.3037 mo
41.1792 20.6235 li
48.9556 20.6235 li
44.8149 16.3037 li
41.1792 16.3037 li
41.1792 16.3037 li
cp
47.2632 26.3115 mo
47.2632 26.3115 li
48.1772 26.3115 48.9194 27.0537 48.9194 27.9678 cv
48.9194 28.8818 48.1772 29.6235 47.2632 29.6235 cv
46.3491 29.6235 45.6069 28.8818 45.6069 27.9678 cv
45.6069 27.0537 46.3491 26.3115 47.2632 26.3115 cv
47.2632 26.3115 li
cp
47.2632 24.8354 mo
47.2632 24.8354 li
48.9917 24.8354 50.395 26.2388 50.395 27.9678 cv
50.395 29.6968 48.9917 31.0996 47.2632 31.0996 cv
45.5347 31.0996 44.1313 29.6968 44.1313 27.9678 cv
44.1313 26.2388 45.5347 24.8354 47.2632 24.8354 cv
47.2632 24.8354 li
cp
24.3315 26.3115 mo
24.3315 26.3115 li
25.2456 26.3115 25.9878 27.0537 25.9878 27.9678 cv
25.9878 28.8818 25.2456 29.6235 24.3315 29.6235 cv
23.4175 29.6235 22.6753 28.8818 22.6753 27.9678 cv
22.6753 27.0537 23.4175 26.3115 24.3315 26.3115 cv
24.3315 26.3115 li
cp
24.3315 24.8354 mo
24.3315 24.8354 li
26.0601 24.8354 27.4634 26.2388 27.4634 27.9678 cv
27.4634 29.6968 26.0601 31.0996 24.3315 31.0996 cv
22.6021 31.0996 21.1997 29.6968 21.1997 27.9678 cv
21.1997 26.2388 22.6021 24.8354 24.3315 24.8354 cv
24.3315 24.8354 li
cp
40.3872 20.6235 mo
31.4956 20.6235 li
34.3394 16.3037 li
40.3872 16.3037 li
40.3872 20.6235 li
40.3872 20.6235 li
cp
ef
75.0913 30.2715 mo
74.9829 30.2358 li
74.8394 30.1997 li
74.731 30.1636 li
74.6235 30.1274 li
74.479 30.0918 li
74.3706 30.0557 li
74.2271 30.0195 li
74.1187 29.9834 li
73.9751 29.9478 li
73.8667 29.9116 li
73.7231 29.8755 li
73.6147 29.8394 li
73.4712 29.8037 li
73.3628 29.7676 li
73.2192 29.7314 li
73.1108 29.6953 li
72.9673 29.6597 li
72.8589 29.6235 li
72.7153 29.5874 li
72.6069 29.5513 li
72.4634 29.5156 li
72.355 29.4795 li
72.2114 29.4434 li
72.0669 29.4077 li
71.9595 29.3716 li
71.8149 29.3354 li
71.7065 29.3354 li
71.563 29.2993 li
71.4546 29.2637 li
71.311 29.2275 li
71.1675 29.1914 li
71.0591 29.1553 li
70.9146 29.1196 li
70.8071 29.0835 li
70.6626 29.0474 li
70.519 29.0112 li
70.4106 28.9756 li
70.2671 28.9395 li
70.1226 28.9033 li
70.0151 28.8672 li
69.8706 28.8672 li
69.7271 28.8315 li
69.6187 28.7954 li
69.4751 28.7593 li
69.3306 28.7231 li
69.2231 28.6875 li
69.0786 28.6514 li
68.9351 28.6152 li
68.8267 28.5796 li
68.6831 28.5796 li
68.5386 28.5435 li
68.4312 28.5073 li
68.2866 28.4712 li
68.1431 28.4355 li
68.0347 28.3994 li
67.8911 28.3633 li
67.7466 28.3271 li
67.603 28.3271 li
67.4946 28.2915 li
67.3511 28.2554 li
67.2065 28.2192 li
67.063 28.1831 li
66.9546 28.1475 li
66.811 28.1475 li
66.6665 28.1113 li
66.5229 28.0752 li
66.3794 28.0391 li
66.271 28.0034 li
66.1265 27.9673 li
65.9829 27.9673 li
65.8394 27.9312 li
65.731 27.895 li
65.5874 27.8594 li
65.4429 27.8232 li
65.2993 27.8232 li
65.1548 27.7871 li
65.0112 27.7515 li
64.9028 27.7153 li
64.7593 27.6792 li
64.6147 27.6792 li
64.4712 27.6431 li
64.3267 27.6074 li
64.1831 27.5713 li
64.0747 27.5713 li
63.9312 27.5352 li
63.7866 27.499 li
63.6431 27.4634 li
63.4985 27.4272 li
63.355 27.4272 li
63.2104 27.3911 li
63.0669 27.355 li
62.9585 27.3193 li
62.8149 27.3193 li
62.6714 27.2832 li
62.5269 27.2471 li
62.3833 27.2109 li
62.2388 27.2109 li
62.0952 27.1753 li
61.9507 27.1392 li
61.8071 27.1392 li
61.6626 27.103 li
61.519 27.0669 li
61.3745 27.0313 li
61.231 27.0313 li
61.0864 26.9951 li
60.9429 26.959 li
60.8345 26.959 li
60.6909 26.9233 li
60.5464 26.8872 li
60.4028 26.8511 li
60.2593 26.8511 li
60.1147 26.8149 li
59.9712 26.7788 li
59.8267 26.7788 li
59.6831 26.7432 li
59.5386 26.707 li
59.395 26.707 li
59.2505 26.6709 li
59.1069 26.6353 li
58.9624 26.5991 li
58.8188 26.5991 li
58.6753 26.563 li
58.5308 26.5269 li
58.3872 26.5269 li
58.2075 26.4912 li
58.063 26.4551 li
57.9194 26.4551 li
57.9194 26.4556 li
57.9194 25.3755 li
57.9194 25.3755 li
58.063 25.4116 li
58.2075 25.4116 li
58.3511 25.4478 li
58.4946 25.4478 li
58.6392 25.4839 li
58.7827 25.5195 li
58.9272 25.5195 li
59.0347 25.5557 li
59.1792 25.5918 li
59.3228 25.5918 li
59.4673 25.6274 li
59.6108 25.6636 li
59.7554 25.6636 li
59.8989 25.6997 li
60.0435 25.7358 li
60.1509 25.7358 li
60.2954 25.772 li
60.439 25.8076 li
60.5835 25.8076 li
60.7271 25.8438 li
60.8706 25.8799 li
60.979 25.8799 li
61.1235 25.9155 li
61.2671 25.9517 li
61.4116 25.9517 li
61.5552 25.9878 li
61.6987 26.0239 li
61.8071 26.0596 li
61.9507 26.0596 li
62.0952 26.0957 li
62.2388 26.1318 li
62.3833 26.1318 li
62.4907 26.168 li
62.6353 26.2036 li
62.7788 26.2397 li
62.9233 26.2397 li
63.0308 26.2759 li
63.1753 26.312 li
63.3188 26.312 li
63.4634 26.3477 li
63.5708 26.3838 li
63.7153 26.4199 li
63.8589 26.4199 li
64.0034 26.4561 li
64.1108 26.4917 li
64.2554 26.5278 li
64.3989 26.5278 li
64.5435 26.564 li
64.6509 26.6001 li
64.7954 26.6357 li
64.939 26.6357 li
65.0474 26.6719 li
65.1909 26.708 li
65.3354 26.7437 li
65.479 26.7437 li
65.5874 26.7798 li
65.731 26.8159 li
65.8755 26.8521 li
65.9829 26.8521 li
66.1274 26.8877 li
66.271 26.9238 li
66.3794 26.96 li
66.5229 26.9961 li
66.6675 26.9961 li
66.7749 27.0317 li
66.9194 27.0679 li
67.063 27.104 li
67.1714 27.1401 li
67.3149 27.1401 li
67.4233 27.1758 li
67.5669 27.2119 li
67.7114 27.248 li
67.8188 27.2842 li
67.9634 27.3198 li
68.1069 27.3198 li
68.2153 27.356 li
68.3589 27.3921 li
68.4673 27.4282 li
68.6108 27.4639 li
68.7192 27.4639 li
68.8628 27.5 li
69.0073 27.5361 li
69.1147 27.5718 li
69.2593 27.6079 li
69.3677 27.644 li
69.5112 27.6802 li
69.6196 27.6802 li
69.7632 27.7158 li
69.9077 27.752 li
70.0151 27.7881 li
70.1597 27.8242 li
70.2671 27.8599 li
70.4116 27.896 li
70.519 27.9321 li
70.6636 27.9321 li
70.771 27.9683 li
70.9155 28.0039 li
71.0229 28.04 li
71.1675 28.0762 li
71.2749 28.1123 li
71.4194 28.1479 li
71.5269 28.1841 li
71.6714 28.2202 li
71.7788 28.2563 li
71.9233 28.2563 li
72.0317 28.292 li
72.1392 28.3281 li
72.2837 28.3643 li
72.3911 28.3999 li
72.5356 28.436 li
72.6431 28.4722 li
72.7876 28.5083 li
72.895 28.5439 li
73.0396 28.5801 li
73.147 28.6162 li
73.2554 28.6523 li
73.3989 28.688 li
73.5073 28.7241 li
73.6509 28.7603 li
73.7593 28.7964 li
73.8677 28.832 li
74.0112 28.8682 li
74.1196 28.8682 li
74.2632 28.9043 li
74.3716 28.9404 li
74.479 28.9761 li
74.6235 29.0122 li
75.0913 30.2715 li
cp
ef
6.65576 141.655 mo
6.65576 141.655 li
4.90674 141.655 3.48779 140.22 3.48779 138.451 cv
3.48779 138.451 li
3.48779 119.299 li
3.48779 119.299 li
3.48779 117.551 4.90674 116.131 6.65576 116.131 cv
6.65576 116.131 li
108.715 116.131 li
108.718 116.132 li
110.453 116.152 111.847 117.564 111.847 119.299 cv
111.883 119.299 li
111.883 138.451 li
111.847 138.451 li
111.847 140.205 110.453 141.634 108.718 141.655 cv
108.715 141.655 li
6.65576 141.655 li
6.65576 141.655 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
65.731 134.203 mo
72.4272 134.203 li
72.4272 132.403 li
67.7827 132.403 li
67.7827 122.287 li
65.731 122.287 li
65.731 134.203 li
65.731 134.203 li
cp
0 0 0 0 cmyk
ef
85.2427 128.983 mo
85.2427 134.167 li
85.2427 134.167 li
83.3706 134.167 li
83.3706 134.167 li
83.3706 125.671 li
83.3706 125.671 li
85.2427 125.671 li
85.2427 125.671 li
85.2427 126.392 li
85.2368 126.424 li
85.8208 125.805 86.6294 125.455 87.4751 125.455 cv
88.1528 125.455 88.812 125.681 89.3511 126.096 cv
89.3491 126.063 li
89.9048 126.498 90.2612 127.135 90.3394 127.831 cv
90.3188 127.831 li
90.3188 134.167 li
90.3188 134.167 li
88.4829 134.167 li
88.4829 134.167 li
88.4829 128.768 li
88.4458 128.769 li
88.4331 128.447 88.3374 128.136 88.1665 127.863 cv
88.2026 127.827 li
87.9468 127.469 87.5269 127.255 87.0786 127.255 cv
86.9438 127.255 86.8091 127.274 86.6792 127.313 cv
86.6812 127.321 li
85.8979 127.528 85.3276 128.191 85.2515 128.983 cv
85.2427 128.983 li
cp
ef
81.0669 133.051 mo
81.0669 133.081 li
80.8774 133.006 80.6978 132.909 80.5298 132.792 cv
80.52 132.811 li
80.356 132.704 80.2515 132.526 80.2397 132.331 cv
80.2388 132.331 li
80.2388 128.047 li
80.2349 128.084 li
80.1772 126.972 79.4507 126.006 78.3979 125.642 cv
78.4067 125.64 li
78.0142 125.564 77.6147 125.527 77.2153 125.527 cv
77.0444 125.527 76.8745 125.534 76.7046 125.548 cv
76.7075 125.497 li
75.6753 125.599 74.6665 125.879 73.7241 126.328 cv
73.7231 126.355 li
74.4067 127.795 li
74.4487 127.802 li
75.2847 127.416 76.1899 127.195 77.1108 127.154 cv
77.106 127.148 li
77.1304 127.147 77.1548 127.147 77.1792 127.147 cv
77.5396 127.147 77.8862 127.275 78.1519 127.507 cv
78.1519 127.507 li
78.2007 127.555 78.2388 127.616 78.2642 127.686 cv
78.2427 127.693 li
78.3188 127.839 78.3608 127.996 78.3667 128.155 cv
78.4028 128.155 li
78.4028 128.768 li
78.4028 128.768 li
78.4028 128.803 li
78.4028 128.803 li
75.7749 129.127 li
75.7759 129.156 li
75.105 129.249 74.4829 129.554 74.0063 130.024 cv
74.0454 129.987 li
73.6294 130.451 73.3989 131.056 73.3989 131.684 cv
73.3989 132.453 73.7456 133.18 74.3403 133.658 cv
74.3511 133.646 li
74.9673 134.146 75.7368 134.419 76.5308 134.419 cv
77.3169 134.419 78.0786 134.151 78.6919 133.66 cv
78.6958 133.624 li
79.0698 134.059 79.5728 134.363 80.1313 134.493 cv
80.1313 134.527 li
81.0308 133.087 li
81.0669 133.051 li
cp
77.9712 132.476 mo
78.0015 132.506 li
78.1851 132.362 78.3159 132.162 78.3726 131.936 cv
78.3667 131.899 li
78.3667 130.352 li
78.3706 130.353 li
77.7632 130.36 77.1567 130.42 76.5601 130.532 cv
76.5308 130.531 li
76.1353 130.604 li
76.1343 130.595 li
75.772 130.674 75.4673 130.917 75.3101 131.253 cv
75.3003 131.247 li
75.2339 131.396 75.1987 131.557 75.1987 131.719 cv
75.1987 131.854 75.2231 131.989 75.269 132.115 cv
75.3032 132.118 li
75.3862 132.294 75.5132 132.44 75.6704 132.542 cv
75.6665 132.548 li
75.9839 132.759 76.3608 132.871 76.7476 132.871 cv
76.8687 132.871 76.9888 132.86 77.1079 132.838 cv
77.1089 132.836 li
77.4194 132.779 77.7144 132.658 77.9761 132.479 cv
77.9712 132.476 li
cp
ef
93.0552 132.619 mo
93.0552 132.655 li
93.0376 132.665 li
93.2349 132.988 93.478 133.28 93.7603 133.533 cv
93.7759 133.518 li
94.2046 133.866 94.6958 134.13 95.2231 134.295 cv
95.2144 134.29 li
95.6011 134.399 96.0015 134.455 96.4028 134.455 cv
97.062 134.455 97.7134 134.306 98.3081 134.018 cv
98.3462 134.019 li
98.5698 133.914 98.7856 133.792 98.9927 133.655 cv
99.0073 133.676 li
99.2095 133.547 99.3989 133.4 99.5747 133.237 cv
98.3823 131.826 li
97.9067 132.315 97.2622 132.599 96.5845 132.618 cv
96.5493 132.579 li
96.5005 132.582 96.4517 132.583 96.4028 132.583 cv
96.2212 132.583 96.0396 132.563 95.8599 132.523 cv
95.8618 132.55 li
94.9644 132.38 94.3149 131.608 94.3149 130.711 cv
94.3149 130.699 94.3149 130.688 94.3159 130.675 cv
100.035 130.646 li
100.038 130.548 100.039 130.449 100.039 130.352 cv
100.039 129.694 99.9692 129.04 99.8306 128.397 cv
99.8276 128.403 li
99.7563 128.065 99.6304 127.74 99.4546 127.44 cv
99.4214 127.436 li
98.9272 126.503 98.0649 125.831 97.0532 125.589 cv
97.0562 125.625 li
96.772 125.56 96.48 125.527 96.187 125.527 cv
95.5142 125.527 94.854 125.699 94.2739 126.027 cv
94.2739 126.021 li
93.9146 126.228 93.5991 126.502 93.3462 126.829 cv
93.3462 126.821 li
92.6665 127.723 92.2993 128.823 92.2993 129.955 cv
92.2993 130.908 92.5601 131.843 93.0532 132.656 cv
93.0552 132.619 li
cp
94.2788 129.235 mo
98.0952 129.235 li
98.0591 129.235 li
98.0591 128.928 97.9937 128.623 97.8657 128.342 cv
97.8325 128.339 li
97.5396 127.658 96.8794 127.219 96.1509 127.219 cv
95.5698 127.219 95.0239 127.499 94.6772 127.975 cv
94.6392 127.976 li
94.4155 128.36 94.2827 128.792 94.2505 129.237 cv
94.2788 129.235 li
cp
ef
21.271 134.563 mo
22.2437 134.491 li
23.0356 136.147 li
24.6558 135.355 li
23.9712 133.951 li
23.978 133.922 li
24.7036 133.511 25.3208 132.93 25.7778 132.229 cv
25.7554 132.243 li
26.1646 131.611 26.4497 130.906 26.5952 130.166 cv
26.564 130.164 li
26.7026 129.525 26.7749 128.875 26.7788 128.221 cv
26.8149 128.233 li
26.811 127.591 26.7437 126.95 26.6147 126.321 cv
26.5952 126.317 li
26.4507 125.576 26.1675 124.87 25.7603 124.236 cv
25.7886 124.225 li
25.104 123.176 24.0659 122.407 22.8628 122.06 cv
22.856 122.092 li
22.3345 121.982 21.8032 121.927 21.271 121.927 cv
21.2759 121.928 li
21.2622 121.927 21.2485 121.927 21.2349 121.927 cv
20.728 121.927 20.2231 121.975 19.7261 122.069 cv
19.6812 122.063 li
18.4868 122.412 17.4565 123.182 16.7798 124.232 cv
16.7993 124.228 li
16.3848 124.863 16.0962 125.572 15.9487 126.317 cv
15.9399 126.321 li
15.8032 126.95 15.7324 127.591 15.7275 128.233 cv
15.7275 128.221 li
15.7324 128.875 15.8047 129.525 15.9434 130.164 cv
15.9473 130.166 li
16.0942 130.913 16.3838 131.624 16.7988 132.261 cv
16.7798 132.223 li
17.4565 133.272 18.4868 134.043 19.6812 134.392 cv
19.7261 134.409 li
20.2231 134.512 20.728 134.563 21.2349 134.563 cv
21.2485 134.563 21.2622 134.563 21.2759 134.563 cv
21.271 134.563 li
cp
21.271 123.728 mo
21.271 123.728 li
20.5103 123.728 19.7681 123.966 19.1499 124.41 cv
19.1411 124.4 li
18.688 124.731 18.3413 125.186 18.144 125.707 cv
18.1577 125.705 li
17.8833 126.493 17.7437 127.321 17.7437 128.155 cv
17.7437 128.182 17.7437 128.207 17.7437 128.233 cv
17.7437 128.221 li
17.7437 128.247 17.7437 128.273 17.7437 128.299 cv
17.7437 129.133 17.8833 129.961 18.1577 130.749 cv
18.1548 130.74 li
18.354 131.25 18.6958 131.693 19.1411 132.019 cv
19.145 132.012 li
19.7622 132.477 20.5063 132.728 21.271 132.728 cv
21.271 132.728 li
21.4155 132.728 li
21.4155 132.728 li
20.6597 131.144 li
22.2798 130.352 li
23.1792 132.224 li
23.4312 132.043 li
23.4087 132.024 li
23.8511 131.698 24.1919 131.253 24.3901 130.74 cv
24.397 130.749 li
24.6636 129.961 24.7993 129.133 24.7993 128.299 cv
24.7993 128.273 24.7993 128.247 24.7993 128.221 cv
24.7993 128.233 li
24.7993 128.207 24.7993 128.182 24.7993 128.155 cv
24.7993 127.325 24.6606 126.502 24.3892 125.718 cv
24.3931 125.71 li
24.1938 125.203 23.8491 124.762 23.3999 124.438 cv
23.3823 124.429 li
22.77 123.98 22.0327 123.735 21.2729 123.728 cv
21.271 123.728 li
cp
ef
57.3794 132.367 mo
57.3833 132.382 li
57.0562 132.491 56.7153 132.547 56.3716 132.547 cv
56.1899 132.547 56.0093 132.531 55.8306 132.501 cv
55.8354 132.532 li
55.5386 132.471 55.3276 132.222 55.3276 131.936 cv
55.3276 131.923 55.3276 131.911 55.3286 131.898 cv
55.3276 131.899 li
55.3276 127.795 li
55.3276 127.795 li
55.3276 127.291 li
55.3276 127.291 li
57.5952 127.291 li
57.5952 127.291 li
57.5952 125.707 li
57.5952 125.707 li
55.3276 125.707 li
55.3276 125.707 li
55.3276 122.287 li
55.3276 122.287 li
53.4556 122.971 li
53.4556 122.971 li
53.4556 125.707 li
53.4556 125.707 li
51.979 125.707 li
51.979 125.707 li
51.979 127.291 li
51.979 127.291 li
53.4556 127.291 li
53.4556 127.291 li
53.4556 127.795 li
53.4556 127.795 li
53.4556 132.188 li
53.4595 132.186 li
53.4565 132.234 53.4556 132.282 53.4556 132.331 cv
53.4556 132.553 53.4868 132.772 53.5483 132.984 cv
53.5698 132.976 li
53.7192 133.474 54.0679 133.883 54.5308 134.104 cv
54.5327 134.134 li
54.8364 134.274 55.1694 134.348 55.5073 134.348 cv
55.5669 134.348 55.6265 134.345 55.686 134.34 cv
55.6782 134.297 li
56.3101 134.268 56.939 134.191 57.5581 134.07 cv
57.3794 132.367 li
cp
ef
39.7036 122.255 mo
40.3198 122.255 40.8188 122.755 40.8188 123.371 cv
40.8188 123.987 40.3198 124.487 39.7036 124.487 cv
39.0874 124.487 38.5874 123.987 38.5874 123.371 cv
38.5874 122.755 39.0874 122.255 39.7036 122.255 cv
ef
38.7671 125.707 mo
38.7671 134.203 li
38.7671 134.203 li
40.6392 134.203 li
40.6392 134.203 li
40.6392 125.707 li
40.6392 125.707 li
38.7671 125.707 li
38.7671 125.707 li
cp
ef
43.6274 132.619 mo
43.6274 132.655 li
43.6528 132.622 li
43.8521 132.942 44.0981 133.233 44.3843 133.484 cv
44.3481 133.518 li
44.7769 133.866 45.2681 134.13 45.7954 134.295 cv
45.7837 134.281 li
46.1821 134.396 46.5962 134.455 47.0112 134.455 cv
47.6714 134.455 48.3218 134.308 48.9175 134.023 cv
48.9224 134.033 li
49.147 133.93 49.3638 133.81 49.5718 133.675 cv
49.5718 133.668 li
49.7729 133.537 49.9624 133.389 50.1372 133.224 cv
48.9702 131.809 li
48.4937 132.309 47.8423 132.599 47.1567 132.618 cv
47.1567 132.576 li
47.0962 132.581 47.0356 132.583 46.9751 132.583 cv
46.8081 132.583 46.6411 132.565 46.4751 132.531 cv
46.4702 132.556 li
45.5552 132.4 44.8872 131.622 44.8872 130.711 cv
44.8872 130.699 44.8872 130.688 44.8872 130.675 cv
50.5708 130.646 li
50.5737 130.548 50.5757 130.449 50.5757 130.352 cv
50.5757 129.694 50.5054 129.04 50.3677 128.397 cv
50.3647 128.403 li
50.2944 128.065 50.1694 127.74 49.9956 127.44 cv
50.064 127.441 li
49.5571 126.49 48.6646 125.81 47.6196 125.578 cv
47.6284 125.625 li
47.3442 125.56 47.0522 125.527 46.7593 125.527 cv
46.105 125.527 45.4614 125.69 44.8921 126.002 cv
44.8901 125.997 li
44.5122 126.206 44.1812 126.489 43.9185 126.829 cv
43.9185 126.821 li
43.2388 127.723 42.8716 128.823 42.8716 129.955 cv
42.8716 130.917 43.1372 131.86 43.6392 132.68 cv
43.6274 132.619 li
cp
44.8872 129.235 mo
48.6675 129.235 li
48.6313 129.235 li
48.6313 128.928 48.5659 128.623 48.438 128.342 cv
48.4526 128.333 li
48.1675 127.637 47.4995 127.184 46.7593 127.184 cv
46.1606 127.184 45.5991 127.481 45.2554 127.981 cv
45.2446 127.971 li
45.0229 128.357 44.8911 128.791 44.8589 129.237 cv
44.8872 129.235 li
cp
ef
34.1235 133.447 mo
34.1577 133.448 li
33.5747 134.068 32.769 134.419 31.9272 134.419 cv
31.2681 134.419 30.6255 134.204 30.0942 133.805 cv
30.0894 133.775 li
29.5435 133.348 29.1899 132.727 29.104 132.044 cv
29.0835 132.043 li
29.0835 125.707 li
29.0835 125.707 li
30.9556 125.707 li
30.9556 125.707 li
30.9556 131.107 li
30.9565 131.105 li
30.9692 131.427 31.0649 131.738 31.2358 132.011 cv
31.2798 132.008 li
31.5366 132.369 31.9526 132.583 32.395 132.583 cv
32.5161 132.583 32.6353 132.567 32.7515 132.536 cv
32.7593 132.558 li
33.5083 132.358 34.0601 131.711 34.147 130.927 cv
34.1948 130.927 li
34.1948 125.707 li
34.1948 125.707 li
36.0669 125.707 li
36.0669 125.707 li
36.0669 134.167 li
36.0669 134.167 li
34.1948 134.167 li
34.1948 134.167 li
34.1948 133.447 li
34.1948 133.555 li
34.1948 133.591 li
34.1235 133.447 li
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Bob Hutchinson) ()%%Title: (884.EPS)%%CreationDate: 02/02/2009 11:33%%Canvassize: 16383%AI9_DataStream%Gb!R&G@)Q;[K-0<!8deZ,:;Uob^c@H3K@N;#8P.4TRcp0IK+ParRIoJeQp^I,4'[%IElbE=C#3Pj]\]8QRfP[>*#khkApIW93Fu5%ZasRXFjnPQY+Ebs[U2fKh68X<a42b>cm\+d@^4@Nm>%n>7]Ua_Bg4Gch+G<4mW=f$j_"JM/X%^PR!5siAu!rF][qL5Vk=#`eaCRe%YKb+?YP7o`B.9lc2LtH^qXf'BrnLVuddIIuBg";f*ZIVFcGnni41X1$)tk<NIbO#Y85DgPWmIB\=1?e1kM=6%Pn)(L&#rd\o5&!(%PcO.Xm0[EjZ:_sU.Tr$A2-VdU-_#n.:ir;EQ%Ebe9tr$?!%RtbKD]qiqmpY@"e]0,4qp@4icnJ=/]3+-KYApnE#\)?V)4m!iHe34%9Y^TNj2G>n)D,A(FVpG1c\T)gA3S\]r67gnq6euCe9eCdeur4]Q*\L-8$h&f+H![(_,M,#6^gp"?%O,G&G?gS#5X#<'N@FsZN_;6%@Hq"E[LqG23e^se+28_D]f,ktPhiN-]XE.RmL*LIdH^n/=fKk3IJk7>32UJS.<(iZA#KNA'c$20Ho2k6o@@[f&Z)kp@KlYra$u7$%^oO<_X914,oUkDu@Y(k3kIJtb'[glJ_/(Z6*JN;nke(!s]@$-f3;dHscIs)Ahi!q4(*(eG8\])Iemuj4jEB*sPcUY6=j<[8)1#?6%>h5oI>@mtfb+L6@#,.I?&]+LbcKk(;CPh`2^>%qc4pj.*5V3JHMBJUqlR=I=IkhbP?DGKZ6cc^An(4WhL&Fqdo'D',Ei]13k#!E1%Y%hM<8aje)CKd5#?Cacn%EQ9>pij1EG7Vbr+b.'5T9]YQXp^ke$AXd.kjSn&FWKo83o7!hi+[S]ZCmFn_(Wu`;O.K_/?;h3Fh02i%EEt!QP!=3FFeP&c67M[6T2;OcJPqa?4B\Z!SOs(.e7rs3<jO?%\lOI\[2M5]4i[J1J$;AS$W$?j0WjgNV-m!d$)M$'I&(ut7Kf>[%#"A`f0Q'&fpah@152d<:#X4q/S0tBU7Kf>;DR]`^`WU/<Ch!9<$H<7A:o77q(geBK3R0A),0ggKifc?Blok%_qhD4?chSLL')2^.%@!qGM2;no%W::q3(gNaKN/t.rc3c`Cj+C/&"f'!.LJR7s5i<;J_>)q%<tV\?k7ua,(-)jicT2!o28fFPX@"G,2a/lSEpPs]*;bHW%@a0;6YQXuY1,(bLR4p[H)Fod2@=7PNV%CCMHoNMK/:9c%(gSK/0q6W%c5a9CfZeE'isNgbkW*)ZiW?"c^8<mYfK5UGC_u7DHHoTF%Nt(srV0M<.4$J`"nIKu,P_n%OCQ<Ig2:Uh3iic/Fpe3$TWR[mt5#4B1,Be.@p[Jccp2Pme]"cC8QMkrV*q>YOVu><,IHCFhm:*d(%UoGp:&$Etg<VE>)GfRSYT4-Yrs,);oS7s1c^Z(l&j)=sTIu]/r*J_,kYeO'Bn+]u^/!oe8J&T/rDK?I7rY>I5<W)5knPA]SOIsGE%_'cB9roUub9#dbH'uRssG/_iLc-b!H1V#fD&?hMWYYQUR?*\78MG^F>Whr^8C7>tV/\.XAWWYCuV?>kUR"E3spe#46a<rLGn[/h$%Ti^!r@-u$+ae.gb[T4RO2oDe/]d)s@\^IC2H?,[e2]WpDOc2uS0``)@Hb,5K#/,VY*puV0NiR#6P@.u3E7(gblm*-Ja)OUTiT^+M%EEA\%@;AEc2AmOS4@4I<[:$B%S@/CPM?-u`*l@^9C;H8fD![9cDq5OoL0]q]L92UngSPG8"?<6f=u^<WY<i3gB:kJkMf<t=^Pb^=%D;2Edg+r'q4t7HJ8Q[L-JrC@(_c'.Vs8N4UibF_uEO?"kF-n,7aE7:9+o"aGMf\m49k-^sTWb2Y>Q%N1g/K^UJ]7al`#s169HBS=%&C5br<N66L<BSQI]nJi3=^Td^:td2+8l],9^H=VA4H0R"%_kKT.5krjYT!!HC>sJSj/gX89WthP:mQT*hfdWegQ%S!nc/ETK5KgK%9]Ip/Z@/26`te:>0`R?.%[0h](/W0`f<P6haeo!ae!LGi'"g^%J.U3cEQ&-[P2YU5`[se4kbY&,##?g,`lZ"WnM(h>)l4g!NDfU%%3>M,"<5kp5)ucVG@lhM)8^oVX6MYA93Q8'n3\EJ-.d8tec[hL7Z'1;dWb%Oue+qmoP('s:9/uD#*p)KEkoH>Z[!44S0FX4;1K]Y"%kD6Z&Rij4\%A"]06tTCQ!A8+lE>$3s&^Q3\p>Y.$^Xc>h&Po[pUt5s_bpsJEW$fH5dM7k;3_K"J2'Q*4a29SdNP60FZh3Q8Pem^o%g(h1W+J#QLp'H_pVseE:'a$HtU1GaLUL#/.>rZ2MlOJX3@6?a]f1am_LZ/>?Kkd"4">rn7^)B1:o6?0<bT1XI8)mj/p-F<kp[Jm]%#cED&BeY?c!dI#ALQ+E]pG(YlXFu?$gD*R8Lbsjr#,TZS`cUWC>YS>BiM8cT3cW)XMuD]r8pX.p+eC=hNV1VBoG&Z3q"hLuaMU@s%fRp!#Db4u@cQs1o=!ks5X9ZJ#I^aRFJpsWI2N23E@WN?]XY_jMPRtnX\b$%H!)ujr<^:QW<*jYF.El/+KG[[$U3a19`^=H<Pi%,:%'[Rjg4;VQ/*M(+"cPr3IDH*`n[oHm$0[_2S8jJkF#>=;ALm'n!eX%1.CWNbK5+WhAj%F>_N"j4,(sF%[9r.6ojUp*Kiol&UdfHX1%*?@tD4fBooC>?`BJpd_srn3e\1&?K%94du2B:3`9)qPY*';ZK6XZ0TZITl_XZ@*[IEFcNPiQm"-d9&M"`_!,9<5Pl1X;l6q*#VuL%e9"-!9LHOSqa>P&9U$Ju$>(?hI?J[R^)#fn9>6-_((SW'al^"-ZReeIT2:NoPs#:MLA+QWpiK=Z-0'CdNHnT\g+9Z`PN$6a3%D#0%-_[SGg/;h/T#P]?"[7IOCjbq8p9>7qLD0^:Oq-C``fd"oL]!O,*-;=hjf7XFTulrl[iK)PUm37jW!$j)bqP)C9q,?.%dPS9#k5j]%.lCErO/"eRe!k`mqWU%92N>oZB)N4eg@u-kdIGj1DP`*["S<.E!F3>!+BQ!%^@$cf+l([:ln.-I;>/H5BT,iK7XGiB0qXcBf0id]%k%eMA\]kJX&UYXrJ`,W]YbBLdP!S1Hk=^3"jkmH&:5O634hIKS>;`WkFF>.VG$m9JOG',+;Y`KF%M-=Ohs#^Cr"_s2URliO&a,`i%`)J@n?$Lmp4s@@/-qI"8Td"#Hnnq*j/.t)N5fL>&9,216FKQ);*`&[P[`:\OW!R!_YV/0FUmB!84$4LH_.05*BhF\k^95L\j;KrQ%Ni3^q"aNI\Zn?[4.KAkcp4DoO0!PW.f21=K&glROd%j9c^Q\1Rc*ZU+7;W*99Y`FAHn\Y]XHuUfZFh)n5La9t(\4qsoE8GOl*hbl%!k8sD,hFi^e-auT=O.5ZW5>N%O?GM"KR!?GV`AYb4$'\Lj.D!IKq:f^0\:DX:+48d_4q3Rs+Aml\0(!/SY/sRG\W`h(JuuiMVRp`%<`MADEB+s3'XcPn-"4JWPC`fq"o<52g^6ZU6)"QWg\7.jBm\]Z'0Lg*ehfC8b&+&?>5_N0=60@^T^=9+3J-lWk'.-n1$k60@1k("%NVQb%n1N!HBLSSP;npI>U1rmRkF]K$Jj$+j&h?p^JS1(uhG2rK3a,2-h9ns4F>O1X'd]c@E4927;4jV?HF>)#2APkZ$deEg#!&J)%p]?Z@;LHuENa>25Go<$9J:7YL;N@Te7ai3!(umc+K>c?f1"a^f&%sWkVE(knchea?[\-]Tb*mQK%Bb4qHW3;q+Ho_^qe7=L7L)%[%VOaT$mYMC:.C.M<Fp2XRp8qa>*q@3;mlUJCFlku;FPNLWm"Y\deXLnWG2V4^\Fb<Z!?*BfZ#?YF+2c@bCH=SUe8=nX=oZs'8H[+2%F;tVO+8%oJ-%*ku^u<ooqUYl-Adk"&)Dh,k-!;GkSfIHannblB?&IUm_>fa0HN)tbmi4kUq0,',QFS4-hGS5^,:;c7O'Q2('[;cR%fFU+_$ZXa*#<T&ATR2gGe5HLN>k5.<0V40YD!hB+RAPc,s0F6DGDMV)n#&MDaf_kY/9ql21>mV<6`C60D/(uhWSqDcHV`)GID3^;%;4W`#p+Vn9#&t*EV%JA\Ussigl"_MP;;D+V,9^*&'Dj)$6rQ^)9#G5SX55N.Ogh.ZqX@Ue&rREsCLXX6&iIgu)5fPmBsefoT85Tq%IQEA\TnS'0W>l"#^=X1E`InhC0,T``TsJ6KCGQk6qm9TTQbmiUBLh3H3,@Im&`Y^]EB@Lp9GPSsm9i",in!W[5fr.0$D<8e9U3,#%KO+X8mb:.W4B(<A1;AGSk[+^<5#EAj6Mr2):AX^Kn=8bJ-19Y)Gpd&/I-Y]6S_qDI).YR'.tuoZVZGHpmfi#?NDIT]mC823AcYTe%0tST0@@o.rF5JC;b4^s6XrI#fJNf[3Z"kOYF7,6f47K/IJ!NN#E3'T6%4j9>^[5]1$]MP]YloK7W&_Z[7H$8td@aRg?dD-rJa$$Z%1sd_M9_iD<WXu-@_;Y444"Pjij9E@$D+<Ktmi*$b#Eu?./B,]!QXZ^KQL?L3op1&&Al(7=Yni-oIQ=$mZi,aeC#I=+=@-8tBQ"@;%%qX2@7dh88NVWPk^H^sn$1:IOCi:/i?dNOGO[?sb+Il%R1s.RIl_.0$hAgm2'#ul#Xgd?Vm-liu0L7j,NjM7"L@4@5R*',Ai*OqV%2>DK[N6uImoWW!rc&3-%IGEnq9t3(k^<_>MKF"m'Oai-W)mDaO[-%4,S%`0:a,@#8iLHMFBgg[Qm)*qZP>4"%>)D-F)@qbun7on>%qX[4U[O4WelsZN`jRhb'4<#_o-cgpfGYjEG;MI?.PkiIh[_F`EifWrh0Fg1gqXo-&^G?UC8IAO:6&G*U'H3<gk7on14L5lKYGk9/%F"&O-Zk08\c8t`5o.7i[][%=209#>rdl!g9+kWn@=,i@uoSiu@m6CJ/e"BKg%g9NJOT4]HW'E_1Y7o(T+0;)*TkUWjrp.)-n#2).%Cl(VErl1p>P[fZ=g>PoFd6=&Ld85\VR]%a'%(Jpd*95M;9HH00GH/uY'HY;WACZX*9#@0snGt\38.iPM*:NYTZb2ce4B7=ILljfn%If+[FX&`k:*0:'jI87A6&N4_9gL`Uujl\(BMl@Ms(?JYEbG8M*)P"Z@J"\c_'`H.M5EeO-2p6\WjEG&3eF`9.j3LuN8/&^5-rUTL%gR-1m/c-;KQ\fT7.#n6#,S<Wc.XN_:GMbb7=:G;SLZ[TL;GoOtf6AT=5E4naY(h5,"YZ4_YlkR?V_fj2-D^Y@I,6sM]g7X;7O2]\%:OHE]r/("TO#-6QGT&r?%7V^;.?&KR)"\5G7(L#<('*QIs)d+Eh#HH5dI4rV?_A,4[NER:nGPjJLIop94F-Cjd2:+<!;`l'8iX=a%b\$G(?r=kOXf(m<%81'M'T,ee'%fjNqq<oT<MF3N&_;J<^:,7b#"nafTWu0"Osl=h#P`mHlZ<S`qOr2t%]>PS^CD:o-:u$q;,R?-%N<SK+l"SMjj4app\&g_a_eFJXUsSV0_`iuNH5Da3R1jc*EVIj,iiYhG_q*bdETsaAo_0rJY)iQ]p1=qMQn.ic%eV)P'AKC2.s<54%D22c@U4i^<&>UQ+ZqT/6"C>S_#2A:tLACikHWiqsSk*oK>EnYLs8AIZ@K-:J:SZtUs(dken\;-\O6:5Al^6E^Cpq6+hO-0)%FK$j%nMl@C6(Aaff0>EMkdVOdH!cX$G66&(Vq9Dd%a_!FT#N0CPA`taeJ,%:n-JTYFImFn(TpfEmg64Pq^;9I%=EG.El'[>Y2ok1Ncb9'%_.YC`H&@KT7Li#Mk0Vfi`5Ws4@ST^<=-$^.^KfCfCW:Kho<t8FGX%2P.<KlJ.o[,\60f-WSq<@UEdfKfB*m;t#$gKK8#ZXT)'uHM%pqM)bKq&tFf:C4a'_LMX]gGpHi"bDsG7=!K'^D%Um!%l-noKU:\r]F8^M0d'(Z14?U:_9,.BN;).em5FZh/1D6B(McA#:L=aJ0c5%SlrGO90TaC^2JVl9B,Ao80rY[3(;bp>Ug0*KCAG_&su+Irp-djQF,?*FCdB/4!bhY5[5aB]K3P5bcqtj_F(D5gRf?*%aRL1EK.Zn%MsiN2<[FM/L[R6VbHWnpb+C]lbp[tgZU:S>Ej,d8e5UZd@5,ELa0,"k_J!61pGZ6.'ui3<j]K+\EQk/23mf!9R\TLDkm:S%]dp5q%8i$B@'Ui+`M#&$*@oIX(=bV3<=H9>^$^o$P'+C0B_^D/G1t&?fAe8%qB)\n>_eIqf32q1CM&:a1780-A9dndi:2.h9CA)>dAFDP:%&V+1'Zbp9(kW5uMGoT\#7t/hOELm8_d=?'5RplZ$+?$!`kWeesUoFGuZH7OCZsJsF$G-YM8_bBuD[[IX'(L+<mq/hQ.UdA7.5Aqq%Qk!mS4CRge4IfEo*<O_8^(D@H:'oh)_fA>]X,XaqT>^IuHYj38M*rpkf.kIS+!.;!"fS9dG7`VL'1J7HfCfEl\aq]FoGZ=pqV!W!%ql>FbCgS+ZGM5ILgE&NDDOB`Sq[QP33q;S!rsO:21f%%ugS&mDCekSPNi*E.>g]!5;_m^^=)>AbinEPj[D9D"A.WLlr%/3L/l*'7%a;&3BL94n*[[A3K1i2:dUi.6)F!F:8J"p)%H.28"VYmQnrfs'G&UGhL("s_sahc]N&`B[#Ek,rN&It#ADjC#X*"1?Za%RLrg<K=I%hXeJ14/\(pf*<@j7=X28Zq9N6(*$hL3M:Sd];+L)\[Bt%Isp[jT%]T[l*5ZoaI[P4['Af\iVfCg6Z4lPB)qtdl.9^S;5h6Ybf3[_%CXtS,/D_W_e"?Q,r:FU]WSMjo+%L"PoiIpArXc+&+SF;qp.)gfO^.QVZeh^+Z4u`W]_D7=\PjksjO`e:;H-ig]k#=27dI>FeVQNP%q@Jrthrt656e9AF4($g1lrgsVoW"0pH*oF^KgPV8N])p]"0KHV:/HF5X?a"d;Q'7rf*WrIh#b._hctN)hJBniGNp8'Y7G%NK\Z<*%_L$nXf&,rjmH/3Yh8^lDE`DN"?6>Vqe%`N.`d:s-0H3fkX[du!Pj.tVD81S9ELke3Qhj4)f%GDLd?:D6L#sCaN$@Rl>`@j&0&D.h%'mkEh)r42-\(1IZMuLdMAb%d5.Fl2%]jJ,!i^*OVO^6$B:LE!DaA>tN-$u"VfK"h-jP*7\T;f>ii?p-*fuq.PO72/Q*s2:?f#[8l%Dgj.g7fp@dahY08Q]IOY18Er)[Rci5=5#qq,/8J]@m$bM)[,VD-][UN;28@BQb&U!,;5*!1(bme'%jrTm'';7'lt3?((HiH8umt4%]i0B;S`n1!MEK6aIY]$88KNaP8MneWi<h/jT77ar&Y=i:bs\(7)JDM.7h]r5C7lH"2fhslet"J_+@s19<`m<$5.%$fL7oYg_-9Iq%:sK$X^nd\)0VWU==+1-!W]kVqrgOH9r-Ebk"KcnIVSD^]qi/YJYP5,J5Uk(CH0b-srC@4#"3O</oL$lLohbT8bDuEEbiPePkVd`i%T]oTGe>/5MrOi=(G\E#Yg&/VBRk8Z-O]9\Q^&R@T]'Qt*Vc1W6s)\ucW*^tGnFG:\lnhmJ7`uQka>A0diM6/A#Fh7][oW7kYBm+Y%9]ha=YZUP$HLm&]"aDu#>g&UTes!9/li628[+_WOMMZ&U+5RosBkE*d*"uck40JH^H9AX)@Vc0-#`0]b-'(hQ4f7<_E@02fR7K47%fD9p%OTt=h=7uS+TeHA0Rae%pIi+qhGRsF3o`$HiqrdHfWETW#'Efj.Z*``iO4+9sbC<Ajrr56[h5>c$(JEfg0H"u%Y7LZbH*M8>%"io0dD"4;uDaof\mkh*BpOAY)C:[W"o:;(7oC#YgqO\ggWgX*#UY8;7q:FqBmj657=Mb%,W!p#*.[HJZWgC`ko1L!NmZm\\O"4Ec%\(`V>\o7>!9!Holl5b%SW<Xu"B`69T(PmR`pJ0IMSVKZP]Oh+_q+mg9J%?$VNF)RGW'd?R_]?!(;if-?OTrFN_>pi7;`@kVV&_L!%n+?&&p!.(@U"sO/Z>0*iCId@):)tIiRd=h!h5p>hUgSfnFg6YX>/UDXJ+^+n\77jl_,NC$J0+&9\hDa#HFMMi]`&H7*t%EQI)=AA%c&(kq7VZiud['9>HPi8e69bspH68rXnNG9QRX:TOX8>aAbPL]el+u[q[eoncNKh-GV`A`cKY\t#o`h<dlTq(@S\H)rZc9b,g$7U5%YC?N*I-pn"/KUsuhp\u7D`rU#T,ZIYp'4s@+OARi5*6r[a2\0H][sc6JNe3@g:]bNHLmDA2k/.`j2YqdbpJ();0G(?0(!1B?bNnW%@/X3nAj>Q&N=K*WpTJ2b?UQbl#2+DtGBC"sT8uUXoiJhRl89j4Y`aG**.f8[Y1nF`3Zm:Tm)D9Zd!Yd7c%E:oDmFo>Un?IlU(X(@%"P%m:26u%EVu>1;=h$tfSomF5(0iEETi8Ms=6#uEYj&mYXLB61dnu*V;G[LVo2aSEI5RLAH7g,,0'PC,b?'Lm`'_0.fQcc'R;DDd%h32`Wij,uGro@Wt>BFo>?+Pk[q\&>*(&YICQ=*4AO&fKm>.+KJ:gn-Y,-HLadi0&kHn/O],aH>?OuODHhWiT4?\+YRNu;)+J>GeQ%#TqcQon%$BG_hN!n=enl:p\]Ie$O1HKqg#h^[*,]W`'K5`OWip0p<oE)iH'S>b5DP.X@$fOAFT$$[D]0^@kPP4JLN%'hQkFLFebW%p6p\*XHDL]K@*(N^3Y$_Q1m^lRV+f*hoY7t.s7aR*`H.#:+kuAe`"t1(B!sk'OK[RPUJAF)Omm?YK`l"C"r/(421"K-u+-4<2Mg=%fO+7Ob5SI?o[IaMP)?pUMY56YTCtF9e*cOCX5:$)":NYS]k>K0>`H*uqrtNA85ZPH]moF_f0A8Q@[TuA/Ab"D1cpDHG)NT^*f0'J%Y!P^@:#@nq%rX164-,)=#DfaYco`cP7/5,%]CS7mn.1hZ&j`TLA.bM8d_f\qU[XGPggAHWqfmR>.hM*:BYN`pLH^4kjKE0aB?68/%?@1Q*(Gmo^l_,^MBjel2fcSo?%mhDBXf$>/Z&Z&RT2:b%:&"<U2eI)E5r*#27m]oOIn3Gh@hC04$;;X4Bou+lOi?5DS[YcWlP,&d%?Df2%oK#ETZ.ED8?68-.[m?7b1Am*)ihoh\nC[[&4LJC5`;\.9J/1U682hSA\cor*6)AC[U4T30/,AXp679j9W,rP#q4*1^O`HD%%$+b"j3E2ZHC[=0,\h_6[MB?#\X3oa@FNY3`"`>AD]`0"m0E$Lih@%pW678;E.:b.fGX9J+dEd';)pV8F2#<0L0smlWU,su'PUF>!%*jbTjB/_oUImJ!_3?3>$=&i^_[)CCe7!(ejqu2G*6I\n/`I1$Q8pq)4HD#+$M3H5+ZH+2#rXqo1n5A(tHF(HR8h:c'^9GsSoAT-T%"JoZN>2?\;-"VD+:!rVIcAB+D'9l=JEiUH7e);9(XNS]#Ua6=!e,?l@UC,Js#ifYXrb=9"=kim*Qk6Mk>)d/=3WFsU2m?2Si3hRf%1f[qnoj48u'P+[+ouBP"d>d*\+3:"#hIMBj<J2qr-@Z`q,hcBP%rQkZ`2FN[5W<<=[(t^'XIU:t_;t-2!_-f#eTsd*&8:<SX2Q)[%^5^rM.Z"NHT'g*&rk*2RaSol.'8*pR,L#alrq+7idEgM4?Wr$n$DKhj%`4<qPQ<T2Q$[qG4[1'6<(af2(<kcemu_GFT6[_!fnC)L%VDOc^'1g:Yooq/qk8<iD@bnNF%q9C_@\b@clO[OnF;rT?:4.c.J(td+?;g8?KO./k#@%LVm_G!Pj*UYE6C,M*j0\eeA"Uj0f8jO=%,^7UZA+C@mEB$k2;Q/&6M(3Z!VaPeV!Y$aU,D.(Z/4X5;B/*9tWos+37=^:-5d8[NAS9%<2]Jt*;!\%J\bTj=+9#SF*l"7`d%>+A%p@KI,L0f%Fa1A_9Y?)Khf@op/?$R,*gV.H&3h<[)CTDaNkJ$k@s0u$3B\2CI5:Vk``U2+H0'VB([9fi'XW*TG`SO4R4T54ag&?D!%R9tI.l/kBFp<Zo%?IIuf0CFaU1-=kOWcHXh4Dk%e-lq09S_$oB`ZMitSDWXU3a0!V0n5bo4u'hF\MfS"<!o&K`8^%X`PeLWW(\bT%r&L6K/708eEV1gM[;p)*NJ/&@<`\BU5>,G&V$$!Xr0l<gB%A:f"%=uU6F#imC$S^P[fiqc,h$qE.J@SgHdVZBFEWqDEJc=UeN-pF%97>h[T-o]!/RdS<-e:rR=(Q9ET^OmJYV',nhi+_hh5ANG7ZI,`Be-42gWm"7Qd^a[=+?^3F!"#I;:5egp=?f=U<SEL\inTV04'Dm%\h\9SS[u<l$?,Q]F_5KiEq;GX$QJF0nq41[dASo[F`Dh;L,WjP>q<=gFVneVZpL7QXSm.9>Pdnf=JJLUl!ZZZd;PIn<K1bc;;'[g%>`i&Ra'/@&f.(G-0N+\%\#M7Q9<?O9R@1jZlCEjm$Z2+NjF*:O$E^O4^$5IK]V#p#gV9c.0;DT.?OUlFA,CU`UXk"%4@NskCt<Co%Tl]OuQf3oF<9L,BXfq]-7_;S@j]\<S`aL8FX_TN]3kS="p1f&eH%$=Yk[^f57Q.9rG)sh".`9;A9u4GCefu*H\l3A2Za9-j\#*6A%m584qrC/S'U"QPXk9=Ym\%aLi'\KEdJ%jGYU7%P=c>5%RU!^Eb7^qjC1HA42p.')'HTMJI=JJrUq7oO<ZV\.ADq)9L.spa*[biJN%MpUh9jHm2sp#(K]HJ!%M7lIq_q#"6MB_5o.@.NR=k?%F\GP0_(>&A[3[*c4Nf:BuP:\UuthgV='a/!<+Pmc^)%<$?,EU)o\DJhJA%d>Qc0DIfN1gdSqspCT:6IHAN/H9%_IlMQ\PVc*n=oQoK_eo-eSMqmZkag8[$7&)suj]DETI!DCkkHAes\V#U?7`i6shHo&-Nj[\F%cTaoW]!)%7mVR\;>!#e5071`$Zr)Fs!Nsp4=I`i[hWqKKU7$5gW]E%ATBpF:P%L]bV,n@EF<T"E-J+eN>g7cT<\HC&Z`BXiUfhG>%/[._%gpo\F\Ykq=-ebM"^/B/cp2Ha*%rShKd7(jU+=fQVjH?Cg$a+6PqPSk'Y32hn;PWBtbi:hG8c&'WA_1iWP64k<QsXtGDP5Zl%J"p%^EqO0oRl'ti,1,P,<^(n>N@l4f![IZm?ELrh7Pd&QrHrNZSm^";T9hGNDbMr#Pc`g>KXTCAO1>)[D*i`"rs7EQUmNl0Lh=nJ%KKj=tFpKki^II!)g-p/GY_mZ%`:ERNBk;3MfBE0^#(O=hm%(3s;0P[UhW(aRFgn+3:],1qh+TH^IT8CUfK"e7qG'&Q]_*K:hCL(Q%(K1uu]DdcF'U5q`rI!,DVK+lj=U;dS18/g(->[k7T20<f<\DZF<q1X#d#=I_b/Nu3HIUb6ji=`4MRn/-r33195%FQcO-JrZqcD:r%J!=<,f5hOJJ(i&K5>MZ<]DdcfFHtVPANf>C%HYmHF!L,0Fk":`Xr25g%V'L.C\n_<n#+\+\(b*9h,AIjGk-4"h1rFbn><lgcIh0Y%HM(qF>PQ\0D<l"`V0<r/=6go%bfkO6)HEA21APd4`jBVtU9M>9LA->5:[9kc<fHKs_XADL5Nc+TkMrMQ^Bh;R=aiRImT11e:5l>>%I7uZTg.2/4Cqe]m*[(2\>Q)VLVHNS)UE"!:FZSi'NgPqbn:%pSFo,qF\or5)H!O])&?&L-PRA"e9"DGn:EDXs?k<7^25)ri[O8FE%V9_tZ'TJ[TO62GJ2iIQ.CBeBep%"$04+t..XmiU`:DI5<mq2q1:0*4^ZZIHIlcu:aZ[0""NLdt8JQ[njRP/`mQ&2ptpM$t8;<-ps%]$\XR@kk8dV05m'%Q$ecES;s@N"9:ilVWZ@NbNTNd1mRJr:Y!MDm[u!RdUT(?Ooi7EVZoLbT#AQMN+c4k/BfLdqQSEcI[!B&83na%'.+R#/YZ*O9bQ4>B6^2keP0SLA:!,j8aac3V7&a%UL6/G7Q&m*1n)OCW-!!+);Q]S,a$O`qT)rAUW:kVP#ld@Bn;84IUdW:Pd9(b%=?3aNV38jE]i6j-ZU\+-\V7J)Gu&)S_?EW9I1],#k,-#"^OB(XqB%I/5.<_pDl=',l@SbM,F\JQ5P-*se*m)JNoe4F`A'+@^9sY]%(#N:D2#lCUjlcq#k7:F@QJGfA2k+26esJY@>Pu4\f\Y3T&c)5Sa$/dTK"fJL=e'G&iL<QLqQ%4S$s2Z^=uAf7@)`uUgGh9no5f*A%O+:VG7@HJ]k0(`1`b#]E#XY[E4(2E(p-.l.="'eA$e5FY@.T6SRUao%EQZ#t;sqnt2!OXbNK;fSU#S5'80/lO38kpAa;#t(2A03;%qV?SEn]mmI(*"F'6BK>ojQI=P[slNl@JC0.Z,k%EWGGucA1'E31qIU2I>ib\5$jAV4K4NG,L8KCpIHRSj9D3$AT5r1j@_`/.CAtS%cdfmfe:9LS7+NSciafd(0T7TW$GlHiYb'Nd'J%)amV8F3kY3.!;Vk/5f\B?%CWP:2IpPf:Z0`s>7)Po5d0NG%h&C?IMr5UMSnb*A%<;<oq0tZugg6&eFU\FO\Aa#5id;_UJqe]>IFPhP+1*Dr=Jig8sd).lff'^"tXtD<TAhe=01:[E4jt9h0.uiD2O^X9*a_9L`A+J3!%GK@r'WD99rN"b*D#d\TUI1AhmEaNV?JD0NDTK=Ch>2F\P&7'4(_;e/`#dgP^ZsR2%h5'.#\^*<tDX;go-f^E$TN'T23R>8^p1lii%mal6s;l+FHJZspM@9QdgOr0fT,G`m@FR%-8`:M]iXG;c"Z5X?Jgs;TfBCsf"/'(_C@S'a/EA+;@I35rJqXi#*aP%</bF:SU1g-mR%q*^HogsX?sme8,4l1HE`9)%IC7<Zd[]"n/nN?#N]DpttK`Dl-q",2cWQP:qe5?UURIWli9(#?&5Up<4EMo#:Egp4[M=eL^/aJYHP%bH];oXB%:DN'/cSYK&P2!KK(j+IQSpqdFedT>:7K_c83oh?MZ[:tkI2[P-c'+,`$'_?KQim*9FF<3K(AW3UgH2E;PQgkHi6h,kZ_%1R)MsB1JS#hVF+NWgQhm1P"-pW^gW@A9RAJWJuV1Z,AGP9J/b8THi^'QB7,;EnD,b"/F'HF@;&RLo=N)bXhlh#;*ii:L?B/>$l3M%)_(6m/OR+Gl+=GSqQM=_BpYb[gXh\hljtdGYGQ4\_Ps7-lF):>%7,aU@inPNnn0=Am?"nII2A$:l:m7l!URV5&/Hr0#4Q7QOo[u(%qiTq)c-Hg8Z"G<C$c.Ht?(i?U,;f5hr+8`q/,uTBDE01E]gNMZV8Q'"i=fX`':WY#kNCce70b:0N8S4U8E)@fjV)mEXR)Q1RD]Is%M=]T:J!UIHQT<7ihBdSrBlYu^6h64`8A_Y3rHjKo2i(+M?/>IFc9mc]OsNIoB-N+saTVkb3Ac0_ibX*8pBL5LlI51!1906p4)*fN%*B##q@j.lf3M<$=:$MD7E,8hYrZuXX+oFMX/S:0L0?=JGMdE!GBR`a<'d+T^Hk!A:]tSU<$`MMMqKX]I1JpuF,O+<"G@[<`l&D.l%Z8/.=Ba*I5:^i(d6me`Qr7I8<iGeFpI_Ik4Q7GCI,UiSD?(TOu>G@9V:rtZkJ4*'8gbD90!5![-:67+29h[h!Ke`X"Qh@_Drn3EV%fne<QV9@.\*1NB/U+"*l$A%:Pgth3gfZR4Y8!>L<+e8=38+.n&*VWebpoC'nPlB5f[6p8WUp<jR%rm^CNLG_Pa5SSMg2)3\N#0!8%TUr\k.>QK+gR#WmI+W`\;Y2<"U7T??I/b@1&*6!WX=utPZ<M^"2P=tdDL$LCfOGbILOiD>,&VeoFWe:(qA$@$'=GjsTgZ[!C=,+?%iTb&?7h_hAL6sUUCk/8mfM\Xl2\8KsFZCP]N[msW,<;4]\Ou+;LWTh`BG'e=.N8I[lb;UnTRGIK:W&$PBYQe.@@5ouaPl5;4=%Hr%dEEj.hCG_+(hqP;?eY+P*/FB4!BC@U/_PN1P>'am/G`P-J3tm7Mie?K4EGqbEIaohLu]#t$G!Fj8^PJ@27(JaZqM6E'U.2971-.\%T#pgk)(HRcqI/^T,KuJIp0L[\1T[#be<G\:o]$e<1Seb-X<k),13>Z.%;PNs7+[V:*uCi<9=.JF)k4$WL5=Zfq1(#ldHQ!DX(F?i%r^Wb8*5LP9)f%u_QFC?M=#PYZ+/k(>6GWmg'V_Rj6(c=s;QN'm58G\;l:Ib`-MM*\&Oa!t@3'KB,u3c'LQmN:$apo<:EEaZ0'*oG%ADpEm=9a%PFAQ[B3c`\B&NZ3!M1HM+j'Tq6%FU'3oEd:!pPg!tA+EXKW]]!qjnrhkqlZ,Le'4[sgb<6h.)r*>a^ctVdT`^`N;56Q%FY-'M-&9skk]N"#,PHt*O[:a9jia^DJ7.Z#S4N?$7gc,o3$U"LjI0WJPFfHU3hiIM9L2pKJj->N>Gs*4BOUHXIeO$r)[VA_)7u@8%2Md5&N'\4[Z9S+BAktO@f^HFl_7(UXpg&d49q\'BEsrR#X"&GSP[a#4'V3nqi4E,%?acC>ot/JJa007&S_glYSZNo4Bb"Er"s&s^%A&t@%c_.$knecE2i\Td$q(bhXh0a#CSX1of@Les\BP7U@^F)3K%UFGdSX:ug8e,-;UGRTU10\_5*4knR3\aiXPT7:04>n?aFJKnf%p^B3j`(/.IMpJ%(ooKTE6Pl@\-bY'\+s8lmm7m-Z6l<U8%"*.DctB-pOL@g3H6o+S$JaKVVb.Ja>teRhMe=94p>k+Ib-l0Z4=,?#%O(JTR-')@nl=,X1;bB,I!C>TbB1?Um2n<C\_,A84$1fEC-/1)KZ6\L)4[(T=%V\-e_R/>rMjfKjO29)2Tt8/t+-Sfg1%UVVAM,E,%.36:^<oZP51237>V"9A(#'ZM4&4(rNNpJ[tLDI+-US?6NLA#\'TMU`S84Z9pM[0M),Vei,-bZ3:]o_THg>N39;KT3K[*G:a_gtJh%KRuT]7"cL'0pT`>B+\uCTs?pI_nFV2-kXS(ij:iD?Md?hhDh93[#mqXmS\^7iWf%&>W?LN_#>T.2R%$/5"I8ZRj8QE'&tqS9m8mH%PAJ(R<5[4B_0;t%[pgUe\h#NYO0=nG:8H1q]DY?XJPVmC(8ZA'P;O`.^diUK&X`bX=DD8l%/f'U8;_$OqBa1tVpFDH%DI:RH$fW'%js\;i;900nZ`)$@GKd`;q"0gtjP()$A'qn)"8>G-kD\Z#c'[km`>;3?U%Qadn[a#nXb+6WS@$Ir]jJXOh_Hon0!5O^5odeYbXY:]%C*IdbD\$aP7I?!+ee9cild"JUTst"Ql-1f:<NL>.KNFpnlg2ke+D2rK<A)f/"a3APjGTqa7&II?P&().oOXkqp+JfW86>qQ*7lPE%\4FjJ#%S/%%1)aK"/5Ygbt]rCp/h"!2h7;6M9//-%ck&hP9(O*0dLh2k_uGc'dL+Mp1J#/MXT0;a?0V4G0"rl,D`^g#bn]tPj$s1%TKlHb4O9![m:hC@da\T[(E3K16b=%*bl(EjVGdSBA0Retjg;OKk=PBgXS.%&N/(p.pI(K'NCW.0H^I<8^aM'gH7;'A\47l&#6+MP%4>QB_`t1O)L1]LF3$'icKJ^&u4Yj8$YfA\3$m2:="ZO7"R$1)R4S4&4Nst]s6[mmbkrFm4':,.%K#t"/pPSplo#GVj%lMSj9;=',%%N35<F-rfa7$h^N6UP3F[qDH60EX=XG1/q+Aob.jBX?_i+$4e8ji`a2Fc#PrbG<:])`7k`^2H-#.c_jh@U`5+KM:@c!"hc)Mfs]l%:bUEP"/1$o8'V6];@+lT)'T5i^j]]0EML(`qt&c5r;<O(lI+k5-,4qG*;OOb#MYj_2gC!jHp1g3#h;fCiP`5i59k($q/F5`$P&I5%kIoD.]Ws9R_]^*0B#KZj+0OK+41'_YP7JIW97SG&`g72@E^)Ge@&SI_i3$ul^=^M)"iOV".:4WK9I-SgJU(dX;]$Mg8LfYTd2=&f%IBI[\qP>92Lj#@N&i."hnCLhP[)5Q&O^A5Rm&69a5>ii[H*#gALk/?\G`I7YE/J`=D]dXW_s5RU\KDbjIobPV0Hp5.ZRj0aN)#+'%1Z@dr&`5R=4u@QI1DT"BHn7$0Gp^X>9Ts2mJINi>j,c#UNjf&<H3PY40^G"T1HHC[7,$&k^$CF(P9r@RW7ZlGR#A[[bTsl=.PA;`%N%a6+!!8-:W<Y/V+Tpu)4$"J\1!Ya-+61R9r@s=ke=W@Ca[fDZ(WV]$9'R9]7OlnCNf6r9B,hegOM@+L2:1=8CQ_I"#UJQ/WQ>`F%5r-+="Gi/JEn;0>)+LL?+WhX[>A);^33'eap]nj+$HHapCl,=RWGq,#QL]tDQ:2Kt=,o!M/m@\(1DLD\I\LR:E[k<@QU3S%';&_J%_mhYBLJ$X.@"?17H$+LrDj(M(=P?"nW9c<dqa^-(VJmYFA\Ae(@O`D\.eo1c+ZC2kKrofJT):LK\@;&2.kenu4H:#)W6VnJ"lAo8%82tD)5:b#\fus$D*[0o*eW1c5R6R+JiGA#4$)0*?_,908'6Ce/lGUR%acD:4Mqc^;KtGC3M7KsUQ-$l:,:H]_=PUSGQ/^npc,A"E%qb?E4pGg::DY][[if8nR*2+kDSTSSBgZ"X'EjApKIer+W,2$i,B3^2IAF4P;>hVHK>M2&rB[iK6d\;=2G.4^oG$>VlFJEfV[b#1H%(Fq'&9ZXL8'pA]B]Q#,P)G#%(US]7S2.,K(Ia!4.A_7l%=)l?"cUq`C9't5R>_ZPPXa"h-eS%+Cd4JoYZI)GAq>4,bL>Beo.I0)?%QZ-CWDPTAO!c*[5j,:8HoGc,qqg&[8$nlfaeOWOI:]$\R;6oe9pQcI\-]GT3&`n[=SmBG7ifrOL`u.n!+h%I]p?:7X@#'P9j\de4%C`lf>QeM$Cl#r6`/-P-IoJoqknZQ[;m8?LIi6f$P1Kr5'MYYtEAB`TN-cq&kL7.S%,a['iG;M*9Sp:ZiMg0&Chk5bG`HpKt5=@-k%q!_!JEQ8K`+(+[)$c6,m;b_St3?t5'lLQL$3'T$DQhHB1nfD/<E7\M/TT_OPj2e)jjbF^6S'EN8jO3Q9)dbL/f[)B`c__*9#k!P1%1Rg"55\W"rdq@,u8(s"[RkAM\W,I'bflY>S#T6,j>tTr9@Q'e,-'h2ji3aUMRkDq2P3MGgLtQlY\THf84elQ:Kdhb-fUag.dtQo3%7D2c2ph[MqequNg34%kd]#<[Q(piJDEp7sGBjB>5@EL%loSteu/j(%egt?dX<=Q:P)kTh@<`ONrjY5A0d5*]+Cq=W3=EHH,WYla9%RkALr,r>gTUhmWH>WNeV2:cTTY["c\GBOFd9c'*gQ^hDCBJs-u"`/rQU5EBbl,%K*'$bkE,+C2YV2<m/*&=!90H"um1u2AL,,ZZ^%!>tfj6[:qLA^a(;G<i(9#roQu\C:s+J<1]aLq"BfO\RY36g%a4\Va.08t1/HiQ^?8`V@`ZMq9T$F^A>jA#:<dLj;TP[5)`npaj)m%e+9j>TuEWkS&l,fWJ%&3,.eP0\m4#6["EJB8CkdZc;W`eZN1OLdj]&<Q7:QUR@HJ.^(k4;k^1Z#lAn/%j-fM"\Jlh5.fD)G4sn;i%F>m#Y@LS$K5Nj`ecm"O]PL$F+8u*EDgU!Xc\f5<J@E7/WEQb-d_nhDElglNZ*HW)>L6CP`]*(f&'nr$&b["oM>H5pm+r@-),")!L%Y'.jOBCW6"1t_>O.$:3_+dZh#<@gTBIX5/C9?.]u`uYHTPH9%C7'gQ.VG!^(-MBA@.j9[#3f#$Z\UDS&C$C5j@!:nDe/N_N<8`G3%I(u?`R<Sf>\sRn#E6XFiZ-2n^=#:WAq8X3Z7C3"a`\B7+,7pK>?PqE$&abnclUf="okTE.INnFnGID9o/VO,CE)'l"9_M0&E&4G/%W5MjlOb8LuIiA-s`7dG8KY=1+hjTf*81I9/$`-GlqU:f>`[W7WY/mS)D5EWBi-DN21"7$<>Ijf-NhD[hn]4[a@-#CJR47=ZbLep!%k6Zn+"!o_@SWl(M6.K:jiB1mejEa]L1*l6f@m-U%,lm6KosAHrPV267/c%r-oVi6i+9NuH`:!+-h5d.V$#JNfL@CC/rA3k29C1Y+%(_mXFSda)<E0p:RlHrA:'/L_#-c;krmY3_NDt&.KLm.DLOjCQLI*:3IoqXb00$-%9SeLOfo3Of0\/R3M,!>a:$k&b(`oW-fQrpCa%VTOUXeXZ.'N^@;%T99\jh3]6Vk$qk0D2S'md<\:UAmJ<HEX[f45N2d9"C!FfSlGOQ@4j,TDVSI%rFe^u&4oP,>(_rC@N*_>l?U#B%9:<_?f87bUN([XfcNm0;@M7OgSs75OZ[*^=3*:dchR>,5ZBl9aJuOp#Aldee;.YVP\1U_4mV2(2]2#A.`eYlemN7)1'2t\]V,Ido%QXp+t^oK/6NpD,NN[oh*MIG.AS'pE.Q7j>pU9Go1iL2<[.tqElm)&D"qsN*sHR)V5mc,^V@[\:gqeiE8;l.oN.YZC?a[kRQT.P;S%rnU-XoQ_0#nj9XRPB0u#QVq:Gi#N7=%mKrpRJX,5p=L;MFZUVG2pG7m^:RI.gNNiD)\_fRL$t,S=+NKJc''4QIF"JX(@PJ#HgI5d%Rb$`'\W04Qni:NMg6*u_0'%*+^.%2`FhW;@U6G*/=1%/S'B_-]R+(_eX6Z,dkA#Lra@;HKe%r#:@tA^ReF.Sl;2mcZS\nJl'cN?9%dk\K%e4V$R&a)sZg?8+?2psrTgh_'F*gtkb:#c)e1d"irb5JZDVGH'VgScC1k]B258um)oaK[4!$bn>=)kC^(m?aas]RkP!>;-M)%D^Md;:A9-Q,-oUQNF.TVd[E(!B(,?[Ca!C@f8oB/-%k;s^YW1OjfGH-gZmmoki\!TBtc:6@q$'KA:BgG8gjASjPTi&BC2`5F7teN%l6=J#=^)?g%D(5gZ?\"!QlXH$,$[eR*g2mhnWH8?,.f,emr&[Q=r!TF<=?O#B@rDN2WG95l#Z%I\jUh,DDh_,Xbp@Ecn5M0Xbt4m%Ru9,+#0fb53:ENdm6)h!(B'N;`G#c:^;[p_#NJ_;&u2hp1UppUPo,N&f-Po*!BQJu:+NkJ_8')ka,9Pfs.fsh?%op"o<oS+@nqGa%8p-BMd<[kReNtoqK2%nr<;h(S[&$.IE1"KBY)[([k@u_o857mUEQkUDMLQ%0e4[8^*VWlURKY[N6PFJ?K<_1=:/'r#Yp?BHg@qb[%!FG>LX"O^;W;V')pY'6mSu:U&p"HoljEl;1d%uQ-!N4"kY>=SaIb@^JES$[R<nPUbe%=t&Z7,Ohf%upXi3>%'#NJXShIn-P`G'2l%-Ba)ID1OKA;PsRC]]W[q*38s&hK'7!gGTo_2kE>TQb)f%)61FpSmRm8'i=&e.8r7E1o86pYZ#Ip>JEpPIt+iJP0Z`n?WlA;3oO(m%j<I$'8[cbArCYAs8RGWucK0R4Q?]"H+>XdsOOfaN*2sqc3Inhk)(#_FKVUqU!2JC<OtI+rD2+IOoaR#e(r;U:EWAW!-P(0j?Bf>q%/dj@M%Ue9FAl3V)d#!'G\YA>o!7U'1-=tju:<,UIl@j6WoN?]YEr].naAKQfnMu,Tk>GPlFQ1+r%crU2O_q1TndXN2)rXUWI)BBu%2E0?`I";sarh2^T&pFu/E[W$KjL>lm`c<J78DM0KE%#)3Bj"q0PV;D$b)m1qPIo?.a^,-BHcH%1V$;k@qY;"2j*<R_ppkhUB6"H(%Y$]8/I37L]U"Ho)UIEq74kD>NlY[^2L8%gpUV@`t`OUG3h@2@=\UJ>!Vu"g)oJ)m%(E]q27biuDY$\iY*fM3[p09h%\G`?%Kq.fu%e@C%unOu'/CXdG(@YZj']&.OP4=>ZT3nH$65e(;]qRM(FVtpja?THp#+.fPRa16Y-RI:'RIWEHTnE9YeTB\@W<n]fViRg(c%</IW%]H0M<fGMp,Ma,a1Yk.XaF+FQXO)NZlrT%.6ae-JB`tpki0><bAS<:Y6onu&b0,:riENW[HWID+?Nrtp<(S@;Y`EeFIY$^g%,`For%>m<LE00\<_^)pqqkP@V$%sFu1kZMU+@kR<cfuA$7?i3B[bk[#Yf2%k&^/Oub4HD-qhLf0.jEZ-Jk<0*KqMfkD?Rd?c+e'_L\ULNP%D+?eA0E+p8hTDe[qY@[=@B/,p=_S2!d:)<f<6!:XkPE/il8Q:4?:j[Ejg=4@%7l5)>5\!e7OQ+;;uHnbO)Gk>3r&E'rcA#B3f5TM%<528UeI^p?od<t"Vtrhn4q;nAhai,GosoPAC(B7Uki_dKr<fg0#CUAde@C#1kIh@JY$Y9_^,KiGoCu4Pek,&pNLgOh[0UD/L?ocg%Pk,T1WaEnmV^J)%2]mCH?\AZ5i,ek6Eh:.]E8kC<HELV&qH.]B7`]k43RpoS03js9Vsnd+debWX)&qpI^\Cb+#-]U&(tW?#S/j;0%0]?9OGf;A#$W@K>5M%Pp0pMG-L-O9CA1E:3rPE_IL,mj=IZT!2[8D9/$0V0(`rl'Kf+*#-?g*GoR0'X?8HYLK(GF#hd4)>,:1BZ5%rSiN`R)M).\UOLoTcrbYqQ2T#1#!aC/gS*J<-^N3.L+c\7:9kH`_^L0I3<B(g5bq6pop\ml)<U*^#\aQDi'ZCdfd;tW;:&*_WI%`%`ZDa-<'$SXPLke'Drl=;Fafj4Hs)roUkKq`C4#sHW8<r`rLEmG0gdu]0lsu*1/V0P;jq'"qfM"&Q;=[GcX,M_9""MnW)WdJ/h+3a%j%ZB$Ibdr2Nnm-8Ds-%RfmA3p<XtUY(ZfaGGKEt4G$ZhdoBsecEhW,ob/Nc5Qh"YV,-P6)SBi\"mO&O1gY9n!jmGP*.DPQ!)<LUA%rj^GA</[=8ch;DB95RsV^@%M=GK0Ud$Gf:E1-9+a?QZ`f[h%7AU0Ct%\pg6<qj+iVRWb!djkS8Jf(X)9Dn3t][s4",C-L^%%/8N8%rL_9XPrYEC3:XEG@3#3B97gkrV:sU*:75u^'%g&C^d/%L:c,qogP(=/]ns`!Pp%+Jaj(K'.S!1`P!LGTlVmVmE]`%?*%]D4,L,<G%`bN_(cEHFf)bR6F>?5K7&)WYS_h7^Oe?*j(RB%"&]sZ2Or2OgWUD.Kf'9JE&XAgk>4*o,C;ESbHaL2pO)d0e9%dj.aJ+roD_U*\p%,L/[FgViI$JMFE3S@O0/gWbT>9rA9M[Bgek!<#)9IlquVM73_/COKZsUd%U*lsFX+b^E6KOk)`;L=:BpVD\s4F'>-8W6:IXH;TAn%h/+_39m#UYe>h6:6b]+?!9\i\?6e>\5,h\g']15FoP&a-IIAUW^/1UiJLTa7[m,j4o#15Q[eDWM3=e@;g!?Mm,5b\V5PL*\g1&OH%#C=pU[ng'SRQF.+]tN#LmJcnNMf=6=b<!4Hch]T=&Zi+[$TIA"PuW:.Z:JnEEqGYu^-5oe[s!Z.1IUt`0(Bm9Wd!Kh/6K'S'Xq-+%I$iRW<b9+^!Tt^)D/\eUaF#Yb&Q/7CT%#PRX8V>_q'%am<8cF#lLt(2:8[&rDLQXMpJoCTn*I"Icgq<j/^PqE+/\EO[XNnO;KbH3%H!"<OThplCE2Yt%n%b),X6c87F':/+T<:jRbO^gBN"`></fLquB8_56g?e[U1:4?gYFkJ_b0@fp*1=(,LSqi1h49C$hqmibfbIY]%LH-^(g?a!",uAHO;J*TP=RGY8W`O&jllAeZ[XMLDc_]*ol.>4nj,jE';s11tQeS_s^Zi@ID`?=[>i"Zbaj1B(&iSA/#>PLg&4<kM%isLG>r$\;Y8%t+smsi1Ia:FQ8jQ6tF]kofr+$0?a^Li`l[JZ6[[BZGJe]?'jDY<GncYN44W&[L3FhO]OmXCqdI!>$p.olHNIbnqK%+0*lF`8&cmqtYB=>&(elcEX6;/XbD6d_V5RC2M:F_Lo%r^=B@@eh;/U\QsI5=L%"9.f$+C^:7>u[I3@qCRaIoAkaj_SlQpK<Ye>@%hnS=,E33oRHEXE".j+J&$$lHR#ZYd1m#\+m(@j7@D<gOhZgr3L^QnikhI#Z.k2$lGi6,7YT?C!o\@V^mGP>"'8sICj:"WY_p]"f;%'0Sp3mT8c`jME45)I+Rnm`4G-m(mh90uC+?H>r@3@?0Yd'=4me[>DlRnP@"R$%$d3hF2tg96'V3\JMMa96ln#52V#$Z6Js;+I]>@%@>%*V.JE<tUj"t^8DEc9g"tF10YhtR!9*EEJH9)b$W-SV2R>..X*-FK6at;VkkfT1I]i#O?S?a0`;%r<V0T*>'#moL*e$_Y^4((+%Mi??dJ/d[I't_r8/PC8F1.pEb?,g</@L-Js,q*Y<Cfc)#Po^7FLl?@M;9\oC?i[g=^o=cbT,(S"k<j:M@*T_K/7si>nYR>iHQ,W6%o9\b?bN2=g^0(D9DJh:R-qCY&!-5YhV<Z<;A#<<R-oj5o=fb]ldTOQa;)W&=Jig"T;Oe6L#/8U*]1cc<'4B-#1g!Iq_9<#n&J__(%e*<_!QtpP^3i`e^8\:YXXmDcj8dfF"Z[5(3ohd+WS\3:LpmhdnnTB?R8^Pi[6?N3MXaM"M:(!Im]mAkA=SH'H[00#Tcp!K..a3&f%=G=J1j&^5X<H&:$EQo(5C3MJfm!ICi*@@t-h**?^O3Ed;7qhjBN^;PLkDAQ:2a*K'.*Xk&(,4mShb,)XKHm&RKV[aGq">0D0'J;J%r;',doNEd;+CKR1a7B+apVI5]pObQlT,nF^Sa:\:"b0/F?%L1UG-Qp^BW$6#6[:H;6Lb3IT1##)[RblRcAP:44a3+8f[ke[qFqg_%Rr;QtS%XIo;^#dVds$#_,6W!!2KW@?E[qg<q'6eGIhDhGM;s/23!Gf-;s@h42?fnAjfb.@D\=\a8Q^e="FgdNNT5DX9gO4+:mqH3%o#s[diYXR8+YH@G,XC^%Qf3C=G1W48m9bRh5N`&05^G^in0\7t\\aH\5($k(TREd`*]tG18)_8mjfeY6?+a+Z"/lo<Kn,)WMA-ee%Z,fq<2D[l=_$]C,V+_E0/nlbd]kVQF5)=,m'N&nL@A$gVKWOEsV&BPWS\gJ:5gDTH#H*N2<:O'^Ah:3E]SMmde/_3:GoAp0iT3m9%LfcYWLWPI!.9;QH,OuO!q2@aD+nd']Ko_MHbIP@Zeq2Gm.ctcf.KmC(#-mb`<g']r=+u^#1%W10")5NR$4eeTmEO+,mu9mj\_O9I%HqNe-HlW,t,uQ?ANl?rl2?i7G*/gpC!lraKq5fB^_bp>J>0c<k=FV%eNX[iS&]]VG7MLl:p&T.afS^FVH"(CWk:u:Tf"I>!Qj[js%5pE4tM)cY.e+Oq5OloX3^A'mJ=NN9A6mB[Q`ge]Eiu(pKD$^i#DHM`hSa43J/Ma6alBMtN#r4/=$ErA95!dPZds2*enHifJBt]+n%p]LV]ds2*enHfgI3Mfer'V?LMI-J:q@6Qt&EULJtFol8rUXbRRlUPp<oDAK-?GDHWp\X-dIU3]hWTToFqIO]]hf##k5Hm2ZEJa<s%SB`fH;f\h=2Tu&87r@C$]6qNp$+g(qbiO!<kaTUt\ssiVd(H"p($)9D\jn);3;!IUQ3\p6rrGm&^#3>;:\)^5i5p.n7NOf1>_*)Q%WEZh8a?\K47dO/o.m@]?0oBc/DP"H=e-2]AS"nF"*:p=5EZ_C+CE!X8B$ap]4t3]*ghI#/Xg[^r;)Z1mZk\t5+Q"?<Jh3Fr*^7;j%Gq'scPq5)-b/\'D=.:c0D',C8:7e%=Rnnr$LLdsIQ.k$[6D==C5A>ZbmW[p^iga*d-"Z1_=&G6`O6XU8;mCXQJ%I0hmG1pR?2E"J%J(HHaj6?fgFPX$.WER+l9KcTBq._fKLRm&[f2d&<Z^`J1G#\.Ip"6Ei)ND)C^O)I;LTgGAX-[,7(/(QjSK5c+Cco'H)qbDZ]`H!)%[C!cMQQ=neY-%HaQ,VXg[f&Qp*rEERl`I;O`Lm%un,;9EBq\h%YPtIo?5C"Cf=PR8gX^\IG.)9n_B*Q\\g@-eqHn0AbYC5R'qNLr%f$B3$iU,;Y+ZJGB]K',eR(pprT:"O4>arf!.KuQ?/Y9+P9Ir5_$GHrcpFTIMnf\t>AUf=lHp;o4Sltp@er8mTo&g2@p"\]BCOeQP%Y%l]1"M4V]j6?L.J.1i>_7XQdY1MInPK1hLmo/i^Y'X@JC;)1ee?uD#e-+#(BNDfP>%+N&YgHo.HMIbbCNnNo$e43rPk_<VZ3X5B%-q<OgkEG,Mk0\o^1GhX[&g@5<P9BI@;g^M_(@gRkDIXiB&*hUo/&.K&r-%,R,9F+b!NHcM<-%`iN<Sjl\b\j8:`P[UlZr0FHU\Tb%/5GZHn/DVBH)Y]K:"DJ[]]f1*/U0&2!90c,>9?MR?Ohs`ZQ1GBO125S%=Y&"V;C+l]Xj0eZ,lm!$8VC$dF7lf$**&0g?0<YHVgkL%'r^:tTs';L+1;^E:KHl#oo7,dZE)],EW>Y?V#D73%GInkoZ.t7.gQuq2,A;D"a?8Gc5XsL`O(GahHO;`(A:2)H1;\``NU8ul9e^9%U..SIb2QBEAc@(fA$):@#:99!A"G+Rf;B8jJ$3`HO'Va>1NPR&BsV0-Dk<>'&EWrc.VMjI$;C)!n#2'9Rh(9$qpmm]fXJ&R>H1D5%e_0d>bNs;0jnH+PRsNb^<EQqqRq7]*2M"$`!7."SDu57DEapQM_Ol>7p5YGF/!V.m"`*W!A8-O"^F>_Ej`Y?:UmCr4lHe)*;D#Yq%jmnp'D>X<:otIQP/3doODrpBXegD-\+/K%$p$:'G+5NL=k#:6bO':XZ=5?t]cO9NYr:HS-X&Vp05"kb,oL\:`o=@T;mCU4fq.I7+%4*rM;+2<,e(Ft!BZ1N#tM\E0LH\?sb[dV-%b&KW\1!k]sIm<-?P7sZ'"pfQXJT'H)@i[N+(-Xqm_h0!_heX?6_G$KZ2e7Gt.ed.@%h`,GriR6#QSl0'@!T%8?UeD:U$AC4J+4WFC.:Uj.^22s]3TBj;i-O:PA(HQ!=k#>GDrqAH>@$al#8aA::10=g"D(jogu$hVA[-eu%XV`)j:+RKG,X5n'h)r?>BEnb7AJ(+MT3pTDaq>^aShTr[)qnkG@;d4^b3gHP8Y0"A<5B]2CB`VP_)%sXjlU*S(?C7BJcSQM^rEjk%0b<T^%i\/S)_2;W0@fpfO!u3%j,M>cD.^,eGB"ZhbtN$HWTa>_D(_@'+MD#acTa@\IdO0/njE@hF6Ck^2'=co_J/ofPE6>kmp3u<%Q6IMNq79c-j6r6]NCgJ?Da@3%c8aH=k1b-Oq>Qr#p!\2F-c@KXIP)>q.UL]On)gX4)gMFQMVe_>W[ij)Db!:_*qrb+,uq5KD-IE"%,.]\aF[42X37,Hr!GJu+&)R^8X@Qc!F'^*T^2WoTqqE-eGbT4c#<'h\I4bKTn#:K`)!ArlX'\_.9NTVG9QWojH&F,8$Z%`tMrQm>%L3'B>q,<Bsc/!L6HThaXl]Y$E]Y490:P*u`^i/8^Rt=ja$E-=I9u45%"jC=':'-(d,YUOQjhRJirMHPT_H(0fT#tHTX?qfH`\9OE%niD8=I#YGhMFX9/=Ua^u!fj+Vij9G'7ERc#4POr@.eour1%aCNrZeK=q)Mn++=CX:.djnta;T:$U8jk`a.r:cjichQ6R#NO+tZiA%]7*'FFO;"_])-1<kfQCEoOAD<`QsTB3R#lV"HuHi)FsOm5R$#IT30'T>SW69ibH\3$PfaE525X4LlYk37&m#kYHS@Af.V7]m>9o'%$mfjgLH4Wnng^g!r@4'!rMp/PB`4ia4'+aeQ.iEY.Dl,MmNW1$`Js0JIP@o,3#8Ti&O_`^nbhYuL`h)s0/^^U]a]N816,YJ^.')3%-^<q-EWZa1CN@K[GW9k023gRH>5+q%`Pg!>bGj-Lqtk'0,=pn*RCI0_Nm\.NL%R2F;Vf*1j"\F.-]M;hqc7WS`[+XSq),6Ara;U;%Dg`\.1+O41g?<B5<+?X/rEI*d<M+a?M%5`;eLQi1ipWi+HBIZNr9V9rcbm.Rj*f+G_*q&W3Su)/@j+>3!d`kR7]mF4k_/+0(4@"4%^4,TLk/OKb(O#af.p(BW"(.q?laO,AD!oQLn#c+!U9Q4d%B]"(H])A)>>*J>3U=.JGPsG^L!;csO1J?_[hWiGqsFc,YK/g8>DEPF%']sBcUUYHLd7@be0Cu+t%n.8t)e1!Wo4Vd!gRV\mbcj1_/'pVYJP1Tq7jeWloIBZ]KV+T5XhK88.^4I'l,#"G$1?0*S<rtAY7:rS%[sbf,48W!&Z"f'UVDI<>_6]^bNKj\)+5r^L=!pGO^.`Da24c>8I_bdE;PeL7D>AD;`SUPASX!ACBJetFX-IVcDOJE2iUYOjFmAst%TX_`1HTnIZQ,deH@T;-T;"+)Z*1SaAhs-CAe9/Giha>TB6sBCihhE97.iQ#/hcd5lf.#D@@1M+@c'sRadb3b==j63o1>Tr#S$Uk1%eBQ$Xp"&KSVjlpDrc=:IR(U[6h1_a-s5;>AoC?\Yq8N<?[BXm+32`=."g)!XgRNQB=BRS'S$d1@56Gde\p9XaeZ*B)hY@"KX%2Le%C1!7XM8dM=^-+DX3kX:NQ5>mSQg"'n+7ZD;pMosajR+n,Ke:7$NBPoX&8KO=j5UWX%trYLErS\7I3@%2[.6uqgBVnT1V'm/pAaSb%L2[LPfXn2m*lUje9J/gXViBQb#8Al\b)PT9emA=D7OOsCnXi/I_5H[4<R&X#VFc6(!8Y95jD!;K3h+r@ATE"6;Q%#"qTsS+\*BO!%ZV(;0gtt3Nfuu'[Z0WJ[]:@-0hC*TD1q>IO4,J0WLNaU^>9a)#s-<C(Qc"cF`IDgegIXj`QkoClT\8#r;<d$*n=Z6#D'`DS,r[G4%$L9>?r\sZCSUC6sKuYa2o_`'!<QXZADgj.g7l%[!PDj+@"j8`nXDU!$e[D"74+V)L<O3,VVWhtaF*'LERqb7:'N9Z%"k.F\lpIWl%f(<C*@hj+'d#qgT_6GjJlh/,6[=YMaHIhD_#C4D__jVJ!YfTsF:P=kHBSp['0^-%+5b#D&!eg7>+k$s;qCl@E#r"9$?8&tEpA4&?%*]!\uB#r\[_sS3.k2-:Zrfo@Hq\dYd$C1j:6=tc?=f;$[lI9\*LI"!_R34g-*XpWC0NBMi>1PN1KTLJb1gD[<diH,pR><(O9J%*a%S+S8_*MoF]\sE$#i'D<S//RH,_dJm<;O(hi0\o\8NhboHjT9u*!*5?#]Uh#M(`SN;\Mn-($Qe@PA-SNsYU>"1F]Bfik)c":[">&W%#+9UaRAQu/$uiIC@0GIm$?HqP@kc/MZ(,SH3eOE7_TFkAb7LNfJ@-0gU0:Y@\ZNIL1,Y&BCtE4:*62G@MtW0199t0\9LC`NAgtAN%!`BWm,)m2%k,MNYdktI&lKD>FZQ/tG6F7pDdhSZ-<@,=W21uj)c="(jZ#[9a172Xb=O'ar9W82Z/.]T+LY$0P2Cmr-#(pWML?2*'%iUs0.n-X]6(9^N]'aJ/"@Yb@._WnHa2H<Ac[N-o3=ban'QHnd%'uac=;mUH.D;F4EknN.XAnr`G&LN=q*6$n0WOduKa=q:UMG"`=%_KHqi0c8->>pBW]F]P-8iqsCUV(p259q4EL,I>D43QSf<9\4!,KSaCIY>:od8O/TYX$cRd0\=203<V9TFU%(l:*5$I\r#NJb:smY%6Gt_e=2a>J0[l_o7UUtflSEWA#gusYSRu(1K;fQ)N<2Bkh?#trXGno*Cr%_`Y(P9hNo;[ZD6iF8ND1H;G6=n@MuZ/@U9e=3Ai#fl%ZK_R[AuaLbWB%Tt<O&cuBd$b2<e4'Wen6F&<s7ZQpo($qq6Yr;:g#NB9J"%Gc;U+434q:>UF7G)FOad\%"gL4g8mK-i#..r)QV1]%/Sr=89G(YZRo,AW/$"_=MToNEU8Uq.2)_3V5q.\c&kk5dIBLP$fd%ubl>p5V56=bg=s*R7ZRI30%9aj)=_p]%(WcOtN%nCtbdY\Z%N40F]_.K)dQ=@+.-oh=*=faYYA^a>W<Fs^+0L@$Cja72CY\>FPB<h:=F0HP+7WK[4f%;emL14*,7pr45lXQGaJn_As,0XUt8f4[]%9c0>:Rp_2>^aqCe7"Vp\&7h932H*Hja?jto+J$b=@Hj(i+O&F3UUo_M5o=+"ADn9DAMD+Z$&i<%auLdL3K.iUc7pU^j-V0,Ae'G2%Y(D;69fDGi5p'."mC4WuB`r@,0ZA-R4roWbKgHWLJ`Rl0XT`Z^<m9[%/BopP+N><o,+itB_&-r50TL@19tLT<N"D.]\-tio\08_F%nE.BG^^QKZCm=/eA5eWrQt>jRI$gm2#ta>^V+UhC*V#0*%#6d8+l5dE"n@Vg*#%'QC`;ih+qH([K@u')"D4Bo8RTUF-'5*>3&8b/%)2RfK_JqE!\"K^T&VMUAJg8_r"'`/>O0EV7L8)0dAtuGn@$^5dE]S^"E"*eS@I#CqO`@?d(omT=Ah'a:&t!.e]UK+0*l=%>f*K51%b9J]2<On-F/<>0UD2l@?;mH4..Yh.-(f`!W(mml?F:`'M/h:Q`]KX?4#n/[L3](C1&ra)D,0!I4UJlm+J\Y)2Uf2#+%O/_?"e.2G%MpJ>=fG9/YW-/6$&>:SkaF^1-7UW1#!_bIn<Xr,6MCb^m8MC736IJY/M^e)IX?Kq!%$%crWs)oA;:H/S-or^X@OY-@At^qO@&g39%6'u8qXIMdpL;Kr89c9HF;9P859W90he)JV-jbLW.Ki>[#]-<(%&5C3%<uf4J'rH!`&D@b]rRdtbKUF=@VPpHJ"#D/?"@YK*[Wi15%l)I%:bL+luQrNc]."Ng\B)&Hni1#Em[a1*_(h;A)VK3=/n-"/FM`5&H%0p97@M"o\2LmG_#Y[%an6uHT:mD]U;^0<@>fAHU?CT'I%&#2WE*E?.0l$248iS7+W&I"Nm$_>IT<Fth8[\@irNQS%"dp5urR4sWd!Xc!Sd(+tA&/PXoFC!`+ZdC2=jOLesMuq5]-6FpG8*0#o%bNdP]NIc2B<Mq!h;Jh3t,lqU=X?%OGpp2jp/<7PNE-0)RM0?b$-J)\VGqbFBGYiYL=\8@_6;D#Eh.H>*)BrTVXH]INg<dd(@>moZ%WQ\RSll;h1L-;s^f*<08d"b=h(m+B%$-)UQW`Wq;8Il%0`8N:%I@Vi@%-2@bMBEj>\XE.eFWi=!=U>^7;n9JNE8-$P>L:1<$kp(+%kR!]Hb)Hm(AQfu!o$jaOlOXm80Lj.b%d0"J6F,8j**^cR2$RPqOt*F\K/#8UQ!"<#H4'bQY/=X@^S1KZYKlk6D]_Gn$.GpaDO;n'%=2.bcAMDYV\N4["Egju>4/2GL$tcFfWe%0_,FbRPN<l"Ta&j]++=ak2)=*MpY0)\\@_C&7LqV)9-Q"iPU*?mp.AT$6VQ3gTE'3P6%0N;Y''5NM-Am3CY,6MI!b;8!kQe1Bp7\7o+Es6'8Jd>H@2C#3=AMD+r,oG[=@"Xn+K/$t19i[Ip9NYe:dP;C*c@G"lo4Dj[`aX\'%o'2UOLK`;3*H6=kPuEh+I.%XalYPuO0,#2qD"9],'K,k-LcMTQ7:>]O(k3hch;s^OSh!+S4]`LUXKp&S5s_)4%@e=dLT/cF9q<AB%U3(9A)Lr)o+3a:<FKu]:*;8H?9SqOiNuWK59k_n+TkDo1rWch!@l8lmA;VRiN(sJ<QXQm8CkIZLO:G[B@0eP-E&[hR>gj%sLeKa[%0P$G(bY_Y/#X_o)0W($PA28_^"^n@tg-M)qnP=o(Y%\)KkhVA0`(&uALC=l)9Go02a3pM$bdH-8Gqd)tCtB$2</7sA_pH.E_hckE%j]([2"W2!I1(8@uA/O:-FqEfg^^Ockd7OLX=A1:M(fT?!N2WRB&;Ff%$o8=H$,Qtg[=^0o\2'#qkC)_A`s!;9&e)!eF<_&YYGhr*%1`q6F((u-8VJ-3B6jZ*qo?RN_VC&,J,E1=^_N5Fh0F*;&!2f%t2Md0c7[=J3?++X09*!1Tft%JDU)Oq8)!\[fbg@8F#Va,f")YQ,%56Hi^<!5\cEuthdZOA)TX:^,Zr[Yl;Q/RGtZSg<gbmZE2/1T5*!-<!U/n]bD7Q5rReRc6@^i3XLL)C?9%J5#KaAdEu*m!?jiIbsi%%[M-O1K_eB(ts"l$B@oX(5pk0"@cpq*J>$,bmM;r:)O,W1u5ldW&i*UgLaP<^`5jWI:7:MJ[mDN=q=(>'W2??VK'`i?ok1o!J[0M%).m%\CFs-K':<>eN[DPXLLI:bF#[_:0UG^m#:#C+$+?N`/XsOL1qj!fRga'9(f@W1+O%21ed=*h;hb:Y3FrIMLJnE76%jYr:)O+,%jcgq(L]ZuI@Cg%EPqtC2#V_H@L5@MbJ6ABt"IRF_6\)_;1-Cp1C:P(4Tis(d1eo"p\f_!MF6X<E"t'o^B"Er%$S[LfLB)C[r\cm\%@A'*BR(>smQXMAA%fqF^E\\'tmpqg%ksKt5ahc[r<sl`*aW\GrLC_6Q%b!Fs3qNDAf"fGV<WNF2f-0%XfJCmj$%uE;#4,8U):\Hf%bR0A&K!E]r0K)Q,k#s+(:"2`\Qt,>T&8"jZK+,X<8/Z$>Xr2ndYsr+*)XeA='\s89aJ4%mL>.k8bi$'l"CjKS"Co"UJQX&%0V(gf%1#5KS0c`u?kpWSXR"d@jJh[T[;FWALT+a1>bi9NQN,]U>`]0%_A"6/C0odTs)!<+t6fFOBG;WqKj.lb#j1#_\EFoNs34K*$S=[OC%,pZ"a$-"6G"=#7d'ng9*Do7>b]1.B,qhKuKFAGbJa(\"n0mcNE0tU)11&FXr)%N-K!J^"pJ/Ji`]UI+"n6r?9g[JX/akP`-U/VuB%%3O`rDBI)Cbs%N:BuY2W<\`-U36_^_S^WMtdl>SX0U:+G!)pZX.)J5fj"t8@Vbth0,achj7Y"X3Ad"LCBh!X;S7Vnkk4Z9XEgj8$%7KRlhV\p$-J1oO]_Al<,!mKd`,JYiTfS6<=':>hg%&S*7&RZNT)$-UTRLrp7V\p"7ljtu*#-h7R?lM#qbS-A=3S]@o36_^_lJ`,c%4?4Y%FA=Un9]IrS^_BO"Nof#BS7Vnk_eDSjfplXWR)Nc/J=1#!)kNQ3@%Nm.'pO>Y#BQ=G@%NnY@&>Si"ILQL"ILQL"ILQL>hp$/%HoD?&jGX*1jGX*1jGX*1jGX*1jGX="Ho^6@1^o$54ugdm0Mft"0Mft"0Mft"0O<0)b%[m/=3f:I'uc)'oJCmqk#hZcbd.udQtK8%%0[K;$@%N'=7&/r613jg&N6)qD`oN'];`&)LGVIGc-c)1?O^Ll.&=B4p%*%@e"CqGJ0UV%H'0V8>MNV?=/.rfO9Y?[&QpX"a1<cSd%'7_fS$:[_V6Q*m%j!>Pf.Y2RKd$oG$L0d7c`\q($:MU,-0MO>/@ll:GVAYhU=Y^C?:kkZ5A3gd#_``C'd4u+b?\[76b?u[Nf0EW1%D$=A30be'O@gFcR8IJ;D1(:.S^f6(\1R$L?15lCh8MEJD$ta_m$b$F2&Fq[Z`7Z5_'SjTQ2(6@E`!dJ7Rd:rW@4$,Ia=oI?!2_PR%W5VF>)<PsM<YU7G15-sZ!7Nn_$SZZ)>(l!>Ci%l9.)XC@#VaME%AGR)_bdEIR,]q)kMfQrEA9&_1dkpW1HfrP:0lj7bWo\C&ZTe-%Jo:Mj?oB48"@JLtJ_:N#E3@WF0Wt6Pb]"g:8HS.4aonMTgf\=SVAY&T[bFm/EnK_][\n)<ngD=O8HbEs>W1BJ-c=<A#;Ckt[@6DB%!K^`o\MGgErAE9`#r%:+Q86Z]f\Dn+`a+:sG)J&WSeILM1+*3+j(0&go)NAW#eKRp#WhMVU)Da.@!gfE%)mr)dDZUa#MT=s@,0P"%@;H`"g]e[@T&FjR$tHp-Y_PgEeYn<oh:XR-dTN2"8)_`V'ZDg975hpiK0/*-h<]cn#+I]5VPG!,@g><0YsUdVXa*C>_H'lkiPlAC%FCk[@HtQ]9Tb7J^7H"^X<0h&3.THVK=PS'in!jMIk8]#ZJ9+J?=XqXd8^Q>e*H@<8b:lmG!G5N@RmVjKG6l!'CR$s?.%cf6aJT?g%E>VGj8"9uT4q03`OWAEs%/D`q<:9cR2D'HhK8G+pRphAs\?l[>S)s]+'`KL9Bn3I59(9@,VR[,P9lgtkp)O?(J"$SXN>_fU(9_?(%CnjISiLW&\&ZX=t$k5!1VRrqIVT&&CAp`YqbbEL(!7Q%V_9d.c@1HLDl::mdKPIa10fX_F/1*rC@8%<L</Z<LMlhsL,"eV"6+Y<;%_I44g%)^.uJ?bUsdpYoh@#Dj+`CO\Tjt`f.^1\?/8\SVtOp&WM,lm2,_dF=X,f;=E)dnQ?T=&>\Xpi3EEG3NNGY_S0&W`s>a:A_n%:j%C5jOqn$(GPpbNNECNkfEjmM$O+05[urX3!A8270lA)_IPYfDpk=fFYXC"?3"Tql@T:.IEMUhEMY7Yk9e)#+;Pa7[MT9MCC,Zf%9QV^hhL^H[m\&&s(re>Q0T=one?Eng/WDK))2<^7!7Or7_2sQWWk#XB"K&N^#pA<g!&IoM_(`SpL*7?<(c$FDVa+4:lk5esl6<A=%0V.I^!&N<>l7AB-L7taZ0Xa%RBgt-YT"tf.HWYroE=WUJk:k[t!LR?N%#3Le,0XFl:I)?HOt/qpd&ffgl,Y)`@#Gp+iU.%,!LKph%_8=n,B'Hr7gg-%NN2\m$&/J`;BHWNB@Q`HIm0d,U3E(.K%>Z^n?'&L)$UNI3CG?[oXT3]8XUE"k3;WLpN%,!m@ImOIG6K[#[2I3I%fIt$:)(.P3DAiW$@c:/adui*FZm+ME"CnOi`[E!`@<`LUBT"I1`EBkWA$"NVG)7oml>;>Fib`*$W=6]>;^ra=3nd7n#FMAm%#-K8%1(70)O>W\L,7J(Z!+rN:ZWYY>%)\_eJ>oEj?oAJm"*nLj]F?pG!/sJL<\_B0/cfd1e09j.!#n=fc!\%/0>ha)hR(\E5T#[c2@l5[%)!(u'Qq[Ya!G:T/?/1c*f`WH,_cK9ob>OKgcF[oK>dcF!0U&UN#eL&>[<LB5>fj,N^EEP"?N`nh>@LhS&aXt0=u%5-gG3:Wm5LfE%>pTm(<!fC!]D_J1j"b8/CN$2P!M@;UaH:"pN"qZso.l&m;2Z6dbNA^9o?K%4S.att@3TPHT&JMaJU)Ha@DsbFA^AQa!V+%hTgVtN%0`!fl@2o6'<L2\G_ZD?i0bO:&3YVp"9%O_d=TG*qU,i$Y?sm::L#?(`N\TT=(ZlauL6^CGL<c^6]OMAH&IMG^lL`R<VNf^\VNb1j%#jr(aItfl?(!d`?cPT9n"t!./'3"-<0K>&B<QFB5Ft2kpQjs4rQN1IN7in&lOWjJ60^U)Pa*U,/8[uo:@m2%uYUQnh-upG(IN2bY%)37T'&e/T@mn=E!QhHFgI"-I]';hj7@,4%;M[a:>FWnsJbQIG@j&K*HSFjU+6oGcl!BRT"b\!J3c3e&NF/ji*@nahjW&cW#K_[%d%>4aKBI.pLTqg]i,3Y0HHcDdRi0Eq)g\61RgB=AE84QZ>Mjo`W&S1nA8@6?9h.jV@2kE2@;bFHld88]SYLK9"P3`-]+YN\eG@jcS3%oTZ!)152\-OCpRtr9<Q%@&([sj=138T7J\-n(t;]-P>dreX0,VViGK..SFn$hY4Z)Yrd6k2l=.Z^m$PXXNu-GcR5X-9ZEBk3mW&(%Z@$ra]qRMe;;<l?d.l'rUS\0k%EnI'0Q1'k1(Aq__`BX^KmCSA4_/A8muV"^^oF=2N,oEm.:t]ZHPfJ[G_GgqXqV[\hSZoO%^6+l%<.2f7\EPuP2e1C!TV3`(Q+M!%,c'&nTQWe?hUQ9t<b(":3bE]n453s-fID1sZU4l;F*61l"a7G\%G9o/^>^!Zs4B6Q]]'XTjh3?+%rR;eKN=I6g1EPMM&b=:Kml.F0)pt$2jJ,S=dmTR<id`%$hJW/@iQ<UjHf)iY@A1A1(;(b)K>>$>C"g9TV5XJWe]#=iTBa(@Fnkk;%"qm49"7l8eCT07ic-XK=@GVD7R*S`k<GR1c2$0`.^f40WncY_S/$V<J$!2&Z0^k&3]2Lsf#gYkiPQMA2ZtN/D1gkGqCOQ&Y2p>K<%;`UF'eXW-lLW)'^AN&nQENcjqL/<^MT?(uM)poW5p])&R`)X_"f(;SO]SYp(.*-aK;mD98Heog2!n2+'NZ!mcU#3s:BKX,c.Z25m%4Mp9ic+NVaVOq%%KN69C@"fogJ:*YuWf%"7W+FLX=Tr>04"Uuf`L(jQ'MGf`FM,4Q.N/G3aRuuFq!i__(FI]A@-rn#Gk8$m`IrO.%XW!AB1tO7pCiQZ)JZ/>LaSR]^#4B(jJjWqb?.Zb3=3V1ARf;u@?,jOgPI42u-%mu]!Y>+NbIg2,1%!?WUgNWpeLCV^C:p)%CZ'oU%gN)sH5JhM)U:jR-mVT7@!;QpXPQgkNq8.NF?Y>lWX6O\YZ1\QeItoh'nVRtJ\5W2[N$NX)SY4W_HdI]fk&Y1cqBjGLcDpGS@3Zi:%$=[LM-BO'(GPWT]Jjp3n^.>c17^V=&*_-&>hrW>O%3)JA!N++`%='9+`J?cZjOC<5;`Amq<G!?#S<B_!'i1_>N_F]LHF.l3^WPkY%)XZ3+G[X+%G>X4DBlBOrQ=U,47l4k.B2O)i1"cm&rN0a.Zl6`[HZ.UCqH@[$W!<<:M8:Xa*At`V-n:JrVM\.2YdpZD*/S$)YL/r4%V=7M8Lqfh1k7Ju/MUS[F#/psc4k`h;4L=-N]Sg6-^da=WCh+6J%)QOc^mTMeX8"N23p7X0g$euY`/<]%9.*`(kK<?%)ua%8'T+kF%@j3#rAn(t&'8e%;dfO[U220^Xqn`gXHN79!]eN!`B*/=oj<NA?[;*C`oW-$Ek]Dj+k)/;;[*UZNc#L)llV$2;?t<UEFro&$$lKa/%p1Va+%(tIJhF)'<^q.dQbG5Za%aU(aX;a,Agf#$3\('8M+E_0Xlm&n'R;lrS+uX2CB*SFZkXW!-rW%V/Y9VoCFq?,\HaG.q!FTJ-%Hh&a5oXnqOMejVGI7/FfNI[9=mZmADU$UIm?">WD]Y1%&),.gU`Un].0o^S$Tt\+"2VHU:D!"_W>`mbYmq@:"<<oVV\6"[qK\r-,%&Iqn1!]uIQ\%R50@Dt>7LT>\4cCZVY9*[mu3$t(mKeKZ?7!%OkHK@&GGa1QF%p8/FSG3_aNk+.U=_5B<NE;7;**CI'OepVH6&Kls%aQs#qb\iQ\"'@:c7'T*"3=\\<!>q@M^q..XJ.PK3EYN`J$f`FiS;CqqQQjI3/#QE)-T_jk;<(^1Gt>ag,@73TO:Z1t1tT8l,CSV;%nLF+/!38!F<V\DU8i:PgENo^i*c\6JD1IlmY;._[`Aq!^<fCJ&HM349rkROF/N+T2Kee^6(&;Nn[HnWj9/)cV`Oj30")PJOW\$nP%e_O,?@3QrY18:d4+K%<_KaiN7/Lt#*>l'R$]+b>L2Z72n]rih4:hRR#>*BVU"aV]em+;Gs*V!kbHUUG&cPZ1KnQl32Go]9"a9T<9%!A\&N+uJ>d'Z^8TZU5G37XEH#nKJVc.'YQ>mNQ2#bRTcm#s#V=`I#\u"kL"I7(*-_L^oP-N'+#3#Qq<ST6`CK$dC"REhnFbgq\/$%#$0P+9kH30X"KHK,Xl$cWkAUeVE_h\)6Hp:,f!_VP'Ca'4pA$KBMKU&@#89X63ZS;P9805Y:j`]@ktoP*I4^\YE1Y#c?PJ#/[b>Y%_4s0@%5R#r+`;7LCA*HGCrfX]o#V!/2]LD;>p>cP1F9l!*-'2<T(*)KGQI+VRM.t2YTpbJVEa[EYBUe9PCU(-'qPYtF1:.0q=T8t%kU.A_!7gG"`*UnX[j!2SI>;Y('bJL/OSuXH2ViMZ%:C*<QOm7ZU:K:,lI;dNcuRag2PW8Q6\$1g^15.Z7+ZHFW*[lA(tOedGdV5Q%[J8sja#W0dSR?tn+=?_A5HHYZV7R@BBlU0`3m@SpnQ;Vi!8AO5Fd:UASW_W!KNs6s>5!g:jH)<LAY3dTP^!i^V1@*LA1A]FoSQju%\cQu^q$r\V&S6G7]l]Na&Y6dh*S5\Zg6A'3fYq2!R7>jU)`t>uQAcE?$_HlnEU5FYofD!8Z@><6oRNLcH/q-m<3o@%3gNjAmdhR*%SpdoLi_DN$,\ForQf:*Xh(,DI#\&PoaphQBIWo2*Q-^9;qLjh@cP7BBY^2=RCof/DV9mZpltku$<bAcfgC(unjnsdSpWMg=/h%F9%ooA^uia'KD!N]kID!WSK*Ga\oGG4h&XCf3mp0)U54dqDLCA(;0`J=-leus<N9i5@Gq^!uJ;nca)qaHI+^lIat@os?)N.#(cqaCa=%Q7$4XCi%05qnQt?94DsR^G(0<k\U2<.^QfSA!Qd-8'cXIirS6P,$'/%/c0'g8,77F+(tJ(ea*r<k`OqUAY3f*SGa+%ZVM47lho7=%m5a<S\fk+[;\FEdq>(E`B(NWEa8)^Jf.PpO(lY3F08Y\:5@O6_FRNC7rIga/r.L@%Q_?2@nn5:92V-4F#s5G"&pnKLTC*^Oqdj8-%q:+7]c;3oWYP.5;T#5_=[=#RYF[Z)U/['dsq1P#/Qdn)\A%d9Td<_=TROdFpoF&@@X&&JE/Tlj6q0":61%,2HkFIq5C60V?HbMj_%]oR(OWSYZSL`,LN$#B.]^%3XjEu4Z2k9m42lQ(=hdd7]kcM.aK(b_i%,HinCI>:FA^T-C-P=U11muRXDhk$4KG'BliHZ@LiMj4&X%XrFG)4*7S%FKb*lmcOj6#$-cT$0jZ4$Z.B_1??J'[drN<eFFisQ[p/&8*7h^BD0m^^W75D3T_]jk4a3q5#RR&JX-.8Dt0doc/3eV%rJ9XjA:PVtYBR)0Yd"@`6AtcqNK#0b-<W1p87`;W<mLPR+i2']T:=K<noJYf_)p5O#M-&Z*D?hN=SiL1\ZG27#!ZD>b@jI*q"*2e%.+iLV#R(u3\i2/IS^XM@('M?[r&2&-a8CV$0KtJ1@)4.:_g8@Zj1M)Fq-h,B&bYZPri*i@`[C,SnH>C%J<fXe?Sk^`jk"D:=Eug`%H)8@Q>G!8`?nDn%3Y=4`+SGC6'A)n@9tdcRjk&eI"g$jql#bM7_p0?E@spe,lEJmu'@1UGTb(<jSqfgD7ur">`dD4X=R.!n=+6Xa%XMA(f'Lu@m2*Y.ii._M&NCW3.%'5Dt<@@'d1@Y3H*P?qDrj4YX\!7+M&+&e``Hf3AOO<)p\ci)E)C<'%%4,g80;Fj7=?Y)J6#X[L%Mb9-(=oaIL3P6:aCsEXeapA-N+&?N@6[0tC9hlF2Xi<0XHt`iqNOW%R)ITtn1ZZ_n?mj6<PKsKd=ef3^)gYq0jgW?e"K\L?N34Km%a,4*_O(sK(V&-3J^N's#7sZ.//3Ed6diD'V!d/LP)u7jac1Q*aeKpQuQGuAO`-E*uWP1SZ5;2sjAZW?UAVT?`?3B.IXC:NFq2%=X%Ntl#k$H>t;PLG(XN7XGg@8Lo(os@5W&&DtM#)]^TY^AE_jZ4EajKb&s<E9bL;#en[Th2??bl_cA1RG^B%kRFjA:krKC;ShPen@h#%]%j1]UCIr]FNaFb;e-MQ9)R$Y(V"!?p#T0s8A&Z2ok7,M;7%*/[&40VN7@(f)qNT/moZ_h2_:sr2qI]fS'Pque^*u*8cH$1U[:2s%^UNTi2+Yo9lsB3&MX9oDhrA$3JDkgQq9Fj3_[Y&bS])0L=3LS+PdEnMd#)8.C.gU\EoRrH0t_!d)B9q]ThfR\_MkJCm5Nm^fHZVJ%A=?f_pKZJH3TUUTQH%041d^@lqtDO(EnS'\h/+r9*cCtn)&`q;D1(g-]<G0g(g4p;ar]BH8cI2LN$-8hY%8%*o^,m:$Il_C>.X^$%Ko/u4fRMGj'F:2Y$kXm4(*U?NL_,,n'cB"O&VLd:#G[J(6cDVgN/C@t.KX6:2K*`X'EZ2?Jg1UCO1e4/Y%2/^gdD!qS2#]S,P^F)%1^*bm`-\'8L0OhY4_4K#j<fhq[?C*B>#?LQmK@`EFSO^Od[.=8O;nhr9/-O2PFr&XRe@G9+hD`VCp>-66eRqdNC"n><+j:jUdW'+%%fsb5Z5L:G>["Et+M/t@nA6*iS=Z&<F=.^/Uo2E6-03W;';@q_%'oe3A:pG8Q5NVF2+Qu"d9%VH:%:[7;*%6TPq0uK9eW]k_:.l/%F#kPlY;rGepON1rp(/jfjYWR>f-->U70I8KE9(b'6F?uGQm17Tltes/-EBo)EQ>0<q64M1i7ub"8#Y"oZ@>B%[NXth$3!tZ!T^i8%&Xk;qZ&[NAMlb_)\5D9_hpTP8m\`TQYHDCs]Vm&24tBCPpk4=u,,gt.#B^$c"ZtP91oNW8:,IiQqHMVT$AqlK><&ru#,OQ-4K^*>%1*mtk8YYq*!X?+8QBb>T]5VBDT"PMT:^OM'.*+DL/,/Qg,6_mL-mOV3S=m<2Dr8N8/=-dhWV0E]pZ($D`2.&H>)?_6YQ9L-P4,6P%]6<Yc`G;hO>%J_YSl)8qj@XcCe6&!=[$=.$(&b6YH^B0Kl>RH,#"(Z*WM@7/g.JhXprd:']deM7/FGt=&-]rq02TXWgdDcHO>&VE%7F3u$&2t7O_uVF4^2Ke_=_rO3dn$ph)qd`%lJ5!#G5;,L7G4I;,u'ulPIiQe,dZ`pbpL!S:`(/LF@lI.2MYL7:6[i<RApnh>MXPB%R[IEDo4k7N#?Z"3-$]bON9c\>(e(hqa]GS)<msj]^a2Q'C78\T'no!/@02PKX2aq?eVo$9<6JV#d*t[ZU_af*Q?7pA?$@(U1F85]%h5ZV+lp=Ln+in30=^oZ"dT]O/_qLF,`[[c?X;qGQ2L>JWOM<K;Osm):5+l:_!]KWZoa=-1_hM!.'*5F@M4oNqHcOfk"\LTg^nOn_%YD=r@rmcY)Lmf>/SfqhW8;(Pq@`G("a-e2Q`K.]Y8I?]J^-LBs3][PL./..AbojlTgkU</8WF;IS540I.%PW>cQA_CBE!j_3hfZ2%56J?oT53mOJq<b,e4uNbM,j_GP8TP^LdGq"k9]gHb)EEHKW$f%iF\Eonra$[lSf]D+@e2ij>:(imd%eTNQDq=2?QkQ!$k2'WD8U%%b*JP`FenR/8C>s#O&5L-jlp=%-&!<":&GmFS-4*N46:G^+l<\S:M0)7M(fa/-\hbM8[V<m]H1!T4<9O5.fkKt%ZnR;a^RcRPVZ>G%Z)RjErf!LPU2$;b,:JkVX5_G27Qot834b9sHdl6@c]Fh2[D75;PFq"/R@,]f$ZRtS-;-ZVcQ_FH;DKt(VWE1\0gVbWd0+&0Z):&p%n4?N&TJl<Keg6kqJGDTp$S4\P*-Mueq\&$FCQc%lpgqOZ:6Kd.f1a12k5A3ejpHhh0fC%+hp*?Ue7&r)qE("$`$lVRiY`qX#Nh+\%Z8b-A`hCdjE<>:,C(e!S?02QE-C*^61D8?-#g(V>L7Bml0JuXg&p4@@P>!<2%O*9e-A?/G4@5R-^m8'ffE7gJ;pXOje3$/lQm1M1%C"5=79m;M.>Tc/sPh\+obG"KT@LcTf"Vd5>g2fI_k%oS/J:dWWZNcTM*SAp%)'X<\-r*E-.CfiseGGR[0bc<S3i$UXrL>B0hDHf\%oU];b1iXqC1Qs=]P7e1[>1/T/*AT]Op.2>7lCTP',h\n%:d0Oidh.K&<9$!VRLu_F0Q/Ye>YBnpKgq4lMFss_4MptE-oGbd<d?n5%7>IKS>k!jGWW%k7JqjE/Z[7iCSuT"Nkb:Hq"j*BW,g.je2SctpTXKUQJ(+Lf@F9Al6n[pCcg^''K0:j!2#iXi]Ro$4-[][`[P/sq%#m^uFk@5f$4>>r=Ta"0]%gSA1WU`5uAMQE/donP(orhpdq58a'E<uiN-6V[T@EA<kaGajrio6@GfPEi)V$(e\'P[APKqNd(3WC]l%W@2$dOS;/5*0)_`AMQTsa;[Xt>m%^GH6k.$23(??'_L'T1Hs5lk7JW!`JfJV@Hggu0L'I9dWIq8Or7^a^LNAoI38q_57q#"DtdBu%Fn=Fa/\>ln-i'20FKRC7]_Je`[&C[Z9A/-U;O?^s]7B6"_N2J9O5`eWIi)'E!jg3,Im@D%4Q2'mnO#%/p&+?Z>MWanMb4VQl$Y%l%bh0bPob_)dMs<;4H'"c_onr8mP#l&bNj31/RgA\b7XpA>BOcB":4dInq,g?)b$!8b:8_IFd`7j9%@A.k3>JNRPq!,%k>>u@`O'u[%^q)-R<K`gkQtLTD$@qCRMik)WWc\!uJc`%:;,[)$eFT]Fi9A<N2=L'?[".gSgiP7.4?8U0n+>o\)e)o#Qf#"!?q[M@cG^CQ;5`<t%,#`jY"m.48d[sH,Hj'bINc`(^pB;V]a76SM>j6l6Tb&h>/+tE1,$0SiF0fReh(4/l3=NI2*O-E,UUhY#"V;Dt-sjW.gH5@[kEYlm%h?pI5Ep&bArHdF.9SR[BdQR:jDmre]a:kW2#^XU1&ZqfdK'/.(T?iW=598M66[Dubh\E!Pgf%oD@/m37>g2>a]3+hC#05u[.i*Ti%L'b;u-]'-n_A+tg38B)\r3^A`m%P_27@\/KD:@Ac??^.qpG_taV*:'PhR.^6=l4$Om/5Ng[c-.rHfKUReZcn;'UKB5Mkg]fS[_QL%#+5+jPtE[``e4MZ/>L2(:LqJ\AF4iZFCSQb)PW?Na.'WO[L33maVG(]O&rTc$pWEk1T=fPV<-P3G1Ff38[AcJrqZ1%dJW<EgiFX8%RCM6Q6(/g'B72iY^r.4<J2mLRa#`5<18\FIkkjksD%dt&B+h>JXkiKE"CjSHi:2!+RG44=`&g>E3nW!SE!5poH94O2)NRs#@>H0Z%oDEa`i/_-4I869d!B9B]#A/1($?>U?:uBQM1W:JUAt4=`4G!>CM;q.Me)p9WURMcCq13gU8bk#[V!,lUij@q`mG-dP6(Q?^;L^b;%cV5aWVe2_<Uj#XYr"O.Y0KH%NE\l$=dNJ^64?h<EGj7r5AoRh?FI4o/55W[P1sAJ"-1!C[Z>$f\lrk7[ArTf_D^/F4[tN&Ma`*d<%Mm4.VLNkl:0_#YSlf$5fR@U]ej&Mm;K]@:2%Mt\r7OIkG-d2Z+ZNH6_-MZC,S<7?rgX5W.'[)YgCcIIA,T>CmJ)$Sd6bBra=f?7@%YmVc2ouZJnf11nbb!LMcZ;@BC)\+A?!/<$,A'I7"%9(Y&>r2H(mkuq,Lh.BOk8S$*h3m4.q=^72'@<IM6>)bmB#!7Q9>d.B7Ah[G%@5;'EY[YpZKMT%;nk:+XA8MQ`db*'%PZQ(j#fZ!i.tNOs(f%O/Cf/cV$9PH\WlgR&K<E1opf)NN7M>#%R][%peg.5m%ksID_=^K.%f&X<<qlkcqfFHq?^&qlC?^ZY10Ema*U)\)Hkqe`,'bSeC#ErnCnk8*?k4dGL_3(1dTYSi/*83UN,B`U(o<!4><lU$1\X2]i<*c.Y%\%_\,HOuZ=Ld?L^+?%Ie"s(_N(*]^7j]M5i+_`(dlY^OD8<cm61P-XUGi?;!+uCHG4^^-b[E#*klfa@NoOJe5'aA(-N*!8!gh"h=%ZPD97B`>de@6r\F[6k6K%7ESQq#)JXA5Q`0q'6.p$^eCW?qb/9AhP)Wpri^e23nM7RXf3#][dY!Bf,>V=G+:%jTYg&/YS(U=2G^T%`[!?J2?AXX/#P*d+DtbZG$?i*>@:.g!G8)F(k\?<X?-!A'1;bH,D?WR&AVDDcq'M@UC/e1EA`p>jLrc?CJ8fjH^TNibf<"YfURKf%'FKf#)o-jtI9D>9h.U>unZ>frg."[Qhc`Hn!6kEF@M_,5LDp>_3j2%R%j32N2!0)EXlOL&G."uJPRe3P,4TGMV11@c]Hi0S0gImN%m],juYRs*D'u<<`.n`4u#;qUFPe<8D*5G2EglCDPZDb^DUu>u47p5\EVG*IK+r&qg`!P#9E,nrg>T+NZ95<<V;NeIDM%^^49n;ou%YAN:]BVZQgHb"5UEereijBH=ls2fUZe^?tk'"9%tgR't-AjBI#JN8r)N78i,*$'#H3G@-he7`;2@TSq9JB5q8bRSo-aF=BEQ*oCN%(Gc:MgW@7PbQ2N[hqQ,od?m[opK$AK!qUDb(ik.X[?:2=LB3c<?bjb,dE)!BpN"/g=&rB66csJ^Z@E#oR5l/l(>S@a)-uXPZ4p\'%#hkPd0>oKWEsZag0J[^V.k>prOdVu,?Qee`1C(-"^GcK5l:L?$htn*D#I*IMRs#F,SDC)f3?"s_4[h*;H7,#b)s/"R?`"stGUdu!%g=>oh5*]!nQu\blSg^(Abk02-8^,SLFl),;8WD;g!$;b43#Zl.4\&9[Yr-,Lf!oUketoX_+Ws[%1fe,IXealg/2Zl:*Qj:SbT1R%%/\^]lZ!q*OhuK(l)iFi+pl%Hj0[aepV?D67*m-'M9`K7U&(,5Nk-*p\*S`6+3O3o`F0pM#P4p`F#M9cl\W8B1_NAWP3tEsmf8T'E%@*F$$k0P8+^@I4$"@/d6!9TIV1!o7!N0i-ua]h?=!R/*-X\C*e!V9HX(t*5N3G\o$J2dh%P6m)^hZh:0qSk(0/2l)pYps3f]WWiU%'obfT=Db2kHmHKuRfU_J9#SN7!R*0i`WZ76p?ZrHL,+nOLuPSWI/d-4SSZ6['Eu^p]uKmLOCT>$eAMqD9u_1+.he9u0ocmL;.<5Z%4A*+o)f$Kk1iS[u"ZOq#OT4;giIN=FremP)iu=B,/rgRiF^h];4)-bJJVi(>W"DZF7L#`b7_GJ#4QIbE@\$l/9/o`dHGsAodr:s*%Fi@ijqf&o5rr],:M4J,)=QI?FBRAGdk7od!`m]BnE+GlS&7VWZ:02/2bGe6(M.s_p\t#`FJ5h=kF*ESY`X"*Lf3L"Pacm9%XHVV2%_REjSVqG]#@SHUB1lB;IVPU&CF7>!jg1R<H!)o^*%]-F]?`kfo!Eju1`\K++dHt0@@SH1MiSR#\EY[)I0G%^teW0Ga<]P:!:.F*@%4S%mBBe2@+Vp2p,__J`k]i-HL<F+;OM)A>G%Cpe*YJ6So]\S"SO:Sk7N3+2)[A.e!+dVA0T.2R]XO(gb22'M/?&hSp8.oD9ic[mP%<XPRAJ6m.G"KX$4ffHh6NQ$_0Ndi\b^f\@nfKtGXWZ6-$08M@[J&b(uM^@mdmaqrQZTR53`)ucG_bQ0pR<@;Z?%g98[0(0Z8D:O_%G(`s%ZX\^)7-(gEPf2e@.`b5SnTH/r"#dh3Y]+_5Pj-\*@SA@,80l]e7=9T]`c7+PZWLS%Z[dn[6W\"JcnuTmJpaQI8:i'Eq#*`U%n'.6"4\CX62.HL9(<L6LA\c<s%7$3ej08L!_BNAbn`n'0,%0dmG`#+OV#_.LVb5:3JYbBnPFbDLCRa!)TE%49b>\T8_I@@iWAJr*%8a0l0Sdt3BCjCA8jY_DH$qFH1q%%i6N&(GA\JYE4o+8]hDg'VJIR[]j/M(Pa)\=3-i<rjE.Z1nPAYb=4,@4G@g'B5j@RlFI4VK&a%eI+H%.]UZ.ap=n+Z(WPtPu!3`<b:F(TND"pb04om%s>,n(5kTc-g+eeWfCT)im?#7J+h@HMac/.m:B_m`SuV46q3-IHs%&9,K=$'%XGHk`*n_oP3Ts")Z.P<h"`bZgmoI@uDqL>8!4ZcW+I"Bc^r0n/Pfoc`7]M/3`5-:W1`9WPP]QSMKc*07#P<"!dZ!CP##c+FNlr-0%Y")Y-GO1hW*[/8<$MfDgQrG"S`!PJk8-)lPep.@4bq<A188=!u]ga%OFEp;)nG7ft*'!Lr<]F!O2$N=sr$1kJ<_gDGjRL_<[0"9K%(])#(*B.MRF>_ND^*'Hj4YZaOM9uU/n1<(6JESIiQkcSAQs@&$8&@T0U&"AsAh:kDYl;M0f71]LP[f^#P?`GonK1kkOW!sd[7;q1%JQXdk(_*bek*X9nF"E(`],g/>o,U^[$A^)hlP\EZ&'R<t@W\Hu1XrlUfTJSE%3#nSCcqq"?<C@r*K'7V#//$']SY'8lA0]T".R_/%H=0h#2c5O,64Y3R5I&qb-VWS]JA`c1K$H/6+>JVlhQXC0$T\>Sf:#J@kDSm@<QX@YTrq57*?%Fs]h78K$E]-i[UM$elr(4`%AO(%%)trQY^a;_7.i_@\)^[K:BM*+'E(\1a1E1+"Ltt0IMsNR1[YIdj(*@j1(-QtO(1;Gr(5'2,`O]"ZW7LVO=hX-Pfu=!,XCq7B*3"0j%(5'5-2$,B@m']/*k.o@HZeF=>)cF@o?k0I/+1sU5o"Z5WH,Jo%5@G%?5-TM'p/oPr,'&$ck1[`(O@.83E]M'dNjTqEnd!`\S*ua)%q[[M-nlusIh=u^ZG58pKV<cs(RH?Ko)oa_N2lqq`I4oN`Z/7L!@\NN"ZoJWpL0ZUidj!Tfs*hlNaL-t"IWN?A'08dp((g.emTU%2%=i^Gn1$.?-75^DDgpacT</3Dk=VCJrZHZ49H!j[ag"UG7pJnC""i]2J0sPL)7Tfe0Kk/T>(to="U^(KlVJUjj'e3&7FD37iVB2+)%YI<-5<[_a#MlBu*kd:l#G(mBW"1*I02UpFq>&%ct[4C=l[Md`#OH/)X@_4tHDOZp9q-:p=C$o612iN#m_IUo7kF`\+;sY*ibqtg"%1Z&>WXR8R]A%27S-Y6^Ads3F7ELff$385>b#;-Yko+W@J>TZe%M,K[sLj>PiGC=cOVUGoKJ1WJfq<DW@8EV3=cd'JI$`nE9+<@rN%H=N_</Zm(`8;F\L)IRR)A+,Z#GWq'.5a]iZr/k2)6$_=GEFc/,,iU[\"4E#aVMHrJHo2?B,r\7$Pd78;XECe/i3DPc$Q9?[G3gH%%Dk[39]`Gg#Sqt#`VP^S,an@]U9etTcLb13`ZMbRjK1jf$h&PLt*8;Jho`W95KUKUWOf*;Ld,RGrck5[gq.`GVRN<ghb)<YaS4cFp%&[*-[,Ne?on/BP^BWY&P'[hT9FIS\[mh?MH0QYBfN&KL2U2E?&-/;$_R;p`(JdKnf1R+K7UsZ,X`D]K:#6'ncI++,c70nj/6VN*W%JkQu8$EAK,Bu#J9r'.X!P0D)o*11>q*?qli@>AM-FW<7YZ"C,/U7`8K'&4pZT-$#LXQZh9Y:G@a.ED:GS,ZR6g[SBe"]'EfJ)#Fq%9Lqk7X=9%K1*4aq]CD'A>F8`ND!1<oo.2Q&@>r4Bk$m5.pW`*>rU]$&%qiP3VF`Qc;%&Re-UmtD'l;$>L)HkB'TR3%>X6u;@cU<Y%<$fZKcgZ\a]i,qZ7n]X9&GMV\SDj_Bc=.kkh1H`XfpW3SnG$"b_6APZ>LR!cOgZ;61!#^:oHe[R8pV6"hJ&Ypb?nd.lmA:>0Ua6m%;i--o2*oNgB*>A?42dR1MWg=Kf,2WNT-[,S^hV98PWM`ad:t45:MI,^Jg'6#">Ht='#@B*Ec,HU%$Fdn-LU7E2"TFjj'>godYtW/%]b\IBZfH1cK^bqTP8KXh/_uW\A>o[5LpC7NP/9OIA5/4($5H#%Hj5j.NB)9=?l2HP\hTDo:k1"K1RCI/Z@Xc"mB$O,pR7V,b#4WX%Y]SR2o!'K_O4KSW2;JK/Z&V@n0O4g?b+6\jAOPfhOj9XfS$]sT]tqS=9r];Pq"@T8bENDCW.6AYLjL_fdZd<GX9Ngk\FR0W?%IH/%NH_7aPEarEqJ%/t6RB96?O>,m,GoMiR@::N?C5Os.cg9H[ZM14.b[C)j](O^[[E2ag(%$D7bfN3N7D4%d:5TeW":"i?)eHrR,`=i%(!_(m#$6U!Y.iAYBFdtVnVGsJ9,aMZ4HmN2I>%O?*flC_6Y`)&f3)Dd(;Yl@0Hj+NR3S;3$)^^AH!hqCL/)Ga#ZDk&)PEM9B%>"%%!I%rfU,j$.(M4t*ADm0kf4%hEhM[:B9dmE<mnuNcp1QtWe&_Za'!1!P#gKNWpLiY:8uU>0EeH%^18fKSCF/;O2snMP2Do_\>\Abr%TrgtT2JD@VB3o*Th;DF^>c4-ZHGpeOn6H3acara$oa6EAOdeGg?AHUB%PK)LO."1hfF!?PNPU"B8(Y7GM#^MMQ=X;Sk7CJ3>($o_%SYjVq'dCkbG>KX:32e@'nYk5[aGRE)`fI>9MULJm!H_LhH:iJpO>jd#$<1HYms@Xq&5^p45iB2nA_%_eNJd(=\3_JV[aKJ`a0_7"%k_SQ#E'pUNS_N(R9pL([j)p)Y0q!^S3X[\q%:EV-E*`k^$aSh<MN.O[_oe'6;a_1`4&QU2DMP]("+D];.nl[/^hh3CH[QYc'U?10%>"tp&b(Wu+qU13f(j?1h(?nOgb=eC-So<S*f@[fZc4T2Ej2s/2h=k4,]kj"Ec9&t0kMR0=*PsSp_CY(sjk9E[3QR*@8nrGOGN7:W%IP0oC<d_&/C^a.Ng%Q"61E;*':``S<*)acB>nJU-#jmp++#9hZ,d3ZmY?=h67S-NqTQE+HCH%D!X?K^:1VN8L9O!+YobEkB3OnX@%a;FVCLii;))9@sQ#2<33h'k5IMeX[2[@LTggJ-Fje[^%7W+b4/.#keRARpq5.UC;aBr1Gf;5^_?hTn#T'A^@T*$iXae5.[8QCSA(%`\1Pj^.!m;;nRRVbe0?`7o7%1n6O2b?==WC@UZUdnQqTbQ^,X^Y.m\@;&b8_SOuf39Zp`.C=LZMcO;V$[q]N.Kh>5i?Ug;"NefL;%7m7=>`0iV`.0,S=U['8=F4Een8l;)kI;j$PR^obs;A@-`HahIBha?E23m/QYJ3-nHdsSUne'S]dn'.XG\ofda`*N[^]k1`6I2Fhk%o1Vg1oVXWd8r;8mm@,Q@Y'+mP*)QiZEtdLTQ.[+"0ce(k[iJKnP^WD>fXI7mURVYi0&%+B_rVh7e*u"Pm5X/*8opYpH9IgN(iq"p%%:kOjW3i.V7iZ$u42P]g3O'ggEc1H<OR[JH_6E6PhCE4fiuo<:kDX#=qKf_Z)8=5R!b5=q7Qa^h>8ij?3FN'tqY_Fmom:3<jh<$*%d"pE%BFY$2,W/qsG"_OZTX>H<iaWidIHqS`q7Dj@H&VE._Lafd]C1lLILJ]D2oZr!>@%d@rODT@H45B4NSr$Xd9ofY^a$bZ"drq@%qe^-)*?'B2A4>jiXDqIL04a@0`j\i*EZWU)qSGpFEQ`O:6=Al?4a$-3\4jnGR8L_?]2f^*jOCl@p13==LuMfRX^T7:/lEr+6t4ph%,nG)r2W[l*lR?,&8C+lqLT!)0Zs;cMJaf7.G$*]>8S_dLgF82m,e3ILQEntV_sMY@gIi@?-BMmmMnuT&AmdRRY3On;]#]&(jlap7%:VP$UgptnFOlY9n1LW+]L<%S-[hk!'LZoUq*H^2\o9hMmK@b<[@41AH-@,cP);:8,l^"LiHg+CJ+`sma,Iok9IZGUf8?WTr_*&f_%])NKX'2>/nVQ349g9+5]V9.J#_lW`+^s/%"OZNr`0!(*Y$hZ.IBJ*-&Zt+M^=RWI%>[4eepZT^cR'oL\'\e.TH"834CNh0r=i3&3%-'*1!,9W6i;78<P)I-2Z<Eaa87j76Pf!Q1gZN0;l*gH>&/#^_@PJD49Z:iPHmm+;D/8/fOb0!I.R\?hQMGA/k"&$XK3YuI%4Nc(^%9ta"Np,k_R(:;o_kRPimeDOmmcQQp\C]EBo%XGTf?0GAK\[n:\<qNG346^h<6iQlS\OI3sPK3F4If5<ljno)Nm6L4=p](6+*8geb%(]9p)qUJL6>c5m+lZ`."XWb_\_)>df^AWh*s6?4_GPm^F421a(DroMGJ$i5-:72mP*D<di5JP!?Dcn:W4to)negD;P0toPbC>Jpb%G/G^>nGUp5;pt=*Bh!&GnE]PD:)cCM:]e,(,o3\KmGqKdJ(r#1htsHUp\air7e2^aE51Q%:LV'>^(1+mLXe=/qi0koA@Bf-2tLfb%X@2EW2"GrJeia:ZhQA?%I(H,rG=,%PO8BQ*Ec(61(m08!T_j"ci(GYHZ`c]%21<-jdRNs%2E#]8CtP=mmTYaKOc2hKrrVIq4\b4N%`3`^2!m)%1R.!T>%5#l0UR8=0\*q/F_I$4rSY#KSKsUi3`!(lmTJCqK>Zh,2cA;,A!W3(f)lUT:=CnaI!?8I7iT(/[Zl%GF7Pn/b%C3./4FS/WX:-^4E9*G-SmZV!&m_em?GV>m_Ts/QkA1i8.p:KGQIq%Jsm:SneOSRVB:-B9=jpbIba1RHH\:6im.)nileEjn!]s0Rm%2R:BF`a\RP90'l\H+/&!itbLrgJpf=oQYZkp",!e5&$oR!nkG3n\2_+l-65Y0=2h4VTJSLm'!QpAk$U(a$+lf4T[`R,bKC_&kij4%5XEF"l+(-V0e+=ZTpG3$7I^i*@=qL3.(\l%flpCXf*9H=qjed147i1n16DZrYqp?>`!XUb3=tuf!qCkIchg_p2(Db7c0,@b*;4%b%M3tkKjq])=dkpW$ST=!bKbgpB#FY4c!1D[b_+-'4HW?Uhb28"8k!-RCYVNb`?1sqB/q\Md&T1bs??DudE4\^me#?.+)AEbmegouC%&`LZF5J5G!rtB1uV]C=N#Hnf'NYJtY(d?+3S9R!TphGgqLNNt5,`BNON(q;G)0!Vf"&H/)@Oep\cQ"HYql9J]rZ6Bt1NihE:g[`&%-XDf(=l"HbPn^=B@#.5TcH7V<%ql[a6q.F)QCiubJNGd8V-/<@9*ikZoUB1<![dL.m>9MuZG5W5COmqXNMkB,#sRtrE-<DQ.]l1C%+h?/Aq,$.FEP%%-1;\Y1!_!ARjL3Vc2FYB%C['9@q=ZoqqF7BHjAkE>3Lr[e[/*pejjKj]j,79,^FcMT`n8!"P8H_0LcH'*f:BVc%"u=GUj0jXunMmq9?kNsLfA/%tO[s[GI/ZCZ5"TR(XTPl=g6*#Hke:gP\qXq/Ib^lQH,e*"g]@e%a.5l?Wq9r@aTR9RT1C^T2Q`9u%3s]QoOk/o]d8GaI,c#q]0,3N3+?qrcOuW:>h[$d.B"S"RgUc+R/.+UW0DDN9-*VEKCuj/OM8a_o/]F+4ceBZ\/*i_kFqsg0>J%;M%Ode4p(r?c<m\?80M*U@d/!B@+<2o%0g;U^qeK11[dZduN7Y8OcN9R:%GNH-S?PY"L1=d2"dM(DT*4Nm&9NrG.T>n?87k`W0oFU;d%E\%-b%B"VV,"'?3i+MD4THY'XA2hlGEib&PJ9nm_)nppH4%,4e#Co1W"2J=BGhg4O)ZYn*<Q.].L".A1/33M#iiBTs]M;H6?;q5&%r1ke+ctlEX"V+nJcD#7b^9SfZ1l`FS,IJPs)YU]=Pt8(ZF$5ZM-jk%>*sa_`I("nh("+o@@5*NkbFRS]p+l!k5=f/WI_PbP.qiO@%92,f@69.P^Ll!_:P?)#1/lG0fH7^`gGVR=1h+`ME.r/7a$T%).bB(,<Ml_OoSaV)Ba\Q@tiaXS[74IE,+OL:lJa!?sH>Gs:-=`Q,%onk.7AgM-6)iH7GN@7O;>0*-!TcGou3+Qjtr9_J*[\[/F?NAB^Ok=Ho2KgB)N1li7J:_\A1VGm_HH\Ufh6<6bO3B15e7HN,#USdO%AoqM*q]6c90)o#Q;;R9sVaup_(7=nYd.&'MT2d.u^C+ORNfloUZE0js!ohkS,u41FhH*9T7a+Ioh40JKE>1DM0ZACIb1Z+o-mJpW%;^0G"?maqhT#cSDbf@3=fT.ClVr-s]W-?-<X0*0;)'=C\nupY`#CeL<>Ut$>$(nAJ%MDUJH!iG41UNq<*JaA*:/,kJ\Qf6aKkL^"%LpM5Jm;%q&<E+cdDSBr8i^t!_>Cfn3(#!'WJQ,&n5/'06>4YMm_uWX:`;f<#RDO/X77hM6d3;L.:;/]u"*o<SWheRS:fAQd-)Hr1%mND!f@Uc.oKS%cqWZs64Oj'Zn(9>ogfg@Ac$'mgf(>Jt#JUC!f9_"e1<N6]TZIG%b7b(`R\kh:YC[7"CMq0gRp`>4ooMdTtKofgu%&2hG\epS8qSBW^E,e6MS\5QbT9]1tMmo[Z3eS>LZ"9q,DDRkZ%]%U1^Vua:O8s9'?0<8!C_BiI(D18=fEW%/kiXK'!d5S1Oc,!s>%boLVY^FH*7Aa:%t*3W5UVHat=H8_l1&BgPCJ^0V$q<H9`/_Ik_a4F><!*#Cu+<T)IUh&8pMLKj3O!6Xu,aCX!qXk*sHr/MCo;a7X%/(pAK_R[M?HNaF3YW;;9mXE@sI16ER5TWEOZ6"n.7R!X<bP\u#<B%7'1Ge&#l08d0bpM#WWXko.jeB3OQ=,(Q)4G!LGUga^+g'Qe%1qW(Tc*-B0],A`?'(PYdl>"l<:3C,V(+ON?.'cL^^J46/`q?V1+F-\]cqt]@LYjR)1C5:,F79q>$g;@uf3k7@fr[Jukaba7b4DXT%)=]sms)amPOo=P7S+b%Xe8M?Dj@<Dm+-3j4IJC<E3@'P(]ghu'TgSb<gCp(S9j)A/GOKJX#eAHU9ZQnrd+hVa1k8N2)J,lhb>9Pj%0*e_E_W=4li[*G47BmkAINU`^IXHKOLOUBe&:bHgC*KuQ?@h_lGa2UYl%0fsdl"lW:UcZT`%&5.k$,!)9%_Rlc='Z`G-3AIWSaP]%hN\'`rtV4SA<\l2L<DHX3o`CBI.0j9SBc=(esRIHi<_[9;Sde?]]kSoAlX;Jd<DeE^:I5BN8Ho]UMtu4<C4jUkWQFn0iKB,5)&J+%p>K^`LU$cJj\r1Hf]DZ2dY4c%YJ/9kGj:@rq/I"-!^unH.@1Lc\kB/F?nJd([0#q7L'FfN:A!N\oV`:Oj?s!aap5=hQZg^so_i1^%>DMc,Gd%E.(:FQ.KhW&u_&pCj:/t"3\jE>e+:CfOFCF)s^/T(l]NUTtL7I8NrqQ3*+;HD;/cUDBTHV>UUn;qeoL0P,^Kor\WHsP9%6K_H;R-,"Sf5[>[(-;C#X\e\U?mm^2>u(U$LaUWYe_`*Q558$u<jCR@&-XF2O)icXUXKH&DgE^c3#J@*'+\`!<VrkrmsFRg(oVS'%It!@`V>ft?r'OS/3m_#<CTbiHV-mleH[R"Ye,Z'V9ZHs0,4T7$n9:i<O5tZ_YeDem"]t?o+JuM3X9"m#`_oe:'7d;a;'3;Ijn67r%4*pm*Fq?C!7Y-O''"M2BF9Y,nSN'2ng@'TS3CReU=4M_-8JCF4)r`mOG,J8r*XERCBT!]uJSBj!URV`O-sm%M/JV5HaBdAF1=cO(%+i32SMH?]AG&'_n(KPmr+li_%\-XGt<6/Jk6L1ke?3%A6!GME5UQDQcj>)g\*o7XTQ65fjmbAso,qr!)4+RhX2;3RKdSVH[7QW2,%nmm"jTa]=[-q6,\Bp`jmN0\<#JskpA[NM:C/5EBlKaE%4Ah<(Y%h>nA8XZk,*J.$#r'%3d_,;($WlhUn[_g%#c&rp>FsJ8X6"f*4%&/3'_Xi+mZ&QrE3Es!-a7&GYR=:jTkL5G%^l!aIX+7XKFCL,-Yb9j?#0W1&Y:H$[0Z`.%qO$ap\95e.1;%*ka)QfCa;sTTr&,L)d%?<+$d#4nj+H-L.p2)=\Uh=e-jj'gqH#=#?3"Bkc2\6(=(Q9ZR"L))V2!T8<IhA%?>OAS@Eg_-5Hd8c2gPO()"N9]\@aS3AA$GR:o%Nt]u8c,10A/@-V=__++,kOh61Qfn$%Ys,(h.Rm5m6%n[*__,W[7gk0@<TK((%-hOX5>al)(d_`4f;VHe7(>:UgTo8F(*_^[(8emm%Y+@Ym<I!FA8VAg2X73)7P/S'>QlpPkg502Q4K%lgocHWFXuHm-r+Ap#H5ZTN'?si3k,kRn`NfJr%8.ELV3/#RFXnFqO3[[?;tQ(l%hh3Rkc/RhEPbD$<?ubCLqdb#JEk>kfN9Iq?-1,m+.B^,8OLCs0RVn=k&$2Y>]BZF^?H72>AEH>1HE=9\+jRImq"DKAqXX_EH4QH&%D'FaYmhIUh`$?>0@R2I$#p4HsVIu*fYd01flWCED:-0$P:@&B,!b@C4pV_!+,<$q4gD$DlXkYh7CIo,1W&*/]R.\bGLjuMpGBG#f%/_JCYV%jK%'l&cHmLBuWjO1W%]sKsW&D.;g?>NI[+f*q[?f)Z71/m1AJ2el1ktl6gBNu5GN\Hmbm1h#qr'VHn*=jEm`=ZPs>?PQJ%6^nhe:NLEpI0ntd833*YnD,3\B$lGHX^/nS</=;B+:j:=CSA3[J>Y4ZdOo`;;%e[=.57hI(C.4/SQtM=+d_RVmRU8&Lt`8qas;:B%;pHp#Np3[/C/pHYNp]gK(77O)=0>EY\SV,9AIsX&219D+$S`jWhVd[_=3\oC=Xm^ph2#J)e0S&Z%/cUCTn($Hnic68]]h'O$VoSf%dq.7R:.^DYDXL29F*(aG&@1cZSLNo)UkLJUBf;L?"^eNkT$h<PYhQQ)'7CD+W(V&>/@n,KC`b$I/T614J^mYZ9se#YO<%blS,n1F%+?C5W;eJ(;n$;^%&+oS[C=`YJUL.=8kN.[orK<>@9g7h]_Vq2c2?nJ#+]U)):q7.!MJLn9cMq3"APMMF#/WSKB5#%g8UMXh7ONqE%D/)LbSY3C!dM7]!Be.Z$jVl-6Ui5Jhb7je_C07_V-4l`I8sakW%66k1Xr3h`641u/o>TK`6ms::EkGXe/nRNP)rW#C&eB/rF5[q+%_,@=sJfQX%J1dcQ&rUPFjeGoiTjU;5X%E\1(ht;D1]WB&%TniN!:490&Kse-&8VqHqV6Ui@e/ToB%R4$Ph9I+oLXd*0=WTu\q$>^%6ips1fdVV[+KnA<Dj_0I"i<Y['#$8@28kBT3lTPKm',`J`FYRj<C=7B(r%<#ANVYa)+8;7BZiZi7oAYDnUU[A0e<h$aNou]*@#(R%C^<GORBPj^@Ii6:nFUOumrrCeKiGpF/HO88#c/Y9A0f0:6"1I%)eUkY>0%A5o%f0JjU\/4pV(.CXO.[TW)?X,9r'C)Y8!i<o"NM"%Q'[hg$IR&Ja4-*GDni*j"2ne/.T^D5cBtjB[:m\Z_,Q*lqu-$;Ja2ag^"P%=k?pBV498Q?CJ7e>@7/(2=3'k<oq8Hij]!^&Hd,PD%rA_kal,Kf/"H</<fK1b3S1>Z5]Wp7Sl''^>UIM@,=M:'dV(QDQ"+c(tpDmo5\CSG8bAdjTVHaJK$?OCDpcs`/f8OD>g'l3+@.\P"%%XW,Em(N16CW,kigJ3Y^%R`521K6Y0[kFde;2OjpXKHF$Na8u*f%2EO\ZiTJl&bL'VLWSp=QrBQ#W3@hq6/WArkMG6"V69?[Z=KD%9-KF,2LX0NE030Y4??<On3i+r`G@QeBDlJJEHnmN8on=J1b6L('mC:Y2EZe?Ji1<CY<on8W$PKi!1Bj:Edf>&Md0_!5+A;U6IbrL%Dm,ob_2D:_4<4kZ*aPp%K-hGh!]e?7]O5u!<YGgK=h-M4Wu*Cmnh@Fr"(EKMW4bYWN(s@/Nh6SuZf,;"Vh\!UWPkErHmYU;=)V$-%';EGSbfXn;%'^Z3aqT8FgdhJ:#LGV!2T12@!$]rYH4:^qJT(c#5^*snqV<f6G&3!@k%JA_!&>9T,'IZn&&#jOP*-WjJC)!C[dT9;%@:Rib9h3Jj&=0:.iP&(8K&X\MHBd1hA:nfd[]$!)@-],W3/B;S(RX"q?u>*r"TAK8c3b$em\.U[0^qYQ[D46aPWo_HlOdoPlV#&W%b(aEt!$]27<`T_@/Vk)lobXiorJje_a;$8sH6-*DT-BI3Fs[tS&rfQY3CDlFRM68Xm"C?-\QICnh1))P!8t3:d+58P0'SCV'QO@7%7#5U!q$a'%-^0,k%g7TTqWNSBKTXr4*$lB65^]K+Kh'_ZId\j3M4FEOBtlOagH^d"odP^gX.E"hR2\FrV[`rmX%9E_"R3E]GZL)?%aqaXkf@'7o0;0T9Qoj2V+aR*R>aN1e[=^XSbBSJ`HXIl\PEh(q?0?5`;7#Xjj\)CK^$_)l+4q+<(ZVn;MT$i*R:kU<(ksU4qEp)3%MVmC"d>I+@JFoh@/n1TUWVojg$7%AYoL]7'+k,+?oMm-EJE[g>Nc9C2^;Sa`=;YMkP+F<b<?U8ZN3`nr(=nZnV"j13)Q-\/JS=.r%d=l_<ZG=>r^TZ%kg_=hOLe6q6(fOh([gT<R!YR1H,jBSAMJB`QPVH!b^tj'0[R'cn2$8Xg>)j797YgHmQ3ut@icDb4+V\s?hq>E'%^J8"r)fj(eElVLuO5BM4h?/"i`k8:l@Gk1<\YT&_K,'!g?D_A:X^0AZ>'7LAPFhua\TFGfa[W0G/mXPp'm-]%EXBWlDg5hi<DT=E%>Fu1:7b*_X$mYO\8.IJ!8u"E]gTHn'9rd1#o.EJ.\@1^EC_8p)@e"5UTLZStqC7UJFk`94<nWRDWEko2I,(][J;O2Q^B$8s?oIU9%7a8AkSiG`$V^kUm2Gig,Q$ed-.X,=@*a;=f,.;khHAO<m;<a9k!q[PE-">t&RUYFu;he'Bf?%=-\jhg.-q.DAe#:O[2iSMZr'BP?%`aC?fM;)Q#Mpu>,L';?9fA3Ze)@q*?0M*FahX*+scfdaelD*T$SKCP9p(A`ZcmhoV4c\"Hn(;rWc]^,)TGucFXob*;P2#uc;H;`2%i.%$2#AdRe7J/rsC`QpJ5WT-qFssS88]:qU<L1-:,0L-l721NEbo^>K`Zk7H2dQPV/H/&-&prJK.9bb0<GdX:FeciW%=Y"Ilkn(A%VC3aQ6bNf[^Z"ei(/JnI=cWBOLK?:CH!%"%@eD"M/uZ1<1-N]IoRi*nEb[OOF:)+;1c>^efO2X@'n&RKWlm".Ed?UpItmA,Si7@=%"@aF9@`f#q`T<95%Rf$ajR3/^)-ublUaQQ"LsAGp1A4_Am.P1N3NG-X?HRmd!T/jR[2;WSI:\HgYZ2*?/"NW&mqR_O>=9Z$i`Jt/%4liTR?fV>k=E."Z^*2m*.J^d%M#437]&LHA895jH$Z#/#<Vt%%;d!3M-8f(MRBXlc'+'7.otlZX5HU1FQt\H!np].]m6@F4e+&KC%J613VdNMNe_R+\7<>s)P5dW/*d>9L>l7F**[p:L(]S]>uYnlp9+_;9@*PC]-SNi3,?4gt_,AY@XG/n8Q&RhIT#fqRQn6FAD8Fn2e%\nKcXmTf8>3,`EU"X7\Z'"T1FL6/RK7pAdU`tL6lNNaJV&`6l]B&=UL,GJqr6\d69#BLE,N&/%A6%!.q^O`AMY;e`SLfg^9pG0+Y%)T3hr::4(OCJ'-AgpQ%?7f#?j3Jt>KGe0i[fuOT_6Rhrg]_5@aT-3\(iI(L#2.mBSL[s\bb/p_/a/TA6RDB/N$ot7$=U1o:*=+p'%lbX1>'4[V/:DKb!,P'j9:[Y<(ep.FB,c6a.,,/0_bm8La-Z[Dh:CMfg8*^D9`J*Nb32R=_m^F5"LrtEaTu[<tJgoucl[Heg1H1kI%E[W`#jR#YMFi,141"N_+0U,(X,+h,f"q+s^='F>,'L1#B'Gg56@brR!>Q@S?&"Jtr.f;cd-Ql*!;cB]rTK#`eZrlgXbF$?N6qg<s%kI)bT<"q3tYmPCi&Cr<s*sh^>HlQ(:J99K?^ok2I.<:EO_4j]IXCJ4OPZ`OMCD?H,1_f9L%*rYd7:a?%*h=kUEa;alVgQWZPWKVJ%iM%*Dg/=pE^1q>iZLq6T10M>d>Wr<kVs@inl1m0W=i\I`3E-U]3lMD--V*W><s$P_P`A=O9k.h[d>Oq"b/3)Y4-uufq"*?nYcVf)%XJS!%)q1RJ`AE!\5[RF?HsWSp'/r%@*^E1pd05F.5/*Brs8V6'kI\KHZ*;;b8p<f5;(Gk!9Gu0`cP,Wngj;`AO"ZsRV_"<]fE#,r%pqM&G5$F";._L=(![7h3o/W4$Gs>$60;djG1jSg0s0N1ser#MA?7T>_%#<ofFlhHZb$"`#ILIo-7RhjncYoH=VZtWI/H.c\^KqF7%Y8X$7QKS,9n\ok:gG0k,Dg%Z@[f;7dNq_*h9gKhcoZZJ$p2p0gbs/<5?`Y%39?O/4k?hJ^EqT:A^ce%#O"W]9`Le[`7m0nXShuU<%IYqE8ikI(q:WT^+e/B#=DA$3M:*R:A5UcL*na1m)/Q7J=WD!R?,0aJ17_db<NuA_E%b[?rTaA^n3N)$\=:q=c&3BZ$]S7YhSp!5V%N+?!8s6^[>6dSOe2d*Y/\tm-%e1,<d0m=QR;nL+94I_M8?Nsg[,1`-ug,cL"/>nRDr0eoKZ<aSWB[ItV9')2DaK(!JCs.\O:dU'H%Ur?ReW<a_gb>T7JjGae>XD+bV9fs!4*OV/75F\iS7>pCkGKi*83mD"8XK?@k=bB\N?-V(V:7%i2H<-JrQ&',p[7<rbYSNTDijsi6%CJb"mZ/g#k%@k6FABKUK_^:(Yomo<IZT`qom%fCF`7.#,(O99iViA?6DJ0.LBm6XR0YUqn>YWL.%LXC3%HsO*d![/:H6Ek(<Ej2d%UDq<F7@qgmV)O4^"-D(;3aM_7@a&ZlG)9T<o!QAQ+1NcmGuHYF1=P$@-5Xi-A&/Wo5<L"=e8:peVB@GM-,c/t:p]X"+(JU.U,mE2%hI"LDLK#i<_au"@WbG)a(:A9G\-,KGI`9\Akj"aI>_I0[PVD3^r\D%OkjDuBeai[aGB[Oi76WE_.Pf+1@@ES!Qq'TH:"J.$asHHY%inUrc<$tC0YNPka_fb'2;[hrBcj(uIOi2":@Z5Ag[e71&bFu^tQ&q'p;k_]<;h,?$#\@Pu9il?EL-AF8KnUY+8HKKT$+Z(6=!87G%MO(+N-Q;Ds+@_(\)@=j-<:'brW=Pg&j!jcr4li>a+OL^D%#L,I`+4m%OuXms6#gJu8Y3i'TY,,RD^Of.ah2Kg'HACBju].2hp+<&%C/UuZ@h(9`SV53PL7!r&&A*q2\\+jG1-Qkja7[,/Ecl;UfdqYMX9`[Trh;tT8C&gLE%dSY'U^'n,B23COiYF#0D=6C;:`toC\jGp%HY)t^SU;m.3rh7IoGnf`gr-OD1*&nUp$Yt!Kc``973FEs8L@XOd1KCK[Kt@&<1,TdNkJbR")fHO5H/1%%KW8V.#;EuO&o9#AFhKd%V9Nth*X>*=PSbaq8Ge9\3-K<dBA+eYN6r1\KC@/%IH4TI5-HCS>k_)JW3Hgm?@eSB]9ILM5Wi:QP:%5rG;Ras<]L[ZI`-AgQt8Mm%-WZ&/p0>7o<O"kMe<ut<5RZl[&tpBiX?(VE&[D2$%Msp,>m!r&1iFF:%Ci2.2;G0uD;Fl56'p-_a<[Q"fZ%IiU<>#KX[#:$GHokI%5*=G$&q_jB79a0/e0T'\HX<'(B"Z"e?=<<F@1%k!QR"rCT/1U)eWG^PBC<np<a.psg*>YQp0LkCbkT[&B?%^rY$9W#V]a140L;?I%hTF%M9LG>"!GGD&@)u<rj:/&pV;>Zb-O-]>s)&$ME[I9XW[g`-Qmon_/B1c+2L2JpR/\#27hNVL3W/M#<Dm%3/Km%3><IeA#1(%[%?\)SR!Ar3qh&mJ"2P)b:8=/RJfDE?7\L]J4gIO=jXS;K&C;^.Bk3,MJ$kqGBNEoOo_THMm\jslI8#3d"9)*^?'<*0D0Y,a`:0nub%RU2XshWc`3iWtrt'46`^(18;>EWhm)3gIAD/quAT$qmmT)_ssrNqnEOANIAk".SRSdBTB+.=N4jY7pHh+]/$FMTH8p5i0<uDJGP2%I^)BOYtNPPeMbCZ'!b@&Xc'o8@[FUR/<n&dJas?`3Z6ShfEZsaOBd>2R\cTbaV-<dYj)[*9%=-Ygb^16_<iPmirRjXkaUm7oaP'U%&0qFrEp(F^.l*$h-LeCq67\JVn8+P&KE+L;8Fkgb3!k6a(c!\QC_k![D$#]4Qrj3A[T5XQ1=7XfCoW<MT*WQK"0l!N*pnF,MOj!.%^>BT$+i@sZ`sj7ZMiO=B$[WnD6tKFs/?4Q"8!;Xm'B+gMm@kT8blfif@IW()o2Zs`fSo,KE"!EG;iI[l=!Sn2Bcn9C:>1Pl$l.GZ%O/lBW"f,Mk$*[D/7YV8/LMpAO.(1FB2']dk:V;#L4r0aQA:/bKW68@;XK0*V>Id^rb$KdR(D+/Ug%S$d]HJ?kZKX;+i\k&TL8<CW%O?e!:rtSdn%+,GUDJI2>3&f(@:@d&?q%>^j49BZMO&s4l7jjHDUZcdKG";8sJ&gir6_09C,iYHP-a"b-rdL./IN-V$5PFD1_gku9%mQm`?*f"36JJDHlOKSVnP?^"AAF*V3XBo#;d#qo\0K;/r%pqX26FU7EH\/VV];dSiMCar^#Nc%#A`O]@bQ-raVHHWDcYZFg34=WS%l-<SR_6&j9]8&g^Bi!W:VCsgI@USj-ZLQ+=rY/"21\iM])'6iC!^aLq%:ja[r(niEUuPS"cX_6!i-B8mBmO2qR7A*S!k=c2CE;XG%3A+*cT\`m6=`a;`/-M],&rDbKar?L^Hc%7!9:$*eO#cS<\SQTY;FGUKMf'V<0at:Q)'G9R'3GHHa,[%B?F4IPI=Bq6mb"3GAJ(7N%St$u=/rCYOkm*&rDof0'lOJnj?5PX[jRQcn&Zod^L63F<ADEO"HIWS/O_^nM61&?LKQ(60Z*L</0sF)H>f1b_'ikpsZH!6hUF`7o%<:GJ$Rgh5_8GX\L15nq<N0NpY3&53&,%KhkfYG*Z1AT$S+',;=6W0]%<D.O(O]$qDm._&'hE[4R):$a,Wn5(baM/Pk$s:(_5aMY!%K=$)--QV\(L<seK,%Y]<\4uUa[nX5Q.?LV`pTYldeqre;AAlO`KDV$Z#as4t!*ML:HrqJ04tdg[^cC8%-*De\7-g8ViG!XJp*"&\%r\b[jD$DRJ"`3YIm!bcef+4l4=q]u%!Q[)N\jgE[h?pkWerE^H>aKk5-]74\Vp3`tI]M&f5gsM)Bf`LR3$XNV>N@M:`.<2Fp<Ko9%ikr?ip*.m]nDgCs\8*pWnQmc'VO44&To1mu36\=OMSd264g-q&UlOKfJZr)K8/+Bij9&^`EpAE-RRufdg<6K$Oi[MhR/NC]hL?DZ%,`ZLh=OA(Dn_bO:IWnGB;uit'#F%55/<r7fG4%KkVJ;k2;W[H&&E5ECDibolg^-ePAJ0)-MV/tC+O-rb4#U<s83ZGOFbmUY-5Jgn%1P,@I*k)dPO3`qE7b.K0-,n*eSlN&AT?NE2^LLZ-*&_kGbctk6oA6[TgV'5a?[Yk-,$&#L]>5omq$$K0Q&:Bn#DT<KALJ(%5i.SY%e'^/*,kue'WJKO/p,jQAbb^QMDdRXSc"FMMaR+80j]c:hq<%/'p[R?(5C-sud.$37QqG7Gb6\7Q,0hg*>]s.[h2m$=`9?0Zhet)(%8&=rk>/n\i>at>t?WA)=g+=UkHeo5'>@gJ'k3q4%n`;_0MQBL:,_ie5o*H*%PfV#<(Kd#k6h<f?@)$JDnT4/2@S#j@m=@W2PQ&(l%R5f5rPfW63M<-g19DR<1+8><e#=#e3&"HF_\ji[!g&30C^&%+D\g.$ZM8dfS>DaT/T=5'NMW3WD<Hm$MDCL_&o59rQ.U1%SJ,d6D%0>H2.7I.0)E%G3Xn(:sTn>5=&1:YOPG[L#*[J)QP.qWn/giHXblK;eN9C;&$h)C(9;3<[ZK8@HdaF@cD*HP;P)H+iL%4nM-UFQ*5%%Hlj&Vcc?'<>bF:@$mjp(IT5Ol,nW9:<T&to8qe>O`?5ddtJnTm)L-!0fa[nlni]0?K,W:D@A`3TdLleM8,8gYL;-5Y"HCAC:eF4%lhiB7?j!'\lODP-D.>qd=BN.&$oFL=oN8DU\>WcoB6dK&fC,"<H#-F!iiS$DrSI<r05Z3/n)=tf^DED-g4(02f[\k5ZI25>pD`c0%)nF52`8YQ5[l'IY]HY&Qeh:f!g:+8sbWWUC9'!5_)p>]G,P?M*jPQ$kkSS=hQ=nMt%YEIl)?B)[+_C[E9PH?`$q=N(;@P9Y$d:uV%h'*HFKK0!@'+8=DPiV7[/ao9Ur>9-&]*K[+-e/b_?_`LJR-/E/.lK;b)+<%XXQ[`"!S18W9!q&H4HP%o8A*C2$*h(Cl6<2moP6[r%+($[$T:haUKd&\%nPqT8J)8sD^b!W+R`1^mX_q#&dR8$^87+kG%5U\.8J)1EbI30>lNJ^;4_e_YQ57BDVT(@4'UNXI&9^IT47i8u%S^OtN)&V\IJ6<g-Xt<]9gdJbN4AYhmQnmTN.5,>@e71onricB3W^0V',`1ajDPZARQ;*,UY"39;!pf9R'$Ed<g$R9bLq7n@hF<u,%KnQ:Vgb!.X!Z%KK.&^&$#FHf:99IpL0ro2bo_Z#O1b:5Kg+0tIk>e\.-cU]?J[<6X\.B1Hkh1b^:u,ooN.XFX0ZD29K,`Ze@M(s8%DrjpI9_s!"VdO-fW4e"Xl)!R*'$s6H\'hu5Uh8.]PgApA$>^^0S4)Li=[r1rbjm)`[cKK$]E:r'`/UN^%PD=P1iBr#9nZ)]KdOH"%/Bd]nUPjRgQj>]B:XN+<T.F:2C(WmEg`B*`*O;A3?m(i*iMEg7h@668K\/:Oe4J/,^oe(n8a6Q9(3RSP=@Pa'U>RGtQ7;0j9SLp)%n.N&50j-$_hQVTQjL%)n.GJ5@$0AX)Kl(3uc=ZnOn6WHf?6<(j#*28oO.KBh#8RqQY9hf&h&s_.M:m#F[H-V$hkIL%]!6)mlFk8N%nJJbga.uJ:9kh5`&@#9e#Nh<E<3bJEN6laR"D*+L3RWHS&KuT-<JetZJW'6_M,A-!PL@NXm)0':I76b[ZBg'D*dJh_C<<^>/oIqO%4ts17VqB=KWEKd6K[Q=RggN9*GS@V6&$1X^S!^mO9G&5L&C)LU>bm0M&gV[K28_GY=lWO7Qk)ac:7sm6*3Z?H@$5Sm:iYRuTElm2%=>(b`*7Db&g;;,H`+<UI(^"fs,&=8>^%$r912<=g63hZn+UZk@`uhQI4ts1#aR5'm[5^4r;,AKa/[-(:LI@`*&39DFM7UY(5tUJo%U\R`Sc\6teI_J)t<<P-IhXeV0maauBKB%*.f^DYi^+]p<4g:Z#2cR9eCafG1o1?=n[pg)"?sX",`;bC6'c`86!t*)d7`9Z[d\M3.%6Ub;aCm]3j=sjh%XjF\IVH%kMG-MH:`!)\E"WaV+(+*tT'2tnOH/-Wh5/#a2a=4=ELpR+GMtJGe7dT`=`SqIc$Tn*P4>8G8;fXt:%]T>?3$*4X6V1g@]3P_G>`+(IKPhrY[q[D]YHMg#h_ui)%r7[ltH=ETg*AbVP3@\RSbr!eN'h=\tV@6=0Y0sg4BsU^jg-r4_U%J4G%0bq]k3%tSbdoBpWn@Vk@m=s<"R*'+51m8)pK)[(X)++uT_P@oT"8E"c=0a%ZT.*jR0WD*90r=+9.l+?6U+lA$e)259%'Md'k;ME/%Fi/5G)^4]n>OfKtU-lb')'>5fh12n`W#n>rgbn('eheIXaRI&P>C0g:jEF*$%l.8Np0u.ENW_J;oOb#,DKQFJl.__d>/R?^;=Y,H%>muRtn<d%/.Pi<-gIj9Ak!C#i"#]XTdjK4S,\Y/.-+6t\+ikpQ`?W;fX-G1VEOG*=FYe>ad9@ouLfhpf("m!C'&1^*8>plfCqGW?%3D9fnLqVJr&6$Z\jNfMYCbX[!(fiH%OS5on`m+od1CY;Oe!S$JetOl6hE<T5&8;r>#AglM<91Ke8\'0m-&d@s?=D'd0G\Pn$Lc"Q%"dQmKYWZ<&3M%A@<Z)I']ViQj35aml,-Wi(SOp-KEP5kVe"M%#-\3&Y0(KVL,bUD8ekugTh^dfV,(rK=du!jNX^N/(O"Q2,@nqoc%;RXCXWEqFkc)X;l4[njV<#Rg8DIlsDS@5TjN_)K-[VS'X.9j6+$0<<@VK%Hg*I1Xu6D&7gf?R=ji53-MSpt"RrjJp[<[%fY1=R7$%h&*+_"YiNd-\t<83qDbP7qNj<E?&]9R+SE`CmfPu&,6)2\]H(TdB9Ld+1DRgqJEELcYKM6'7\fuC%#.YYGr(HL/cF;Z^c=TIL20'%necVkXY#Tg>NJb1o/]nj)L9b!mEQ6C<DK/kYH43"2etY6Fk*<K^f1h<B8t69Ah@kr`p2jU)IZrXH2]^4X`kc6cY1S(CKGh90HZUl%Uih1>2)Y&/*t(?[=FAOLXTTt+d3n)78=*lY%suTZ4Vd/QFKi$3nhO`?>Z1dq`ttmBlLqqQqtoosI)dZ3reLOQ:]K8.r7/RZMskL(%huD"eHMtb]pT8THS2P',_GBdp$OkNT<a\Pd[BP3E'j"C6e8M.X:kiL6T<KCrCr4^J'E2@YTLDPcV0In).g#Vmq6#9rI/Al9qPR,+%h4LndQrY\-:rDB_N%%m@UM#l:h?)la)rc)?pdU4!+oD3s[_I7Jq^(t$aU@o6q%i12#]/sRNW/sfIFJ.=qWbQeN'YoqJ,WYif<;;C%FLr15V2RZK5Ao+5K!(Ac(i9(&Z$E:6DHd6N6+84hL47++,Sbc;"r)gY2?s"Ojg]aC<B6e':M@s3"+H6kHi1V1#Urkb#a56MD8IFo%$N?=16NMYUH7J1cKP*AW#19Q?LpC=/=kEU%S4'DaU0L=GiG#EJ;6G![L2;](V)b;)p#piVA>du$@e'(LS3iTb!e`[N+5\i?-F"XO%m+/FK5WJ-SOmVmq`g1BEehMo9Q,K&q5$UA0a>/JI5&>j*GM-3%2^,fB1sW/PU57&f"&i@=0F&U3aI%?E7WDH:8,Y[q8k1*l_!NTb%=qX\E("g&Mp$,Z-KEns@dppNPL(T!C*j@hdC7Q4dj7g?qhEnq/B>_b+1W5\MP/n]iil;I]Qi&6&BZ\C,N5W1iLsbSkCbSX&Ckj\j%J?6aO;]i/Lk$YEN&jpaF=L!'pA+8D:$o)6aOiLRT"&l33A)7p!jF*polG<M@qRCND.mN,o&[nF0QgF+Tg>s^kYV*"!BCeSQV]JG"%2(H8V+9mF=)27#WT3*5g=e+/=f)RNeqj?c0l4bQ_FihoZnWIF%:7G"SXqFmcM,E8q/[:7E\3P\fE7ZaSm-tfo2-+2<-d<[9an4GA%S7GuLT'T@BCIkMEO*sJr.`*B?$aP\s',\hGd<d?s6!@8oWemU)Bd3C*el_Nh'gjfGnlIuOg+K.TBKA!]Km=(:f0S=8=Q#&K!cE!#%9c;XX;.r(mVX`+Pf>_gOhqON$ED[_TJP")f[H9-c\dQ,PQ@F`Q+71ehT1/)=&lP"?7nBfo"'#db^O&?Y5K^pjQtNL'B!(s,hAT]q%U]*E]+*S,"\ZI..[4GWq(b-HKi(70K4GSuPbIg#nCsA<T#AM_r@cA25j+n"6)*_N7F!.s._AaW(lK@(C1D+cDW\a?KVsE/hYacC0%#E^bcB,8ss7M>UNO]./:;dK\l%,/92W`+cB$N5-bA3>Wplu4Y`hBT]"D`i6K^*Bgdq(IN(]Aau=q,'/+<F]<<L09#\,[R05Ie@dE%psi]T:B)5"loW)Ll/f"M2^J*KFk.DD-g/VMWhjuh.Q<[:1JXRt)oQjm):Pc[IKs=Q,:CpP>OuMrA9>698hT/\6U:</EZ*d3I.:;W%mKbjQDG,CZS2Wo=>oW\2`%pQU40[^LkV'4/P!?mJDpW3s[oaab@fo+\$3NPj7?^7dcYH3n+&"g7Y"'WsA7K4<NT6XjZRWjUc]VD<%RHO')aGBZ^m=lVeNa*L<aRX.[:s9V$'*-u@Vg"43#OKYXc0PPd8uHkQk2-/!=7La]]eL'-YZAbd^M;Je5tcW?J5HT9cYKBl+g:PO%2DlgH_f2T#f!hrd"]73$$jC]PU'X7<jUnP)@U3gF>`A?U=/['d?F69LnhOi]CWc,*YGmc8#6)o+l`dW9_H<6#-.\d($Po?X<?WKl%GM7"!`39XcEjk5#QFR`a0^Uc([3mj'PB4<EQZ(B!5H^!=Xf`Y?gJpGd2oe&NKgY/dEpuj:&iGABKZUJ(M/F(ldI4r*o2jg#gOMCd%!'"KP]*Rk(#BHGQ<U!'0@pc)`]Ch20$3P)#r?4!?aBK8aA72Z#,i%T2V61:.3p;,K>Q08aBr1r92*Ql='YpXf`"1J`>LEX@J&tI&%!R\k"^h=kke*kb^_864%%]RqN/d<S^9J8e,8g*u4U"=J"#f]A5dk!`'.!c>)21;U,hZrhe^5pe<)K#>MOZSCt/0K"Zdd-Xq@S5+>%f>?5-:*jMu0rSa$R)6Q]R8S*\-4jpg!BJ9ZJ6n;oHA_]l<p%nHfNb(99*5>C5fcbk$\]O;j">S&1h\HB"u6m!<L"7!lo8h9GS5+a%%Lj4*Afhsg6]B^TY7V]W!-*+'3RVIpl$rjE4JoDcjmI"\gct_&lH,gLd6S<(\0Em+ruW)#-_CZbEeKrP>cgE&h6)s`l^X[-J&RAF%12DOo+XHc1+N&n")ae3TQCLE:&hRVm77B%!-`YAn?u["l?OPM>8V[;8Y]\b^_?a"):g;*%i[T"U_ei7eNgQ"RRU`WWU8WCR7<<R=%N]cNHNh"?`U9pMG%Jq5hY\U-I=Va'Y=BIKq&aSJg=dEA8e,IicNLC,IEETJZjM)Va_i6N*YnbFp'?u%^8IYqCXn6IgJ7e1>b4dhg%BC]*?r^7<Tlu,<a34).WNP#kU%:2^@ZQpt2+(U9H(UV8l=CbVeNR,Rgmsca(@Dt.3YjbXW5=8&SVW`,28EkT:Vlh3kJE.>&a^>[9%QCA_^7Ooc%ccH_ITIL8%kpl<+T2V'\9X48oqC!Pdn.jGOhL_n,HCBT\/Jr:p#KR?G;t>d1eXopfX1\NY,q1`1Y>@R<(ln)]UlOu"%**-'1%(n8ng<#C!Q]C,Er5l$Oc!KVWd'_Z"N<:(o"Q#sa%L^iB`qS5+E+gn]hrQ]%,"I.&WdTJ)O[$FYfY]q"NXQ"3h`a=j#hb=7%QSD#WSX4^>9+`-hjYQ`1k2eltOcMF,1l];<HcRiOeN3X`FrFU4haLGJS<cUf0N<Rs8K*U+B)Q([#-h*4SojA&s$9$e"o8&2hME,M%hf'h;Q[W<^%hF>'k(-4lL#"HkR67^S4`Ah@INT^#)oJc@l3-Z&`lc9h?'j-aQcW=8%pJLfoCKpinj;P5BE-*T]HdP[kp_Nj@+6SW%Ze5>J6MaOBri+GC\/L"qNEfmk<-O/U1"VqVYEl%mD%NUqVG]nm,L.s6().q/U.JDnAT9g`>=:2XSFJ,UC`$=if#i=m>G)ZtooDD1%*86mKlLA&cDi9>!'RcJEq1ODSJ+Z_uL+1NKj@C1Qetaigch6]<G[*rmOf&[88=g@>9,9u1&OAXA!HLOddErMnp@+;]1!=8i:l_t_%q2(0[VM&"lqN%[\"gc;[FD0<siQN0CDuER[c_3B@2.[$@'P3KBR#[We8gG_.DOZ)/&3lqn(2Xt/QV-3=T0ZC$88Bq'#7N,IEa00+%`Hm-#![(RjnkY^sJ=PMNc:.kE@kGaNOCOCaOm.a"Ni`:j%.\[4V`l\N13js#,"qWdn6C$MMaAQPFqH9NSjk+^iEE;hh'g!_90".U%qMEIY"eolh]4"i2N2bOt.d_;TK(eJ>&aTVKlEDK.T#tNClT,50U`!ckN-&^3i0D'`<P@+/mIB[uR//X0%5bu\RFrem8=epb]=h^Z%h<(7LbA=i;gMl=k[G.J_Yq^UcQR"ro4^GDY=Op62-O[h$8pH01_jm[MAk7(f-M.]c5i$elCNBCg35(jqHd_B%e)Q<;=MHAP-o&F%%?QVoYFUho3`7hXi;'6pB*,CV93$'/tNlTKCmL/3[bQiEaD;&i%Wg'-mA>>g_ge!ZCW#o2WlZG7?b_$Yk;m'%J#`55N.35.lX/OuC%A?_mO#8VuWpeqgrlH.,,C:V:>5g'<]nWb7MVPZJ;N&!ONMS21b0_,KP6:a!2G+YO.2_5ue^D!r8pfGgu2>$WqB'(.a!G1l;(UShZ%?Xl'[H6#0.hL>jD4lQk5pu@/Sr,-%ppLbb@rdCL<4oRkY<DH^0M-[$a^+i-j8FcPdPH)t?`3G^8f!-h>iI\l_'par^MAB5f0N"bN%)d[pYZie=,3r3\q6;4-!.8Psl4AiF%hV30el4]*"L*6kg.nD&6O:q[?-2<n=DBXe#F7$3@R#'mWpp]]n;$0J4BuI15QfV@ugOPTQ%*,eSS592'SL6Wecg%t30#Zc#&TA_E/..jFV.T?jfTjdjCN;cbG'hJ*m$jb<,)eGieaFKSWI^;+*n,7,17]hbs?6IgR+DoWBC+?^c%f$Y#Lk68<O.U(PErr.<fhu4)R'J6&Wd*EZ<F'u`%/pi;%?Yn':YFr?@q%Ci?!g_c.W,XoY;>Ma\\F!KI7]69QQlY]^:)\h0_uih.%7JbsL0d2F'q!!NLQ6K'5ATVrC>s]eS7W(:0Vj7B>^rhJSSZ_8:*!2TY"to2@Ab_lAT+q`#m<58DdYUTQl:dJj+WuQC+`SV&n<\ZH%?/KRLps8mdg5'L$f^4HD@SZ(fG1s,lJfeDp"m(%4iYjq3qP`rk%j<KukPF4]$<[%&p;@'&difQSiq_iVo9c-E8uBq@h`^MJQ4J#b%1<&HnLpY?oC+"KDYnVt_*C$$,G.0+G(irbs=!>J]36[$o$IN6TX^'J"d566<<VKcd-apEN;p5=eNd>J4VlE=s\J&C(ZlJOI<6]>T%_VK!!N'OWV\-(;[@1\MtTI.:tBiD)1ZiJ=UBF_/+X$iq3=83*P(Ia!(X&g6?LCn1:UbD^uF_(lc#Hn_Wp#SAs>Qd%?/#g=ShBQYq%$e$!;\6Uo-q]mn2&uETR@XAi5pgGf(_$g[S-%1QX+^QurDb)qL*uJ:r:P@nc#84erV;dH'1L=240q?O6+fCN\W3U\=m#8\fG/b1U%*<*WF=>QfVK6"s>lbZ!#IU1A*8S:-j_mjU0GRg,,HoU/+eM6EK5><b</OB2*H/hl#[aG=RJA]TUSb#J!)mX(R0-3sUiE,K^OgXlH%Btpd6l&Y#W4jNpn8<bU_O,kBNr6e7s=n.Em6\cX;)57KolrD*K#n)<343E!S5orQd<g@@_boct?X]YKVRt:S6\r(&a_B47pdN<tV%PiY>[L#rCc-+m5f?T`qHnai2s5BkAL3\2n^a?TSON1OFV`,g5k1fE;CKt>l%@EEeUa+NjHML8VumAZ9eX0/V"d;bc7i1V/ZEg^7I%PY!bKfXeF:eS5;lV$\EL;mcG[/r2l#"fj6fkD<'JqLc6t,gj67DA,W@i@F+I629mTQ(U$2X]&YOo3DqKK<PQ6+-24O'e*ri<V4eD%GY&6n=L\@6b7\KDC5HMO;I]5/b<W4_&-BPjn$f,+j</#ua!IM"_&7jhr(/]r9D#=&igAM:aC_aUMpLi3%*]+ZbRpXaVMXt#<pb=(%6),OSO#seP[P+<&)&9n.P\IX76IG`"$!k@Ms1k"goT"bBqX^5oK_phfrnp$@ae/Rp[t"C$+2@cd?iU'XIe,e<s6hW)&#!m!s8M6Z%TDXK%roW\KrboROiLg)%T721ce'Gf.ol#>29E45Qs7X%.K;'&\pRhBV07WNPq]Gh%?XDXio&i78qDZ1frb'"FVn`6bs7lP2If0eg%Zq9EVqWBO1lbE>Os8#r*>l4%Q0)i>pr0=I6R9@;b*WGEW^]!Q'J*Q>!j7WG]lh_e'dJ*\5s*X^QJ+i7?rq%kis83[_s'Pcm0E0!F%J+KlDos[0\K7EoZ^]!9Or8nfFpZ%UTq=_;tpl#1HQf!;_pOA7-roHAWroO%7roTRIptK0Uk*P!*n\>)"^B8c;&srX7+8j)brL7a*%'4RnGEW~>%AI9_PrivateDataEnd